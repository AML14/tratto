/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 07:28:32 GMT 2023
 */
package org.apache.commons.jxpath.ri.model.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.html.dom.HTMLAppletElementImpl;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLImageElementImpl;
import org.apache.html.dom.HTMLInputElementImpl;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.wml.dom.WMLTimerElementImpl;
import org.apache.wml.dom.WMLWmlElementImpl;
import org.apache.xerces.dom.AttrNSImpl;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.apache.xerces.dom.DocumentFragmentImpl;
import org.apache.xerces.dom.DocumentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.PSVIAttrNSImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.apache.xerces.dom.PSVIElementNSImpl;
import org.apache.xerces.dom.ProcessingInstructionImpl;
import org.apache.xerces.dom.TextImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.CDATASection;
import org.w3c.dom.Comment;
import org.w3c.dom.DOMException;
import org.w3c.dom.Element;
import org.w3c.dom.Entity;
import org.w3c.dom.EntityReference;
import org.w3c.dom.Node;
import org.w3c.dom.html.HTMLElement;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DOMNodePointer_ESTest extends DOMNodePointer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
        DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
        WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
        WMLWmlElementImpl wMLWmlElementImpl0 = new WMLWmlElementImpl(wMLDocumentImpl0, "http://www.w3.org/XML/1998/namespace");
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLWmlElementImpl0);
        DOMNodePointer dOMNodePointer1 = (DOMNodePointer) dOMNodePointer0.getPointerByID(jXPathContext0, "");
        dOMNodePointer1.getIndex();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Locale locale0 = Locale.UK;
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0);
        int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.isLanguage("http://www.w3.org/2000/xmlns/");
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(deferredDocumentImpl0, (Locale) null);
        boolean boolean0 = dOMNodePointer0.isCollection();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.FRENCH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
        String string0 = dOMNodePointer1.asPath();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        DocumentImpl documentImpl0 = new DocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, (Locale) null);
        QName qName0 = dOMNodePointer0.getName();
        dOMNodePointer0.createChild((JXPathContext) null, qName0, Integer.MIN_VALUE, (Object) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        NodePointer nodePointer0 = dOMNodePointer0.namespacePointer("http://www.w3.org/XML/1998/namespace");
        nodePointer0.isNode();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.FRENCH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        int int0 = dOMNodePointer0.getLength();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.hashCode();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0);
        QName qName0 = new QName("http://www.w3.org/2000/xmlns/", "http://www.w3.org/2000/xmlns/");
        PSVIAttrNSImpl pSVIAttrNSImpl0 = new PSVIAttrNSImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/", "<<unknown namespace>>", "<<unknown namespace>>");
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(dOMNodePointer0, qName0, pSVIAttrNSImpl0);
        dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, nodePointer0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.isActual();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TextImpl textImpl0 = new TextImpl();
        Locale locale0 = Locale.KOREA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.testNode((NodeTest) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.GERMAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        NodeIterator nodeIterator0 = dOMNodePointer0.namespaceIterator();
        nodeIterator0.getPosition();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLAppletElementImpl hTMLAppletElementImpl0 = new HTMLAppletElementImpl(hTMLDocumentImpl0, "xmlns");
        Locale locale0 = Locale.ITALIAN;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAppletElementImpl0, locale0, "^");
        QName qName0 = new QName("xmlns", "xmlns");
        dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("http://www.w3.org/XML/1998/namespace");
        NodeIterator nodeIterator0 = dOMNodePointer0.childIterator(processingInstructionTest0, true, dOMNodePointer0);
        nodeIterator0.getPosition();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLInputElementImpl hTMLInputElementImpl0 = new HTMLInputElementImpl(hTMLDocumentImpl0, ")&");
        QName qName0 = new QName("K7]QMt_tN+|K9:*");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ")&");
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLInputElementImpl0, (NodeTest) nodeNameTest0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
        DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(deferredDocumentImpl0, "_~3%EWzz#hPodH-w+", "c=xd");
        boolean boolean0 = DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) nodeTypeTest0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        TextImpl textImpl0 = new TextImpl();
        NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
        boolean boolean0 = DOMNodePointer.testNode((Node) textImpl0, (NodeTest) nodeNameTest0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        QName qName0 = new QName("Cannot create a relative context for a n0n-exBstent node: ");
        PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
        PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(pSVIDocumentImpl0, "Cannot create a relative context for a n0n-exBstent node: ", "Cannot create a relative context for a n0n-exBstent node: ", "<<unknown namespace>>");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        boolean boolean0 = DOMNodePointer.testNode((Node) pSVIElementNSImpl0, (NodeTest) nodeNameTest0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        QName qName0 = new QName("j_mjC<X},X[zu^@");
        PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
        PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(pSVIDocumentImpl0, "j_mjC<X},X[zu^@", "j_mjC<X},X[zu^@", (String) null);
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        boolean boolean0 = DOMNodePointer.testNode((Node) pSVIElementNSImpl0, (NodeTest) nodeNameTest0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLInputElementImpl hTMLInputElementImpl0 = new HTMLInputElementImpl(hTMLDocumentImpl0, "%");
        QName qName0 = new QName("%");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLInputElementImpl0, (NodeTest) nodeNameTest0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLInputElementImpl hTMLInputElementImpl0 = new HTMLInputElementImpl(hTMLDocumentImpl0, ":");
        QName qName0 = new QName(":");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ":");
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLInputElementImpl0, (NodeTest) nodeNameTest0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "el]{JH", "el]{JH");
        ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("el]{JH");
        boolean boolean0 = DOMNodePointer.testNode((Node) processingInstructionImpl0, (NodeTest) processingInstructionTest0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("el]{JH");
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        boolean boolean0 = DOMNodePointer.testNode((Node) cDATASection0, (NodeTest) nodeTypeTest0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        TextImpl textImpl0 = new TextImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
        boolean boolean0 = DOMNodePointer.testNode((Node) textImpl0, (NodeTest) nodeTypeTest0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
        DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl((CoreDocumentImpl) null, "xmlns", "xmlns", "xmlns");
        CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(documentTypeImpl0, true);
        Comment comment0 = coreDocumentImpl0.createComment("xmlns");
        boolean boolean0 = DOMNodePointer.testNode((Node) comment0, (NodeTest) nodeTypeTest0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLInputElementImpl hTMLInputElementImpl0 = new HTMLInputElementImpl(hTMLDocumentImpl0, "Cannot c7eate a relative context for5a non-existent node: ");
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLInputElementImpl0, (NodeTest) nodeTypeTest0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("&quot;");
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
        boolean boolean0 = DOMNodePointer.testNode((Node) cDATASection0, (NodeTest) nodeTypeTest0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
        boolean boolean0 = DOMNodePointer.testNode((Node) pSVIDocumentImpl0, (NodeTest) nodeTypeTest0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) nodeTypeTest0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\"/KJU");
        boolean boolean0 = DOMNodePointer.testNode((Node) hTMLDocumentImpl0, (NodeTest) processingInstructionTest0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/", "http://www.w3.org/2000/xmlns/");
        Locale locale0 = Locale.GERMANY;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
        QName qName0 = dOMNodePointer0.getName();
        qName0.toString();
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "http://www.w3.org/2000/xmlns/", "http://www.w3.org/2000/xmlns/");
        Locale locale0 = Locale.GERMANY;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
        QName qName0 = dOMNodePointer0.getName();
        qName0.getName();
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
        String string0 = dOMNodePointer0.getNamespaceURI("");
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.PRC;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        String string0 = dOMNodePointer0.getNamespaceURI("xml");
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        Locale locale0 = Locale.CANADA;
        TextImpl textImpl0 = new TextImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0);
        dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
        String string0 = dOMNodePointer0.getNamespaceURI("<<unknown namespace>>");
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.PRC;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.getDefaultNamespaceURI();
        String string0 = dOMNodePointer0.getNamespaceURI((String) null);
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        Locale locale0 = Locale.UK;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer((Node) null, locale0);
        String string0 = dOMNodePointer0.getDefaultNamespaceURI();
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        hTMLDocumentImpl0.getBody();
        boolean boolean0 = dOMNodePointer0.isLeaf();
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.isLeaf();
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.getNamespaceURI("http://www.w3.org/XML/1998/namespace");
        Object object0 = dOMNodePointer0.getValue();
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        TextImpl textImpl0 = new TextImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0);
        dOMNodePointer0.setValue(locale0);
    }

    @Test(timeout = 4000)
    public void test4446() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ROOT;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        dOMNodePointer0.setValue(dOMNodePointer0);
        dOMNodePointer0.isAttribute();
    }

    @Test(timeout = 4000)
    public void test4547() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("http://www.w3.org/XML/1998/namespace");
        Locale locale0 = Locale.FRENCH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
        dOMNodePointer0.setValue("");
    }

    @Test(timeout = 4000)
    public void test4648() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("?^@{HBqi");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, (Locale) null, "?^@{HBqi");
        dOMNodePointer0.setValue((Object) null);
    }

    @Test(timeout = 4000)
    public void test4749() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
        dOMNodePointer0.getDefaultNamespaceURI();
        dOMNodePointer0.setValue(hTMLDocumentImpl0);
        hTMLDocumentImpl0.getDomain();
    }

    @Test(timeout = 4000)
    public void test4850() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
        HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
        dOMNodePointer0.setValue(hTMLImageElementImpl0);
        dOMNodePointer0.isNode();
    }

    @Test(timeout = 4000)
    public void test4951() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "@v&y}^,`l+x}F", "@v&y}^,`l+x}F");
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
        dOMNodePointer0.setValue(processingInstructionImpl0);
    }

    @Test(timeout = 4000)
    public void test5052() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0);
        hTMLDocumentImpl0.getDocumentElement();
        dOMNodePointer0.setValue(hTMLDocumentImpl0);
    }

    @Test(timeout = 4000)
    public void test5153() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null, (String) null);
        dOMNodePointer0.setValue((Object) null);
        dOMNodePointer0.getLength();
    }

    @Test(timeout = 4000)
    public void test5254() throws Throwable {
        CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
        Locale locale0 = Locale.CANADA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(coreDocumentImpl0, locale0);
        dOMNodePointer0.setValue(locale0);
    }

    @Test(timeout = 4000)
    public void test5355() throws Throwable {
        CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
        Locale locale0 = Locale.CANADA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(coreDocumentImpl0, locale0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locale0);
        QName qName0 = dOMNodePointer0.getName();
        dOMNodePointer0.createChild(jXPathContext0, qName0, (-656));
    }

    @Test(timeout = 4000)
    public void test5456() throws Throwable {
        Locale locale0 = Locale.CHINA;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) dOMNodePointer0);
        QName qName0 = dOMNodePointer0.getName();
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
    }

    @Test(timeout = 4000)
    public void test5557() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Element element0 = hTMLDocumentImpl0.getDocumentElement();
        Locale locale0 = Locale.CHINA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(element0, locale0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLDocumentImpl0);
        QName qName0 = dOMNodePointer0.getName();
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        qName0.toString();
    }

    @Test(timeout = 4000)
    public void test5658() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLAppletElementImpl hTMLAppletElementImpl0 = new HTMLAppletElementImpl(hTMLDocumentImpl0, "[Jd'U?Tdjz' .]6F<W");
        Locale locale0 = Locale.forLanguageTag("[Jd'U?Tdjz' .]6F<W");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLAppletElementImpl0, locale0, "[Jd'U?Tdjz' .]6F<W");
        QName qName0 = new QName("<<unknown namespace>>", "http://www.w3.org/2000/xmlns/");
        dOMNodePointer0.createAttribute((JXPathContext) null, qName0);
    }

    @Test(timeout = 4000)
    public void test5759() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "true()", "true()", "FRAMESET");
        WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl(documentTypeImpl0);
        WMLTimerElementImpl wMLTimerElementImpl0 = new WMLTimerElementImpl(wMLDocumentImpl0, "FRAMESET");
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) wMLTimerElementImpl0);
        Locale locale0 = jXPathContext0.getLocale();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(wMLTimerElementImpl0, locale0);
        QName qName0 = new QName("M9M");
        dOMNodePointer0.createAttribute(jXPathContext0, qName0);
        NodePointer nodePointer0 = dOMNodePointer0.createAttribute(jXPathContext0, qName0);
    }

    @Test(timeout = 4000)
    public void test5860() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Element element0 = hTMLDocumentImpl0.getDocumentElement();
        Locale locale0 = Locale.CHINA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(element0, locale0);
        dOMNodePointer0.remove();
        dOMNodePointer0.getIndex();
    }

    @Test(timeout = 4000)
    public void test5961() throws Throwable {
        DocumentImpl documentImpl0 = new DocumentImpl();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, locale0);
        dOMNodePointer0.remove();
    }

    @Test(timeout = 4000)
    public void test6062() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINA;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "M'e1MqNI'<emq^R*h)");
        String string0 = dOMNodePointer0.asPath();
    }

    @Test(timeout = 4000)
    public void test6163() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0);
        String string0 = dOMNodePointer0.asPath();
    }

    @Test(timeout = 4000)
    public void test6264() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("http://www.w3.org/XML/1998/namespace");
        Locale locale0 = Locale.FRENCH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0);
        String string0 = dOMNodePointer0.asPath();
    }

    @Test(timeout = 4000)
    public void test6365() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        EntityReference entityReference0 = hTMLDocumentImpl0.createEntityReference("US");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entityReference0, locale0);
        String string0 = dOMNodePointer0.asPath();
    }

    @Test(timeout = 4000)
    public void test6466() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Entity entity0 = hTMLDocumentImpl0.createEntity("xml");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(entity0, locale0);
        String string0 = dOMNodePointer0.asPath();
    }

    @Test(timeout = 4000)
    public void test6567() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "]}%W", "]}%W");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
        String string0 = dOMNodePointer0.asPath();
    }

    @Test(timeout = 4000)
    public void test6668() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Comment comment0 = hTMLDocumentImpl0.createComment("F_B4{kFdir");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0);
        String string0 = dOMNodePointer0.asPath();
    }

    @Test(timeout = 4000)
    public void test6769() throws Throwable {
        DocumentFragmentImpl documentFragmentImpl0 = new DocumentFragmentImpl();
        Locale locale0 = Locale.GERMANY;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentFragmentImpl0, locale0);
        String string0 = dOMNodePointer0.asPath();
    }

    @Test(timeout = 4000)
    public void test6870() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        HTMLInputElementImpl hTMLInputElementImpl0 = new HTMLInputElementImpl(hTMLDocumentImpl0, "~5`1xS");
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) hTMLInputElementImpl0);
        QName qName0 = new QName("~5`1xS", "~5`1xS");
        Locale locale0 = new Locale("~5`1xS", "~5`1xS");
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
        NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, hTMLInputElementImpl0);
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer1, hTMLInputElementImpl0);
        dOMNodePointer0.createChild(jXPathContext0, qName0, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test6971() throws Throwable {
        QName qName0 = new QName("Cannot create a relative context for a non-existent node: ", "Cannot create a relative context for a non-existent node: ");
        VariablePointer variablePointer0 = new VariablePointer(qName0);
        PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
        PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(pSVIDocumentImpl0, "Cannot create a relative context for a non-existent node: ", "Cannot create a relative context for a non-existent node: ", "<<unknown namespace>>");
        NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, pSVIElementNSImpl0);
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(nodePointer0, pSVIElementNSImpl0);
        dOMNodePointer0.asPath();
    }

    @Test(timeout = 4000)
    public void test7072() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ITALY;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0, "Cannot ;reaE a reativU conte\"t for a n9n-ee8stent node: ");
        String string0 = dOMNodePointer0.asPath();
    }

    @Test(timeout = 4000)
    public void test7173() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer0);
    }

    @Test(timeout = 4000)
    public void test7274() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
        HTMLImageElementImpl hTMLImageElementImpl0 = new HTMLImageElementImpl(hTMLDocumentImpl0, "<<unknown namespace>>");
        boolean boolean0 = dOMNodePointer0.equals(hTMLImageElementImpl0);
    }

    @Test(timeout = 4000)
    public void test7375() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer1);
    }

    @Test(timeout = 4000)
    public void test7476() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.ENGLISH;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(hTMLDocumentImpl1, locale0);
        boolean boolean0 = dOMNodePointer0.equals(dOMNodePointer1);
    }

    @Test(timeout = 4000)
    public void test7577() throws Throwable {
        PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
        PSVIElementNSImpl pSVIElementNSImpl0 = new PSVIElementNSImpl(pSVIDocumentImpl0, "Cannot create a relative context for a non-existent node: ", "Cannot create a relative context for a non-existent node: ", "<<unknown namespace>>");
        String string0 = DOMNodePointer.getPrefix(pSVIElementNSImpl0);
    }

    @Test(timeout = 4000)
    public void test7678() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, (Locale) null);
        String string0 = dOMNodePointer0.getNamespaceURI();
    }

    @Test(timeout = 4000)
    public void test7779() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Comment comment0 = hTMLDocumentImpl0.createComment("+M,e}MY3.6Qn,g");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, (Locale) null);
        Object object0 = dOMNodePointer0.getValue();
    }

    @Test(timeout = 4000)
    public void test7880() throws Throwable {
        Locale locale0 = Locale.PRC;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Comment comment0 = hTMLDocumentImpl0.createComment((String) null);
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(comment0, locale0);
        Object object0 = dOMNodePointer0.getValue();
    }

    @Test(timeout = 4000)
    public void test7981() throws Throwable {
        TextImpl textImpl0 = new TextImpl();
        Locale locale0 = Locale.US;
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0);
        Object object0 = dOMNodePointer0.getValue();
    }

    @Test(timeout = 4000)
    public void test8082() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.CHINESE;
        CDATASection cDATASection0 = hTMLDocumentImpl0.createCDATASection("HTMLTableCellElementImpl");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(cDATASection0, locale0, "HTMLTableCellElementImpl");
        Object object0 = dOMNodePointer0.getValue();
    }

    @Test(timeout = 4000)
    public void test8183() throws Throwable {
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        Locale locale0 = Locale.TAIWAN;
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, (String) null, (String) null);
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
        Object object0 = dOMNodePointer0.getValue();
    }

    @Test(timeout = 4000)
    public void test8284() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        ProcessingInstructionImpl processingInstructionImpl0 = new ProcessingInstructionImpl(hTMLDocumentImpl0, "xml:lang", "xml:lang");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(processingInstructionImpl0, locale0);
        Object object0 = dOMNodePointer0.getValue();
    }

    @Test(timeout = 4000)
    public void test8385() throws Throwable {
        TextImpl textImpl0 = new TextImpl();
        Locale locale0 = Locale.US;
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) textImpl0);
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(textImpl0, locale0, "node()");
        dOMNodePointer0.getPointerByID(jXPathContext0, "node()");
    }

    @Test(timeout = 4000)
    public void test8486() throws Throwable {
        Locale locale0 = Locale.CHINA;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) dOMNodePointer0);
        NullPointer nullPointer0 = (NullPointer) dOMNodePointer0.getPointerByID(jXPathContext0, "<<unknown namespace>>");
        nullPointer0.isContainer();
    }

    @Test(timeout = 4000)
    public void test8587() throws Throwable {
        Locale locale0 = Locale.UK;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0);
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLDocumentImpl0);
        int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
    }

    @Test(timeout = 4000)
    public void test8688() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        AttrNSImpl attrNSImpl0 = new AttrNSImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(attrNSImpl0, locale0);
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
        int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer0, dOMNodePointer1);
    }

    @Test(timeout = 4000)
    public void test8789() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLDocumentImpl0, locale0);
        HTMLElement hTMLElement0 = hTMLDocumentImpl0.getBody();
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, hTMLElement0);
        int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer0);
    }

    @Test(timeout = 4000)
    public void test8890() throws Throwable {
        DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl(true, true);
        DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(deferredDocumentImpl0, "-fuH]");
        DocumentImpl documentImpl0 = new DocumentImpl(documentTypeImpl0);
        Locale locale0 = new Locale("-fuH]", "-fuH]");
        DOMNodePointer dOMNodePointer0 = new DOMNodePointer(documentImpl0, locale0, "-fuH]");
        DOMNodePointer dOMNodePointer1 = new DOMNodePointer(documentTypeImpl0, locale0, "http://www.w3.org/XML/1998/namespace");
        DOMNodePointer dOMNodePointer2 = new DOMNodePointer(deferredDocumentImpl0, locale0);
        int int0 = dOMNodePointer0.compareChildNodePointers(dOMNodePointer1, dOMNodePointer2);
    }
}
