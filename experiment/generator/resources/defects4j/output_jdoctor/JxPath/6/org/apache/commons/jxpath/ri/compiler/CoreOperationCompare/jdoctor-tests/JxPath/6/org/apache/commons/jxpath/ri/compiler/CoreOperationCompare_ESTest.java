/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:08:10 GMT 2023
 */
package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class CoreOperationCompare_ESTest extends CoreOperationCompare_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Constant constant0 = new Constant("8Nmlf.>\"5Zl");
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
        Byte byte0 = new Byte((byte) 47);
        boolean boolean0 = coreOperationNotEqual0.equal(byte0, (Object) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Expression[] expressionArray0 = new Expression[1];
        CoreFunction coreFunction0 = new CoreFunction((-2979), expressionArray0);
        expressionArray0[0] = (Expression) coreFunction0;
        CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
        CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationEqual0);
        boolean boolean0 = nameAttributeTest0.equal((EvalContext) null, expressionArray0[0], coreOperationEqual0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Constant constant0 = new Constant("oHk");
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
        QName qName0 = new QName("");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
        AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, nodeNameTest0);
        Object object0 = nameAttributeTest0.computeValue(attributeContext0);
        boolean boolean0 = coreOperationNotEqual0.equal(nameAttributeTest0, object0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        QName qName0 = new QName("My?K}U1Qxkb*%");
        VariableReference variableReference0 = new VariableReference(qName0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
        CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);
        JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);
        AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
        Locale locale0 = Locale.ITALIAN;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ancestorContext0, locale0);
        RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMultiply0);
        nameAttributeTest0.findMatch(rootContext0, (Iterator) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Constant constant0 = new Constant("8Nmlf.>\"5Zl");
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationNotEqual0);
        nameAttributeTest0.findMatch((Iterator) null, (Iterator) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        QName qName0 = new QName("cAr$_jcdh&,)y<e]", (String) null);
        Expression[] expressionArray0 = new Expression[0];
        ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
        CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, extensionFunction0);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationGreaterThanOrEqual0);
        EvalContext[] evalContextArray0 = new EvalContext[0];
        UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
        AttributeContext attributeContext0 = new AttributeContext(unionContext0, nodeNameTest0);
        PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeNameTest0, true);
        nameAttributeTest0.findMatch(precedingOrFollowingContext0, unionContext0);
        nameAttributeTest0.findMatch(unionContext0, precedingOrFollowingContext0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        QName qName0 = new QName("My?K}U1Qxkb*%", "");
        VariableReference variableReference0 = new VariableReference(qName0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
        CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);
        JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);
        AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
        Locale locale0 = Locale.ITALIAN;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ancestorContext0, locale0);
        RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMultiply0);
        InitialContext initialContext0 = (InitialContext) rootContext0.getVariableContext(qName0);
        nameAttributeTest0.equal(initialContext0, variableReference0, coreOperationMultiply0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Expression[] expressionArray0 = new Expression[8];
        CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
        expressionArray0[0] = (Expression) coreOperationAnd0;
        QName qName0 = new QName("|", "=/T/}v8");
        expressionArray0[6] = (Expression) coreOperationAnd0;
        CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, expressionArray0[0]);
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "^v}e{-709m");
        PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
        // Undeclared exception!
        nameAttributeTest0.equal(precedingOrFollowingContext0, expressionArray0[6], expressionArray0[7]);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        QName qName0 = new QName("My?K}U1Qxkb*%", "");
        VariableReference variableReference0 = new VariableReference(qName0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
        CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);
        JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);
        AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
        Locale locale0 = Locale.ITALIAN;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ancestorContext0, locale0);
        RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMultiply0);
        ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
        nameAttributeTest0.equal(rootContext0, extensionFunction0, extensionFunction0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Expression[] expressionArray0 = new Expression[1];
        CoreFunction coreFunction0 = new CoreFunction((-2979), expressionArray0);
        CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
        CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, (Expression) null);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationEqual0);
        coreOperationNotEqual0.equal((EvalContext) null, expressionArray0[0], nameAttributeTest0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Expression[] expressionArray0 = new Expression[1];
        Constant constant0 = new Constant("");
        expressionArray0[0] = (Expression) constant0;
        CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
        CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, expressionArray0[0]);
        coreOperationMod0.args = expressionArray0;
        coreOperationNotEqual0.equal((EvalContext) null, coreOperationMod0, expressionArray0[0]);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Expression[] expressionArray0 = new Expression[1];
        Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperationCompare");
        expressionArray0[0] = (Expression) constant0;
        CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, constant0);
        CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
        nameAttributeTest0.equal((EvalContext) null, coreOperationMod0, coreOperationAnd0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Double double0 = Expression.ONE;
        Constant constant0 = new Constant(double0);
        CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, constant0);
        QName qName0 = new QName("1", "!=");
        VariablePointer variablePointer0 = new VariablePointer(qName0);
        coreOperationNotEqual0.equal(variablePointer0, constant0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        QName qName0 = new QName("cAr$_jcdh&,)y<e]");
        Expression[] expressionArray0 = new Expression[0];
        ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
        CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, extensionFunction0);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationGreaterThanOrEqual0);
        EvalContext[] evalContextArray0 = new EvalContext[0];
        UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
        AttributeContext attributeContext0 = new AttributeContext(unionContext0, nodeNameTest0);
        PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeNameTest0, true);
        nameAttributeTest0.findMatch(precedingOrFollowingContext0, unionContext0);
        nameAttributeTest0.equal("Gu;<.:`V0z2).Jj", precedingOrFollowingContext0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Expression[] expressionArray0 = new Expression[3];
        CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
        CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationMultiply0);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationMultiply0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationAnd0);
        Variables variables0 = jXPathContext0.getVariables();
        QName qName0 = new QName("!=", "!=");
        VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
        nameAttributeTest0.equal(coreOperationMultiply0, variablePointer0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, (Expression) null);
        JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) nameAttributeTest0);
        RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
        nameAttributeTest0.contains(rootContext0, "7");
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
        coreOperationNotEqual0.contains((Iterator) null, "L:4|<9 ,H| ");
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        QName qName0 = new QName("cAr$_jcdh&,)y<e]", (String) null);
        Expression[] expressionArray0 = new Expression[0];
        ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
        CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
        CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, extensionFunction0);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationGreaterThanOrEqual0);
        EvalContext[] evalContextArray0 = new EvalContext[0];
        UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
        AttributeContext attributeContext0 = new AttributeContext(unionContext0, nodeNameTest0);
        PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeNameTest0, true);
        nameAttributeTest0.findMatch(precedingOrFollowingContext0, unionContext0);
        nameAttributeTest0.contains(precedingOrFollowingContext0, coreOperationGreaterThanOrEqual0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
        CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, coreOperationEqual0);
        Expression[] expressionArray0 = new Expression[2];
        Step[] stepArray0 = new Step[7];
        ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, coreOperationEqual0);
        boolean boolean0 = coreOperationEqual0.equal((Object) null, coreOperationNotEqual0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Expression[] expressionArray0 = new Expression[1];
        CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
        CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, expressionArray0[0]);
        boolean boolean0 = coreOperationNotEqual0.equal(coreOperationMod0, "");
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Expression[] expressionArray0 = new Expression[1];
        Constant constant0 = new Constant("");
        expressionArray0[0] = (Expression) constant0;
        CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
        CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, expressionArray0[0]);
        boolean boolean0 = coreOperationNotEqual0.equal((EvalContext) null, coreOperationMod0, expressionArray0[0]);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
        NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationNotEqual0);
        Integer integer0 = new Integer(1120);
        boolean boolean0 = nameAttributeTest0.equal("=", integer0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        QName qName0 = new QName("My?K}U1Qxkb*%", "");
        VariableReference variableReference0 = new VariableReference(qName0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
        JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);
        AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
        Locale locale0 = Locale.ITALIAN;
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ancestorContext0, locale0);
        boolean boolean0 = coreOperationNotEqual0.equal(jXPathContext0, nodePointer0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Expression[] expressionArray0 = new Expression[1];
        CoreFunction coreFunction0 = new CoreFunction((-2133), expressionArray0);
        expressionArray0[0] = (Expression) coreFunction0;
        CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
        Iterator iterator0 = coreOperationAnd0.iterate((EvalContext) null);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, (Expression) null);
        boolean boolean0 = coreOperationNotEqual0.contains(iterator0, (Object) null);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Expression[] expressionArray0 = new Expression[7];
        Step[] stepArray0 = new Step[7];
        QName qName0 = new QName("o|");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        Step step0 = new Step(0, nodeNameTest0, expressionArray0);
        stepArray0[2] = step0;
        CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, expressionArray0[6]);
        JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, stepArray0[2], (Pointer) null);
        EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
        boolean boolean0 = coreOperationNotEqual0.contains(evalContext0, expressionArray0[3]);
        evalContext0.getPosition();
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        Expression[] expressionArray0 = new Expression[7];
        Step[] stepArray0 = new Step[7];
        QName qName0 = new QName("o|");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
        Step step0 = new Step(0, nodeNameTest0, expressionArray0);
        stepArray0[2] = step0;
        CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, expressionArray0[6]);
        JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, stepArray0[2], (Pointer) null);
        EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
        boolean boolean0 = coreOperationNotEqual0.contains(evalContext0, expressionArray0[3]);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        Expression[] expressionArray0 = new Expression[1];
        CoreFunction coreFunction0 = new CoreFunction((-2979), expressionArray0);
        expressionArray0[0] = (Expression) coreFunction0;
        CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
        CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
        Iterator iterator0 = coreOperationAnd0.iterate((EvalContext) null);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, (Expression) null);
        boolean boolean0 = coreOperationEqual0.findMatch(iterator0, iterator0);
        boolean boolean1 = coreOperationNotEqual0.contains(iterator0, (Object) null);
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        QName qName0 = new QName("My?K}U1Qxkb*%");
        VariableReference variableReference0 = new VariableReference(qName0);
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
        CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);
        JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) null);
        NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1335);
        AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
        Locale locale0 = Locale.ITALIAN;
        BeanPointer beanPointer0 = (BeanPointer) NodePointer.newNodePointer(qName0, ancestorContext0, locale0);
        RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
        Double double0 = (Double) coreOperationMultiply0.computeValue(rootContext0);
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        Constant constant0 = new Constant("0:i)V)*E>Gj;P %iGc");
        CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
        CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationNotEqual0);
        QName qName0 = new QName("0:i)V)*E>Gj;P %iGc");
        NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "0:i)V)*E>Gj;P %iGc");
        AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
        Object object0 = coreOperationEqual0.computeValue(ancestorContext0);
        NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeNameTest0);
        coreOperationEqual0.equal(object0, namespaceContext0);
    }
}
