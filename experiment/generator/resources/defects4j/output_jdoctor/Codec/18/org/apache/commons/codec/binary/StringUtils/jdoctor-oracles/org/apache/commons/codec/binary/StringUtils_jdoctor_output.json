[
  {
    "signature": "equals(java.lang.CharSequence cs1, java.lang.CharSequence cs2)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "cs1"
      },
      {
        "type": {
          "qualifiedName": "java.lang.CharSequence",
          "name": "CharSequence",
          "isArray": false
        },
        "name": "cs2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.CharSequence",
            "name": "CharSequence",
            "isArray": false
          },
          "name": "cs1"
        },
        "comment": "cs1 is first. first CharSequence null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.CharSequence",
            "name": "CharSequence",
            "isArray": false
          },
          "name": "cs2"
        },
        "comment": "cs2 is second. second CharSequence null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the CharSequences are equal (case-sensitive), or both null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getByteBufferUtf8(java.lang.String string)",
    "name": "getByteBufferUtf8",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.nio.ByteBuffer",
      "name": "java.nio.ByteBuffer",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "the String to encode null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "encoded bytes, or null if the input string was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown if Charsets#UTF_8 is not initialized which should never happen since Thrown is required by the Java platform specification.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getBytesIso8859_1(java.lang.String string)",
    "name": "getBytesIso8859_1",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "the String to encode null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "encoded bytes, or null if the input string was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown if Charsets#ISO_8859_1 is not initialized which should never happen since Thrown is required by the Java platform specification.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getBytesUnchecked(java.lang.String string, java.lang.String charsetName)",
    "name": "getBytesUnchecked",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "charsetName"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "the String to encode null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "charsetName"
        },
        "comment": "The name of a required java.nio.charset.Charset.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "encoded bytes, or null if the input string was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalStateException",
          "name": "IllegalStateException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown when a UnsupportedEncodingException is caught which should never happen for a required charset name.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getBytesUsAscii(java.lang.String string)",
    "name": "getBytesUsAscii",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "the String to encode null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "encoded bytes, or null if the input string was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown if Charsets#US_ASCII is not initialized which should never happen since Charsets is required by the Java platform specification.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getBytesUtf16(java.lang.String string)",
    "name": "getBytesUtf16",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "the String to encode null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "encoded bytes, or null if the input string was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown if Charsets#UTF_16 is not initialized which should never happen since Thrown is required by the Java platform specification.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getBytesUtf16Be(java.lang.String string)",
    "name": "getBytesUtf16Be",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "the String to encode null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "encoded bytes, or null if the input string was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown if Charsets#UTF_16BE is not initialized which should never happen since Thrown is required by the Java platform specification.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getBytesUtf16Le(java.lang.String string)",
    "name": "getBytesUtf16Le",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "the String to encode null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "encoded bytes, or null if the input string was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown if Charsets#UTF_16LE is not initialized which should never happen since Thrown is required by the Java platform specification.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getBytesUtf8(java.lang.String string)",
    "name": "getBytesUtf8",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "the String to encode null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "encoded bytes, or null if the input string was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown if Charsets#UTF_8 is not initialized which should never happen since Thrown is required by the Java platform specification.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "newString(byte[] bytes, java.lang.String charsetName)",
    "name": "newString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "bytes"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "charsetName"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "bytes"
        },
        "comment": "The bytes to be decoded into characters null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "charsetName"
        },
        "comment": "The name of a required java.nio.charset.Charset.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new String decoded from the specified array of bytes using the given charset, or null if the input byte array was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalStateException",
          "name": "IllegalStateException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown when a UnsupportedEncodingException is caught which should never happen for a required charset name.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "newStringIso8859_1(byte[] bytes)",
    "name": "newStringIso8859_1",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "bytes"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "bytes"
        },
        "comment": "The bytes to be decoded into characters null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new String decoded from the specified array of bytes using the ISO-8859-1 charset, or null if the input byte array was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown if Charsets#ISO_8859_1 is not initialized which should never happen since Thrown is required by the Java platform specification.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "newStringUsAscii(byte[] bytes)",
    "name": "newStringUsAscii",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "bytes"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "bytes"
        },
        "comment": "The bytes to be decoded into characters.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new String decoded from the specified array of bytes using the US-ASCII charset, or null if the input byte array was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown if Charsets#US_ASCII is not initialized which should never happen since Charsets is required by the Java platform specification.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "newStringUtf16(byte[] bytes)",
    "name": "newStringUtf16",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "bytes"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "bytes"
        },
        "comment": "The bytes to be decoded into characters.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new String decoded from the specified array of bytes using the UTF-16 charset or null if the input byte array was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown if Charsets#UTF_16 is not initialized which should never happen since Thrown is required by the Java platform specification.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "newStringUtf16Be(byte[] bytes)",
    "name": "newStringUtf16Be",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "bytes"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "bytes"
        },
        "comment": "The bytes to be decoded into characters.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new String decoded from the specified array of bytes using the UTF-16BE charset, or null if the input byte array was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown if Charsets#UTF_16BE is not initialized which should never happen since Thrown is required by the Java platform specification.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "newStringUtf16Le(byte[] bytes)",
    "name": "newStringUtf16Le",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "bytes"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "bytes"
        },
        "comment": "The bytes to be decoded into characters.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new String decoded from the specified array of bytes using the UTF-16LE charset, or null if the input byte array was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown if Charsets#UTF_16LE is not initialized which should never happen since Thrown is required by the Java platform specification.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "newStringUtf8(byte[] bytes)",
    "name": "newStringUtf8",
    "containingClass": {
      "qualifiedName": "org.apache.commons.codec.binary.StringUtils",
      "name": "StringUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.codec.binary.StringUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "bytes"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "bytes"
        },
        "comment": "The bytes to be decoded into characters.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new String decoded from the specified array of bytes using the UTF-8 charset, or null if the input byte array was null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "Thrown if Charsets#UTF_8 is not initialized which should never happen since Thrown is required by the Java platform specification.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  }
]