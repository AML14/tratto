/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 01:48:09 GMT 2023
 */
package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.GridLayout;
import java.awt.Panel;
import java.time.Instant;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Week week0 = new Week((-1), (-1));
        RegularTimePeriod regularTimePeriod0 = week0.previous();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.add(regularTimePeriod0, (double) (-9999), true);
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 1);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Minute minute0 = new Minute();
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries(day0, "?*hGzK", "?*hGzK");
        timeSeries0.hashCode();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        Minute minute0 = new Minute();
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries(day0, "?*hGzK", "?*hGzK");
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        Minute minute0 = new Minute();
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries(day0, "?*hGzK", "?*hGzK");
        timeSeries0.hashCode();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test0014() throws Throwable {
        Minute minute0 = new Minute();
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries(day0, "?*hGzK", "?*hGzK");
        timeSeries0.hashCode();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test0015() throws Throwable {
        Minute minute0 = new Minute();
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries(day0, "?*hGzK", "?*hGzK");
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test0016() throws Throwable {
        Minute minute0 = new Minute();
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries(day0, "?*hGzK", "?*hGzK");
        timeSeries0.hashCode();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test0027() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("", "Null 'end' argument.", "Uba");
        Year year0 = new Year((-3032));
        RegularTimePeriod regularTimePeriod0 = year0.previous();
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
        timeSeries1.getMinY();
    }

    @Test(timeout = 4000)
    public void test0028() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("", "Null 'end' argument.", "Uba");
        Year year0 = new Year((-3032));
        RegularTimePeriod regularTimePeriod0 = year0.previous();
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
        timeSeries1.getMaxY();
    }

    @Test(timeout = 4000)
    public void test0029() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("", "Null 'end' argument.", "Uba");
        Year year0 = new Year((-3032));
        RegularTimePeriod regularTimePeriod0 = year0.previous();
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test00210() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("", "Null 'end' argument.", "Uba");
        Year year0 = new Year((-3032));
        RegularTimePeriod regularTimePeriod0 = year0.previous();
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test00211() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("", "Null 'end' argument.", "Uba");
        Year year0 = new Year((-3032));
        RegularTimePeriod regularTimePeriod0 = year0.previous();
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test00212() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("", "Null 'end' argument.", "Uba");
        Year year0 = new Year((-3032));
        RegularTimePeriod regularTimePeriod0 = year0.previous();
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) year0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test00313() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.add((RegularTimePeriod) week0, (-481.5), false);
        timeSeries0.createCopy(0, 23);
    }

    @Test(timeout = 4000)
    public void test00414() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
        timeSeries0.setMaximumItemAge(1);
        RegularTimePeriod regularTimePeriod0 = week0.next();
        timeSeries0.add(regularTimePeriod0, (Number) 1, true);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test00515() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
        timeSeries0.delete(0, 0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test00616() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        Year year0 = new Year();
        timeSeries0.getValue((RegularTimePeriod) year0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test00717() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        Year year0 = new Year();
        timeSeries0.add((RegularTimePeriod) hour0, (Number) year0.MINIMUM_YEAR, false);
        timeSeries0.getValue((RegularTimePeriod) year0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test00818() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        timeSeries0.getValue(0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test00919() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries(minute0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
        timeSeries0.add(timeSeriesDataItem0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test01020() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        timeSeries0.getTimePeriod(0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test01121() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
        timeSeries0.getRawDataItem(0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test01222() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01223() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test01224() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
        String string0 = timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01225() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01226() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01227() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test01328() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
        timeSeries0.add(timeSeriesDataItem0, true);
        timeSeries0.getNextTimePeriod();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test01429() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
        double double0 = timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test01530() throws Throwable {
        Month month0 = new Month();
        Year year0 = month0.getYear();
        TimeSeries timeSeries0 = new TimeSeries(month0);
        timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
        double double0 = timeSeries0.getMaxY();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test01531() throws Throwable {
        Month month0 = new Month();
        Year year0 = month0.getYear();
        TimeSeries timeSeries0 = new TimeSeries(month0);
        timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
        double double0 = timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test01632() throws Throwable {
        MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
        Year year0 = new Year(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
        double double0 = timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test01733() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        timeSeries0.getItemCount();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test01834() throws Throwable {
        Month month0 = new Month();
        Year year0 = month0.getYear();
        TimeSeries timeSeries0 = new TimeSeries(month0);
        timeSeries0.add((RegularTimePeriod) year0, (Number) 9999);
        timeSeries0.getIndex(year0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test01935() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "", "ivRI\"ZU=bKWicOn");
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01936() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "", "ivRI\"ZU=bKWicOn");
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01937() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "", "ivRI\"ZU=bKWicOn");
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test01938() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "", "ivRI\"ZU=bKWicOn");
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test01939() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "", "ivRI\"ZU=bKWicOn");
        String string0 = timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01940() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "", "ivRI\"ZU=bKWicOn");
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test02041() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
        timeSeries0.getDataItem(0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test02142() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test02143() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
        timeSeries1.getMaxY();
    }

    @Test(timeout = 4000)
    public void test02144() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test02145() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test02146() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
        timeSeries1.getMinY();
    }

    @Test(timeout = 4000)
    public void test02147() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test02248() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test02249() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        timeSeries0.setMaximumItemAge(0L);
        timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test02350() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test02351() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
    }

    @Test(timeout = 4000)
    public void test02352() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
        timeSeries1.getMinY();
    }

    @Test(timeout = 4000)
    public void test02353() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test02354() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test02355() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
        timeSeries1.getMaxY();
    }

    @Test(timeout = 4000)
    public void test02356() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, Integer.MAX_VALUE);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test02458() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        timeSeries0.setMaximumItemAge(0L);
        timeSeries0.createCopy(1, Integer.MAX_VALUE);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test02559() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
        timeSeriesDataItem0.setSelected(true);
        timeSeries0.add(timeSeriesDataItem0, true);
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test02660() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
        timeSeriesDataItem0.setSelected(true);
        timeSeries0.add(timeSeriesDataItem0, true);
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) 0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test02761() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.add((RegularTimePeriod) week0, (-481.5), false);
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test02862() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test02963() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.update((RegularTimePeriod) null, (Number) 1);
    }

    @Test(timeout = 4000)
    public void test03064() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "9FKCi1a5{:mf)", "9FKCi1a5{:mf)");
        timeSeries0.update(0, (Number) 0);
    }

    @Test(timeout = 4000)
    public void test03165() throws Throwable {
        Integer integer0 = JLayeredPane.PALETTE_LAYER;
        TimeSeries timeSeries0 = new TimeSeries("");
        timeSeries0.update((-1805), (Number) integer0);
    }

    @Test(timeout = 4000)
    public void test03266() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        timeSeries0.removeAgedItems(9223372036854775807L, true);
    }

    @Test(timeout = 4000)
    public void test03367() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("");
        timeSeries0.getValue((RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test03468() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("s", "s", "the time period ");
        Vector<Millisecond> vector0 = new Vector<Millisecond>();
        timeSeries0.data = (List) vector0;
        timeSeries0.getValue(999);
    }

    @Test(timeout = 4000)
    public void test03569() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "You are trying to add data where the time period class ", (String) null);
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
    }

    @Test(timeout = 4000)
    public void test03670() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.getTimePeriod(999);
    }

    @Test(timeout = 4000)
    public void test03771() throws Throwable {
        Month month0 = new Month();
        TimeSeries timeSeries0 = new TimeSeries(month0, "K'$", (String) null);
        timeSeries0.getRawDataItem(Integer.MAX_VALUE);
    }

    @Test(timeout = 4000)
    public void test03872() throws Throwable {
        Week week0 = new Week((-2922), (-2922));
        TimeSeries timeSeries0 = new TimeSeries(week0, "o)t8;k }'%+/", "o)t8;k }'%+/");
        timeSeries0.getRawDataItem((-2922));
    }

    @Test(timeout = 4000)
    public void test03973() throws Throwable {
        Year year0 = new Year(913);
        TimeSeries timeSeries0 = new TimeSeries(year0, "Ed>~nh~Y", "Ed>~nh~Y");
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        timeSeries0.data = (List) linkedList0;
        timeSeries0.getNextTimePeriod();
    }

    @Test(timeout = 4000)
    public void test04074() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("");
        timeSeries0.getDataItem((RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test04175() throws Throwable {
        MockDate mockDate0 = new MockDate(1235, 400, 1235);
        OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
        TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, "JG#sgA$$!");
        timeSeries0.getDataItem((-2348));
    }

    @Test(timeout = 4000)
    public void test04276() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2.147483648E9), 0.0);
        TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
        timeSeries0.delete((RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test04377() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        timeSeries0.delete(4, 29, true);
    }

    @Test(timeout = 4000)
    public void test04478() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.delete((-5480), (-1174));
    }

    @Test(timeout = 4000)
    public void test04579() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
        Week week0 = new Week();
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
    }

    @Test(timeout = 4000)
    public void test04680() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "gj2w[S", "");
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 1900);
    }

    @Test(timeout = 4000)
    public void test04781() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Month month0 = new Month(date0);
        TimeSeries timeSeries0 = new TimeSeries(month0, "", "1");
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 1409.9202);
    }

    @Test(timeout = 4000)
    public void test04882() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.addAndOrUpdate((TimeSeries) null);
    }

    @Test(timeout = 4000)
    public void test04983() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Hour hour0 = new Hour(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(hour0, "", "");
        timeSeries0.add((TimeSeriesDataItem) null);
    }

    @Test(timeout = 4000)
    public void test05084() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
        timeSeries0.add(timeSeriesDataItem0, false);
        timeSeries0.add((RegularTimePeriod) hour0, (Number) hour0.FIRST_HOUR_IN_DAY, false);
    }

    @Test(timeout = 4000)
    public void test05185() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.add((RegularTimePeriod) null, (Number) 1, true);
    }

    @Test(timeout = 4000)
    public void test05286() throws Throwable {
        Month month0 = new Month();
        TimeSeries timeSeries0 = new TimeSeries(month0);
        timeSeries0.add((RegularTimePeriod) month0, 0.0);
        timeSeries0.add((RegularTimePeriod) month0, 0.0);
    }

    @Test(timeout = 4000)
    public void test05387() throws Throwable {
        TimeSeries timeSeries0 = null;
        timeSeries0 = new TimeSeries((Comparable) null, (String) null, "TL`zt");
    }

    @Test(timeout = 4000)
    public void test05488() throws Throwable {
        TimeSeries timeSeries0 = null;
        timeSeries0 = new TimeSeries((Comparable) null);
    }

    @Test(timeout = 4000)
    public void test05589() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2922);
        Day day0 = new Day(spreadsheetDate0);
        TimeSeries timeSeries0 = new TimeSeries(day0, "You are trying to add data where the time period class ", "You are trying to add data where the time period class ");
        timeSeries0.add((RegularTimePeriod) day0, (double) 3, true);
        timeSeries0.delete(0, 0, true);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test05690() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(454L);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.delete((-1945), 0, true);
    }

    @Test(timeout = 4000)
    public void test05791() throws Throwable {
        MockDate mockDate0 = new MockDate(0L);
        Week week0 = new Week(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(week0, "3jR9", "XQ nmA/VK");
        timeSeries0.delete(1, 0, false);
    }

    @Test(timeout = 4000)
    public void test05892() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
        RegularTimePeriod regularTimePeriod0 = week0.next();
        timeSeries0.add(regularTimePeriod0, (Number) 1, true);
        timeSeries0.removeAgedItems(true);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test05993() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.removeAgedItems(false);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test05994() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.removeAgedItems(false);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test05995() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.removeAgedItems(false);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test05996() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.removeAgedItems(false);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test05997() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.removeAgedItems(false);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test05998() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.removeAgedItems(false);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test06099() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (-2461.880016307358));
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test061100() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        timeSeries0.update(0, (Number) 0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test062101() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
        timeSeries0.add(timeSeriesDataItem0, true);
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test063102() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) 23);
        timeSeries0.add(timeSeriesDataItem0, true);
    }

    @Test(timeout = 4000)
    public void test064103() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test064104() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test064105() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test064106() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test064107() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test064108() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-914L));
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test065109() throws Throwable {
        MockDate mockDate0 = new MockDate(0L);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.getDataItem(999);
    }

    @Test(timeout = 4000)
    public void test066110() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries(minute0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
        timeSeries0.add(timeSeriesDataItem0);
        timeSeries0.add(timeSeriesDataItem0);
    }

    @Test(timeout = 4000)
    public void test067111() throws Throwable {
        MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
        Year year0 = new Year(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getItemCount();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test067112() throws Throwable {
        MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
        Year year0 = new Year(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getItemCount();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test067113() throws Throwable {
        MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
        Year year0 = new Year(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getItemCount();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test067114() throws Throwable {
        MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
        Year year0 = new Year(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getItemCount();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test067115() throws Throwable {
        MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
        Year year0 = new Year(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getItemCount();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test067116() throws Throwable {
        MockDate mockDate0 = new MockDate((-1864), (-1864), (-1864), 1624, 1438);
        Year year0 = new Year(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getItemCount();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test068117() throws Throwable {
        Month month0 = new Month();
        TimeSeries timeSeries0 = new TimeSeries(month0, "K'$", (String) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test068118() throws Throwable {
        Month month0 = new Month();
        TimeSeries timeSeries0 = new TimeSeries(month0, "K'$", (String) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test068119() throws Throwable {
        Month month0 = new Month();
        TimeSeries timeSeries0 = new TimeSeries(month0, "K'$", (String) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test068120() throws Throwable {
        Month month0 = new Month();
        TimeSeries timeSeries0 = new TimeSeries(month0, "K'$", (String) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test068121() throws Throwable {
        Month month0 = new Month();
        TimeSeries timeSeries0 = new TimeSeries(month0, "K'$", (String) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) null);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test069122() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
        timeSeries0.hashCode();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test070123() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("the time period ", (String) null, "the time period ");
        timeSeries0.hashCode();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test070124() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("the time period ", (String) null, "the time period ");
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test070125() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("the time period ", (String) null, "the time period ");
        timeSeries0.hashCode();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test070126() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("the time period ", (String) null, "the time period ");
        timeSeries0.hashCode();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test070127() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("the time period ", (String) null, "the time period ");
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test071128() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test071129() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test071130() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test071131() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test071132() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries1.getMinY();
    }

    @Test(timeout = 4000)
    public void test071133() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test071134() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
    }

    @Test(timeout = 4000)
    public void test071135() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries1.getMaxY();
    }

    @Test(timeout = 4000)
    public void test071136() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test072137() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = new TimeSeries("Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaxY();
    }

    @Test(timeout = 4000)
    public void test072138() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = new TimeSeries("Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test072139() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = new TimeSeries("Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test072140() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = new TimeSeries("Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test072141() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = new TimeSeries("Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test072142() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = new TimeSeries("Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMinY();
    }

    @Test(timeout = 4000)
    public void test072143() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = new TimeSeries("Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        boolean boolean0 = timeSeries1.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test073144() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        GridLayout gridLayout0 = new GridLayout(0, 3012);
        Panel panel0 = new Panel(gridLayout0);
        boolean boolean0 = timeSeries0.equals(panel0);
    }

    @Test(timeout = 4000)
    public void test073145() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        GridLayout gridLayout0 = new GridLayout(0, 3012);
        Panel panel0 = new Panel(gridLayout0);
        boolean boolean0 = timeSeries0.equals(panel0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test073146() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        GridLayout gridLayout0 = new GridLayout(0, 3012);
        Panel panel0 = new Panel(gridLayout0);
        boolean boolean0 = timeSeries0.equals(panel0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test073147() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        GridLayout gridLayout0 = new GridLayout(0, 3012);
        Panel panel0 = new Panel(gridLayout0);
        boolean boolean0 = timeSeries0.equals(panel0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test073148() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        GridLayout gridLayout0 = new GridLayout(0, 3012);
        Panel panel0 = new Panel(gridLayout0);
        boolean boolean0 = timeSeries0.equals(panel0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test073149() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        GridLayout gridLayout0 = new GridLayout(0, 3012);
        Panel panel0 = new Panel(gridLayout0);
        boolean boolean0 = timeSeries0.equals(panel0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test073150() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        GridLayout gridLayout0 = new GridLayout(0, 3012);
        Panel panel0 = new Panel(gridLayout0);
        boolean boolean0 = timeSeries0.equals(panel0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test074151() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.add((RegularTimePeriod) week0, (-481.5), false);
        RegularTimePeriod regularTimePeriod0 = week0.previous();
        timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test075152() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("93nFD{n");
        Instant instant0 = MockInstant.ofEpochSecond(0L);
        Date date0 = Date.from(instant0);
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "", "");
        Day day0 = new Day(date0, timeZone0);
        RegularTimePeriod regularTimePeriod0 = day0.next();
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    }

    @Test(timeout = 4000)
    public void test076153() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test077154() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.createCopy(999, 0);
    }

    @Test(timeout = 4000)
    public void test078155() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("G>`Yl=JF}Uh#c=ol)");
        timeSeries0.createCopy((-2814), (-2814));
    }

    @Test(timeout = 4000)
    public void test079156() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.delete(2574, (-1174));
    }

    @Test(timeout = 4000)
    public void test080157() throws Throwable {
        Hour hour0 = new Hour();
        RegularTimePeriod regularTimePeriod0 = hour0.next();
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        timeSeries0.add(regularTimePeriod0, (double) 23, true);
        timeSeries0.delete(regularTimePeriod0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test081158() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
        timeSeries0.add(timeSeriesDataItem0, false);
        timeSeries0.delete((RegularTimePeriod) hour0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test082159() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0, "3,LZlB", "rMy?K}U1Qxkb");
        timeSeries0.delete((RegularTimePeriod) week0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test082160() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0, "3,LZlB", "rMy?K}U1Qxkb");
        timeSeries0.delete((RegularTimePeriod) week0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test082161() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0, "3,LZlB", "rMy?K}U1Qxkb");
        timeSeries0.delete((RegularTimePeriod) week0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test082162() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0, "3,LZlB", "rMy?K}U1Qxkb");
        timeSeries0.delete((RegularTimePeriod) week0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test082163() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0, "3,LZlB", "rMy?K}U1Qxkb");
        timeSeries0.delete((RegularTimePeriod) week0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test082164() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0, "3,LZlB", "rMy?K}U1Qxkb");
        timeSeries0.delete((RegularTimePeriod) week0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test083165() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        timeSeries0.clear();
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test084166() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Week week0 = new Week(date0);
        TimeSeries timeSeries0 = new TimeSeries(week0, "", "There is no existing value for the specified 'period'.");
        timeSeries0.clear();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test084167() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Week week0 = new Week(date0);
        TimeSeries timeSeries0 = new TimeSeries(week0, "", "There is no existing value for the specified 'period'.");
        timeSeries0.clear();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test084168() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Week week0 = new Week(date0);
        TimeSeries timeSeries0 = new TimeSeries(week0, "", "There is no existing value for the specified 'period'.");
        timeSeries0.clear();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test084169() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Week week0 = new Week(date0);
        TimeSeries timeSeries0 = new TimeSeries(week0, "", "There is no existing value for the specified 'period'.");
        timeSeries0.clear();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test084170() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Week week0 = new Week(date0);
        TimeSeries timeSeries0 = new TimeSeries(week0, "", "There is no existing value for the specified 'period'.");
        timeSeries0.clear();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test084171() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Week week0 = new Week(date0);
        TimeSeries timeSeries0 = new TimeSeries(week0, "", "There is no existing value for the specified 'period'.");
        timeSeries0.clear();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test085172() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "", "");
        timeSeries0.removeAgedItems((-674L), true);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test085173() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "", "");
        timeSeries0.removeAgedItems((-674L), true);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test085174() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "", "");
        timeSeries0.removeAgedItems((-674L), true);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test085175() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "", "");
        timeSeries0.removeAgedItems((-674L), true);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test085176() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "", "");
        timeSeries0.removeAgedItems((-674L), true);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test085177() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "", "");
        timeSeries0.removeAgedItems((-674L), true);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test086178() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.add((RegularTimePeriod) week0, (-481.5), false);
        timeSeries0.removeAgedItems(9223372036854775807L, false);
        timeSeries0.removeAgedItems((long) 1, false);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test087179() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
        timeSeries0.setMaximumItemAge(1);
        Week week1 = new Week(1, 1);
        timeSeries0.add((RegularTimePeriod) week1, (Number) 1, true);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test088180() throws Throwable {
        SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1493.806316114138), 1018.1, false, false);
        TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0);
        MockDate mockDate0 = new MockDate();
        Second second0 = new Second(mockDate0);
        Millisecond millisecond0 = new Millisecond((-3112), second0);
        timeSeries0.setMaximumItemCount(0);
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 999);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test089181() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("");
        Year year0 = new Year((-367));
        Week week0 = new Week((-1645), year0);
        timeSeries0.add((RegularTimePeriod) week0, 2147.604);
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, 2147.604);
    }

    @Test(timeout = 4000)
    public void test090182() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Month month0 = new Month(date0);
        TimeSeries timeSeries0 = new TimeSeries(month0, "", "1");
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
    }

    @Test(timeout = 4000)
    public void test091183() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
        timeSeries0.addAndOrUpdate(timeSeries0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test091184() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
        timeSeries0.addAndOrUpdate(timeSeries0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test092185() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.update((RegularTimePeriod) hour0, (Number) hour0.FIRST_HOUR_IN_DAY);
    }

    @Test(timeout = 4000)
    public void test093186() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
        Long long0 = new Long(4440L);
        timeSeries0.update((RegularTimePeriod) year0, (Number) long0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test094187() throws Throwable {
        Hour hour0 = new Hour();
        RegularTimePeriod regularTimePeriod0 = hour0.next();
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        timeSeries0.add(regularTimePeriod0, (double) 23, false);
        int int0 = timeSeries0.getIndex(regularTimePeriod0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test094188() throws Throwable {
        Hour hour0 = new Hour();
        RegularTimePeriod regularTimePeriod0 = hour0.next();
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        timeSeries0.add(regularTimePeriod0, (double) 23, false);
        int int0 = timeSeries0.getIndex(regularTimePeriod0);
    }

    @Test(timeout = 4000)
    public void test095189() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23, false);
    }

    @Test(timeout = 4000)
    public void test096190() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.add((TimeSeriesDataItem) null, false);
    }

    @Test(timeout = 4000)
    public void test097191() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.getValue((RegularTimePeriod) minute0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test097192() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.getValue((RegularTimePeriod) minute0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test097193() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.getValue((RegularTimePeriod) minute0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test097194() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.getValue((RegularTimePeriod) minute0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test097195() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.getValue((RegularTimePeriod) minute0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test097196() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.getValue((RegularTimePeriod) minute0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test098197() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2922);
        Day day0 = new Day(spreadsheetDate0);
        TimeSeries timeSeries0 = new TimeSeries(day0, "You are trying to add data where the time period class ", "You are trying to add data where the time period class ");
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test099198() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("");
        TimeSeries timeSeries1 = new TimeSeries("");
        Year year0 = new Year((-367));
        Week week0 = new Week((-1645), year0);
        timeSeries1.add((RegularTimePeriod) week0, 2147.604);
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
        timeSeries1.getItemCount();
    }

    @Test(timeout = 4000)
    public void test099199() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("");
        TimeSeries timeSeries1 = new TimeSeries("");
        Year year0 = new Year((-367));
        Week week0 = new Week((-1645), year0);
        timeSeries1.add((RegularTimePeriod) week0, 2147.604);
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
        timeSeries1.getMaxY();
    }

    @Test(timeout = 4000)
    public void test100200() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("");
        Year year0 = new Year((-367));
        Week week0 = new Week((-1645), year0);
        timeSeries0.add((RegularTimePeriod) week0, 2147.604);
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test101201() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Month month0 = new Month(date0);
        TimeSeries timeSeries0 = new TimeSeries(month0, "", "1");
        timeSeries0.addOrUpdate((RegularTimePeriod) month0, 1409.9202);
        timeSeries0.getTimePeriods();
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test102202() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2922);
        Day day0 = new Day(spreadsheetDate0);
        TimeSeries timeSeries0 = new TimeSeries(day0, "You are trying to add data where the time period class ", "You are trying to add data where the time period class ");
        timeSeries0.add((RegularTimePeriod) day0, (double) 3, true);
        timeSeries0.getRawDataItem(day0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test103203() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        Week week0 = new Week();
        timeSeries0.getRawDataItem(week0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test103204() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        Week week0 = new Week();
        timeSeries0.getRawDataItem(week0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test103205() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        Week week0 = new Week();
        timeSeries0.getRawDataItem(week0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test103206() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        Week week0 = new Week();
        timeSeries0.getRawDataItem(week0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test103207() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        Week week0 = new Week();
        timeSeries0.getRawDataItem(week0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test103208() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        Week week0 = new Week();
        timeSeries0.getRawDataItem(week0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test104209() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.getDataItem((RegularTimePeriod) week0);
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test104210() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.getDataItem((RegularTimePeriod) week0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test104211() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.getDataItem((RegularTimePeriod) week0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test104212() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.getDataItem((RegularTimePeriod) week0);
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test104213() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.getDataItem((RegularTimePeriod) week0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test104214() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.getDataItem((RegularTimePeriod) week0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test105215() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        timeSeries0.setMaximumItemAge((-22L));
    }

    @Test(timeout = 4000)
    public void test106216() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 23);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test106217() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Minute minute0 = new Minute(date0);
        TimeSeries timeSeries0 = new TimeSeries(minute0, ".dj8CYsoz`2xA[o", "");
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 23);
        timeSeries0.setMaximumItemCount(0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test107218() throws Throwable {
        SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1493.806316114138), 1018.1621595563996, false, false);
        TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0);
        timeSeries0.setMaximumItemCount((-2429));
    }

    @Test(timeout = 4000)
    public void test108219() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.setMaximumItemCount(9999);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test109220() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, (Number) 59);
        double double0 = timeSeries0.getMinY();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test109221() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.add((RegularTimePeriod) second0, (Number) 59);
        double double0 = timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test110222() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) 23);
        timeSeries0.add(timeSeriesDataItem0, false);
    }

    @Test(timeout = 4000)
    public void test111223() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
        timeSeries1.addAndOrUpdate(timeSeries0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test111224() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
        timeSeries1.addAndOrUpdate(timeSeries0);
        timeSeries0.equals((Object) timeSeries1);
    }

    @Test(timeout = 4000)
    public void test112225() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Month month0 = new Month(date0);
        TimeSeries timeSeries0 = new TimeSeries(month0, "", "1");
        timeSeries0.getNextTimePeriod();
    }

    @Test(timeout = 4000)
    public void test113226() throws Throwable {
        Quarter quarter0 = new Quarter();
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Null 'seriesKeys' argument.", "Null 'seriesKeys' argument.");
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
        timeSeries0.getDataItem((RegularTimePeriod) quarter0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test114227() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.delete(0, 0);
    }

    @Test(timeout = 4000)
    public void test115228() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test115229() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test115230() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test115231() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        String string0 = timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test115232() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test115233() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test116234() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test116235() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test116236() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test116237() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test116238() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        String string0 = timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test116239() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test117240() throws Throwable {
        MockDate mockDate0 = new MockDate(1235, 400, 1235);
        OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
        TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, "JG#sgA$$!");
        long long0 = timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test117241() throws Throwable {
        MockDate mockDate0 = new MockDate(1235, 400, 1235);
        OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
        TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, "JG#sgA$$!");
        long long0 = timeSeries0.getMaximumItemAge();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test117242() throws Throwable {
        MockDate mockDate0 = new MockDate(1235, 400, 1235);
        OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
        TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, "JG#sgA$$!");
        long long0 = timeSeries0.getMaximumItemAge();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test117243() throws Throwable {
        MockDate mockDate0 = new MockDate(1235, 400, 1235);
        OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
        TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, "JG#sgA$$!");
        long long0 = timeSeries0.getMaximumItemAge();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test117244() throws Throwable {
        MockDate mockDate0 = new MockDate(1235, 400, 1235);
        OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-1.0), (-2.147483648E9), 611.4873052);
        TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, (String) null, "JG#sgA$$!");
        long long0 = timeSeries0.getMaximumItemAge();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test118245() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Week week0 = new Week(date0);
        TimeSeries timeSeries0 = new TimeSeries(week0, "", "There is no existing value for the specified 'period'.");
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test118246() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Week week0 = new Week(date0);
        TimeSeries timeSeries0 = new TimeSeries(week0, "", "There is no existing value for the specified 'period'.");
        timeSeries0.setRangeDescription("");
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test119247() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getValue(0);
    }

    @Test(timeout = 4000)
    public void test120248() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getTimePeriod((-1605));
    }

    @Test(timeout = 4000)
    public void test121249() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test121250() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test121251() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test121252() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test121253() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test121254() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test122255() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "", "");
        timeSeries0.getItems();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test122256() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "", "");
        timeSeries0.getItems();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test122257() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "", "");
        timeSeries0.getItems();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test122258() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "", "");
        timeSeries0.getItems();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test122259() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "", "");
        timeSeries0.getItems();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test122260() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("You are trying to add data where the time period class ", "", "");
        timeSeries0.getItems();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test123261() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        int int0 = timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test123262() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        int int0 = timeSeries0.getMaximumItemCount();
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test123263() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        int int0 = timeSeries0.getMaximumItemCount();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test123264() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        int int0 = timeSeries0.getMaximumItemCount();
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test123265() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        int int0 = timeSeries0.getMaximumItemCount();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test123266() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        int int0 = timeSeries0.getMaximumItemCount();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test124267() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999), true);
        timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test125268() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0, "_`S'h$**a[mm`MON", "c;AL6dg1");
        timeSeries0.setDomainDescription("_`S'h$**a[mm`MON");
        timeSeries0.getMinY();
    }

    @Test(timeout = 4000)
    public void test125269() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0, "_`S'h$**a[mm`MON", "c;AL6dg1");
        timeSeries0.setDomainDescription("_`S'h$**a[mm`MON");
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test125270() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0, "_`S'h$**a[mm`MON", "c;AL6dg1");
        timeSeries0.setDomainDescription("_`S'h$**a[mm`MON");
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test125271() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0, "_`S'h$**a[mm`MON", "c;AL6dg1");
        timeSeries0.setDomainDescription("_`S'h$**a[mm`MON");
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test125272() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0, "_`S'h$**a[mm`MON", "c;AL6dg1");
        timeSeries0.setDomainDescription("_`S'h$**a[mm`MON");
        timeSeries0.getMaxY();
    }

    @Test(timeout = 4000)
    public void test125273() throws Throwable {
        Hour hour0 = new Hour();
        TimeSeries timeSeries0 = new TimeSeries(hour0, "_`S'h$**a[mm`MON", "c;AL6dg1");
        timeSeries0.setDomainDescription("_`S'h$**a[mm`MON");
        timeSeries0.getRangeDescription();
    }
}
