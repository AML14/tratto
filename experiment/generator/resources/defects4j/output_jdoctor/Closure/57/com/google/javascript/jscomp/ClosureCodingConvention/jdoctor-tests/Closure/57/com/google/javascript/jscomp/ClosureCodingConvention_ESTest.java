/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 02:50:44 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ClosureCodingConvention_ESTest extends ClosureCodingConvention_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        boolean boolean0 = closureCodingConvention0.isVarArgsParameter((Node) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        googleCodingConvention0.extractClassNameIfProvide((Node) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        String string0 = googleCodingConvention0.getExportSymbolFunction();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        boolean boolean0 = closureCodingConvention0.isOptionalParameter((Node) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        boolean boolean0 = closureCodingConvention0.isSuperClassReference((String) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        String string0 = googleCodingConvention0.getAbstractMethodName();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        boolean boolean0 = closureCodingConvention0.isPrivate("com.google.javascript.jscomp.ControlFlowGraph$Branch");
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        String string0 = googleCodingConvention0.getExportPropertyFunction();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        googleCodingConvention0.applySingletonGetter((FunctionType) null, (FunctionType) null, (ObjectType) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        String string0 = closureCodingConvention0.getGlobalObject();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Collection<CodingConvention.AssertionFunctionSpec> collection0 = googleCodingConvention0.getAssertionFunctions();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        CodingConvention.SubclassType codingConvention_SubclassType0 = CodingConvention.SubclassType.MIXIN;
        googleCodingConvention0.applySubclassRelationship((FunctionType) null, (FunctionType) null, codingConvention_SubclassType0);
        googleCodingConvention0.getDelegateSuperclassName();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        CodingConvention.SubclassType codingConvention_SubclassType0 = CodingConvention.SubclassType.INHERITS;
        googleCodingConvention0.applySubclassRelationship((FunctionType) null, (FunctionType) null, codingConvention_SubclassType0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JSType[] jSTypeArray0 = new JSType[1];
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        CodingConvention.SubclassRelationship codingConvention_SubclassRelationship0 = googleCodingConvention0.getClassesDefinedByCall(node0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = new Node(33, 33, 33);
        Node node1 = new Node(4, node0, 47, 33);
        googleCodingConvention0.getClassesDefinedByCall(node1);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newNumber((-10.67296378501237));
        Node node1 = new Node((-1), node0, node0, node0, 20, 16);
        CodingConvention.SubclassRelationship codingConvention_SubclassRelationship0 = googleCodingConvention0.getClassesDefinedByCall(node1);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newNumber(1131.2815601);
        String string0 = googleCodingConvention0.extractClassNameIfRequire(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(";isT$dOPOt2yWcxs", ";isT$dOPOt2yWcxs");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        List<String> list0 = googleCodingConvention0.identifyTypeDeclarationCall(node0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newNumber((-2.1474836446971633E9));
        Node node1 = new Node(50, node0, node0, node0, 35, 31);
        String string0 = googleCodingConvention0.getSingletonGetterClassName(node1);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newNumber((-1488.2425));
        googleCodingConvention0.isPropertyTestFunction(node0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Node node0 = new Node((-2921), (-2921), (-2921));
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = new Node(37, node0, node0, node0, node0, 0, 5);
        boolean boolean0 = googleCodingConvention0.isPropertyTestFunction(node1);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newNumber((-10.67296378501237));
        googleCodingConvention0.getObjectLiteralCast((NodeTraversal) null, node0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Node node0 = new Node((-2921), (-2921), (-2921));
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = new Node(37, node0, node0, node0, node0, 0, 5);
        CodingConvention.ObjectLiteralCast codingConvention_ObjectLiteralCast0 = googleCodingConvention0.getObjectLiteralCast((NodeTraversal) null, node1);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Node node0 = new Node((-2921));
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        CodingConvention.Bind codingConvention_Bind0 = googleCodingConvention0.describeFunctionBind(node0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Node node0 = new Node((-2921));
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = new Node(37, node0, node0, node0, node0, 0, 5);
        CodingConvention.Bind codingConvention_Bind0 = googleCodingConvention0.describeFunctionBind(node1);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = new Node(37, node0, node0, node0, node0, 0, 5);
        CodingConvention.Bind codingConvention_Bind0 = googleCodingConvention0.describeFunctionBind(node1);
    }
}
