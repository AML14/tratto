/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 04:17:33 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PeepholeSubstituteAlternateSyntax_ESTest extends PeepholeSubstituteAlternateSyntax_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Node node0 = new Node(0, 0, 0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Node node0 = new Node(0, 0, 0);
        Node node1 = new Node(26, node0, 15, 4);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Node node0 = new Node(0, 0, 0);
        Node node1 = new Node(26, node0, 15, 4);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Node node0 = new Node(113);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Node node0 = new Node(30);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Compiler compiler0 = new Compiler();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        peepholeSubstituteAlternateSyntax0.beginTraversal(nodeTraversal0);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        Node node1 = new Node(4, node0, 4, 8);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Node node0 = new Node(113);
        Node node1 = new Node(4, 25, 11);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        Node node1 = new Node(4, 25, 11);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
        node2.isNoSideEffectsCall();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Node node0 = new Node(132, 132, 132);
        Node node1 = new Node(4, 29, 0);
        node0.addChildrenToFront(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Node node0 = new Node(113);
        Node node1 = new Node(4, 25, 11);
        node1.addChildAfter(node0, node0);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        Node node1 = new Node(4, 29, 0);
        node0.addChildrenToFront(node1);
        Node node2 = Node.newNumber((double) (-1), 1, 2);
        node1.addChildrenToBack(node2);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Node node3 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        Node node1 = new Node(4, 25, 11);
        node1.addChildAfter(node0, node0);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Node node0 = new Node(26);
        Node node1 = new Node(12, node0, node0, node0, node0, 40, 1);
        node0.addChildrenToFront(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Node node0 = new Node(26);
        Node node1 = new Node(13, node0);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        Node node0 = new Node(26);
        Node node1 = new Node(46, node0, node0, node0, 38, 5);
        node1.setType(45);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        Node node0 = new Node(26);
        Node node1 = new Node(46, node0, node0, node0, 38, 5);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        Node node0 = new Node(108);
        Node node1 = Node.newNumber((double) 2);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Compiler compiler0 = new Compiler();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        peepholeSubstituteAlternateSyntax0.beginTraversal(nodeTraversal0);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        Node node0 = new Node(108);
        Node node1 = Node.newNumber((double) 2);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Compiler compiler0 = new Compiler();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        peepholeSubstituteAlternateSyntax0.beginTraversal(nodeTraversal0);
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node2.hasChildren();
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        Node node0 = new Node((-2));
        Node node1 = new Node(108, node0, (-1), 1);
        node1.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node1);
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        node0.addChildToBack(node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        Node node0 = new Node(130, 130, 130);
        Node node1 = new Node(100, node0, node0, node0);
        node0.addChildrenToFront(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        Node node0 = new Node(26);
        Node node1 = new Node((-1), node0, 1, 29);
        node1.setType(101);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        Node node1 = new Node(14, node0, node0, node0);
        node1.setType(100);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        Node node0 = new Node(130, 130, 130);
        Node node1 = new Node(26, node0, node0, node0, node0, (-3), 12);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        Node node1 = new Node(14, node0, node0, node0);
        Node node2 = Node.newNumber((double) 39, 40, 114);
        node1.addChildToBack(node2);
        node1.setType(100);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        node0.addChildrenToFront(node0);
        Node node1 = new Node(35);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        Node node0 = new Node(130);
        Node node1 = Node.newNumber((double) 0);
        node0.addChildToBack(node1);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Node node2 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        Node node0 = new Node(30);
        node0.addChildToBack(node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Compiler compiler0 = new Compiler();
        compiler0.setNormalized();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        peepholeSubstituteAlternateSyntax0.beginTraversal(nodeTraversal0);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node1.isLocalResultCall();
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Compiler compiler0 = new Compiler();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        peepholeSubstituteAlternateSyntax0.beginTraversal(nodeTraversal0);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
        node1.isOnlyModifiesThisCall();
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        Node node0 = new Node(37);
        node0.addChildToBack(node0);
        PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax();
        Compiler compiler0 = new Compiler();
        compiler0.setNormalized();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        peepholeSubstituteAlternateSyntax0.beginTraversal(nodeTraversal0);
        Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        boolean boolean0 = PeepholeSubstituteAlternateSyntax.containsUnicodeEscape("k[j\\u");
    }
}
