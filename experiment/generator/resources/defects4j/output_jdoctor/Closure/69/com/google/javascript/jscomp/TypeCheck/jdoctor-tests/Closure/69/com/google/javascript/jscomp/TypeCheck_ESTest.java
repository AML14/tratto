/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 03:23:43 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckMissingGetCssName;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SemanticReverseAbstractInterpreter;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeCheck_ESTest extends TypeCheck_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(35);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        typeCheck0.reportMissingProperties(false);
        Node node0 = compiler0.parseTestCode("msg.no.regexp");
        Node node1 = new Node(16, node0, node0, node0, 151, 19);
        typeCheck0.processForTesting(node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber((-36.6706435269342));
        Node node1 = new Node(43, node0);
        typeCheck0.processForTesting(node0, node0);
        typeCheck0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        Node node1 = new Node(30, node0);
        typeCheck0.processForTesting((Node) null, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber((-36.6706435269342));
        Node node1 = new Node(43, node0);
        typeCheck0.processForTesting(node0, node0);
        typeCheck0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("vJ");
        Node node1 = new Node(27, node0, node0, node0, 2, 42);
        typeCheck0.processForTesting(node0, node0);
        typeCheck0.processForTesting(node1, node1);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = Node.newNumber(1.1654429604646246);
        Scope scope0 = new Scope(node0, compiler0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.reportUnknownTypes, compilerOptions0.checkShadowVars);
        typeCheck0.processForTesting(node0, node0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(105);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        typeCheck0.processForTesting(node0, node0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber((-33.72289608628942));
        Node node1 = new Node(86, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(118);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(105);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        node0.addSuppression((String) null);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(4);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber(100.0);
        Node node1 = new Node(5, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber(100.0);
        Node node1 = new Node(5, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("{8a");
        Node node1 = new Node(6, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("{8a");
        Node node1 = new Node(6, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(7);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test01417() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(7);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test01518() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node((-76));
        Node node1 = new Node(8, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test01519() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node((-76));
        Node node1 = new Node(8, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test01620() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(9, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test01621() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(9, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test01722() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(10, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test01723() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(10, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test01824() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = compiler0.parseTestCode(" }@'");
        Node node1 = new Node(11, node0, node0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test01925() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(12);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test02026() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber((-33.72289608628942));
        Node node1 = new Node(13, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        node1.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test02127() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber(1374.4969655242487);
        Node node1 = new Node(14, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test02228() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("F>J");
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02329() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(17);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test02430() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(118);
        Node node1 = new Node(18, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02431() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(118);
        Node node1 = new Node(18, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test02532() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("T[=28Ba1$#{H5n\"Cz");
        Node node1 = new Node(19, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02533() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("T[=28Ba1$#{H5n\"Cz");
        Node node1 = new Node(19, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test02534() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("T[=28Ba1$#{H5n\"Cz");
        Node node1 = new Node(19, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test02635() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(150);
        Node node1 = new Node(20, node0);
        typeCheck0.visit((NodeTraversal) null, node1, node0);
    }

    @Test(timeout = 4000)
    public void test02736() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(21, node0, node0, node0, node0, 48, 50);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test02837() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("msg.no.regp");
        Node node1 = new Node(22, node0, node0, node0, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02838() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("msg.no.regp");
        Node node1 = new Node(22, node0, node0, node0, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test02839() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("msg.no.regp");
        Node node1 = new Node(22, node0, node0, node0, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test02940() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString("");
        Node node1 = new Node(23, node0, node0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test03041() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 105);
        Node node1 = new Node(24, node0, node0, 49, 0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test03142() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(118);
        Node node1 = new Node(25, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test03143() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(118);
        Node node1 = new Node(25, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test03244() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString(" }@'");
        Node node1 = new Node(26, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test03345() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = compiler0.parseTestCode("vtJ");
        Node node1 = new Node(27, node0, node0, node0, 2, 42);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test03446() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(28, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test03547() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(29);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test03648() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 105);
        Node node1 = new Node(31, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test03749() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(105);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(32, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test03850() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(121);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(34, node0, node0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test03851() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(121);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = new Node(34, node0, node0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test03952() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(36, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test03953() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(36, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test04054() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber((-3109.550227217214));
        Node node1 = new Node(37, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test04155() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseSyntheticCode("<TS0.1wr&V+'z4fXzE", "<TS0.1wr&V+'z4fXzE");
        Node node1 = new Node(41, node0, node0, node0, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test04256() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber((double) 88);
        Node node1 = new Node(42, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test04357() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber(2705.904);
        Node node1 = new Node(43, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test04458() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(44, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        node1.equals((Object) node0);
    }

    @Test(timeout = 4000)
    public void test04559() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("<TS0.1ir&V+o'z4ftzE");
        Node node1 = new Node(45, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test04660() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(105);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node1 = new Node(46);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test04761() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(48);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test04762() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(48);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test04863() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber(0.0);
        Node node1 = new Node(49, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test04964() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(51);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05065() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(52);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05166() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(53);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05167() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(53);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test05268() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(54);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test05269() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(54);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05370() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(55, (-1663), 1);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05471() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(56);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05472() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(56);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test05573() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(57, 57, 57);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05574() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(57, 57, 57);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test05675() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(58);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05676() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(58);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test05777() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(59);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test05778() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(59);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05879() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(60);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test05880() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(60);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test05981() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(61);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test05982() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(61);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06083() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber(2726.155);
        Node node1 = new Node(62, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06084() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber(2726.155);
        Node node1 = new Node(62, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06185() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(63, "Eq");
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test06286() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(64);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test06387() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(65);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test06488() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        Node node0 = new Node(66);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06489() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        Node node0 = new Node(66);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test06590() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(67);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06591() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(67);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06692() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(68);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06693() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(68);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06794() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(69, "");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test06895() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(70, 70, 70);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06896() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(70, 70, 70);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test06997() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(71);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06998() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(71);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test07099() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(72);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test070100() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(72);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test071101() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(73);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test071102() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(73);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test072103() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(74);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test072104() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(74);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test073105() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(75);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test073106() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(75);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test074107() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(76);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test074108() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(76);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test075109() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(77);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        node0.isVarArgs();
    }

    @Test(timeout = 4000)
    public void test076110() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(78);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test076111() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(78);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test077112() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(79);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test077113() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(79);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test078114() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(80);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test078115() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(80);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test079116() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber(Double.NaN);
        Node node1 = new Node(81, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test079117() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber(Double.NaN);
        Node node1 = new Node(81, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test080118() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(82, "");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test080119() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(82, "");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test081120() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(105);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        JSType[] jSTypeArray0 = new JSType[1];
        JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        jSTypeArray0[0] = jSType0;
        Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test082121() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(84, 84, 84);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test082122() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(84, 84, 84);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test083123() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(85, "");
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test084124() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber((-33.72289608628942));
        Node node1 = new Node(87, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test084125() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber((-33.72289608628942));
        Node node1 = new Node(87, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test085126() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(90);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test086127() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber((-889.9064));
        Node node1 = new Node(91, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test087128() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(92);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test088129() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(94, 94, 94);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test089130() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber((-35.17328011595348));
        Node node1 = new Node(96, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test090131() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(98);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test091132() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(99, "d/Joz{w4<if\"o``$z");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test091133() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(99, "d/Joz{w4<if\"o``$z");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test092134() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("msg.no.regexp");
        Node node1 = new Node(100, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test092135() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("msg.no.regexp");
        Node node1 = new Node(100, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test093136() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(101);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test094137() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(102);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test095138() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber((-889.9064));
        Node node1 = new Node(103, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test096139() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(104);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test096140() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(104);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test097141() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(105);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test098142() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(106);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test098143() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(106);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test099144() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(107);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test099145() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(107);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test100146() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(108);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test101147() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(109);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test101148() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(109);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test102149() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(110);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test103150() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(111);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test104151() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(112);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test105152() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(113);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test106153() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(114);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test107154() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(115);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test108155() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(116);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test109156() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(117);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test110157() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(119);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test111158() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(120);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, memoizedScopeCreator0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test112159() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(121);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test112160() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(121);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test113161() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(122);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test114162() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("msg.no.regexp");
        Node node1 = new Node(123, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test114163() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("msg.no.regexp");
        Node node1 = new Node(123, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test115164() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(124);
        typeCheck0.visit(nodeTraversal0, node0, (Node) null);
        nodeTraversal0.getLineNumber();
    }

    @Test(timeout = 4000)
    public void test116165() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(126);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test117166() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = new Node(127);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test117167() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = new Node(127);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test118168() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(128);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test118169() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(128);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test119170() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(129);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test119171() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(129);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test120172() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(131);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test120173() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(131);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test121174() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(133);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test121175() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(133);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test122176() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(134);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test122177() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(134);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test123178() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(135);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test123179() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(135);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test124180() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(136);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test124181() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(136);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test125182() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(137);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test125183() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(137);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test126184() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(138);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test126185() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(138);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test127186() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(139);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test127187() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(139);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test128188() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(140);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test128189() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(140);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test129190() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(141);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test129191() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(141);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test130192() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(142);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test130193() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(142);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test131194() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(143);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test131195() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(143);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test132196() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(144);
        NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test133197() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(145);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test133198() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(145);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test134199() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(146);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test134200() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(146);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test135201() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(147);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test136202() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(148);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test137203() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(149);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test137204() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(149);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test138205() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(78);
        Node node1 = new Node(150);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test138206() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(78);
        Node node1 = new Node(150);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test139207() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        Node node0 = new Node(151);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test140208() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("msg.no.regexp");
        Node node1 = new Node(152, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test140209() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("msg.no.regexp");
        Node node1 = new Node(152, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test141210() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(153);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test142211() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("/OYJO0LbBJ?7%emi");
        Node node1 = new Node(3, node0, node0, 153, 45);
        Node node2 = new Node(88, node1);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) typeCheck0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test142212() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("/OYJO0LbBJ?7%emi");
        Node node1 = new Node(3, node0, node0, 153, 45);
        Node node2 = new Node(88, node1);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test143213() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(83);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test144214() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString("TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(64, node0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test145215() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber((-3109.134516841137));
        Node node1 = new Node(37, node0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test146216() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(15, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test147217() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(47);
        Node node1 = new Node(15, node0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    }

    @Test(timeout = 4000)
    public void test148218() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(64);
        node0.addChildToFront(node0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test149219() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(50);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        TypeCheck typeCheck1 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, checkLevel0, checkLevel0);
        typeCheck1.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test150220() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(105);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test151221() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(120);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, memoizedScopeCreator0);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test152222() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newNumber(0.0);
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);
    }

    @Test(timeout = 4000)
    public void test153223() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(118);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test154224() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("msg.no.regexp");
        Node node1 = new Node(16, node0, node0, node0, 23, 19);
        typeCheck0.processForTesting(node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test154225() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("msg.no.regexp");
        Node node1 = new Node(16, node0, node0, node0, 23, 19);
        typeCheck0.processForTesting(node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test155226() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "MLs8xB9TL=eW.*g|X");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
        Node node0 = Node.newString("km{!");
        Node node1 = new Node(33, node0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test156227() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(118);
        Node node1 = new Node(118, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test157228() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        Node node1 = new Node(30, node0);
        Node node2 = new Node(15, node1);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test158229() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        Node node1 = new Node(30, node0);
        node1.setSourcePositionForTree(0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test158230() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        Node node1 = new Node(30, node0);
        node1.setSourcePositionForTree(0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test159231() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Node node0 = new Node(50);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node1 = compiler0.parseTestCode("com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel");
        Node node2 = new Node(30, node1, node0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node2, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test160232() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = new Node(89);
        Node node1 = new Node(89, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test161233() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(95, "");
        node0.addChildToFront(node0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test162234() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(97, " ");
        node0.addChildToFront(node0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test163235() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("  parent:");
        Node node1 = new Node(93, node0, 18, 2);
        node1.addSuppression("  parent:");
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test164236() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = compiler0.parseTestCode(" }'");
        Node node1 = Node.newNumber(2826.5521567642);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        double double0 = typeCheck0.getTypedPercent();
    }

    @Test(timeout = 4000)
    public void test165237() throws Throwable {
        Compiler compiler0 = new Compiler();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        compiler0.initCompilerOptionsIfTesting();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
        double double0 = typeCheck0.getTypedPercent();
    }
}
