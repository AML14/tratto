[
  {
    "signature": "com.google.javascript.jscomp.RenamePrototypes(com.google.javascript.jscomp.AbstractCompiler compiler, boolean aggressiveRenaming, char[] reservedCharacters, com.google.javascript.jscomp.VariableMap prevUsedRenameMap)",
    "name": "com.google.javascript.jscomp.RenamePrototypes",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.RenamePrototypes",
      "name": "RenamePrototypes",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.RenamePrototypes",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "aggressiveRenaming"
      },
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "reservedCharacters",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.VariableMap",
          "name": "VariableMap",
          "isArray": false
        },
        "name": "prevUsedRenameMap",
        "nullable": true
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
            "name": "AbstractCompiler",
            "isArray": false
          },
          "name": "compiler"
        },
        "comment": "The JSCompiler.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "aggressiveRenaming"
        },
        "comment": "Whether to rename aggressively.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "reservedCharacters",
          "nullable": true
        },
        "comment": "If specified these characters won't be used in generated names.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.jscomp.VariableMap",
            "name": "VariableMap",
            "isArray": false
          },
          "name": "prevUsedRenameMap",
          "nullable": true
        },
        "comment": "The rename map used in the previous compilation.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root)",
    "name": "process",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.RenamePrototypes",
      "name": "RenamePrototypes",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.RenamePrototypes",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "externs"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "root"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "externs"
        },
        "comment": "The root of the externs parse tree.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "root"
        },
        "comment": "The root of the main code parse tree.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getPropertyMap()",
    "name": "getPropertyMap",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.RenamePrototypes",
      "name": "RenamePrototypes",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.RenamePrototypes",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.VariableMap",
      "name": "com.google.javascript.jscomp.VariableMap",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A mapping from original names to new names.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]