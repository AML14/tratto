/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 31 06:46:46 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JSType_ESTest extends JSType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0004() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test0005() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(allType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0016() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test0017() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.isStringValueType();
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0018() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.isStringValueType();
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.isStringValueType();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.isStringValueType();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.isStringValueType();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00212() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isBooleanObjectType();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00213() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isBooleanObjectType();
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00214() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isBooleanObjectType();
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00215() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isBooleanObjectType();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00216() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isBooleanObjectType();
    }

    @Test(timeout = 4000)
    public void test00217() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isBooleanObjectType();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00318() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "m(xW=htH0m>*Au");
        enumElementType0.findPropertyType("1PMq1");
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00319() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "m(xW=htH0m>*Au");
        enumElementType0.findPropertyType("1PMq1");
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00320() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "m(xW=htH0m>*Au");
        enumElementType0.findPropertyType("1PMq1");
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00321() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "m(xW=htH0m>*Au");
        enumElementType0.findPropertyType("1PMq1");
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00322() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "m(xW=htH0m>*Au");
        enumElementType0.findPropertyType("1PMq1");
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00423() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getJSDocInfo();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00424() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getJSDocInfo();
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00425() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getJSDocInfo();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00426() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getJSDocInfo();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00427() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getJSDocInfo();
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00528() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        String string0 = booleanType0.toDebugHashCodeString();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00529() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        String string0 = booleanType0.toDebugHashCodeString();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00530() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        String string0 = booleanType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test00531() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        String string0 = booleanType0.toDebugHashCodeString();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00632() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isRegexpType();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00633() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isRegexpType();
    }

    @Test(timeout = 4000)
    public void test00634() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isRegexpType();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00635() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isRegexpType();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00636() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isRegexpType();
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00637() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isRegexpType();
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00738() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = booleanType0.collapseUnion();
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00739() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = booleanType0.collapseUnion();
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00740() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = booleanType0.collapseUnion();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00741() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = booleanType0.collapseUnion();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00742() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = booleanType0.collapseUnion();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00843() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isString();
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00844() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isString();
    }

    @Test(timeout = 4000)
    public void test00845() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isString();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00846() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isString();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00847() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isString();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00948() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isDateType();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00949() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isDateType();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00950() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isDateType();
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00951() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isDateType();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00952() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isDateType();
    }

    @Test(timeout = 4000)
    public void test00953() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isDateType();
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test01054() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        jSType0.getTypesUnderShallowInequality(jSType_TypePair0.typeB);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test01055() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        jSType0.getTypesUnderShallowInequality(jSType_TypePair0.typeB);
        numberType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test01156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2vhARH(dUDsX%go&`");
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        String string0 = enumElementType0.toAnnotationString();
    }

    @Test(timeout = 4000)
    public void test01157() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2vhARH(dUDsX%go&`");
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        String string0 = enumElementType0.toAnnotationString();
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2vhARH(dUDsX%go&`");
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        String string0 = enumElementType0.toAnnotationString();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test01159() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2vhARH(dUDsX%go&`");
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        String string0 = enumElementType0.toAnnotationString();
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2vhARH(dUDsX%go&`");
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        String string0 = enumElementType0.toAnnotationString();
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01261() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isStringObjectType();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01262() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isStringObjectType();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01263() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isStringObjectType();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01264() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isStringObjectType();
    }

    @Test(timeout = 4000)
    public void test01365() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? jSType0 == null : true);
        Node node0 = Node.newString(3657, " YH81V3Xc?D", 0, 0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType0);
        boolean boolean0 = arrowType0.matchesObjectContext();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01366() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? jSType0 == null : true);
        Node node0 = Node.newString(3657, " YH81V3Xc?D", 0, 0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType0);
        boolean boolean0 = arrowType0.matchesObjectContext();
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01367() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? jSType0 == null : true);
        Node node0 = Node.newString(3657, " YH81V3Xc?D", 0, 0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType0);
        boolean boolean0 = arrowType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test01368() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? jSType0 == null : true);
        Node node0 = Node.newString(3657, " YH81V3Xc?D", 0, 0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType0);
        boolean boolean0 = arrowType0.matchesObjectContext();
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01469() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isNumberObjectType();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01470() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isNumberObjectType();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01471() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isNumberObjectType();
    }

    @Test(timeout = 4000)
    public void test01472() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isNumberObjectType();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01573() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, enumElementType0, parameterizedType0);
        parameterizedType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test01574() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, enumElementType0, parameterizedType0);
        JSType jSType0 = parameterizedType1.getGreatestSubtype(parameterizedType0);
        parameterizedType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test01575() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, enumElementType0, parameterizedType0);
        JSType jSType0 = parameterizedType1.getGreatestSubtype(parameterizedType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01576() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, enumElementType0, parameterizedType0);
        JSType jSType0 = parameterizedType1.getGreatestSubtype(parameterizedType0);
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01577() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, enumElementType0, parameterizedType0);
        JSType jSType0 = parameterizedType1.getGreatestSubtype(parameterizedType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01578() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, enumElementType0, parameterizedType0);
        JSType jSType0 = parameterizedType1.getGreatestSubtype(parameterizedType0);
        parameterizedType1.equals((Object) parameterizedType0);
    }

    @Test(timeout = 4000)
    public void test01679() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Node node0 = Node.newNumber((-1242.8477), 3, 5080);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(noObjectType0, "Not declared as a constructor");
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType1);
        boolean boolean0 = arrowType0.matchesStringContext();
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01680() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Node node0 = Node.newNumber((-1242.8477), 3, 5080);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(noObjectType0, "Not declared as a constructor");
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType1);
        boolean boolean0 = arrowType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test01681() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Node node0 = Node.newNumber((-1242.8477), 3, 5080);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(noObjectType0, "Not declared as a constructor");
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType1);
        boolean boolean0 = arrowType0.matchesStringContext();
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01682() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Node node0 = Node.newNumber((-1242.8477), 3, 5080);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(noObjectType0, "Not declared as a constructor");
        JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType1);
        boolean boolean0 = arrowType0.matchesStringContext();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01783() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        boolean boolean0 = jSType_TypePair0.typeB.isNullable();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test01784() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        boolean boolean0 = jSType_TypePair0.typeB.isNullable();
    }

    @Test(timeout = 4000)
    public void test01885() throws Throwable {
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        com.google.javascript.rhino.jstype.JSType default0;
        default0 = stringType0.unboxesTo();
        assertTrue((stringType0.isRegexpType()) == false ? default0 == null : true);
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01986() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isNominalConstructor();
        booleanType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test01987() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isNominalConstructor();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01988() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isNominalConstructor();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01989() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isNominalConstructor();
        booleanType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test01990() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test01991() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isNominalConstructor();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test02092() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isArrayType();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test02093() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isArrayType();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test02094() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isArrayType();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02095() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test02196() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.setValidator((Predicate<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test02297() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isBooleanValueType();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02298() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test02399() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.canBeCalled();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test023100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test023101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.canBeCalled();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test023102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.canBeCalled();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test024103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        arrowType0.getDisplayName();
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test024104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        arrowType0.getDisplayName();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test024105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        arrowType0.getDisplayName();
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test024106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        arrowType0.getDisplayName();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test025107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.isNumber();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test026108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a type name", 1, 0);
        boolean boolean0 = namedType0.isOrdinaryFunction();
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test026109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a type name", 1, 0);
        boolean boolean0 = namedType0.isOrdinaryFunction();
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test026110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a type name", 1, 0);
        boolean boolean0 = namedType0.isOrdinaryFunction();
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test026111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Not declared as a type name", 1, 0);
        boolean boolean0 = namedType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test027112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType objectType0 = noResolvedType0.dereference();
        objectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test028113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType instanceObjectType0;
        instanceObjectType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? instanceObjectType0 == null : true);
        boolean boolean0 = instanceObjectType0.isNamedType();
        instanceObjectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test028114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType instanceObjectType0;
        instanceObjectType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? instanceObjectType0 == null : true);
        boolean boolean0 = instanceObjectType0.isNamedType();
    }

    @Test(timeout = 4000)
    public void test028115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType instanceObjectType0;
        instanceObjectType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? instanceObjectType0 == null : true);
        boolean boolean0 = instanceObjectType0.isNamedType();
        instanceObjectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test028116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType instanceObjectType0;
        instanceObjectType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? instanceObjectType0 == null : true);
        boolean boolean0 = instanceObjectType0.isNamedType();
        instanceObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test029117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        booleanType0.matchConstraint(enumType0);
        enumType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test029118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        booleanType0.matchConstraint(enumType0);
        enumType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test029119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        booleanType0.matchConstraint(enumType0);
        enumType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test029120() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        booleanType0.matchConstraint(enumType0);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test030121() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.matchesInt32Context();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test030122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.matchesInt32Context();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test030123() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.matchesInt32Context();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test031124() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.hasProperty("'");
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test031125() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.hasProperty("'");
    }

    @Test(timeout = 4000)
    public void test031126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.hasProperty("'");
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test031127() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.hasProperty("'");
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test032128() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isInstanceType();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test032129() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test032130() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isInstanceType();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test032131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isInstanceType();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test033132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isCheckedUnknownType();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test033133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test033134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isCheckedUnknownType();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test033135() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isCheckedUnknownType();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test033136() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isCheckedUnknownType();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test034137() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isTheObjectType();
    }

    @Test(timeout = 4000)
    public void test034138() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isTheObjectType();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test034139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isTheObjectType();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test034140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isTheObjectType();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test035141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesUint32Context();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test035142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesUint32Context();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test035143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesUint32Context();
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test035144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesUint32Context();
    }

    @Test(timeout = 4000)
    public void test035145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesUint32Context();
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test036146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isEnumType();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test036147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test037148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Unknown class name", 0, 1);
        boolean boolean0 = namedType0.isInvariant(booleanType0);
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test037149() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Unknown class name", 0, 1);
        boolean boolean0 = namedType0.isInvariant(booleanType0);
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test037150() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Unknown class name", 0, 1);
        boolean boolean0 = namedType0.isInvariant(booleanType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test037151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Unknown class name", 0, 1);
        boolean boolean0 = namedType0.isInvariant(booleanType0);
    }

    @Test(timeout = 4000)
    public void test038152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test038153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isNumberValueType();
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test038154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isNumberValueType();
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test038155() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isNumberValueType();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test039156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        instanceObjectType0.forceResolve(simpleErrorReporter0, errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test039157() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        instanceObjectType0.forceResolve(simpleErrorReporter0, errorFunctionType0);
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test040158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.clearResolved();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test040159() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.clearResolved();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test040160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.clearResolved();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test041161() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isFunctionPrototypeType();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test041162() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test041163() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isFunctionPrototypeType();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test041164() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isFunctionPrototypeType();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test042165() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        String string0 = jSType0.toString();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test042166() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        String string0 = jSType0.toString();
    }

    @Test(timeout = 4000)
    public void test042167() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        String string0 = jSType0.toString();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test042168() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        String string0 = jSType0.toString();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test043169() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test043170() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.hasDisplayName();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test044171() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test044172() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test044173() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test044174() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test044175() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test045176() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test045177() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test045178() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test045179() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test045180() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test046181() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "q^:[[>,}BYm<8", noType0, false);
        JSType[] jSTypeArray0 = new JSType[4];
        jSTypeArray0[0] = (JSType) noType0;
        jSTypeArray0[1] = (JSType) prototypeObjectType0;
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) prototypeObjectType0, jSTypeArray0);
        JSType jSType0 = JSType.getLeastSupertype((JSType) functionType0, jSTypeArray0[0]);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "Not declared as a constructor");
        jSTypeArray0[1].getGreatestSubtype(enumElementType0);
        prototypeObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test047182() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(errorFunctionType0);
        errorFunctionType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test047183() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test047184() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(errorFunctionType0);
        errorFunctionType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test047185() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(errorFunctionType0);
        errorFunctionType1.equals((Object) errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test047186() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(errorFunctionType0);
        errorFunctionType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test048187() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isStruct();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test048188() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isStruct();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test048189() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isStruct();
    }

    @Test(timeout = 4000)
    public void test048190() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isStruct();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test049191() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = numberType0.autoboxesTo();
        assertTrue((numberType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.isStruct();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test049192() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = numberType0.autoboxesTo();
        assertTrue((numberType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.isStruct();
    }

    @Test(timeout = 4000)
    public void test049193() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = numberType0.autoboxesTo();
        assertTrue((numberType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.isStruct();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test049194() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = numberType0.autoboxesTo();
        assertTrue((numberType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.isStruct();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test050195() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2vhARH(dUDsX%go&`");
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        boolean boolean0 = enumElementType0.isStruct();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test050196() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2vhARH(dUDsX%go&`");
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        boolean boolean0 = enumElementType0.isStruct();
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test050197() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2vhARH(dUDsX%go&`");
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        boolean boolean0 = enumElementType0.isStruct();
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test050198() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2vhARH(dUDsX%go&`");
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        boolean boolean0 = enumElementType0.isStruct();
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test050199() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2vhARH(dUDsX%go&`");
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        boolean boolean0 = enumElementType0.isStruct();
    }

    @Test(timeout = 4000)
    public void test051200() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isDict();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test051201() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isDict();
    }

    @Test(timeout = 4000)
    public void test051202() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isDict();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test051203() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isDict();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test052204() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
        boolean boolean0 = instanceObjectType0.isDict();
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test052205() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
        boolean boolean0 = instanceObjectType0.isDict();
    }

    @Test(timeout = 4000)
    public void test053206() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isDict();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test053207() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isDict();
    }

    @Test(timeout = 4000)
    public void test054208() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noObjectType0.setDict();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
        boolean boolean0 = instanceObjectType0.isDict();
        instanceObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test054209() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noObjectType0.setDict();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
        boolean boolean0 = instanceObjectType0.isDict();
        instanceObjectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test054210() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noObjectType0.setDict();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
        boolean boolean0 = instanceObjectType0.isDict();
    }

    @Test(timeout = 4000)
    public void test054211() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noObjectType0.setDict();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
        boolean boolean0 = instanceObjectType0.isDict();
        instanceObjectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test055212() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isGlobalThisType();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test055213() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isGlobalThisType();
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test055214() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isGlobalThisType();
        numberType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test055215() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isGlobalThisType();
    }

    @Test(timeout = 4000)
    public void test056216() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) errorFunctionType0);
        functionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test056217() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) errorFunctionType0);
        functionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test056218() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) errorFunctionType0);
        functionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test056219() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) errorFunctionType0);
        functionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test056220() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test057221() throws Throwable {
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test058222() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, booleanType0);
        parameterizedType0.getGreatestSubtype(booleanType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test058223() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, booleanType0);
        parameterizedType0.getGreatestSubtype(booleanType0);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test059224() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", (String) null, (-967), 40);
        boolean boolean0 = namedType0.isParameterizedType();
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test059225() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", (String) null, (-967), 40);
        boolean boolean0 = namedType0.isParameterizedType();
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test059226() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", (String) null, (-967), 40);
        boolean boolean0 = namedType0.isParameterizedType();
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test059227() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", (String) null, (-967), 40);
        boolean boolean0 = namedType0.isParameterizedType();
    }

    @Test(timeout = 4000)
    public void test060228() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        boolean boolean0 = parameterizedType0.isParameterizedType();
        enumType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test060229() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        boolean boolean0 = parameterizedType0.isParameterizedType();
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test060230() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        boolean boolean0 = parameterizedType0.isParameterizedType();
        enumType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test060231() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        boolean boolean0 = parameterizedType0.isParameterizedType();
    }

    @Test(timeout = 4000)
    public void test061232() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.toMaybeParameterizedType((JSType) noResolvedType0);
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test062233() throws Throwable {
        ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test063234() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(templateType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test063235() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(templateType0);
        templateType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test064236() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) noResolvedType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        JSType.toMaybeTemplateType((JSType) enumElementType0);
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test064237() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) noResolvedType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        JSType.toMaybeTemplateType((JSType) enumElementType0);
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test064238() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) noResolvedType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        JSType.toMaybeTemplateType((JSType) enumElementType0);
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test064239() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) noResolvedType0, "Not declared as a constructor", ".Rt+28OS e]&~w1L", (-2520), 51);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "B XP(`)J|");
        JSType.toMaybeTemplateType((JSType) enumElementType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test065240() throws Throwable {
        JSType[] jSTypeArray0 = new JSType[4];
        TemplateType templateType0 = JSType.toMaybeTemplateType(jSTypeArray0[0]);
    }

    @Test(timeout = 4000)
    public void test066241() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(noObjectType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test066242() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(noObjectType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test066243() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(noObjectType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test067244() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNominalConstructor();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test067245() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test068246() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "<nQ?:rv", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
        functionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test068247() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "<nQ?:rv", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
        functionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test068248() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "<nQ?:rv", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
        functionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test068249() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "<nQ?:rv", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test068250() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "<nQ?:rv", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
        functionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test069251() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType[] jSTypeArray0 = new JSType[7];
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test069252() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType[] jSTypeArray0 = new JSType[7];
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test069253() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType[] jSTypeArray0 = new JSType[7];
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test069254() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType[] jSTypeArray0 = new JSType[7];
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test069255() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        JSType[] jSTypeArray0 = new JSType[7];
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        errorFunctionType0.setSource(node0);
        boolean boolean0 = errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test070256() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 1, 1);
        boolean boolean0 = namedType0.differsFrom(booleanType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test070257() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 1, 1);
        boolean boolean0 = namedType0.differsFrom(booleanType0);
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test070258() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 1, 1);
        boolean boolean0 = namedType0.differsFrom(booleanType0);
    }

    @Test(timeout = 4000)
    public void test070259() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 1, 1);
        boolean boolean0 = namedType0.differsFrom(booleanType0);
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test071260() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 0, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.differsFrom(namedType0);
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test071261() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 0, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.differsFrom(namedType0);
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test071262() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 0, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.differsFrom(namedType0);
    }

    @Test(timeout = 4000)
    public void test071263() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 0, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.differsFrom(namedType0);
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test071264() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 0, 1);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.differsFrom(namedType0);
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test072265() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 0, 1);
        JSType jSType0 = booleanType0.getGreatestSubtype(namedType0);
        boolean boolean0 = namedType0.differsFrom(jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test072266() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 0, 1);
        JSType jSType0 = booleanType0.getGreatestSubtype(namedType0);
        boolean boolean0 = namedType0.differsFrom(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test072267() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 0, 1);
        JSType jSType0 = booleanType0.getGreatestSubtype(namedType0);
        boolean boolean0 = namedType0.differsFrom(jSType0);
    }

    @Test(timeout = 4000)
    public void test072268() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 0, 1);
        JSType jSType0 = booleanType0.getGreatestSubtype(namedType0);
        boolean boolean0 = namedType0.differsFrom(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test073269() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Unknown class name", 1, 1);
        UnknownType unknownType0 = (UnknownType) numberType0.getGreatestSubtype(namedType0);
        boolean boolean0 = unknownType0.isImplicitPrototype(namedType0);
    }

    @Test(timeout = 4000)
    public void test073270() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Unknown class name", 1, 1);
        UnknownType unknownType0 = (UnknownType) numberType0.getGreatestSubtype(namedType0);
        boolean boolean0 = unknownType0.isImplicitPrototype(namedType0);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test073271() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Unknown class name", 1, 1);
        UnknownType unknownType0 = (UnknownType) numberType0.getGreatestSubtype(namedType0);
        boolean boolean0 = unknownType0.isImplicitPrototype(namedType0);
        unknownType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test073272() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Unknown class name", 1, 1);
        UnknownType unknownType0 = (UnknownType) numberType0.getGreatestSubtype(namedType0);
        boolean boolean0 = unknownType0.isImplicitPrototype(namedType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test074273() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, templateType0, templateType0);
        JSType jSType0 = templateType0.getGreatestSubtype(parameterizedType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test074274() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, templateType0, templateType0);
        JSType jSType0 = templateType0.getGreatestSubtype(parameterizedType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test074275() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, templateType0, templateType0);
        JSType jSType0 = templateType0.getGreatestSubtype(parameterizedType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test075276() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(enumElementType0);
        JSType jSType1 = jSType0.getGreatestSubtype(booleanType0);
        jSType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test075277() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(enumElementType0);
        JSType jSType1 = jSType0.getGreatestSubtype(booleanType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test075278() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(enumElementType0);
        JSType jSType1 = jSType0.getGreatestSubtype(booleanType0);
        jSType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test075279() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(enumElementType0);
        JSType jSType1 = jSType0.getGreatestSubtype(booleanType0);
        jSType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test076280() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        JSType jSType1 = jSType0.getLeastSupertype(jSType_TypePair0.typeB);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test076281() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        JSType jSType1 = jSType0.getLeastSupertype(jSType_TypePair0.typeB);
    }

    @Test(timeout = 4000)
    public void test077282() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, recordType0);
        proxyObjectType0.getTypesUnderShallowEquality(recordType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test077283() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, recordType0);
        proxyObjectType0.getTypesUnderShallowEquality(recordType0);
        recordType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test079284() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, booleanType0);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.differsFrom(parameterizedType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test079285() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, booleanType0);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.differsFrom(parameterizedType0);
    }

    @Test(timeout = 4000)
    public void test080286() throws Throwable {
        boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test081287() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = JSType.isEquivalent(booleanType0, (JSType) null);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test081288() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = JSType.isEquivalent(booleanType0, (JSType) null);
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test081289() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = JSType.isEquivalent(booleanType0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test081290() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = JSType.isEquivalent(booleanType0, (JSType) null);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test082291() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = JSType.isEquivalent(booleanType0, booleanType0);
    }

    @Test(timeout = 4000)
    public void test082292() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = JSType.isEquivalent(booleanType0, booleanType0);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test082293() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = JSType.isEquivalent(booleanType0, booleanType0);
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test082294() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = JSType.isEquivalent(booleanType0, booleanType0);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test083295() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.equals(simpleErrorReporter0);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test083296() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.equals(simpleErrorReporter0);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test083297() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.equals(simpleErrorReporter0);
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test083298() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.equals(simpleErrorReporter0);
    }

    @Test(timeout = 4000)
    public void test084299() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        booleanType0.equals(numberType0);
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test084300() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        booleanType0.equals(numberType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test084301() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        booleanType0.equals(numberType0);
        numberType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test084302() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        booleanType0.equals(numberType0);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test085303() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.findPropertyType("");
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test085304() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.findPropertyType("");
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test085305() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.findPropertyType("");
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test086306() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = numberType0.autoboxesTo();
        assertTrue((numberType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.canAssignTo(numberType0);
    }

    @Test(timeout = 4000)
    public void test086307() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = numberType0.autoboxesTo();
        assertTrue((numberType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.canAssignTo(numberType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test086308() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = numberType0.autoboxesTo();
        assertTrue((numberType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.canAssignTo(numberType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test086309() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType jSType0;
        jSType0 = numberType0.autoboxesTo();
        assertTrue((numberType0.isRegexpType()) == false ? jSType0 == null : true);
        boolean boolean0 = jSType0.canAssignTo(numberType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test087310() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
        boolean boolean0 = enumElementType0.canAssignTo(booleanType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test087311() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
        boolean boolean0 = enumElementType0.canAssignTo(booleanType0);
    }

    @Test(timeout = 4000)
    public void test088312() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = booleanType0.autobox();
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test088313() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = booleanType0.autobox();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test088314() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = booleanType0.autobox();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test089315() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        noResolvedType0.getTypesUnderEquality(instanceObjectType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test090316() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        NoType noType0 = (NoType) nullType0.restrictByNotNullOrUndefined();
        booleanType0.testForEqualityHelper(allType0, noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test090317() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        NoType noType0 = (NoType) nullType0.restrictByNotNullOrUndefined();
        booleanType0.testForEqualityHelper(allType0, noType0);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test091318() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        instanceObjectType0.getTypesUnderEquality(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test091319() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        instanceObjectType0.getTypesUnderEquality(errorFunctionType0);
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test092320() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(booleanType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test093321() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
        NoType noType0 = new NoType(jSTypeRegistry0);
        enumElementType0.getTypesUnderInequality(noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test094322() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noObjectType0.getTypesUnderEquality(numberType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test095323() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.canTestForEqualityWith(booleanType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test095324() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.canTestForEqualityWith(booleanType0);
    }

    @Test(timeout = 4000)
    public void test096325() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        instanceObjectType0.getTypesUnderEquality(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test096326() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        instanceObjectType0.getTypesUnderEquality(errorFunctionType0);
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test097327() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "q^:[[>,}BYm<8", noType0, false);
        JSType[] jSTypeArray0 = new JSType[4];
        jSTypeArray0[2] = (JSType) prototypeObjectType0;
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) prototypeObjectType0, jSTypeArray0);
        boolean boolean0 = functionType0.canTestForEqualityWith(jSTypeArray0[2]);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test097328() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "q^:[[>,}BYm<8", noType0, false);
        JSType[] jSTypeArray0 = new JSType[4];
        jSTypeArray0[2] = (JSType) prototypeObjectType0;
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) prototypeObjectType0, jSTypeArray0);
        boolean boolean0 = functionType0.canTestForEqualityWith(jSTypeArray0[2]);
    }

    @Test(timeout = 4000)
    public void test098329() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
        enumElementType0.getTypesUnderInequality(jSType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test099330() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
        boolean boolean0 = booleanType0.canTestForEqualityWith(jSType0);
    }

    @Test(timeout = 4000)
    public void test099331() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
        boolean boolean0 = booleanType0.canTestForEqualityWith(jSType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test099332() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
        boolean boolean0 = booleanType0.canTestForEqualityWith(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test100333() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test100334() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test101335() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test101336() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(noType0);
    }

    @Test(timeout = 4000)
    public void test102337() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.canTestForShallowEqualityWith(booleanType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test102338() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.canTestForShallowEqualityWith(booleanType0);
    }

    @Test(timeout = 4000)
    public void test103339() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        boolean boolean0 = enumType0.canTestForShallowEqualityWith(parameterizedType0);
        enumType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test103340() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        boolean boolean0 = enumType0.canTestForShallowEqualityWith(parameterizedType0);
    }

    @Test(timeout = 4000)
    public void test103341() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        boolean boolean0 = enumType0.canTestForShallowEqualityWith(parameterizedType0);
        enumType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test103342() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        boolean boolean0 = enumType0.canTestForShallowEqualityWith(parameterizedType0);
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test104343() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString("Not declared as a type name");
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Unknown class name", node0, booleanType0);
        boolean boolean0 = enumType0.canTestForShallowEqualityWith(booleanType0);
    }

    @Test(timeout = 4000)
    public void test104344() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString("Not declared as a type name");
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Unknown class name", node0, booleanType0);
        boolean boolean0 = enumType0.canTestForShallowEqualityWith(booleanType0);
        enumType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test104345() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString("Not declared as a type name");
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Unknown class name", node0, booleanType0);
        boolean boolean0 = enumType0.canTestForShallowEqualityWith(booleanType0);
        enumType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test104346() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString("Not declared as a type name");
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Unknown class name", node0, booleanType0);
        boolean boolean0 = enumType0.canTestForShallowEqualityWith(booleanType0);
        enumType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test105347() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getLeastSupertype(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test105348() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getLeastSupertype(noResolvedType0);
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test106349() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
        JSType jSType1 = booleanType0.getLeastSupertype(jSType0);
    }

    @Test(timeout = 4000)
    public void test106350() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
        JSType jSType1 = booleanType0.getLeastSupertype(jSType0);
        jSType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test106351() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
        JSType jSType1 = booleanType0.getLeastSupertype(jSType0);
        jSType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test106352() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
        JSType jSType1 = booleanType0.getLeastSupertype(jSType0);
        jSType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test107353() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test107354() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test107355() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
        jSType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test107356() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
        jSType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test107357() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test108358() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = booleanType0.getGreatestSubtype(recordType0);
        recordType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test108359() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = booleanType0.getGreatestSubtype(recordType0);
        recordType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test108360() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = booleanType0.getGreatestSubtype(recordType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test108361() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = booleanType0.getGreatestSubtype(recordType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test109362() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "?2u$d&Z2pxUfhK+YA");
        Node node0 = Node.newNumber(4480.551518101, 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", node0, booleanType0);
        EnumElementType enumElementType1 = enumType0.getElementsType();
        enumElementType1.getTypesUnderShallowEquality(enumElementType0);
        enumElementType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test109363() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "?2u$d&Z2pxUfhK+YA");
        Node node0 = Node.newNumber(4480.551518101, 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", node0, booleanType0);
        EnumElementType enumElementType1 = enumType0.getElementsType();
        enumElementType1.getTypesUnderShallowEquality(enumElementType0);
        enumElementType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test109364() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "?2u$d&Z2pxUfhK+YA");
        Node node0 = Node.newNumber(4480.551518101, 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", node0, booleanType0);
        EnumElementType enumElementType1 = enumType0.getElementsType();
        enumElementType1.getTypesUnderShallowEquality(enumElementType0);
        enumElementType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test109365() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "?2u$d&Z2pxUfhK+YA");
        Node node0 = Node.newNumber(4480.551518101, 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", node0, booleanType0);
        EnumElementType enumElementType1 = enumType0.getElementsType();
        enumElementType1.getTypesUnderShallowEquality(enumElementType0);
        enumElementType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test110366() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString("Invalid padding: %s");
        AllType allType0 = new AllType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, proxyObjectType0, "B XP(`)J|");
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(enumElementType0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Invalid padding: %s", node0, jSType0);
        JSType jSType1 = enumType0.getGreatestSubtype(enumElementType0);
        enumType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test110367() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString("Invalid padding: %s");
        AllType allType0 = new AllType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, proxyObjectType0, "B XP(`)J|");
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(enumElementType0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Invalid padding: %s", node0, jSType0);
        JSType jSType1 = enumType0.getGreatestSubtype(enumElementType0);
        jSType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test110368() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString("Invalid padding: %s");
        AllType allType0 = new AllType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, proxyObjectType0, "B XP(`)J|");
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(enumElementType0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Invalid padding: %s", node0, jSType0);
        JSType jSType1 = enumType0.getGreatestSubtype(enumElementType0);
        enumElementType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test110369() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString("Invalid padding: %s");
        AllType allType0 = new AllType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, proxyObjectType0, "B XP(`)J|");
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(enumElementType0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Invalid padding: %s", node0, jSType0);
        JSType jSType1 = enumType0.getGreatestSubtype(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test110370() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString("Invalid padding: %s");
        AllType allType0 = new AllType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, proxyObjectType0, "B XP(`)J|");
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(enumElementType0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Invalid padding: %s", node0, jSType0);
        JSType jSType1 = enumType0.getGreatestSubtype(enumElementType0);
        enumType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test111371() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        JSType jSType0 = parameterizedType0.getGreatestSubtype(noResolvedType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test112372() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 0, 0);
        JSType jSType0 = namedType0.getLeastSupertype(booleanType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test112373() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 0, 0);
        JSType jSType0 = namedType0.getLeastSupertype(booleanType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test112374() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 0, 0);
        JSType jSType0 = namedType0.getLeastSupertype(booleanType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test112375() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 0, 0);
        JSType jSType0 = namedType0.getLeastSupertype(booleanType0);
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test113376() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test113377() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test114378() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "#xnsWtwRK T{3bd0.{", "#xnsWtwRK T{3bd0.{", (-1700), (-1700));
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType_TypePair0.typeB, jSType_TypePair0.typeB);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test114379() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "#xnsWtwRK T{3bd0.{", "#xnsWtwRK T{3bd0.{", (-1700), (-1700));
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType_TypePair0.typeB, jSType_TypePair0.typeB);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
        unionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test115380() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = booleanType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test115381() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = booleanType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test115382() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = booleanType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test116383() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(jSType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test117384() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        com.google.javascript.rhino.jstype.JSType instanceObjectType0;
        instanceObjectType0 = booleanType0.autoboxesTo();
        assertTrue((booleanType0.isRegexpType()) == false ? instanceObjectType0 == null : true);
        instanceObjectType0.getTypesUnderEquality(booleanType0);
        instanceObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test118385() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noObjectType0, noObjectType0);
        noObjectType0.getTypesUnderEquality(parameterizedType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test119386() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, nullType0, "Not declared as a constructor");
        enumElementType0.getTypesUnderInequality(nullType0);
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test119387() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, nullType0, "Not declared as a constructor");
        enumElementType0.getTypesUnderInequality(nullType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test119388() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, nullType0, "Not declared as a constructor");
        enumElementType0.getTypesUnderInequality(nullType0);
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test119389() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, nullType0, "Not declared as a constructor");
        enumElementType0.getTypesUnderInequality(nullType0);
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test120390() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        voidType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test120391() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        voidType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test120392() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        voidType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test120393() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        voidType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test120394() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        voidType0.getTypesUnderShallowInequality(jSType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test121395() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 1, 0);
        boolean boolean0 = JSType.isSubtypeHelper(namedType0, namedType0);
        namedType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test121396() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 1, 0);
        boolean boolean0 = JSType.isSubtypeHelper(namedType0, namedType0);
    }

    @Test(timeout = 4000)
    public void test121397() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 1, 0);
        boolean boolean0 = JSType.isSubtypeHelper(namedType0, namedType0);
        namedType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test121398() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 1, 0);
        boolean boolean0 = JSType.isSubtypeHelper(namedType0, namedType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test122399() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        enumType0.defineInferredProperty("Not declared as a constructor", booleanType0, node0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test122400() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 0, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, booleanType0);
        enumType0.defineInferredProperty("Not declared as a constructor", booleanType0, node0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
        enumType0.resolveInternal(simpleErrorReporter0, parameterizedType0);
        enumType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test123401() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        errorFunctionType0.setResolvedTypeInternal((JSType) null);
        errorFunctionType0.resolve(simpleErrorReporter0, errorFunctionType0);
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test124402() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType jSType0 = JSType.safeResolve((JSType) null, simpleErrorReporter0, (StaticScope<JSType>) null);
    }
}
