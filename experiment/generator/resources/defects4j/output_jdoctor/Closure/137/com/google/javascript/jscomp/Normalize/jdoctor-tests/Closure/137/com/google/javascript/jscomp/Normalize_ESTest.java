/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 22:42:25 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Normalize_ESTest extends Normalize_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.Normalize$PropogateConstantAnnotations");
        Node node1 = new Node(46, node0);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        Node node0 = Node.newString(0, "E1wKu0iW&PNp3Tz");
        normalize_VerifyConstants0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("LYU ");
        Node node1 = new Node(32, node0, node0, 1, 43);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        normalize_VerifyConstants0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("LYU ");
        Node node1 = new Node(32, node0, node0, 1, 43);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        normalize_VerifyConstants0.process(node0, node0);
        node0.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ClosureReverseAbstractInterpreter$12");
        Node node1 = new Node(44, node0, node0, node0, node0);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        normalize_VerifyConstants0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("C:Y%L ");
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.ClosureReverseAbstractInterpreter$12");
        Node node1 = new Node(113, node0);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.gogle.javacript.jscomp.CosureReverseAbstractInterpeter$12");
        Node node1 = new Node(105, node0);
        node0.addChildrenToFront(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("h name ");
        Node node1 = new Node(126, node0, node0, 21, (-3));
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(126);
        Node node1 = new Node(126, node0, node0, 0, 6);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.Normalize$PrpogateConstantAnnotations");
        Node node1 = new Node(115, node0);
        node0.addChildrenToFront(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        Node node1 = new Node(118, node0);
        node0.addChildrenToFront(node1);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.Normalize$PropogateConstantAnnotations");
        Node node1 = new Node(118, 46, 0);
        node0.addChildrenToFront(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.Normalize$PropogateConstantAnnotations");
        Node node1 = new Node(118, 46, 0);
        node0.addChildrenToFront(node1);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("Empty VAR node.");
        Node node1 = new Node(105, node0);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node1);
    }
}
