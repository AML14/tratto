/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 22:21:50 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.Multimap;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ConcreteType;
import com.google.javascript.jscomp.DisambiguateProperties;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.Visitor;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DisambiguateProperties_ESTest extends DisambiguateProperties_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.DisambiguateProperties$AbstractScopingCallback", "com.google.javascript.jscomp.DisambiguateProperties$AbstractScopingCallback");
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        disambiguateProperties0.process(node0, node0);
        disambiguateProperties0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
        disambiguateProperties0.process((Node) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
        ConcreteType concreteType0 = ConcreteType.ALL;
        ConcreteType[] concreteTypeArray0 = new ConcreteType[9];
        concreteTypeArray0[1] = concreteType0;
        ConcreteType.ConcreteUnionType concreteType_ConcreteUnionType0 = new ConcreteType.ConcreteUnionType(concreteTypeArray0);
        disambiguateProperties0.getTypeWithProperty("TightenTypes pass appears to be stuck in an infinite loop.", concreteType_ConcreteUnionType0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.gogle.javascrirt.jscomp.DisambiguateProperties$AbstractSopingCallback", "com.gogle.javascrirt.jscomp.DisambiguateProperties$AbstractSopingCallback");
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        Node node1 = Node.newNumber((double) 11);
        disambiguateProperties0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("TightenTypes pass appears to be stuck in an infinite loop.");
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        Node node1 = new Node(64, node0, (-1), 39);
        disambiguateProperties0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(64);
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        disambiguateProperties0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("TightenTypes pass appears to be stuck in an infinite loop.");
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        Node node1 = new Node(64, node0, 25, 39);
        disambiguateProperties0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.DisambiguateProperties$AbstractScopingCallback", "com.google.javascript.jscomp.DisambiguateProperties$AbstractScopingCallback");
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        disambiguateProperties0.process(node0, node0);
        Multimap<String, Collection<JSType>> multimap0 = disambiguateProperties0.getRenamedTypesForTesting();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(objectType0);
        JSType jSType1 = disambiguateProperties0.getTypeWithProperty(" instances of ", jSType0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "com.google.common.base.Suppliers$ExpiringMemoizingSupplier", "prototype", 2266, 480);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", namedType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        JSType jSType0 = enumElementType0.findPropertyType("=~!{Lx-=2GZ");
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "g3[X/&5T#mv", (Node) null, (Node) null, jSType0);
        BooleanType booleanType0 = mock(BooleanType.class, new ViolatedAssumptionAnswer());
        doReturn(functionType0, enumType0).when(booleanType0).autoboxesTo();
        Visitor<BooleanType> visitor0 = (Visitor<BooleanType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
        doReturn(booleanType0).when(visitor0).caseFunctionType(any(com.google.javascript.rhino.jstype.FunctionType.class));
        BooleanType booleanType1 = functionType0.visit(visitor0);
        JSType jSType1 = disambiguateProperties0.getTypeWithProperty("=~!{Lx-=2GZ", booleanType1);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "TightenTypes pass appears to be stuck in an infinite loop.", "TightenTypes pass appears to be stuck in an infinite loop.", 28, 1);
        JSType jSType0 = disambiguateProperties0.getTypeWithProperty("prototype", namedType0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "TightenTypes pass appears to be stuck in an infinite loop.", "TightenTypes pass appears to be stuck in an infinite loop.", 18, 44);
        NamedType namedType1 = (NamedType) disambiguateProperties0.getTypeWithProperty("Not declared as a type name", namedType0);
        namedType1.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
        ConcreteType.ConcreteInstanceType concreteType_ConcreteInstanceType0 = new ConcreteType.ConcreteInstanceType(tightenTypes0, objectType0);
        ConcreteType concreteType0 = disambiguateProperties0.getTypeWithProperty("DisambiguateProperties$AbstractScoingCallback", concreteType_ConcreteInstanceType0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        ConcreteType concreteType0 = ConcreteType.NONE;
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
        ConcreteType concreteType1 = disambiguateProperties0.getTypeWithProperty("TightenTypes pass appears to be stuck in an infinite loop.", concreteType0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
        ConcreteType concreteType0 = ConcreteType.ALL;
        ConcreteType concreteType1 = disambiguateProperties0.getTypeWithProperty("TightenTypes pass appears to be stuck in an infinite loop.", concreteType0);
    }
}
