/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 03:59:39 GMT 2023
 */
package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.Block;
import com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.CatchClause;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.DoLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ElementGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.EmptyExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.ForInLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCall;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.IfStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.InfixExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.Jump;
import com.google.javascript.jscomp.mozilla.rhino.ast.Label;
import com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Name;
import com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty;
import com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.RegExpLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Scope;
import com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase;
import com.google.javascript.jscomp.mozilla.rhino.ast.SwitchStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.ThrowStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer;
import com.google.javascript.jscomp.mozilla.rhino.ast.WhileLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.WithStatement;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class IRFactory_ESTest extends IRFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        EmptyExpression emptyExpression0 = new EmptyExpression();
        astRoot0.addChild(emptyExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "U(`A#", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        EmptyExpression emptyExpression0 = new EmptyExpression();
        astRoot0.addChild(emptyExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "U(`A#", (Config) null, errorCollector0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ArrayLiteral arrayLiteral0 = new ArrayLiteral();
        arrayLiteral0.setIsDestructuring(true);
        astRoot0.addChild(arrayLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "@T]aIJ*nj]O", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectProperty objectProperty0 = new ObjectProperty(20);
        astRoot0.addChild(objectProperty0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "J*s,9ya+ssu8?*", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        DoLoop doLoop0 = new DoLoop(13, (-876));
        astRoot0.addChild(doLoop0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "/>=]1YtKY'?/ciA'", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ElementGet elementGet0 = new ElementGet();
        astRoot0.addChild(elementGet0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Block block0 = new Block();
        InfixExpression infixExpression0 = new InfixExpression(22, block0, block0, (-1500));
        astRoot0.addChild(infixExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        WhileLoop whileLoop0 = new WhileLoop(159);
        astRoot0.addChild(whileLoop0);
        IRFactory.transformTree(astRoot0, (String) null, (Config) null, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        FunctionNode functionNode0 = new FunctionNode();
        NumberLiteral numberLiteral0 = new NumberLiteral();
        functionNode0.addParam(numberLiteral0);
        astRoot0.addChild(functionNode0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(2);
        astRoot0.addChild(parenthesizedExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ThrowStatement throwStatement0 = new ThrowStatement(astRoot0);
        astRoot0.addChild(throwStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "msg.end.annotation.expected", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        NewExpression newExpression0 = new NewExpression();
        astRoot0.addChild(newExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "WU-VF'>Rr/m", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        StringLiteral stringLiteral0 = new StringLiteral();
        astRoot0.addChild(stringLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LabeledStatement labeledStatement0 = new LabeledStatement(2);
        Label label0 = new Label();
        labeledStatement0.addLabel(label0);
        astRoot0.addChild(labeledStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        BreakStatement breakStatement0 = new BreakStatement(16);
        ExpressionStatement expressionStatement0 = new ExpressionStatement(breakStatement0, false);
        astRoot0.addChild(expressionStatement0);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        Node node0 = IRFactory.transformTree(astRoot0, "getters are not supported in Internet Explorer", (Config) null, toolErrorReporter0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        PropertyGet propertyGet0 = new PropertyGet();
        astRoot0.addChild(propertyGet0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "setters are not supported in Internet Explorer", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        WithStatement withStatement0 = new WithStatement(154);
        astRoot0.addChild(withStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ForInLoop forInLoop0 = new ForInLoop(15, 3);
        astRoot0.addChild(forInLoop0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "us4%'", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ForLoop forLoop0 = new ForLoop(4, 2);
        astRoot0.addChild(forLoop0);
        IRFactory.transformTree(astRoot0, "vXZ[7>Xb-y)hhi5!yw", (Config) null, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ConditionalExpression conditionalExpression0 = new ConditionalExpression(2921);
        astRoot0.addChild(conditionalExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Label label0 = new Label();
        Jump jump0 = new Jump();
        InfixExpression infixExpression0 = new InfixExpression(12, jump0, label0, 121);
        astRoot0.addChild(infixExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "Not declared as a type name", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        RegExpLiteral regExpLiteral0 = new RegExpLiteral(1, 3);
        regExpLiteral0.setValue("");
        astRoot0.addChild(regExpLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        ErrorCollector errorCollector0 = new ErrorCollector();
        AstRoot astRoot0 = new AstRoot();
        Token.CommentType token_CommentType0 = Token.CommentType.LINE;
        Comment comment0 = new Comment(21, 146, token_CommentType0, "0m");
        astRoot0.addComment(comment0);
        Node node0 = IRFactory.transformTree(astRoot0, "0m", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Set<String> set0 = jSDocInfo0.getSuppressions();
        Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
        Comment comment0 = new Comment((-675), 22, token_CommentType0, "-}HZltGhcg2!N");
        astRoot0.addComment(comment0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config config0 = new Config(set0, treeSet0, false, true, false);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        IRFactory.transformTree(astRoot0, "Catch clauses are not supported", config0, toolErrorReporter0);
        Node node0 = IRFactory.transformTree(astRoot0, "Catch clauses are not supported", config0, toolErrorReporter0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Token.CommentType token_CommentType0 = Token.CommentType.BLOCK;
        Comment comment0 = new Comment(4, 3, token_CommentType0, "vXZ[7Sb-y)~#i5!yw");
        astRoot0.setJsDocNode(comment0);
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
        Node node0 = IRFactory.transformTree(astRoot0, "vXZ[7Sb-y)~#i5!yw", config0, toolErrorReporter0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Block block0 = new Block();
        InfixExpression infixExpression0 = new InfixExpression(15, block0, block0, 303);
        astRoot0.addChild(infixExpression0);
        astRoot0.setLineno(4);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "`{7pbC2(mJ7W@>N@=", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Block block0 = new Block();
        InfixExpression infixExpression0 = new InfixExpression(15, block0, block0, 303);
        astRoot0.addChild(infixExpression0);
        astRoot0.setLineno(4);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "`{7pbC2(mJ7W@>N@=", (Config) null, errorCollector0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Block block0 = new Block();
        InfixExpression infixExpression0 = new InfixExpression(9, block0, block0, 2);
        astRoot0.addChild(infixExpression0);
        Node node0 = IRFactory.transformTree(astRoot0, "\n\nSubtree2: ", (Config) null, (ErrorReporter) null);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Scope scope0 = new Scope();
        scope0.addChildToBack(astRoot0);
        astRoot0.addChild(scope0);
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, ")&wHQAIv%%um,", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ArrayLiteral arrayLiteral0 = new ArrayLiteral();
        astRoot0.addChild(arrayLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ContinueStatement continueStatement0 = new ContinueStatement();
        astRoot0.addChild(continueStatement0);
        Node node0 = IRFactory.transformTree(astRoot0, "I/hjDd1", (Config) null, (ErrorReporter) null);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Name name0 = new Name(16);
        ContinueStatement continueStatement0 = new ContinueStatement(name0);
        astRoot0.addChild(continueStatement0);
        ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
        IRFactory.transformTree(astRoot0, "", (Config) null, toolErrorReporter0);
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Name name0 = new Name();
        FunctionNode functionNode0 = new FunctionNode(26, name0);
        astRoot0.addChild(functionNode0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "9Nz,XOh8{*tdm", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        LabeledStatement labeledStatement0 = new LabeledStatement(1);
        astRoot0.addChild(labeledStatement0);
        IRFactory.transformTree(astRoot0, "ZL:gG%", (Config) null, (ErrorReporter) null);
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        astRoot0.addChild(objectLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        Node node0 = IRFactory.transformTree(astRoot0, "com.google.javascript.jscomp.zarsing.IRFactory", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        ObjectProperty objectProperty0 = new ObjectProperty();
        objectLiteral0.addElement(objectProperty0);
        astRoot0.addChild(objectLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        IRFactory.transformTree(astRoot0, "com.google.javascript.jscomp.zarsing.IRFactory", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ObjectLiteral objectLiteral0 = new ObjectLiteral();
        ObjectProperty objectProperty0 = new ObjectProperty();
        objectLiteral0.addElement(objectProperty0);
        astRoot0.addChild(objectLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config config0 = new Config(treeSet0, treeSet0, true, true, true);
        IRFactory.transformTree(astRoot0, "msg.arg.isnt.array", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        RegExpLiteral regExpLiteral0 = new RegExpLiteral(2, 10);
        regExpLiteral0.setFlags("e&#gB~");
        regExpLiteral0.setValue("1q");
        astRoot0.addChild(regExpLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "1q", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        RegExpLiteral regExpLiteral0 = new RegExpLiteral(1, 3);
        regExpLiteral0.setFlags("");
        regExpLiteral0.setValue("");
        astRoot0.addChild(regExpLiteral0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "error reporter", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ReturnStatement returnStatement0 = new ReturnStatement();
        astRoot0.addChild(returnStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "invalid increment target", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ReturnStatement returnStatement0 = new ReturnStatement(4, 120, astRoot0);
        astRoot0.addChild(returnStatement0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "Ol", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SwitchCase switchCase0 = new SwitchCase(7);
        switchCase0.setExpression(astRoot0);
        astRoot0.addChild(switchCase0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "&;3L?w_H08g0o8", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SwitchCase switchCase0 = new SwitchCase(15, 4);
        astRoot0.addChild(switchCase0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration();
        astRoot0.addChild(variableDeclaration0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
        Node node0 = IRFactory.transformTree(astRoot0, "Scope.Var ", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration();
        astRoot0.addChild(variableDeclaration0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        Node node0 = IRFactory.transformTree(astRoot0, "[", config0, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        VariableDeclaration variableDeclaration0 = new VariableDeclaration();
        VariableInitializer variableInitializer0 = new VariableInitializer(18, 116);
        variableDeclaration0.addVariable(variableInitializer0);
        astRoot0.addChild(variableDeclaration0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
        IRFactory.transformTree(astRoot0, "[", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4446() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        IfStatement ifStatement0 = new IfStatement(24, 26);
        InfixExpression infixExpression0 = new InfixExpression(10, ifStatement0, ifStatement0, (-844));
        astRoot0.addChild(infixExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, ";)[wOU~KvQrDfu", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4547() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        CatchClause catchClause0 = new CatchClause(21, 8);
        InfixExpression infixExpression0 = new InfixExpression(11, catchClause0, astRoot0, 1);
        astRoot0.addChild(infixExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4648() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        InfixExpression infixExpression0 = new InfixExpression(13, astRoot0, astRoot0, 4);
        astRoot0.addChild(infixExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        TreeSet<String> treeSet0 = new TreeSet<String>();
        Config config0 = new Config(treeSet0, treeSet0, true, false, true);
        IRFactory.transformTree(astRoot0, "msg.jsdoc.incompat.type", config0, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4749() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SwitchStatement switchStatement0 = new SwitchStatement();
        InfixExpression infixExpression0 = new InfixExpression(14, switchStatement0, switchStatement0, 49);
        astRoot0.addChild(infixExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4850() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        InfixExpression infixExpression0 = new InfixExpression(16, astRoot0, astRoot0, 7);
        astRoot0.addChild(infixExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test4951() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        Block block0 = new Block();
        InfixExpression infixExpression0 = new InfixExpression(17, block0, block0, 11);
        astRoot0.addChild(infixExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        Node node0 = IRFactory.transformTree(astRoot0, "_c_", (Config) null, errorCollector0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test5052() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        SwitchStatement switchStatement0 = new SwitchStatement();
        InfixExpression infixExpression0 = new InfixExpression(20, astRoot0, switchStatement0, 15);
        astRoot0.addChild(infixExpression0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, (String) null, (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test5153() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        FunctionCall functionCall0 = new FunctionCall();
        astRoot0.addChildrenToBack(functionCall0);
        ErrorCollector errorCollector0 = new ErrorCollector();
        IRFactory.transformTree(astRoot0, "_xeK;98I+4", (Config) null, errorCollector0);
    }

    @Test(timeout = 4000)
    public void test5254() throws Throwable {
        AstRoot astRoot0 = new AstRoot();
        ExpressionStatement expressionStatement0 = new ExpressionStatement(astRoot0, true);
        astRoot0.addChild(expressionStatement0);
        IRFactory.transformTree(astRoot0, (String) null, (Config) null, (ErrorReporter) null);
    }
}
