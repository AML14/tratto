/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 04:45:50 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.Denormalize;
import com.google.javascript.jscomp.GroupVariableDeclarations;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.PrintStream;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Stack;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ReferenceCollectingCallback_ESTest extends ReferenceCollectingCallback_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        Node node0 = Node.newNumber(0.0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node0);
        referenceCollectingCallback_Reference0.getAssignedValue();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        Node node0 = Node.newNumber(3690.404424);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, referenceCollectingCallback_BasicBlock0, node0);
        Scope scope0 = referenceCollectingCallback_Reference0.getScope();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        Node node0 = Node.newNumber(3690.404424);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, referenceCollectingCallback_BasicBlock0, node0);
        Node node1 = referenceCollectingCallback_Reference0.getParent();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(118, 118, 118);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isWellDefined();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
        Compiler compiler0 = new Compiler((PrintStream) null);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, syntacticScopeCreator0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node0);
        String string0 = referenceCollectingCallback_Reference0.getSourceName();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock", "com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection");
        Node node0 = compiler0.parse(jSSourceFile0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        Node node1 = referenceCollectingCallback_Reference0.getGrandparent();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        Node node0 = Node.newNumber((-543.4412636442958));
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        boolean boolean0 = referenceCollectingCallback_Reference0.isHoistedFunction();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
        Node node0 = compiler0.parseTestCode("cym.google.javascript.jRcomp.ReferenqeCollectingCallback$ReferenceCollection");
        referenceCollectingCallback0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = referenceCollectingCallback0.getReferenceCollection((Scope.Var) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Node node0 = new Node(556);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock1 = new ReferenceCollectingCallback.BasicBlock(referenceCollectingCallback_BasicBlock0, node0);
        boolean boolean0 = referenceCollectingCallback_BasicBlock1.provablyExecutesBefore(referenceCollectingCallback_BasicBlock0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        Node node0 = new Node(100);
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Node node0 = new Node((-522), (-522), (-522));
        Node node1 = Node.newString(77, ".O[^[1n)sk", 16384, 6);
        Compiler compiler0 = new Compiler();
        Denormalize denormalize0 = new Denormalize(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
        boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node1);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        Compiler compiler0 = new Compiler();
        Denormalize denormalize0 = new Denormalize(compiler0);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Node node0 = new Node(101, 101, 420);
        Compiler compiler0 = new Compiler();
        Denormalize denormalize0 = new Denormalize(compiler0);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, syntacticScopeCreator0);
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(113, 113, 113);
        Denormalize denormalize0 = new Denormalize(compiler0);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(114, (-2497), 114);
        Denormalize denormalize0 = new Denormalize(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(115, (-2497), 115);
        Denormalize denormalize0 = new Denormalize(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Logger logger0 = Tracer.logger;
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        Node node0 = new Node(119);
        boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Node node0 = new Node(108);
        Compiler compiler0 = new Compiler();
        Node node1 = new Node(108, node0);
        Normalize.NormalizeStatements normalize_NormalizeStatements0 = new Normalize.NormalizeStatements(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_NormalizeStatements0, (ScopeCreator) null);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node1);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        Compiler compiler0 = new Compiler();
        Denormalize denormalize0 = new Denormalize(compiler0);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isWellDefined();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(97, 97, 97);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Predicate<Scope.Var> predicate0 = (Predicate<Scope.Var>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, predicate0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isWellDefined();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Node node0 = new Node(105);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        referenceCollectingCallback_ReferenceCollection0.isWellDefined();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isEscaped();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        referenceCollectingCallback_ReferenceCollection0.add((ReferenceCollectingCallback.Reference) null, nodeTraversal0, (Scope.Var) null);
        referenceCollectingCallback_ReferenceCollection0.isEscaped();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(97, 97, 97);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Predicate<Scope.Var> predicate0 = (Predicate<Scope.Var>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, predicate0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isWellDefined();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback((AbstractCompiler) null, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, referenceCollectingCallback0);
        Node node0 = Node.newNumber(1108.583037999897);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference1 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Node node0 = new Node(105);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference1 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback((AbstractCompiler) null, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, referenceCollectingCallback0);
        Node node0 = Node.newNumber(1105.0);
        Node node1 = new Node(17, node0, node0, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isAssignedOnceInLifetime();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Node node0 = new Node(105, (-2462), 70);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Compiler compiler0 = new Compiler();
        Predicate<Scope.Var> predicate0 = (Predicate<Scope.Var>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, predicate0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        Node node1 = new Node(67, node0, node0, node0, 83, 0);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isAssignedOnceInLifetime();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(97, 97, 97);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Predicate<Scope.Var> predicate0 = (Predicate<Scope.Var>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, predicate0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isAssignedOnceInLifetime();
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(97, 97, 97);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isNeverAssigned();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback((AbstractCompiler) null, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, referenceCollectingCallback0);
        Node node0 = Node.newNumber(1105.0);
        Node node1 = new Node(17, node0, node0, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isNeverAssigned();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Node node0 = new Node(105, 105, (-2442));
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Compiler compiler0 = new Compiler();
        Predicate<Scope.Var> predicate0 = (Predicate<Scope.Var>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, predicate0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        Node node1 = new Node(5, node0, node0, node0);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isNeverAssigned();
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.firstReferenceIsAssigningDeclaration();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        Node node0 = Node.newNumber((-1717.8548587145856));
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.firstReferenceIsAssigningDeclaration();
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Node node0 = new Node(1514);
        Node node1 = Node.newString(105, "Gh{\"z", 5, 42);
        Logger logger0 = Logger.getLogger("Gh{\"z");
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        Denormalize denormalize0 = new Denormalize(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, referenceCollectingCallback_BasicBlock0, node1);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.firstReferenceIsAssigningDeclaration();
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSType> stack0 = new Stack<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, syntacticScopeCreator0);
        Node node1 = new Node(0, node0, node0, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        boolean boolean0 = referenceCollectingCallback_Reference0.isDeclaration();
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, (Predicate<Scope.Var>) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        Node node0 = new Node(118);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        Node node1 = new Node((-3430), node0, node0, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node1, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isWellDefined();
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, syntacticScopeCreator0);
        Node node0 = Node.newString(105, "");
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        Node node1 = referenceCollectingCallback_Reference0.getAssignedValue();
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, syntacticScopeCreator0);
        Node node0 = Node.newString(136, "", 136, 136);
        Node node1 = new Node(118, node0, 32, 3);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node1);
        referenceCollectingCallback_Reference0.isLvalue();
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSType> stack0 = new Stack<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, syntacticScopeCreator0);
        Node node1 = new Node(86, node0);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node1);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node1, node1, nodeTraversal0, referenceCollectingCallback_BasicBlock0);
        boolean boolean0 = referenceCollectingCallback_Reference0.isSimpleAssignmentToName();
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSType> stack0 = new Stack<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, syntacticScopeCreator0);
        Node node1 = new Node(86, node0);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node1);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node1, nodeTraversal0, referenceCollectingCallback_BasicBlock0);
        boolean boolean0 = referenceCollectingCallback_Reference0.isSimpleAssignmentToName();
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(118, 118, 118);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Predicate<Scope.Var> predicate0 = (Predicate<Scope.Var>) mock(Predicate.class, new ViolatedAssumptionAnswer());
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, predicate0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        Node node1 = new Node((-10), node0, node0, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node1, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isAssignedOnceInLifetime();
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Compiler compiler0 = new Compiler((PrintStream) null);
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, syntacticScopeCreator0);
        Node node0 = Node.newString(102, "");
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        boolean boolean0 = referenceCollectingCallback_Reference0.isLvalue();
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, syntacticScopeCreator0);
        Node node0 = Node.newString(103, "#'w{vn4H)W}hPr", 103, 103);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node0);
        boolean boolean0 = referenceCollectingCallback_Reference0.isLvalue();
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Compiler compiler0 = new Compiler((PrintStream) null);
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, syntacticScopeCreator0);
        Node node0 = Node.newString(86, "");
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        referenceCollectingCallback_Reference0.isLvalue();
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        Node node0 = new Node(559);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
        boolean boolean0 = referenceCollectingCallback_BasicBlock0.provablyExecutesBefore(referenceCollectingCallback_BasicBlock0);
    }
}
