[
  {
    "signature": "com.google.javascript.jscomp.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal$Callback cb)",
    "name": "com.google.javascript.jscomp.NodeTraversal",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.NodeTraversal$Callback",
          "name": "Callback",
          "isArray": false
        },
        "name": "cb"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "com.google.javascript.jscomp.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal$Callback cb, com.google.javascript.jscomp.ScopeCreator scopeCreator)",
    "name": "com.google.javascript.jscomp.NodeTraversal",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.NodeTraversal$Callback",
          "name": "Callback",
          "isArray": false
        },
        "name": "cb"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.ScopeCreator",
          "name": "ScopeCreator",
          "isArray": false
        },
        "name": "scopeCreator"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "traverse(com.google.javascript.rhino.Node root)",
    "name": "traverse",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "root"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "traverseRoots(com.google.javascript.rhino.Node... roots)",
    "name": "traverseRoots",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Lcom.google.javascript.rhino.Node;",
          "name": "Node[]",
          "isArray": true
        },
        "name": "roots"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "traverseRoots(java.util.List<com.google.javascript.rhino.Node> roots)",
    "name": "traverseRoots",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "roots"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "traverseWithScope(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope s)",
    "name": "traverseWithScope",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "root"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.Scope",
          "name": "Scope",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "traverseAtScope(com.google.javascript.jscomp.Scope s)",
    "name": "traverseAtScope",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.Scope",
          "name": "Scope",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "traverseInnerNode(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent, com.google.javascript.jscomp.Scope refinedScope)",
    "name": "traverseInnerNode",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "parent"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.Scope",
          "name": "Scope",
          "isArray": false
        },
        "name": "refinedScope"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "node"
        },
        "comment": "the node to traverse.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "parent"
        },
        "comment": "the node's parent. parent is node not be null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.jscomp.Scope",
            "name": "Scope",
            "isArray": false
          },
          "name": "refinedScope"
        },
        "comment": "the refined scope of the scope currently at the top of the scope stack or in trivial cases that very scope or null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getCompiler()",
    "name": "getCompiler",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.Compiler",
      "name": "com.google.javascript.jscomp.Compiler",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getLineNumber()",
    "name": "getLineNumber",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getSourceName()",
    "name": "getSourceName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "A string that may be empty, but not null.",
      "kind": "RETURN",
      "condition": "true ? (methodResultID==null) == false"
    },
    "throwsTags": []
  },
  {
    "signature": "getInput()",
    "name": "getInput",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.CompilerInput",
      "name": "com.google.javascript.jscomp.CompilerInput",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getModule()",
    "name": "getModule",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.JSModule",
      "name": "com.google.javascript.jscomp.JSModule",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getCurrentNode()",
    "name": "getCurrentNode",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "traverse(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node root, com.google.javascript.jscomp.NodeTraversal$Callback cb)",
    "name": "traverse",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "root"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.NodeTraversal$Callback",
          "name": "Callback",
          "isArray": false
        },
        "name": "cb"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.rhino.Node> roots, com.google.javascript.jscomp.NodeTraversal$Callback cb)",
    "name": "traverseRoots",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      },
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "roots"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.NodeTraversal$Callback",
          "name": "Callback",
          "isArray": false
        },
        "name": "cb"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal$Callback cb, com.google.javascript.rhino.Node... roots)",
    "name": "traverseRoots",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.NodeTraversal$Callback",
          "name": "Callback",
          "isArray": false
        },
        "name": "cb"
      },
      {
        "type": {
          "qualifiedName": "[Lcom.google.javascript.rhino.Node;",
          "name": "Node[]",
          "isArray": true
        },
        "name": "roots"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getEnclosingFunction()",
    "name": "getEnclosingFunction",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getScope()",
    "name": "getScope",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.Scope",
      "name": "com.google.javascript.jscomp.Scope",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getControlFlowGraph()",
    "name": "getControlFlowGraph",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>",
      "name": "com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getScopeRoot()",
    "name": "getScopeRoot",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "inGlobalScope()",
    "name": "inGlobalScope",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getScopeDepth()",
    "name": "getScopeDepth",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "hasScope()",
    "name": "hasScope",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "report(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments)",
    "name": "report",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.DiagnosticType",
          "name": "DiagnosticType",
          "isArray": false
        },
        "name": "diagnosticType"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "arguments"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getInputId()",
    "name": "getInputId",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.InputId",
      "name": "com.google.javascript.rhino.InputId",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CheckLevel level, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments)",
    "name": "makeError",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.JSError",
      "name": "com.google.javascript.jscomp.JSError",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.CheckLevel",
          "name": "CheckLevel",
          "isArray": false
        },
        "name": "level"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.DiagnosticType",
          "name": "DiagnosticType",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "arguments"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "Determines the line and char position within the source file name.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.jscomp.DiagnosticType",
            "name": "DiagnosticType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "The DiagnosticType.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.String;",
            "name": "String[]",
            "isArray": true
          },
          "name": "arguments"
        },
        "comment": "Arguments to be incorporated into the message.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments)",
    "name": "makeError",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeTraversal",
      "name": "NodeTraversal",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeTraversal",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.JSError",
      "name": "com.google.javascript.jscomp.JSError",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.DiagnosticType",
          "name": "DiagnosticType",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "arguments"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "Determines the line and char position within the source file name.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.jscomp.DiagnosticType",
            "name": "DiagnosticType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "The DiagnosticType.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.String;",
            "name": "String[]",
            "isArray": true
          },
          "name": "arguments"
        },
        "comment": "Arguments to be incorporated into the message.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  }
]