/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 07:12:14 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCommandLineRunner;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PhaseOptimizer;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.Tracer;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.util.LinkedList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AbstractCommandLineRunner_ESTest extends AbstractCommandLineRunner_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Compiler compiler0 = commandLineRunner0.createCompiler();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
        JSModule jSModule0 = new JSModule("");
        List<String> list0 = jSModule0.getProvides();
        AbstractCommandLineRunner.createDefineReplacements(list0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Compiler compiler0 = commandLineRunner0.getCompiler();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner.main(stringArray0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        commandLineRunner0.setRunOptions(compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.addLast("flFa76rE:'%%");
        AbstractCommandLineRunner.createJsModules(linkedList0, linkedList0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setSourceMapDetailLevel(sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        AbstractCommandLineRunner.RunTimeStats abstractCommandLineRunner_RunTimeStats0 = commandLineRunner0.new RunTimeStats();
        commandLineRunner0.exit(abstractCommandLineRunner_RunTimeStats0, (Throwable) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        AbstractCommandLineRunner.createJsModules((List<String>) null, (List<String>) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        AbstractCommandLineRunner.createJsModules(linkedList0, linkedList0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.addLast("Expected module wrapperCto have <name>:<wrapper> fdrmat: ");
        AbstractCommandLineRunner.createJsModules(linkedList0, (List<String>) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        AbstractCommandLineRunner.createJsModules(list0, list0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.addFirst("Expected module wrapperCto have <name>:<wrapper> format: ");
        AbstractCommandLineRunner.createJsModules(linkedList0, linkedList0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JSModule[] jSModuleArray0 = new JSModule[0];
        AbstractCommandLineRunner.parseModuleWrappers((List<String>) null, jSModuleArray0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        String[] stringArray0 = new String[3];
        stringArray0[0] = "^2[L9";
        stringArray0[1] = "";
        stringArray0[2] = "lWwOf%hEJ=N7]!";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Result result0 = compiler0.getResult();
        JSModule[] jSModuleArray0 = new JSModule[0];
        int int0 = commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Result result0 = compiler0.getResult();
        JSModule[] jSModuleArray0 = new JSModule[1];
        commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.addLast("Expected module wrapperCto have <name>:<wrapper> fdrmat: ");
        JSModule[] jSModuleArray0 = new JSModule[0];
        AbstractCommandLineRunner.parseModuleWrappers(linkedList0, jSModuleArray0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
        JSModule[] jSModuleArray0 = new JSModule[0];
        AbstractCommandLineRunner.parseModuleWrappers(list0, jSModuleArray0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        PipedWriter pipedWriter0 = new PipedWriter();
        Compiler compiler0 = new Compiler();
        AbstractCommandLineRunner.writeOutput(pipedWriter0, compiler0, "/dev/null", "N", "/dev/null");
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Logger logger0 = Tracer.logger;
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        AbstractCommandLineRunner.writeOutput(stringBuffer0, compiler0, "", "arg cannot be null", "l");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Logger logger0 = Tracer.logger;
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        AbstractCommandLineRunner.writeOutput(stringBuffer0, compiler0, "", "arg cannot be null", "l");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        AbstractCommandLineRunner.writeOutput(stringWriter0, (Compiler) null, "(WGx6OFt*fX5h&", "", "");
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Logger logger0 = Logger.getLogger("");
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        JSModule[] jSModuleArray0 = new JSModule[3];
        int int0 = commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        String[] stringArray0 = new String[0];
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Result result0 = compiler0.getResult();
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        commandLineRunner0.processResults(result0, (JSModule[]) null, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        String string0 = "@?Rci3\\uD;yo#tLR's";
        JSModule jSModule0 = new JSModule(string0);
        String[] stringArray0 = new String[6];
        stringArray0[0] = string0;
        stringArray0[1] = "required \"{0\" namesace not provided yet";
        stringArray0[2] = "required \"{0\" namesace not provided yet";
        stringArray0[3] = string0;
        stringArray0[4] = "required \"{0\" namesace not provided yet";
        stringArray0[5] = "required \"{0\" namesace not provided yet";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        String string1 = commandLineRunner0.expandManifest(jSModule0);
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
        AbstractCommandLineRunner.createDefineReplacements(list0, (CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        String string0 = "@?Rci3\\uD;yo#tLR's";
        JSModule jSModule0 = new JSModule(string0);
        JSModule[] jSModuleArray0 = new JSModule[8];
        jSModuleArray0[0] = jSModule0;
        jSModuleArray0[1] = jSModule0;
        jSModuleArray0[2] = jSModule0;
        jSModuleArray0[3] = jSModule0;
        JSModule jSModule1 = new JSModule(string0);
        jSModuleArray0[4] = jSModule1;
        jSModuleArray0[5] = jSModule0;
        jSModuleArray0[6] = jSModule0;
        jSModuleArray0[7] = jSModule0;
        JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
        String[] stringArray0 = new String[6];
        stringArray0[0] = string0;
        stringArray0[1] = "required \"{0\" namesace not provided yet";
        stringArray0[2] = "required \"{0\" namesace not provided yet";
        stringArray0[3] = string0;
        stringArray0[4] = "required \"{0\" namesace not provided yet";
        stringArray0[5] = "required \"{0\" namesace not provided yet";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        commandLineRunner0.printModuleGraphManifestTo(jSModuleGraph0, stringWriter0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        String[] stringArray0 = new String[0];
        StringWriter stringWriter0 = new StringWriter();
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        JSModule[] jSModuleArray0 = new JSModule[2];
        JSModule jSModule0 = new JSModule("27 9@{(X@$ipwG'");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("27 9@{(X@$ipwG'");
        jSModule0.addFirst(jSSourceFile0);
        jSModuleArray0[0] = jSModule0;
        jSModuleArray0[1] = jSModule0;
        JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
        commandLineRunner0.printModuleGraphManifestTo(jSModuleGraph0, stringWriter0);
        stringWriter0.toString();
    }
}
