/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 23:08:23 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CreateSyntheticBlocks;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroupWarningsGuard;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.ProcessDefines;
import com.google.javascript.jscomp.ShowByPathWarningsGuard;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.rhino.Node;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CompilerOptions_ESTest extends CompilerOptions_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRemoveAbstractMethods(true);
    }

    @Test(timeout = 4000)
    public void test0110() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getWarningsGuard();
    }

    @Test(timeout = 4000)
    public void test0220() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setNameAnonymousFunctionsOnly(false);
    }

    @Test(timeout = 4000)
    public void test0330() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        compilerOptions0.setReplaceStringsConfiguration("com.google.common.base.CharMatcher$10", list0);
    }

    @Test(timeout = 4000)
    public void test0440() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setSummaryDetailLevel(45);
    }

    @Test(timeout = 4000)
    public void test0550() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test0651() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setLooseTypes(true);
    }

    @Test(timeout = 4000)
    public void test0761() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setProcessObjectPropertyString(false);
    }

    @Test(timeout = 4000)
    public void test0871() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test0982() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setChainCalls(true);
    }

    @Test(timeout = 4000)
    public void test1092() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableExternExports(true);
        compilerOptions0.isExternExportsEnabled();
    }

    @Test(timeout = 4000)
    public void test1193() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRewriteNewDateGoogNow(false);
    }

    @Test(timeout = 4000)
    public void test12103() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCodingConvention((CodingConvention) null);
    }

    @Test(timeout = 4000)
    public void test13113() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral(" f", "5g,eCF");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test13120() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToStringLiteral(" f", "5g,eCF");
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test14124() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test15134() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.enableRuntimeTypeCheck("");
    }

    @Test(timeout = 4000)
    public void test16144() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    }

    @Test(timeout = 4000)
    public void test17155() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("// Input %num%", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test17158() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("// Input %num%", false);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test18163() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllCompilerPasses();
    }

    @Test(timeout = 4000)
    public void test19173() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.disableRuntimeTypeCheck();
    }

    @Test(timeout = 4000)
    public void test20183() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    }

    @Test(timeout = 4000)
    public void test21193() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setManageClosureDependencies(false);
    }

    @Test(timeout = 4000)
    public void test22203() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    }

    @Test(timeout = 4000)
    public void test23214() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.getCodingConvention();
    }

    @Test(timeout = 4000)
    public void test24224() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    }

    @Test(timeout = 4000)
    public void test25234() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    }

    @Test(timeout = 4000)
    public void test26244() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test26246() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToDoubleLiteral("", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test27255() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("DblH#", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test27259() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToBooleanLiteral("DblH#", true);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test28264() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("FAST", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    }

    @Test(timeout = 4000)
    public void test28273() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setDefineToNumberLiteral("FAST", 45);
        Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test29275() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test30286() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard("4thij4z(P1nbP}ph");
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test31297() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[3];
        DiagnosticGroup diagnosticGroup0 = TypeCheck.ALL_DIAGNOSTICS;
        diagnosticGroupArray0[0] = diagnosticGroup0;
        DiagnosticType diagnosticType0 = CreateSyntheticBlocks.UNMATCHED_END_MARKER;
        diagnosticType0.format(diagnosticGroupArray0);
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[5];
        DiagnosticType diagnosticType1 = TypeCheck.INEXISTENT_PROPERTY;
        diagnosticTypeArray0[2] = diagnosticType1;
        DiagnosticGroup diagnosticGroup1 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.brokenClosureRequiresLevel);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test32298() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test33309() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
        String[] stringArray0 = new String[3];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test34320() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
        diagnosticTypeArray0[0] = diagnosticType0;
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
        DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
        compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
        boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test35331() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        String[] stringArray0 = new String[0];
        ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
        compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    }

    @Test(timeout = 4000)
    public void test36341() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = compilerOptions0.tracer.isOn();
    }

    @Test(timeout = 4000)
    public void test37352() throws Throwable {
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
        boolean boolean0 = compilerOptions_TracerMode0.isOn();
    }
}
