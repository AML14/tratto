[
  {
    "signature": "getImpureBooleanValue(com.google.javascript.rhino.Node n)",
    "name": "getImpureBooleanValue",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.jstype.TernaryValue",
      "name": "com.google.javascript.rhino.jstype.TernaryValue",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getPureBooleanValue(com.google.javascript.rhino.Node n)",
    "name": "getPureBooleanValue",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.jstype.TernaryValue",
      "name": "com.google.javascript.rhino.jstype.TernaryValue",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getStringValue(com.google.javascript.rhino.Node n)",
    "name": "getStringValue",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getArrayElementStringValue(com.google.javascript.rhino.Node n)",
    "name": "getArrayElementStringValue",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "A node that is a member of an Array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The string representation.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "arrayToString(com.google.javascript.rhino.Node literal)",
    "name": "arrayToString",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "literal"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getNumberValue(com.google.javascript.rhino.Node n)",
    "name": "getNumberValue",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Double",
      "name": "java.lang.Double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getStringNumberValue(java.lang.String rawJsString)",
    "name": "getStringNumberValue",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Double",
      "name": "java.lang.Double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "rawJsString"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "trimJsWhiteSpace(java.lang.String s)",
    "name": "trimJsWhiteSpace",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isStrWhiteSpaceChar(int c)",
    "name": "isStrWhiteSpaceChar",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.jstype.TernaryValue",
      "name": "com.google.javascript.rhino.jstype.TernaryValue",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getFunctionName(com.google.javascript.rhino.Node n)",
    "name": "getFunctionName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "a node whose type is Token#FUNCTION.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the function's name, or null if function has no name.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getNearestFunctionName(com.google.javascript.rhino.Node n)",
    "name": "getNearestFunctionName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "a node whose type is Token#FUNCTION.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the function's name, or null if function has no name.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isImmutableValue(com.google.javascript.rhino.Node n)",
    "name": "isImmutableValue",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions)",
    "name": "isLiteralValue",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "includeFunctions"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "includeFunctions"
        },
        "comment": "If true all function expressions . includeFunctions is treated as literals.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines)",
    "name": "isValidDefineValue",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "val"
      },
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "defines"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "val"
        },
        "comment": "The value being assigned.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Set",
            "name": "Set",
            "isArray": false
          },
          "name": "defines"
        },
        "comment": "The list of names of existing defines.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isEmptyBlock(com.google.javascript.rhino.Node block)",
    "name": "isEmptyBlock",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "block"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "block"
        },
        "comment": "The node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "isSimpleOperator(com.google.javascript.rhino.Node n)",
    "name": "isSimpleOperator",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isSimpleOperatorType(int type)",
    "name": "isSimpleOperatorType",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newExpr(com.google.javascript.rhino.Node child)",
    "name": "newExpr",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "child"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "child"
        },
        "comment": "The expression itself.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Newly created EXPR node with the child as subexpression.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mayEffectMutableState(com.google.javascript.rhino.Node n)",
    "name": "mayEffectMutableState",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler)",
    "name": "mayEffectMutableState",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "mayHaveSideEffects(com.google.javascript.rhino.Node n)",
    "name": "mayHaveSideEffects",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler)",
    "name": "mayHaveSideEffects",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode)",
    "name": "constructorCallHasSideEffects",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "callNode"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "callNode"
        },
        "comment": "- construtor call node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler)",
    "name": "constructorCallHasSideEffects",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "callNode"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "functionCallHasSideEffects(com.google.javascript.rhino.Node callNode)",
    "name": "functionCallHasSideEffects",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "callNode"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "callNode"
        },
        "comment": "- function call node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler)",
    "name": "functionCallHasSideEffects",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "callNode"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler",
        "nullable": true
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "callNode"
        },
        "comment": "The call node to inspected.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
            "name": "AbstractCompiler",
            "isArray": false
          },
          "name": "compiler",
          "nullable": true
        },
        "comment": "A compiler object to provide program state changing context information. Can be null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "callHasLocalResult(com.google.javascript.rhino.Node n)",
    "name": "callHasLocalResult",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the call has a local result., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newHasLocalResult(com.google.javascript.rhino.Node n)",
    "name": "newHasLocalResult",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the new has a local result., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n)",
    "name": "nodeTypeMayHaveSideEffects",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler)",
    "name": "nodeTypeMayHaveSideEffects",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "canBeSideEffected(com.google.javascript.rhino.Node n)",
    "name": "canBeSideEffected",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the tree can be affected by side-effects or has side-effects., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants)",
    "name": "canBeSideEffected",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "java.util.Set",
          "name": "Set",
          "isArray": false
        },
        "name": "knownConstants"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Set",
            "name": "Set",
            "isArray": false
          },
          "name": "knownConstants"
        },
        "comment": "A set of names known to be constant value at node 'n' (such as locals that are last written before n can execute).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Whether the tree can be affected by side-effects or has side-effects., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "precedence(int type)",
    "name": "precedence",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "valueCheck(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p)",
    "name": "valueCheck",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isNumericResult(com.google.javascript.rhino.Node n)",
    "name": "isNumericResult",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isNumericResultHelper(com.google.javascript.rhino.Node n)",
    "name": "isNumericResultHelper",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isBooleanResult(com.google.javascript.rhino.Node n)",
    "name": "isBooleanResult",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the result of node evaluation is always a boolean., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isBooleanResultHelper(com.google.javascript.rhino.Node n)",
    "name": "isBooleanResultHelper",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isUndefined(com.google.javascript.rhino.Node n)",
    "name": "isUndefined",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isNull(com.google.javascript.rhino.Node n)",
    "name": "isNull",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isNullOrUndefined(com.google.javascript.rhino.Node n)",
    "name": "isNullOrUndefined",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "mayBeString(com.google.javascript.rhino.Node n)",
    "name": "mayBeString",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "mayBeString(com.google.javascript.rhino.Node n, boolean recurse)",
    "name": "mayBeString",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "recurse"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "mayBeStringHelper(com.google.javascript.rhino.Node n)",
    "name": "mayBeStringHelper",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isAssociative(int type)",
    "name": "isAssociative",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isCommutative(int type)",
    "name": "isCommutative",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isAssignmentOp(com.google.javascript.rhino.Node n)",
    "name": "isAssignmentOp",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getOpFromAssignmentOp(com.google.javascript.rhino.Node n)",
    "name": "getOpFromAssignmentOp",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isExpressionNode(com.google.javascript.rhino.Node n)",
    "name": "isExpressionNode",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "containsFunction(com.google.javascript.rhino.Node n)",
    "name": "containsFunction",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "referencesThis(com.google.javascript.rhino.Node n)",
    "name": "referencesThis",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isGet(com.google.javascript.rhino.Node n)",
    "name": "isGet",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isGetProp(com.google.javascript.rhino.Node n)",
    "name": "isGetProp",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isName(com.google.javascript.rhino.Node n)",
    "name": "isName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isNew(com.google.javascript.rhino.Node n)",
    "name": "isNew",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isVar(com.google.javascript.rhino.Node n)",
    "name": "isVar",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isVarDeclaration(com.google.javascript.rhino.Node n)",
    "name": "isVarDeclaration",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "The node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if n is NAME and parent is VAR.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getAssignedValue(com.google.javascript.rhino.Node n)",
    "name": "getAssignedValue",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "The value node representing the new value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isString(com.google.javascript.rhino.Node n)",
    "name": "isString",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isExprAssign(com.google.javascript.rhino.Node n)",
    "name": "isExprAssign",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "The node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if n is EXPR_RESULT and n's first child is ASSIGN.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isAssign(com.google.javascript.rhino.Node n)",
    "name": "isAssign",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isExprCall(com.google.javascript.rhino.Node n)",
    "name": "isExprCall",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "The node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if n is EXPR_RESULT and n's first child is CALL.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isForIn(com.google.javascript.rhino.Node n)",
    "name": "isForIn",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the node represents a FOR-IN loop., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isLoopStructure(com.google.javascript.rhino.Node n)",
    "name": "isLoopStructure",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getLoopCodeBlock(com.google.javascript.rhino.Node n)",
    "name": "getLoopCodeBlock",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "The node to inspect.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "If the node, is a FOR, WHILE, or DO, node returns the node for the code BLOCK, null otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isWithinLoop(com.google.javascript.rhino.Node n)",
    "name": "isWithinLoop",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the specified node has a loop parent that is within the current scope., false otherwise",
      "kind": "RETURN",
      "condition": "true ? methodResultID==false"
    },
    "throwsTags": []
  },
  {
    "signature": "isControlStructure(com.google.javascript.rhino.Node n)",
    "name": "isControlStructure",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n)",
    "name": "isControlStructureCodeBlock",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "parent"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getConditionExpression(com.google.javascript.rhino.Node n)",
    "name": "getConditionExpression",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "a node with an outgoing conditional CFG edge.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the condition node or null if the condition is not obviously a node.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isStatementBlock(com.google.javascript.rhino.Node n)",
    "name": "isStatementBlock",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the node is of a type that contain other statements., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isStatement(com.google.javascript.rhino.Node n)",
    "name": "isStatement",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the node is used as a statement., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isStatementParent(com.google.javascript.rhino.Node parent)",
    "name": "isStatementParent",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "parent"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isSwitchCase(com.google.javascript.rhino.Node n)",
    "name": "isSwitchCase",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isReferenceName(com.google.javascript.rhino.Node n)",
    "name": "isReferenceName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the name is a reference to a variable, function or function parameter (not a label or a empty function expression name)., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isLabelName(com.google.javascript.rhino.Node n)",
    "name": "isLabelName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the node is a label name., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child)",
    "name": "isTryFinallyNode",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "parent"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "child"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isTryCatchNodeContainer(com.google.javascript.rhino.Node n)",
    "name": "isTryCatchNodeContainer",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node)",
    "name": "removeChild",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "parent"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "maybeAddFinally(com.google.javascript.rhino.Node tryNode)",
    "name": "maybeAddFinally",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "tryNode"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "tryMergeBlock(com.google.javascript.rhino.Node block)",
    "name": "tryMergeBlock",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "block"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the block was removed., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isCall(com.google.javascript.rhino.Node n)",
    "name": "isCall",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isCallOrNew(com.google.javascript.rhino.Node node)",
    "name": "isCallOrNew",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "node"
        },
        "comment": "A node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Whether the call is a NEW or CALL node., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isFunction(com.google.javascript.rhino.Node n)",
    "name": "isFunction",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getFunctionBody(com.google.javascript.rhino.Node fn)",
    "name": "getFunctionBody",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "fn"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isThis(com.google.javascript.rhino.Node node)",
    "name": "isThis",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isArrayLiteral(com.google.javascript.rhino.Node node)",
    "name": "isArrayLiteral",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "containsCall(com.google.javascript.rhino.Node n)",
    "name": "containsCall",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isFunctionDeclaration(com.google.javascript.rhino.Node n)",
    "name": "isFunctionDeclaration",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n)",
    "name": "isHoistedFunctionDeclaration",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isFunctionExpression(com.google.javascript.rhino.Node n)",
    "name": "isFunctionExpression",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "A node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Whether n is an function used within an expression., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEmptyFunctionExpression(com.google.javascript.rhino.Node node)",
    "name": "isEmptyFunctionExpression",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "node"
        },
        "comment": "a node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the given node is a function expression that is empty., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isVarArgsFunction(com.google.javascript.rhino.Node function)",
    "name": "isVarArgsFunction",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName)",
    "name": "isObjectCallMethod",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "callNode"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "methodName"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether node is a call to methodName. a.f(...) a['f'](...)., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isFunctionObjectCall(com.google.javascript.rhino.Node callNode)",
    "name": "isFunctionObjectCall",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "callNode"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the callNode represents an expression in the form of: x.call(...) x['call'](...)., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isFunctionObjectApply(com.google.javascript.rhino.Node callNode)",
    "name": "isFunctionObjectApply",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "callNode"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the callNode represents an expression in the form of: x.apply(...) x['apply'](...)., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isFunctionObjectCallOrApply(com.google.javascript.rhino.Node callNode)",
    "name": "isFunctionObjectCallOrApply",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "callNode"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the callNode represents an expression in the form of: x.apply(...) x['apply'](...) or x.call(...) x['call'](...)., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isSimpleFunctionObjectCall(com.google.javascript.rhino.Node callNode)",
    "name": "isSimpleFunctionObjectCall",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "callNode"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the callNode represents an expression in the form of: x.call(...) x['call'](...) where x is a NAME node., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent)",
    "name": "isLhs",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "parent"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "The node.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "parent"
        },
        "comment": "Parent of the node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if n is the left hand of an assign.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent)",
    "name": "isObjectLitKey",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "parent"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "node"
        },
        "comment": "A node.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "parent"
        },
        "comment": "The node's parent.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getObjectLitKeyName(com.google.javascript.rhino.Node key)",
    "name": "getObjectLitKeyName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "key"
        },
        "comment": "A node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType)",
    "name": "getObjectLitKeyTypeFromValueType",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.jstype.JSType",
      "name": "com.google.javascript.rhino.jstype.JSType",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.jstype.JSType",
          "name": "JSType",
          "isArray": false
        },
        "name": "valueType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "key"
        },
        "comment": "A OBJECTLIT key node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The type expected when using the key.",
      "kind": "RETURN",
      "condition": "true ? methodResultID.equals(args[1])"
    },
    "throwsTags": []
  },
  {
    "signature": "isGetOrSetKey(com.google.javascript.rhino.Node node)",
    "name": "isGetOrSetKey",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "node"
        },
        "comment": "A node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "opToStr(int operator)",
    "name": "opToStr",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "operator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "operator"
        },
        "comment": "the operator's token value to convert.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the string representation or null if the token value is not an operator.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "opToStrNoFail(int operator)",
    "name": "opToStrNoFail",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "operator"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "operator"
        },
        "comment": "the operator's token value to convert.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the string representation.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.Error",
          "name": "Error",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the token value is not an operator.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred)",
    "name": "containsType",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "traverseChildrenPred"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "true if n or any of its children are of the specified type.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "containsType(com.google.javascript.rhino.Node node, int type)",
    "name": "containsType",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "true if n or any of its children are of the specified type.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch)",
    "name": "redeclareVarsInsideBranch",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "branch"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination)",
    "name": "copyNameAnnotations",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "destination"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "source"
        },
        "comment": ".",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "destination"
        },
        "comment": ".",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "newFunctionNode(java.lang.String name, java.util.List<com.google.javascript.rhino.Node> params, com.google.javascript.rhino.Node body, int lineno, int charno)",
    "name": "newFunctionNode",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "params"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "body"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lineno"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "charno"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, int lineno, int charno)",
    "name": "newQualifiedNameNode",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.CodingConvention",
          "name": "CodingConvention",
          "isArray": false
        },
        "name": "convention"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lineno"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "charno"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "A qualified name (e.g. \"foo\" or \"foo.bar.baz\").",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "lineno"
        },
        "comment": "The source line offset.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "charno"
        },
        "comment": "The source character offset from start of the line.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A NAME or GETPROP node.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName)",
    "name": "newQualifiedNameNode",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.CodingConvention",
          "name": "CodingConvention",
          "isArray": false
        },
        "name": "convention"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "basisNode"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "originalName"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "A qualified name (e.g. \"foo\" or \"foo.bar.baz\").",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "basisNode"
        },
        "comment": "The node that represents the name as currently found in the AST.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "originalName"
        },
        "comment": "The original name of the item being represented by the NAME node. Used for debugging information.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A NAME or GETPROP node.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getRootOfQualifiedName(com.google.javascript.rhino.Node qName)",
    "name": "getRootOfQualifiedName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "qName"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName)",
    "name": "setDebugInformation",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "basisNode"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "originalName"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "node"
        },
        "comment": "The node on which to set the debug information.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "basisNode"
        },
        "comment": "The basis node from which to copy the source file info.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "originalName"
        },
        "comment": "The original name of the node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode)",
    "name": "newName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.CodingConvention",
          "name": "CodingConvention",
          "isArray": false
        },
        "name": "convention"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "basisNode"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "The name for the new NAME node.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "basisNode"
        },
        "comment": "The node that represents the name as currently found in the AST.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The node created.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName)",
    "name": "newName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.CodingConvention",
          "name": "CodingConvention",
          "isArray": false
        },
        "name": "convention"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "basisNode"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "originalName"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "name"
        },
        "comment": "The name for the new NAME node.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "basisNode"
        },
        "comment": "The node that represents the name as currently found in the AST.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "originalName"
        },
        "comment": "The original name of the item being represented by the NAME node. Used for debugging information.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The node created.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isLatin(java.lang.String s)",
    "name": "isLatin",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isValidPropertyName(java.lang.String name)",
    "name": "isValidPropertyName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getVarsDeclaredInBranch(com.google.javascript.rhino.Node root)",
    "name": "getVarsDeclaredInBranch",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<com.google.javascript.rhino.Node>",
      "name": "java.util.Collection<com.google.javascript.rhino.Node>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "root"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n)",
    "name": "isPrototypePropertyDeclaration",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "true if the node an assignment to a prototype property of some constructor.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isPrototypeProperty(com.google.javascript.rhino.Node n)",
    "name": "isPrototypeProperty",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getPrototypeClassName(com.google.javascript.rhino.Node qName)",
    "name": "getPrototypeClassName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "qName"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "The class name part of a qualified prototype name.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPrototypePropertyName(com.google.javascript.rhino.Node qName)",
    "name": "getPrototypePropertyName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "qName"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "The string property name part of a qualified prototype name.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode)",
    "name": "newUndefinedNode",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "srcReferenceNode"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "newVarNode(java.lang.String name, com.google.javascript.rhino.Node value)",
    "name": "newVarNode",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred)",
    "name": "getNodeTypeReferenceCount",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "traverseChildrenPred"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred)",
    "name": "isNameReferenced",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "traverseChildrenPred"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name)",
    "name": "isNameReferenced",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name)",
    "name": "getNameReferenceCount",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred)",
    "name": "has",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "pred"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "traverseChildrenPred"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the predicate is true for the node or any of its children., false otherwise",
      "kind": "RETURN",
      "condition": "true ? methodResultID==true"
    },
    "throwsTags": []
  },
  {
    "signature": "getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred)",
    "name": "getCount",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "pred"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "traverseChildrenPred"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "The number of times the the predicate is true for the node or any of its children.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil$Visitor vistor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred)",
    "name": "visitPreOrder",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.NodeUtil$Visitor",
          "name": "Visitor",
          "isArray": false
        },
        "name": "vistor"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "traverseChildrenPred"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil$Visitor vistor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred)",
    "name": "visitPostOrder",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.NodeUtil$Visitor",
          "name": "Visitor",
          "isArray": false
        },
        "name": "vistor"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "traverseChildrenPred"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "hasFinally(com.google.javascript.rhino.Node n)",
    "name": "hasFinally",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether a TRY node has a finally block., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getCatchBlock(com.google.javascript.rhino.Node n)",
    "name": "getCatchBlock",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "The BLOCK node containing the CATCH node (if any) of a TRY.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "hasCatchHandler(com.google.javascript.rhino.Node n)",
    "name": "hasCatchHandler",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether BLOCK (from a TRY node) contains a CATCH., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getFnParameters(com.google.javascript.rhino.Node fnNode)",
    "name": "getFnParameters",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "fnNode"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "fnNode"
        },
        "comment": "The function.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The Node containing the Function parameters.",
      "kind": "RETURN",
      "condition": "true ? methodResultID.equals(args[0])"
    },
    "throwsTags": []
  },
  {
    "signature": "isConstantName(com.google.javascript.rhino.Node node)",
    "name": "isConstantName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "node"
        },
        "comment": "A NAME or STRING node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if the variable is constant.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent)",
    "name": "isConstantByConvention",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.CodingConvention",
          "name": "CodingConvention",
          "isArray": false
        },
        "name": "convention"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "node"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "parent"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getInfoForNameNode(com.google.javascript.rhino.Node nameNode)",
    "name": "getInfoForNameNode",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.JSDocInfo",
      "name": "com.google.javascript.rhino.JSDocInfo",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "nameNode"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "nameNode"
        },
        "comment": "A name node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The JSDocInfo for the name node.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getFunctionInfo(com.google.javascript.rhino.Node n)",
    "name": "getFunctionInfo",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.JSDocInfo",
      "name": "com.google.javascript.rhino.JSDocInfo",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getSourceName(com.google.javascript.rhino.Node n)",
    "name": "getSourceName",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "n"
        },
        "comment": "The node.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The source name property on the node or its ancestors.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters)",
    "name": "newCallNode",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "callTarget"
      },
      {
        "type": {
          "qualifiedName": "[Lcom.google.javascript.rhino.Node;",
          "name": "Node[]",
          "isArray": true
        },
        "name": "parameters"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "evaluatesToLocalValue(com.google.javascript.rhino.Node value)",
    "name": "evaluatesToLocalValue",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "paramTags": [],
    "returnTag": {
      "comment": "Whether the node is known to be a value that is not referenced elsewhere., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals)",
    "name": "evaluatesToLocalValue",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "value"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "locals"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.common.base.Predicate",
            "name": "Predicate",
            "isArray": false
          },
          "name": "locals"
        },
        "comment": "A predicate to apply to unknown local values.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Whether the node is known to be a value that is not a reference outside the expression scope., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getArgumentForFunction(com.google.javascript.rhino.Node function, int index)",
    "name": "getArgumentForFunction",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "function"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index)",
    "name": "getArgumentForCallOrNew",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.NodeUtil",
      "name": "NodeUtil",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.NodeUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "call"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  }
]