/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 03 22:42:10 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ConstCheck;
import com.google.javascript.jscomp.CrossModuleMethodMotion;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.InlineProperties;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSource((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSource();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Node node0 = Node.newNumber((-974.8539));
        compiler0.toSource(compiler_CodeBuilder0, (-2559), node0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        File file0 = MockFile.createTempFile("goog.isArray", "goog.isArray");
        MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        compiler0.toSourceArray((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
        JSModule[] jSModuleArray0 = new JSModule[3];
        compiler0.init(jSSourceFileArray0, jSModuleArray0, (CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.resetUniqueNameId();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
        compiler0.parseInputs();
        MockFile mockFile0 = new MockFile("unexpected: ", "Bad dependency: {0} -> {1}. Modules must be listed in dependency order.");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addNewScript(jsAst0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        Level level0 = Level.SEVERE;
        Compiler.setLoggingLevel(level0);
        level0.getName();
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        compiler0.getCssRenamingMap();
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        compiler0.setState(compiler_IntermediateState0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.disableThreads();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("Duplicte input {0}", "Duplicte input {0}");
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.rebuildInputsFromModules();
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.precheck();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test01518() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.precheck();
    }

    @Test(timeout = 4000)
    public void test01619() throws Throwable {
        String string0 = Compiler.getReleaseDate();
    }

    @Test(timeout = 4000)
    public void test01720() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.computeCFG();
    }

    @Test(timeout = 4000)
    public void test01821() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getPropertyMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test01922() throws Throwable {
        String string0 = Compiler.getReleaseVersion();
    }

    @Test(timeout = 4000)
    public void test02023() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.processDefines();
    }

    @Test(timeout = 4000)
    public void test02124() throws Throwable {
        Compiler.runCallableWithLargeStack((Callable<Object>) null);
    }

    @Test(timeout = 4000)
    public void test02225() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.languageMode();
    }

    @Test(timeout = 4000)
    public void test02326() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setCssRenamingMap((CssRenamingMap) null);
    }

    @Test(timeout = 4000)
    public void test02427() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02528() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getVariableMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02629() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getFunctionalInformationMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02730() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parse();
    }

    @Test(timeout = 4000)
    public void test02831() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("!NjVE\":o:'^od||M");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
        compiler0.ensureLibraryInjected((String) null);
    }

    @Test(timeout = 4000)
    public void test02932() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.recordFunctionInformation();
    }

    @Test(timeout = 4000)
    public void test03033() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, (CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test03134() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getModuleGraph();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03235() throws Throwable {
        Logger logger0 = Tracer.logger;
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.getSourceMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03336() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test03437() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        compiler0.getInputsForTesting();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03538() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        JSModule[] jSModuleArray0 = new JSModule[0];
        compiler0.compile((JSSourceFile[]) null, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test03639() throws Throwable {
        Compiler compiler0 = new Compiler();
        CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = compiler0.recentChange;
        compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03740() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getInputsById();
    }

    @Test(timeout = 4000)
    public void test03841() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setHasRegExpGlobalReferences(false);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03942() throws Throwable {
        Compiler compiler0 = new Compiler();
        MockFile mockFile0 = new MockFile("2L).R<U@:8[PYeE<]V");
        Charset charset0 = Charset.defaultCharset();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, charset0);
        JSModule[] jSModuleArray0 = new JSModule[1];
        compiler0.compile(jSSourceFile0, jSModuleArray0, (CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test04043() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getMessages();
    }

    @Test(timeout = 4000)
    public void test04144() throws Throwable {
        Logger logger0 = Logger.getAnonymousLogger();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.getExternsForTesting();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test04245() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.removeTryCatchFinally();
    }

    @Test(timeout = 4000)
    public void test04346() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getTopScope();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test04447() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
    }

    @Test(timeout = 4000)
    public void test04548() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        String string0 = compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test04649() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
    }

    @Test(timeout = 4000)
    public void test04750() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
    }

    @Test(timeout = 4000)
    public void test04851() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test04952() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("GGco'%");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        compiler0.toSource((Node) null);
    }

    @Test(timeout = 4000)
    public void test05053() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05054() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setCheckSymbols(true);
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05155() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compilerOptions0.sourceMapOutputPath = "goog.tweak.registerBoolean";
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05156() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compilerOptions0.sourceMapOutputPath = "goog.tweak.registerBoolean";
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05257() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("variables, functions, and arguments cannot be deleted in ES5 strict mode");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05258() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("variables, functions, and arguments cannot be deleted in ES5 strict mode");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05359() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05460() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05561() throws Throwable {
        Callable<ConstCheck> callable0 = (Callable<ConstCheck>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        ConstCheck constCheck0 = Compiler.runCallable(callable0, false, false);
    }

    @Test(timeout = 4000)
    public void test05662() throws Throwable {
        Callable<CrossModuleMethodMotion> callable0 = (Callable<CrossModuleMethodMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        CrossModuleMethodMotion crossModuleMethodMotion0 = Compiler.runCallable(callable0, false, true);
    }

    @Test(timeout = 4000)
    public void test05763() throws Throwable {
        Compiler.runCallable((Callable<CrossModuleMethodMotion>) null, false, false);
    }

    @Test(timeout = 4000)
    public void test05864() throws Throwable {
        Compiler.runCallable((Callable<CrossModuleMethodMotion>) null, false, true);
    }

    @Test(timeout = 4000)
    public void test05965() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.createPassConfigInternal();
        compiler0.setPassConfig(passConfig0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06066() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.getPassConfig();
        compiler0.setPassConfig(passConfig0);
    }

    @Test(timeout = 4000)
    public void test06167() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        compiler0.stripCode(compilerOptions0.aliasableStrings, compilerOptions0.stripTypePrefixes, compilerOptions0.stripNamePrefixes, compilerOptions0.aliasableStrings);
    }

    @Test(timeout = 4000)
    public void test06268() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("*pJ?d%<~l");
        compiler0.check();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06369() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.endPass();
    }

    @Test(timeout = 4000)
    public void test06470() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.reportCodeChange();
        compiler0.optimize();
    }

    @Test(timeout = 4000)
    public void test06571() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "variables, functions, and arguments cannot be deleted in ES5 strict mode", "!NjVE\":o:'^od||M");
        compiler0.areNodesEqualForInlining(node0, node0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06673() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06674() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        CompilerInput compilerInput0 = compiler0.getSynthesizedExternsInput();
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
        InputId inputId0 = referenceCollectingCallback_Reference0.getInputId();
        compiler0.removeExternInput(inputId0);
        compilerInput0.getName();
    }

    @Test(timeout = 4000)
    public void test06775() throws Throwable {
        SourceFile sourceFile0 = SourceFile.fromFile("4k");
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        MockPrintStream mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.AbstractMessageFormatter$Color");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addNewScript(jsAst0);
        compiler0.addIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test06876() throws Throwable {
        SourceFile sourceFile0 = SourceFile.fromFile("4k");
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("4k");
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.replaceScript(jsAst0);
    }

    @Test(timeout = 4000)
    public void test06977() throws Throwable {
        SourceFile sourceFile0 = SourceFile.fromFile("4k");
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("4k");
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.addNewScript(jsAst0);
    }

    @Test(timeout = 4000)
    public void test07078() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter1 = compiler0.getReverseAbstractInterpreter();
    }

    @Test(timeout = 4000)
    public void test07179() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        InlineProperties inlineProperties0 = new InlineProperties(compiler0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    }

    @Test(timeout = 4000)
    public void test07280() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        compiler0.getSynthesizedExternsInput();
        Node node0 = compiler0.parseInputs();
        node0.isAdd();
    }

    @Test(timeout = 4000)
    public void test07381() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        compiler0.processAMDAndCommonJSModules();
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test07482() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("M+cS}@$n{0u@t@EE");
        compiler0.parseTestCode("M+cS}@$n{0u@t@EE");
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test07583() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("JS property assignments:\n");
    }

    @Test(timeout = 4000)
    public void test07684() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("variables, functions, and arguments cannot be deleted in ES5 strict mode");
    }

    @Test(timeout = 4000)
    public void test07785() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("com.google.javascript.jscomp.CheckMissingGetCssName");
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("com.google.javascript.jscomp.CheckMissingGetCssName");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("com.google.javascript.jscomp.CheckMissingGetCssName");
    }

    @Test(timeout = 4000)
    public void test07886() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("com.google.javascript.jscomp.CheckMissingGetCssName");
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("js/%s.js");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("com.google.javascript.jscomp.CheckMissingGetCssName");
    }

    @Test(timeout = 4000)
    public void test07987() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.ideMode = true;
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.optimize();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test08088() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("*pJ?d%<~l");
        boolean boolean0 = compiler0.isInliningForbidden();
    }

    @Test(timeout = 4000)
    public void test08089() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("*pJ?d%<~l");
        boolean boolean0 = compiler0.isInliningForbidden();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test08191() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
    }

    @Test(timeout = 4000)
    public void test08292() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(",^", "!NjVL\":o:'^od||M");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        jSSourceFileArray0[2] = jSSourceFile0;
        jSSourceFileArray0[3] = jSSourceFile0;
        jSSourceFileArray0[4] = jSSourceFile0;
        jSSourceFileArray0[5] = jSSourceFile0;
        jSSourceFileArray0[6] = jSSourceFile0;
        compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        jSSourceFile0.isExtern();
    }

    @Test(timeout = 4000)
    public void test08293() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        CompilerOptions.LanguageMode compilerOptions_LanguageMode0 = CompilerOptions.LanguageMode.ECMASCRIPT5;
        compilerOptions0.setLanguageIn(compilerOptions_LanguageMode0);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(",^", "!NjVL\":o:'^od||M");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[7];
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        jSSourceFileArray0[2] = jSSourceFile0;
        jSSourceFileArray0[3] = jSSourceFile0;
        jSSourceFileArray0[4] = jSSourceFile0;
        jSSourceFileArray0[5] = jSSourceFile0;
        jSSourceFileArray0[6] = jSSourceFile0;
        compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test08394() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("fk");
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("fk");
        FileSystemHandling.appendStringToFile(evoSuiteFile0, "com.google.javascript.jscomp.Compiler$IntermediateState");
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addNewScript(jsAst0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test08495() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.throwInternalError("A1b_3yH6oVq,6|}azO", (Exception) null);
    }

    @Test(timeout = 4000)
    public void test08596() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("JSC_BASE_CLASS_ERROR");
        compiler0.optimize();
    }

    @Test(timeout = 4000)
    public void test08697() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getSourceRegion((String) null, 8506);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test08798() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("*pJ?d%<~l");
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test08899() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("*pJ?g%~l", ":rb[Ps+]^DnBZdH.ui");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        jSSourceFile0.isExtern();
    }

    @Test(timeout = 4000)
    public void test088100() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("*pJ?g%~l", ":rb[Ps+]^DnBZdH.ui");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test089101() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getSourceRegion((String) null, (-1));
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test090102() throws Throwable {
        SourceFile sourceFile0 = SourceFile.fromFile("4k");
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("4k");
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.getSourceRegion("4k", 48);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test091103() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("com.google.javascript.rhino.head.gen.");
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test092104() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        compiler0.ensureLibraryInjected("// Input %num%");
    }

    @Test(timeout = 4000)
    public void test093105() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) linkedList0, compilerOptions0);
        compiler0.getNodeForCodeInsertion((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test094106() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("com.google.javascript.rhino.head.gen.");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("computeCFG");
        jSModule0.add((SourceFile) jSSourceFile0);
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test095107() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getAstDotGraph();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test096109() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        String string0 = compiler0.getAstDotGraph();
    }

    @Test(timeout = 4000)
    public void test097110() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("*pJ?d%<~l");
        compiler0.getErrorManager();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test098111() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test098112() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
    }

    @Test(timeout = 4000)
    public void test099113() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("PassConfigs must eventually delegate to the DefaultPassConfig");
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        compiler0.updateGlobalVarReferences(treeMap0, node0);
    }

    @Test(timeout = 4000)
    public void test100114() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        Node node0 = Node.newString("Root module has no inputs");
        compiler0.updateGlobalVarReferences(treeMap0, node0);
    }

    @Test(timeout = 4000)
    public void test101115() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        SymbolTable symbolTable0 = compiler0.buildKnownSymbolTable();
        SymbolTable symbolTable1 = compiler0.buildKnownSymbolTable();
        symbolTable1.equals((Object) symbolTable0);
    }

    @Test(timeout = 4000)
    public void test102117() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setProgress(68.4);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test103118() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setProgress((-1.0));
        compiler0.getProgress();
    }
}
