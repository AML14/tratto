/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 03 23:24:33 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PrototypeObjectType_ESTest extends PrototypeObjectType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        errorFunctionType0.toStringHelper(false);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "]aYq]:O]t~;X8:W", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "]aYq]:O]t~;X8:W", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "]aYq]:O]t~;X8:W", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "W8%Q&dA}l\"6)L}yU1}(", unknownType0, false);
        JSType[] jSTypeArray0 = new JSType[3];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) prototypeObjectType0, false, jSTypeArray0);
        boolean boolean0 = functionType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "W8%Q&dA}l\"6)L}yU1}(", unknownType0, false);
        JSType[] jSTypeArray0 = new JSType[3];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) prototypeObjectType0, false, jSTypeArray0);
        boolean boolean0 = functionType0.matchesObjectContext();
        prototypeObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "W8%Q&dA}l\"6)L}yU1}(", unknownType0, false);
        JSType[] jSTypeArray0 = new JSType[3];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) prototypeObjectType0, false, jSTypeArray0);
        boolean boolean0 = functionType0.matchesObjectContext();
        prototypeObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.canBeCalled();
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.canBeCalled();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "H#i{8*");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("H#i{8*", jSDocInfo0);
        int int0 = errorFunctionType0.getPropertiesCount();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "H#i{8*");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("H#i{8*", jSDocInfo0);
        int int0 = errorFunctionType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ObjectType objectType0 = errorFunctionType0.getTopMostDefiningType((String) null);
        objectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0512() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ObjectType objectType0 = errorFunctionType0.getTopMostDefiningType((String) null);
        objectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("bind", jSDocInfo0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0714() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        noType0.matchConstraint(recordType0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        noType0.matchConstraint(recordType0);
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0816() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "P^");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("P^", jSDocInfo0);
        Node node0 = errorFunctionType0.getParametersNode();
        boolean boolean0 = errorFunctionType0.defineProperty("P^", (JSType) null, false, node0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "P^");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("P^", jSDocInfo0);
        Node node0 = errorFunctionType0.getParametersNode();
        boolean boolean0 = errorFunctionType0.defineProperty("P^", (JSType) null, false, node0);
    }

    @Test(timeout = 4000)
    public void test0918() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("{", jSDocInfo0);
        errorFunctionType0.getPropertyNames();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1019() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("Unknown class name", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("Unknown class name");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1020() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("Unknown class name", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("Unknown class name");
    }

    @Test(timeout = 4000)
    public void test1121() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isPropertyTypeInferred(":7NM~88QYJbI7/=\"'Q");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isPropertyTypeInferred(":7NM~88QYJbI7/=\"'Q");
    }

    @Test(timeout = 4000)
    public void test1123() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType0.isPropertyTypeInferred(":7NM~88QYJbI7/=\"'Q");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1224() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isPropertyInExterns("Unknown class name");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1225() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isPropertyInExterns("Unknown class name");
    }

    @Test(timeout = 4000)
    public void test1226() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isPropertyInExterns("Unknown class name");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1327() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.isPropertyInExterns("Named type with empty name component");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1328() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.isPropertyInExterns("Named type with empty name component");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1429() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.removeProperty("vQw'Fifhnd");
    }

    @Test(timeout = 4000)
    public void test1430() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = errorFunctionType0.removeProperty("vQw'Fifhnd");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1531() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "zX@T\"uf-c E;.5Bw0%", (Node) null);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        functionType0.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo0);
        boolean boolean0 = functionType0.removeProperty("Named type with empty name component");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1532() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "zX@T\"uf-c E;.5Bw0%", (Node) null);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        functionType0.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo0);
        boolean boolean0 = functionType0.removeProperty("Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test1633() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.getPropertyNode("Unknown class name");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1734() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ":6_)or3WKzv+g/!i*|~");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo(":6_)or3WKzv+g/!i*|~", jSDocInfo0);
        errorFunctionType0.getPropertyNode(":6_)or3WKzv+g/!i*|~");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1835() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zX@T\"uf-c E;.5Bw0%");
        errorFunctionType0.getOwnPropertyJSDocInfo("Unknown class name");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1936() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(voidType0, (Node) null);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getOwnPropertyJSDocInfo("Unknown class name");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1937() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(voidType0, (Node) null);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getOwnPropertyJSDocInfo("Unknown class name");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2038() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "NWQ%bp0qR");
        errorFunctionType0.setPropertyJSDocInfo("NWQ%bp0qR", (JSDocInfo) null);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test2039() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "NWQ%bp0qR");
        errorFunctionType0.setPropertyJSDocInfo("NWQ%bp0qR", (JSDocInfo) null);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.base.CharMatcher$Or");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("com.google.common.base.CharMatcher$Or", jSDocInfo0);
        errorFunctionType0.setPropertyJSDocInfo("com.google.common.base.CharMatcher$Or", jSDocInfo0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2241() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.setPropertyJSDocInfo("Not declared as a constructor", jSDocInfo0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2342() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesUint32Context();
    }

    @Test(timeout = 4000)
    public void test2343() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesUint32Context();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2444() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test2445() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2546() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "valueOf");
        JSType[] jSTypeArray0 = new JSType[1];
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, node0);
        hashMap0.put("valueOf", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test2547() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "valueOf");
        JSType[] jSTypeArray0 = new JSType[1];
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, node0);
        hashMap0.put("valueOf", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2648() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "NX\"t");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2649() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "NX\"t");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test2750() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2751() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2852() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2853() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2954() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = Node.newNumber((-1079.03800214));
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, node0);
        hashMap0.put("toString", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesStringContext();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2955() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = Node.newNumber((-1079.03800214));
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, node0);
        hashMap0.put("toString", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test3056() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.matchesStringContext();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test3057() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test3158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "", (Node) null);
        boolean boolean0 = functionType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test3159() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "", (Node) null);
        boolean boolean0 = functionType0.matchesNumberContext();
        functionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test3260() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        JSType jSType1 = jSType0.unboxesTo();
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test3261() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        JSType jSType1 = jSType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test3362() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        JSType jSType0 = instanceObjectType0.unboxesTo();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3363() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        JSType jSType0 = instanceObjectType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test3464() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test3565() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType[] jSTypeArray0 = new JSType[2];
        jSTypeArray0[1] = (JSType) recordType0;
        FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(recordType0, jSTypeArray0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3566() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType[] jSTypeArray0 = new JSType[2];
        jSTypeArray0[1] = (JSType) recordType0;
        FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(recordType0, jSTypeArray0);
        recordType0.setOwnerFunction(functionType0);
        String string0 = recordType0.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test3667() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        Node node0 = Node.newString("com.google.javascript.jscomp.SemanticReverseAbstractInterpreter$RestrictByTrueInstanceOfResultVisitor", 0, 0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, node0);
        hashMap0.putIfAbsent("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType0.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test3769() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
        hashMap0.put("Not declared as a type name", recordTypeBuilder_RecordProperty0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = new RecordTypeBuilder.RecordProperty(voidType0, (Node) null);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty1);
        hashMap0.put("SP<ufA,)hesR@3", recordTypeBuilder_RecordProperty1);
        hashMap0.put("MC7E1F4:3", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType0.toStringHelper(false);
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test3770() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, (Node) null);
        hashMap0.put("Not declared as a type name", recordTypeBuilder_RecordProperty0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = new RecordTypeBuilder.RecordProperty(voidType0, (Node) null);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty1);
        hashMap0.put("SP<ufA,)hesR@3", recordTypeBuilder_RecordProperty1);
        hashMap0.put("MC7E1F4:3", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test3871() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        errorFunctionType0.toAnnotationString();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3972() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
        jSTypeNativeArray0[0] = jSTypeNative0;
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        jSTypeRegistry0.resetImplicitPrototype(jSType0, noType0);
    }

    @Test(timeout = 4000)
    public void test4073() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "@iM");
        ObjectType objectType0 = errorFunctionType0.getParentScope();
        boolean boolean0 = errorFunctionType0.isSubtype(objectType0);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test4074() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "@iM");
        ObjectType objectType0 = errorFunctionType0.getParentScope();
        boolean boolean0 = errorFunctionType0.isSubtype(objectType0);
    }

    @Test(timeout = 4000)
    public void test4175() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.isString();
    }

    @Test(timeout = 4000)
    public void test4176() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.isString();
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test4177() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.isString();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test4278() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, (Node) null);
        hashMap0.put(")jh<s/7x.|.}DA/:$", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.matchConstraint(recordType1);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4379() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "VHGIOk|KPWJ", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
        instanceObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4380() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "VHGIOk|KPWJ", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test4481() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test4482() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test4483() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test4584() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ObjectType objectType0 = errorFunctionType0.getInstanceType();
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "p<#_N&~", objectType0, false);
        boolean boolean0 = prototypeObjectType0.isSubtype(errorFunctionType0);
        prototypeObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4585() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ObjectType objectType0 = errorFunctionType0.getInstanceType();
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "p<#_N&~", objectType0, false);
        boolean boolean0 = prototypeObjectType0.isSubtype(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test4686() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "?");
        errorFunctionType0.setOwnerFunction(errorFunctionType0);
        errorFunctionType0.setOwnerFunction((FunctionType) null);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test4787() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.setOwnerFunction(noResolvedType0);
        errorFunctionType0.setOwnerFunction(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test4888() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getCtorImplementedInterfaces();
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test4889() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getCtorImplementedInterfaces();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test4990() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "toString");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("toString", jSDocInfo0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4991() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "toString");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("toString", jSDocInfo0);
        JSType.safeResolve(errorFunctionType0, simpleErrorReporter0, errorFunctionType0);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test5092() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "a");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, true);
        instanceObjectType0.matchConstraint(errorFunctionType0);
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test5093() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "a");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, true);
        instanceObjectType0.matchConstraint(errorFunctionType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test5194() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = new Node(1, 108, 1);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
        hashMap0.put("f@q?7H.}cJ>'Wpmq", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.matchConstraint(recordType0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test5195() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = new Node(1, 108, 1);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
        hashMap0.put("f@q?7H.}cJ>'Wpmq", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.matchConstraint(recordType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5196() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = new Node(1, 108, 1);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noType0, node0);
        hashMap0.put("f@q?7H.}cJ>'Wpmq", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.matchConstraint(recordType0);
        recordType0.isNativeObjectType();
    }
}
