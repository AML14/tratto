/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 04:22:58 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.CollapseProperties;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CollapseProperties_ESTest extends CollapseProperties_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}");
        CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, false, true);
        collapseProperties0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}");
        CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, true, true);
        collapseProperties0.process(node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}");
        CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, false, false);
        collapseProperties0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("function SCompiler_get(JSCompiler_get_name) { return function() {return this[JSCompiler_get_name]}}");
        Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "function SCompiler_get(JSCompiler_get_name) { return function() {return this[JSCompiler_get_name]}}", "function SCompiler_get(JSCompiler_get_name) { return function() {return this[JSCompiler_get_name]}}");
        node0.addChildToFront(node1);
        CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, false, false);
        collapseProperties0.process(node0, node0);
        compiler0.getWarningCount();
    }
}
