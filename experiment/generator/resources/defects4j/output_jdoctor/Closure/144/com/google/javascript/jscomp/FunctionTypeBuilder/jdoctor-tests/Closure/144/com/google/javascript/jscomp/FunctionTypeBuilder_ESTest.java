/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 06:58:37 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionTypeBuilder;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionTypeBuilder_ESTest extends FunctionTypeBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(" m UlQ", " m UlQ");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(" m UlQ", compiler0, node0, " m UlQ", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setSourceNode(node0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, "", (Scope) null);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType jSType0 = jSTypeRegistry0.createNamedType("// Input %num%", (String) null, 8, 23);
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = jSType0;
        Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("v");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("v", compiler0, node0, "v", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
        FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("a! ;C/!o");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("a! ;C/!o", compiler0, node0, "a! ;C/!o", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
        FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
        functionTypeBuilder1.inferFromOverriddenFunction(functionType0, (Node) null);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("JSC_INEXISTANT_PARAM", "JSC_INEXISTANT_PARAM");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_INEXISTANT_PARAM", compiler0, node0, "JSC_INEXISTANT_PARAM", (Scope) null);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("H+T`LhD", "H+T`LhD");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("H+T`LhD", compiler0, node0, "H+T`LhD", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("+T`LhD");
        Scope scope0 = new Scope(node0, compiler0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("+T`LhD", compiler0, node0, "+T`LhD", scope0);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
        functionTypeBuilder1.buildAndRegister();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("+T`LhD");
        Scope scope0 = new Scope(node0, compiler0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("+T`LhD", compiler0, node0, "+T`LhD", scope0);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("+T`LhD");
        Scope scope0 = new Scope(node0, compiler0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("+T`LhD", compiler0, node0, "+T`LhD", scope0);
        functionTypeBuilder0.inferInheritance(jSDocInfo0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("AggregateValue");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("AggregateValue", compiler0, node0, "AggregateValue", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("6! ;C/!o");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("6! ;C/!o", compiler0, node0, "6! ;C/!o", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
        FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
        functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" j C");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(" j C", compiler0, node0, " j C", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, (JSDocInfo) null);
        FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
        functionTypeBuilder1.inferThisType((JSDocInfo) null, functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("0b(TV");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("0b(TV", compiler0, node0, "0b(TV", (Scope) null);
        functionTypeBuilder0.inferThisType((JSDocInfo) null, node0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("+T`LhD");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("+T`LhD", compiler0, node0, "+T`LhD", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("", "");
        Node node0 = Node.newString(42, "", 33, 14);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("", compiler0, node0, "", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, node0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("+T`LhD");
        Scope scope0 = new Scope(node0, compiler0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("+T`LhD", compiler0, node0, "+T`LhD", scope0);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("+T`LhD");
        Scope scope0 = new Scope(node0, compiler0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("+T`LhD", compiler0, node0, "+T`LhD", scope0);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("", "");
        Node node1 = Node.newString(42, "", 33, 14);
        node0.addChildToFront(node1);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("", compiler0, node1, "", (Scope) null);
        functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("H+T`LhD", "H+T`LhD");
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("H+T`LhD", compiler0, node0, "H+T`LhD", (Scope) null);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("+T`LhD");
        Scope scope0 = new Scope(node0, compiler0);
        FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("+T`LhD", compiler0, node0, "+T`LhD", scope0);
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
    }
}
