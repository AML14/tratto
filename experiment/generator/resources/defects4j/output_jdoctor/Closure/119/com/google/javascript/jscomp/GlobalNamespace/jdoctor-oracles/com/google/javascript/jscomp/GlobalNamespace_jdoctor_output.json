[
  {
    "signature": "com.google.javascript.jscomp.GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node root)",
    "name": "com.google.javascript.jscomp.GlobalNamespace",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "root"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
            "name": "AbstractCompiler",
            "isArray": false
          },
          "name": "compiler"
        },
        "comment": "The AbstractCompiler for reporting code changes.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "root"
        },
        "comment": "The root of the rest of the code to build a namespace for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "com.google.javascript.jscomp.GlobalNamespace(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node root)",
    "name": "com.google.javascript.jscomp.GlobalNamespace",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
          "name": "AbstractCompiler",
          "isArray": false
        },
        "name": "compiler"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "externsRoot"
      },
      {
        "type": {
          "qualifiedName": "com.google.javascript.rhino.Node",
          "name": "Node",
          "isArray": false
        },
        "name": "root"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.jscomp.AbstractCompiler",
            "name": "AbstractCompiler",
            "isArray": false
          },
          "name": "compiler"
        },
        "comment": "The AbstractCompiler for reporting code changes.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "externsRoot"
        },
        "comment": "The root of the externs to build a namespace for. If this is null externs and properties defined on extern types . externsRoot is not included in the global namespace. If !=null root allows user-defined function on extern types to be included in the global namespace. E.g. String.foo.",
        "kind": "PARAM",
        "condition": "(args[1].isInstanceOf()) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "com.google.javascript.rhino.Node",
            "name": "Node",
            "isArray": false
          },
          "name": "root"
        },
        "comment": "The root of the rest of the code to build a namespace for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "hasExternsRoot()",
    "name": "hasExternsRoot",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getRootNode()",
    "name": "getRootNode",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.Node",
      "name": "com.google.javascript.rhino.Node",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getParentScope()",
    "name": "getParentScope",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>",
      "name": "com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getSlot(java.lang.String name)",
    "name": "getSlot",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace$Name",
      "name": "com.google.javascript.jscomp.GlobalNamespace$Name",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getOwnSlot(java.lang.String name)",
    "name": "getOwnSlot",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace$Name",
      "name": "com.google.javascript.jscomp.GlobalNamespace$Name",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getTypeOfThis()",
    "name": "getTypeOfThis",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.jstype.JSType",
      "name": "com.google.javascript.rhino.jstype.JSType",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getReferences(com.google.javascript.jscomp.GlobalNamespace$Name slot)",
    "name": "getReferences",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable<com.google.javascript.jscomp.GlobalNamespace$Ref>",
      "name": "java.lang.Iterable<com.google.javascript.jscomp.GlobalNamespace$Ref>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace$Name",
          "name": "Name",
          "isArray": false
        },
        "name": "slot"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getScope(com.google.javascript.jscomp.GlobalNamespace$Name slot)",
    "name": "getScope",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>",
      "name": "com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace$Name",
          "name": "Name",
          "isArray": false
        },
        "name": "slot"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getAllSymbols()",
    "name": "getAllSymbols",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable<com.google.javascript.jscomp.GlobalNamespace$Name>",
      "name": "java.lang.Iterable<com.google.javascript.jscomp.GlobalNamespace$Name>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getNameForest()",
    "name": "getNameForest",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<com.google.javascript.jscomp.GlobalNamespace$Name>",
      "name": "java.util.List<com.google.javascript.jscomp.GlobalNamespace$Name>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getNameIndex()",
    "name": "getNameIndex",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<java.lang.String, com.google.javascript.jscomp.GlobalNamespace$Name>",
      "name": "java.util.Map<java.lang.String, com.google.javascript.jscomp.GlobalNamespace$Name>",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "scanNewNodes(java.util.List<com.google.javascript.jscomp.GlobalNamespace$AstChange> newNodes)",
    "name": "scanNewNodes",
    "containingClass": {
      "qualifiedName": "com.google.javascript.jscomp.GlobalNamespace",
      "name": "GlobalNamespace",
      "isArray": false
    },
    "targetClass": "com.google.javascript.jscomp.GlobalNamespace",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "newNodes"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "newNodes"
        },
        "comment": "New nodes to check.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  }
]