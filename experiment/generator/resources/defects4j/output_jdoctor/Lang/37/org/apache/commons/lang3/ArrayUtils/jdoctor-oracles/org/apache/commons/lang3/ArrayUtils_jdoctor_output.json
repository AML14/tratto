[
  {
    "signature": "org.apache.commons.lang3.ArrayUtils()",
    "name": "org.apache.commons.lang3.ArrayUtils",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "toString(java.lang.Object array)",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "array"
        },
        "comment": "the array to get a toString for null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a String representation of the array, '{}' if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toString(java.lang.Object array, java.lang.String stringIfNull)",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "stringIfNull"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "array"
        },
        "comment": "the array to get a toString for null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "stringIfNull"
        },
        "comment": "the String to return if the array is null.",
        "kind": "PARAM",
        "condition": "args[0]==null"
      }
    ],
    "returnTag": {
      "comment": "a String representation of the array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEquals(java.lang.Object array1, java.lang.Object array2)",
    "name": "isEquals",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "array1"
        },
        "comment": "array1 is left. left hand array to compare null.",
        "kind": "PARAM",
        "condition": "args[0]==null"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "array2"
        },
        "comment": "array2 is right. right hand array to compare null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the arrays are equal.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toMap(java.lang.Object[] array)",
    "name": "toMap",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<java.lang.Object, java.lang.Object>",
      "name": "java.util.Map<java.lang.Object, java.lang.Object>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "an array whose elements are either a java.util.Map.Entry or an Array containing at least two elements null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a Map that was created from the array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "one element of this Array is itself an Array containing less then two elements.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the array contains elements other than java.util.Map.Entry and an Array.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "clone(T[] array)",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to shallow clone null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the cloned array, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "clone(long[] array)",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to clone null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the cloned array, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "clone(int[] array)",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to clone null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the cloned array, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "clone(short[] array)",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short[]",
      "name": "short[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to clone null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the cloned array, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "clone(char[] array)",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char[]",
      "name": "char[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to clone null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the cloned array, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "clone(byte[] array)",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to clone null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the cloned array, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "clone(double[] array)",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to clone null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the cloned array, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "clone(float[] array)",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float[]",
      "name": "float[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to clone null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the cloned array, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "clone(boolean[] array)",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean[]",
      "name": "boolean[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to clone null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the cloned array, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "subarray(T[] array, int startIndexInclusive, int endIndexExclusive)",
    "name": "subarray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndexInclusive"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endIndexExclusive"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndexInclusive"
        },
        "comment": "the starting index. Undervalue (<0) is promoted to 0. startIndexInclusive is overvalue (>array.length) results in an empty array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "endIndexExclusive"
        },
        "comment": "elements up to endIndex-1 are present in the returned subarray. Undervalue (< startIndex) produces empty array. endIndexExclusive is overvalue (>array.length) is demoted to array length.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array containing the elements between the start and end indices.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "subarray(long[] array, int startIndexInclusive, int endIndexExclusive)",
    "name": "subarray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndexInclusive"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endIndexExclusive"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndexInclusive"
        },
        "comment": "the starting index. Undervalue (<0) is promoted to 0. startIndexInclusive is overvalue (>array.length) results in an empty array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "endIndexExclusive"
        },
        "comment": "elements up to endIndex-1 are present in the returned subarray. Undervalue (< startIndex) produces empty array. endIndexExclusive is overvalue (>array.length) is demoted to array length.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array containing the elements between the start and end indices.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "subarray(int[] array, int startIndexInclusive, int endIndexExclusive)",
    "name": "subarray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndexInclusive"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endIndexExclusive"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndexInclusive"
        },
        "comment": "the starting index. Undervalue (<0) is promoted to 0. startIndexInclusive is overvalue (>array.length) results in an empty array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "endIndexExclusive"
        },
        "comment": "elements up to endIndex-1 are present in the returned subarray. Undervalue (< startIndex) produces empty array. endIndexExclusive is overvalue (>array.length) is demoted to array length.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array containing the elements between the start and end indices.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "subarray(short[] array, int startIndexInclusive, int endIndexExclusive)",
    "name": "subarray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short[]",
      "name": "short[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndexInclusive"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endIndexExclusive"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndexInclusive"
        },
        "comment": "the starting index. Undervalue (<0) is promoted to 0. startIndexInclusive is overvalue (>array.length) results in an empty array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "endIndexExclusive"
        },
        "comment": "elements up to endIndex-1 are present in the returned subarray. Undervalue (< startIndex) produces empty array. endIndexExclusive is overvalue (>array.length) is demoted to array length.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array containing the elements between the start and end indices.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "subarray(char[] array, int startIndexInclusive, int endIndexExclusive)",
    "name": "subarray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char[]",
      "name": "char[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndexInclusive"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endIndexExclusive"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndexInclusive"
        },
        "comment": "the starting index. Undervalue (<0) is promoted to 0. startIndexInclusive is overvalue (>array.length) results in an empty array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "endIndexExclusive"
        },
        "comment": "elements up to endIndex-1 are present in the returned subarray. Undervalue (< startIndex) produces empty array. endIndexExclusive is overvalue (>array.length) is demoted to array length.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array containing the elements between the start and end indices.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "subarray(byte[] array, int startIndexInclusive, int endIndexExclusive)",
    "name": "subarray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndexInclusive"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endIndexExclusive"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndexInclusive"
        },
        "comment": "the starting index. Undervalue (<0) is promoted to 0. startIndexInclusive is overvalue (>array.length) results in an empty array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "endIndexExclusive"
        },
        "comment": "elements up to endIndex-1 are present in the returned subarray. Undervalue (< startIndex) produces empty array. endIndexExclusive is overvalue (>array.length) is demoted to array length.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array containing the elements between the start and end indices.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "subarray(double[] array, int startIndexInclusive, int endIndexExclusive)",
    "name": "subarray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndexInclusive"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endIndexExclusive"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndexInclusive"
        },
        "comment": "the starting index. Undervalue (<0) is promoted to 0. startIndexInclusive is overvalue (>array.length) results in an empty array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "endIndexExclusive"
        },
        "comment": "elements up to endIndex-1 are present in the returned subarray. Undervalue (< startIndex) produces empty array. endIndexExclusive is overvalue (>array.length) is demoted to array length.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array containing the elements between the start and end indices.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "subarray(float[] array, int startIndexInclusive, int endIndexExclusive)",
    "name": "subarray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float[]",
      "name": "float[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndexInclusive"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endIndexExclusive"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndexInclusive"
        },
        "comment": "the starting index. Undervalue (<0) is promoted to 0. startIndexInclusive is overvalue (>array.length) results in an empty array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "endIndexExclusive"
        },
        "comment": "elements up to endIndex-1 are present in the returned subarray. Undervalue (< startIndex) produces empty array. endIndexExclusive is overvalue (>array.length) is demoted to array length.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array containing the elements between the start and end indices.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive)",
    "name": "subarray",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean[]",
      "name": "boolean[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndexInclusive"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "endIndexExclusive"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndexInclusive"
        },
        "comment": "the starting index. Undervalue (<0) is promoted to 0. startIndexInclusive is overvalue (>array.length) results in an empty array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "endIndexExclusive"
        },
        "comment": "elements up to endIndex-1 are present in the returned subarray. Undervalue (< startIndex) produces empty array. endIndexExclusive is overvalue (>array.length) is demoted to array length.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a new array containing the elements between the start and end indices.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isSameLength(java.lang.Object[] array1, java.lang.Object[] array2)",
    "name": "isSameLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if length of arrays matches, treating null as an empty array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isSameLength(long[] array1, long[] array2)",
    "name": "isSameLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if length of arrays matches, treating null as an empty array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isSameLength(int[] array1, int[] array2)",
    "name": "isSameLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if length of arrays matches, treating null as an empty array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isSameLength(short[] array1, short[] array2)",
    "name": "isSameLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if length of arrays matches, treating null as an empty array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isSameLength(char[] array1, char[] array2)",
    "name": "isSameLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if length of arrays matches, treating null as an empty array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isSameLength(byte[] array1, byte[] array2)",
    "name": "isSameLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if length of arrays matches, treating null as an empty array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isSameLength(double[] array1, double[] array2)",
    "name": "isSameLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if length of arrays matches, treating null as an empty array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isSameLength(float[] array1, float[] array2)",
    "name": "isSameLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if length of arrays matches, treating null as an empty array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isSameLength(boolean[] array1, boolean[] array2)",
    "name": "isSameLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if length of arrays matches, treating null as an empty array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getLength(java.lang.Object array)",
    "name": "getLength",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "array"
        },
        "comment": "the array to retrieve the length from null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The length of the array, or 0 if the array is null.",
      "kind": "RETURN",
      "condition": "args[0]==null ? methodResultID==0"
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the object arguement is not an array.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "isSameType(java.lang.Object array1, java.lang.Object array2)",
    "name": "isSameType",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "array1"
        },
        "comment": "the first array. array1 is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "array2"
        },
        "comment": "the second array. array2 is not null.",
        "kind": "PARAM",
        "condition": "(args[1]==null) == false"
      }
    ],
    "returnTag": {
      "comment": "true if type of arrays matches.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IllegalArgumentException",
          "name": "IllegalArgumentException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "either array is null.",
        "kind": "THROWS",
        "condition": "args[0]==null || args[1]==null"
      }
    ]
  },
  {
    "signature": "reverse(java.lang.Object[] array)",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to reverse null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "reverse(long[] array)",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to reverse null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "reverse(int[] array)",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to reverse null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "reverse(short[] array)",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to reverse null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "reverse(char[] array)",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to reverse null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "reverse(byte[] array)",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to reverse null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "reverse(double[] array)",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to reverse null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "reverse(float[] array)",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to reverse null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "reverse(boolean[] array)",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to reverse null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "indexOf(java.lang.Object[] array, java.lang.Object objectToFind)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "objectToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "objectToFind"
        },
        "comment": "the object to find null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the object within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(java.lang.Object[] array, java.lang.Object objectToFind, int startIndex)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "objectToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "objectToFind"
        },
        "comment": "the object to find null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the index to start searching at.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the object within the array starting at the index, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(java.lang.Object[] array, java.lang.Object objectToFind)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "objectToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to travers backwords looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "objectToFind"
        },
        "comment": "the object to find null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the object within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(java.lang.Object[] array, java.lang.Object objectToFind, int startIndex)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "objectToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to traverse for looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "objectToFind"
        },
        "comment": "the object to find null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the start index to travers backwards from.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the object within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "contains(java.lang.Object[] array, java.lang.Object objectToFind)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "objectToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "objectToFind"
        },
        "comment": "the object to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array contains the object.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(long[] array, long valueToFind)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(long[] array, long valueToFind, int startIndex)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the index to start searching at.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(long[] array, long valueToFind)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to travers backwords looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the object to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(long[] array, long valueToFind, int startIndex)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to traverse for looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the start index to travers backwards from.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "contains(long[] array, long valueToFind)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array contains the object.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(int[] array, int valueToFind)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(int[] array, int valueToFind, int startIndex)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the index to start searching at.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(int[] array, int valueToFind)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to travers backwords looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the object to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(int[] array, int valueToFind, int startIndex)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to traverse for looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the start index to travers backwards from.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "contains(int[] array, int valueToFind)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array contains the object.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(short[] array, short valueToFind)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "short",
          "name": "short",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "short",
            "name": "short",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(short[] array, short valueToFind, int startIndex)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "short",
          "name": "short",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "short",
            "name": "short",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the index to start searching at.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(short[] array, short valueToFind)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "short",
          "name": "short",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to travers backwords looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "short",
            "name": "short",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the object to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(short[] array, short valueToFind, int startIndex)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "short",
          "name": "short",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to traverse for looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "short",
            "name": "short",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the start index to travers backwards from.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "contains(short[] array, short valueToFind)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "short",
          "name": "short",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "short",
            "name": "short",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array contains the object.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(char[] array, char valueToFind)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(char[] array, char valueToFind, int startIndex)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the index to start searching at.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(char[] array, char valueToFind)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to travers backwords looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the object to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(char[] array, char valueToFind, int startIndex)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to traverse for looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the start index to travers backwards from.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "contains(char[] array, char valueToFind)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array contains the object.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(byte[] array, byte valueToFind)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(byte[] array, byte valueToFind, int startIndex)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the index to start searching at.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(byte[] array, byte valueToFind)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to travers backwords looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the object to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(byte[] array, byte valueToFind, int startIndex)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to traverse for looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the start index to travers backwards from.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "contains(byte[] array, byte valueToFind)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array contains the object.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(double[] array, double valueToFind)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(double[] array, double valueToFind, double tolerance)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "tolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "tolerance"
        },
        "comment": "tolerance of the search.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(double[] array, double valueToFind, int startIndex)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the index to start searching at.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(double[] array, double valueToFind, int startIndex, double tolerance)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "tolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the index to start searching at.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "tolerance"
        },
        "comment": "tolerance of the search.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(double[] array, double valueToFind)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to travers backwords looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the object to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(double[] array, double valueToFind, double tolerance)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "tolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "tolerance"
        },
        "comment": "tolerance of the search.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(double[] array, double valueToFind, int startIndex)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to traverse for looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the start index to travers backwards from.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "tolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to traverse for looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the start index to travers backwards from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "tolerance"
        },
        "comment": "search for value within plus/minus this amount.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "contains(double[] array, double valueToFind)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array contains the object.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "contains(double[] array, double valueToFind, double tolerance)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "tolerance"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "tolerance"
        },
        "comment": "the array contains the tolerance of the search.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if value falling within tolerance is in array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(float[] array, float valueToFind)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(float[] array, float valueToFind, int startIndex)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the index to start searching at.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(float[] array, float valueToFind)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to travers backwords looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the object to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(float[] array, float valueToFind, int startIndex)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to traverse for looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the start index to travers backwards from.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "contains(float[] array, float valueToFind)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array contains the object.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(boolean[] array, boolean valueToFind)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "indexOf(boolean[] array, boolean valueToFind, int startIndex)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the index to start searching at.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(boolean[] array, boolean valueToFind)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to travers backwords looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the object to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "lastIndexOf(boolean[] array, boolean valueToFind, int startIndex)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "valueToFind"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "startIndex"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to traverse for looking for the object null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "startIndex"
        },
        "comment": "the start index to travers backwards from.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the last index of the value within the array, INDEX_NOT_FOUND (-1) if not found or null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "contains(boolean[] array, boolean valueToFind)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "valueToFind"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to search through.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "valueToFind"
        },
        "comment": "the value to find.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array contains the object.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toPrimitive(java.lang.Character[] array)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char[]",
      "name": "char[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Character;",
          "name": "Character[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Character;",
            "name": "Character[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "a Character array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a char array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "array content is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "toPrimitive(java.lang.Character[] array, char valueForNull)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char[]",
      "name": "char[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Character;",
          "name": "Character[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "valueForNull"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Character;",
            "name": "Character[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "a Character array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "valueForNull"
        },
        "comment": "the value to insert if null found.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a char array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toObject(char[] array)",
    "name": "toObject",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Character[]",
      "name": "java.lang.Character[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "array is char. char array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a Character array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toPrimitive(java.lang.Long[] array)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Long;",
          "name": "Long[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Long;",
            "name": "Long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "array is Long. Long array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a long array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "array content is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "toPrimitive(java.lang.Long[] array, long valueForNull)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Long;",
          "name": "Long[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "valueForNull"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Long;",
            "name": "Long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "array is Long. Long array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "valueForNull"
        },
        "comment": "the value to insert if null found.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a long array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toObject(long[] array)",
    "name": "toObject",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Long[]",
      "name": "java.lang.Long[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "array is long. long array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a Long array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toPrimitive(java.lang.Integer[] array)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Integer;",
          "name": "Integer[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Integer;",
            "name": "Integer[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "a Integer array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an int array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "array content is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "toPrimitive(java.lang.Integer[] array, int valueForNull)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Integer;",
          "name": "Integer[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "valueForNull"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Integer;",
            "name": "Integer[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "a Integer array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "valueForNull"
        },
        "comment": "the value to insert if null found.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an int array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toObject(int[] array)",
    "name": "toObject",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Integer[]",
      "name": "java.lang.Integer[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "array is int. int array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an Integer array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toPrimitive(java.lang.Short[] array)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short[]",
      "name": "short[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Short;",
          "name": "Short[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Short;",
            "name": "Short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "array is Short. Short array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a byte array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "array content is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "toPrimitive(java.lang.Short[] array, short valueForNull)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short[]",
      "name": "short[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Short;",
          "name": "Short[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "short",
          "name": "short",
          "isArray": false
        },
        "name": "valueForNull"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Short;",
            "name": "Short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "array is Short. Short array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "short",
            "name": "short",
            "isArray": false
          },
          "name": "valueForNull"
        },
        "comment": "the value to insert if null found.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a byte array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toObject(short[] array)",
    "name": "toObject",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Short[]",
      "name": "java.lang.Short[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "array is short. short array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a Short array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toPrimitive(java.lang.Byte[] array)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Byte;",
          "name": "Byte[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Byte;",
            "name": "Byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "a Byte array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a byte array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "array content is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "toPrimitive(java.lang.Byte[] array, byte valueForNull)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Byte;",
          "name": "Byte[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "valueForNull"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Byte;",
            "name": "Byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "a Byte array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "valueForNull"
        },
        "comment": "the value to insert if null found.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a byte array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toObject(byte[] array)",
    "name": "toObject",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Byte[]",
      "name": "java.lang.Byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "array is byte. byte array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a Byte array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toPrimitive(java.lang.Double[] array)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Double;",
          "name": "Double[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Double;",
            "name": "Double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "a Double array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a double array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "array content is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "toPrimitive(java.lang.Double[] array, double valueForNull)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Double;",
          "name": "Double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "valueForNull"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Double;",
            "name": "Double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "a Double array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "valueForNull"
        },
        "comment": "the value to insert if null found.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a double array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toObject(double[] array)",
    "name": "toObject",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Double[]",
      "name": "java.lang.Double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "array is double. double array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a Double array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toPrimitive(java.lang.Float[] array)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float[]",
      "name": "float[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Float;",
          "name": "Float[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Float;",
            "name": "Float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "a Float array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a float array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "array content is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "toPrimitive(java.lang.Float[] array, float valueForNull)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float[]",
      "name": "float[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Float;",
          "name": "Float[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "valueForNull"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Float;",
            "name": "Float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "a Float array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "valueForNull"
        },
        "comment": "the value to insert if null found.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a float array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toObject(float[] array)",
    "name": "toObject",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Float[]",
      "name": "java.lang.Float[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "array is float. float array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a Float array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toPrimitive(java.lang.Boolean[] array)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean[]",
      "name": "boolean[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Boolean;",
          "name": "Boolean[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Boolean;",
            "name": "Boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "a Boolean array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a boolean array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "array content is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      }
    ]
  },
  {
    "signature": "toPrimitive(java.lang.Boolean[] array, boolean valueForNull)",
    "name": "toPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean[]",
      "name": "boolean[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Boolean;",
          "name": "Boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "valueForNull"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Boolean;",
            "name": "Boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "a Boolean array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "valueForNull"
        },
        "comment": "the value to insert if null found.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a boolean array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "toObject(boolean[] array)",
    "name": "toObject",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Boolean[]",
      "name": "java.lang.Boolean[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "array is boolean. boolean array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a Boolean array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEmpty(T[] array)",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array is empty or null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEmpty(long[] array)",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array is empty or null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEmpty(int[] array)",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array is empty or null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEmpty(short[] array)",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array is empty or null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEmpty(char[] array)",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array is empty or null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEmpty(byte[] array)",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array is empty or null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEmpty(double[] array)",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array is empty or null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEmpty(float[] array)",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array is empty or null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isEmpty(boolean[] array)",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the array is empty or null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addAll(T[] array1, T... array2)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array whose elements are added to the new array null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array whose elements are added to the new array null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The new array, null if both arrays are null. The type of the new array is the type of the first array, unless the first array is null, in which case the type is the same as the second array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addAll(boolean[] array1, boolean... array2)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "boolean[]",
      "name": "boolean[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The new boolean[] array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addAll(char[] array1, char... array2)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "char[]",
      "name": "char[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The new char[] array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addAll(byte[] array1, byte... array2)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The new byte[] array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addAll(short[] array1, short... array2)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "short[]",
      "name": "short[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The new short[] array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addAll(int[] array1, int... array2)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The new int[] array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addAll(long[] array1, long... array2)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The new long[] array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addAll(float[] array1, float... array2)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "float[]",
      "name": "float[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The new float[] array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "addAll(double[] array1, double... array2)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array1"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array2"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array1"
        },
        "comment": "array1 is first. first array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array2"
        },
        "comment": "array2 is second. second array whose elements are added to the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "The new double[] array.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "add(T[] array, T element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to \"add\" the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements plus the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "add(boolean[] array, boolean element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean[]",
      "name": "boolean[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to copy and add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add at the last index of the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements plus the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "add(byte[] array, byte element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to copy and add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add at the last index of the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements plus the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "add(char[] array, char element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char[]",
      "name": "char[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to copy and add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add at the last index of the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements plus the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "add(double[] array, double element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to copy and add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add at the last index of the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements plus the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "add(float[] array, float element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float[]",
      "name": "float[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to copy and add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add at the last index of the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements plus the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "add(int[] array, int element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to copy and add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add at the last index of the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements plus the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "add(long[] array, long element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to copy and add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add at the last index of the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements plus the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "add(short[] array, short element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short[]",
      "name": "short[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "short",
          "name": "short",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to copy and add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "short",
            "name": "short",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add at the last index of the new array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements plus the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "add(T[] array, int index, T element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the new object.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements and the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index > array.length).",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "add(boolean[] array, int index, boolean element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean[]",
      "name": "boolean[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the new object.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements and the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index > array.length).",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "add(char[] array, int index, char element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char[]",
      "name": "char[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the new object.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements and the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index > array.length).",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "add(byte[] array, int index, byte element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the new object.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements and the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index > array.length).",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "add(short[] array, int index, short element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short[]",
      "name": "short[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "short",
          "name": "short",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the new object.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "short",
            "name": "short",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements and the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index > array.length).",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "add(int[] array, int index, int element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the new object.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements and the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index > array.length).",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "add(long[] array, int index, long element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the new object.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements and the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index > array.length).",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "add(float[] array, int index, float element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float[]",
      "name": "float[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the new object.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements and the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index > array.length).",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "add(double[] array, int index, double element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to add the element to null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the new object.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the object to add.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements and the new element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index > array.length).",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "remove(T[] array, int index)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from. array is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the element at the specified position.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index >= array.length) or if the array is null.",
        "kind": "THROWS",
        "condition": "args[1]<0 || args[0]==null"
      }
    ]
  },
  {
    "signature": "removeElement(T[] array, java.lang.Object element)",
    "name": "removeElement",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the first occurrence of the specified element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "remove(boolean[] array, int index)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean[]",
      "name": "boolean[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from. array is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the element at the specified position.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index >= array.length) or if the array is null.",
        "kind": "THROWS",
        "condition": "args[1]<0 || args[0]==null"
      }
    ]
  },
  {
    "signature": "removeElement(boolean[] array, boolean element)",
    "name": "removeElement",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean[]",
      "name": "boolean[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Z",
            "name": "boolean[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the first occurrence of the specified element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "remove(byte[] array, int index)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from. array is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the element at the specified position.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index >= array.length) or if the array is null.",
        "kind": "THROWS",
        "condition": "args[1]<0 || args[0]==null"
      }
    ]
  },
  {
    "signature": "removeElement(byte[] array, byte element)",
    "name": "removeElement",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "byte[]",
      "name": "byte[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "byte",
          "name": "byte",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[B",
            "name": "byte[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "byte",
            "name": "byte",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the first occurrence of the specified element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "remove(char[] array, int index)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char[]",
      "name": "char[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from. array is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the element at the specified position.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index >= array.length) or if the array is null.",
        "kind": "THROWS",
        "condition": "args[1]<0 || args[0]==null"
      }
    ]
  },
  {
    "signature": "removeElement(char[] array, char element)",
    "name": "removeElement",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char[]",
      "name": "char[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "char",
            "name": "char",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the first occurrence of the specified element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "remove(double[] array, int index)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from. array is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the element at the specified position.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index >= array.length) or if the array is null.",
        "kind": "THROWS",
        "condition": "args[1]<0 || args[0]==null"
      }
    ]
  },
  {
    "signature": "removeElement(double[] array, double element)",
    "name": "removeElement",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[D",
            "name": "double[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "double",
            "name": "double",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the first occurrence of the specified element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "remove(float[] array, int index)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float[]",
      "name": "float[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from. array is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the element at the specified position.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index >= array.length) or if the array is null.",
        "kind": "THROWS",
        "condition": "args[1]<0 || args[0]==null"
      }
    ]
  },
  {
    "signature": "removeElement(float[] array, float element)",
    "name": "removeElement",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "float[]",
      "name": "float[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[F",
            "name": "float[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "float",
            "name": "float",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the first occurrence of the specified element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "remove(int[] array, int index)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from. array is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the element at the specified position.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index >= array.length) or if the array is null.",
        "kind": "THROWS",
        "condition": "args[1]<0 || args[0]==null"
      }
    ]
  },
  {
    "signature": "removeElement(int[] array, int element)",
    "name": "removeElement",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[I",
            "name": "int[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the first occurrence of the specified element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "remove(long[] array, int index)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from. array is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the element at the specified position.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index >= array.length) or if the array is null.",
        "kind": "THROWS",
        "condition": "args[1]<0 || args[0]==null"
      }
    ]
  },
  {
    "signature": "removeElement(long[] array, long element)",
    "name": "removeElement",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long[]",
      "name": "long[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[J",
            "name": "long[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "long",
            "name": "long",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the first occurrence of the specified element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "remove(short[] array, int index)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short[]",
      "name": "short[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from. array is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "index"
        },
        "comment": "the position of the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the element at the specified position.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.IndexOutOfBoundsException",
          "name": "IndexOutOfBoundsException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the index is out of range (index < 0 || index >= array.length) or if the array is null.",
        "kind": "THROWS",
        "condition": "args[1]<0 || args[0]==null"
      }
    ]
  },
  {
    "signature": "removeElement(short[] array, short element)",
    "name": "removeElement",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ArrayUtils",
      "name": "ArrayUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ArrayUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "short[]",
      "name": "short[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "short",
          "name": "short",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[S",
            "name": "short[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "the array to remove the element from null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "short",
            "name": "short",
            "isArray": false
          },
          "name": "element"
        },
        "comment": "the element to be removed.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "A new array containing the existing elements except the first occurrence of the specified element.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]