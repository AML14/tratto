/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 04:04:49 GMT 2023
 */
package org.apache.commons.lang.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0010() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.UK;
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-764), locale0);
    }

    @Test(timeout = 4000)
    public void test0111() throws Throwable {
        Locale locale0 = Locale.KOREAN;
    }

    @Test(timeout = 4000)
    public void test0112() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0113() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0114() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0115() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0116() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0117() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0118() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    }

    @Test(timeout = 4000)
    public void test0123() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0124() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0125() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0126() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0127() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0128() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0129() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test0130() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test0131() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test0132() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
    }

    @Test(timeout = 4000)
    public void test0133() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test0134() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test0135() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test0136() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test0137() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0138() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test0139() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
    }

    @Test(timeout = 4000)
    public void test0140() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test0141() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test0142() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test0143() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test0144() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0145() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        mockGregorianCalendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test0146() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        mockGregorianCalendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test0147() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test0148() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        mockGregorianCalendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test0149() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test0150() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
    }

    @Test(timeout = 4000)
    public void test0151() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test0152() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test0153() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0160() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0161() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0162() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0163() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0164() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0165() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0166() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test0167() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test0168() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test0169() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test0170() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test0171() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test0172() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test0173() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0174() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        mockGregorianCalendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test0175() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        mockGregorianCalendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test0176() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test0177() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        mockGregorianCalendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test0178() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test0179() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test0180() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test0181() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test0182() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        StringBuffer stringBuffer0 = new StringBuffer("1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C");
        StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test0283() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    }

    @Test(timeout = 4000)
    public void test0288() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test0289() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test0290() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test0291() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
    }

    @Test(timeout = 4000)
    public void test0295() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test0296() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test0297() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.init();
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test0398() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    }

    @Test(timeout = 4000)
    public void test03103() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test03104() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test03105() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test03106() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
    }

    @Test(timeout = 4000)
    public void test03114() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test03115() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test03116() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[6];
        String string0 = fastDateFormat0.parseToken("#fgg0XqGjy$K(D", intArray0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test04117() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    }

    @Test(timeout = 4000)
    public void test04118() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test04119() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test04120() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
    }

    @Test(timeout = 4000)
    public void test04121() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test04122() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test04123() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test04124() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test04125() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test04126() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test04127() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test04132() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test04133() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test04134() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test04135() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test04136() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test04137() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test04138() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test04139() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test04140() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test04142() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test04148() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test04149() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test04150() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test04151() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test04152() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test04153() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test04154() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test04155() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test04156() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test04157() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test04158() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        List list0 = fastDateFormat0.parsePattern();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test05167() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
    }

    @Test(timeout = 4000)
    public void test05172() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test05173() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test05174() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test05175() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test05176() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        List list0 = fastDateFormat0.parsePattern();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test06202() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test06207() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test06208() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test06209() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test06210() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test06211() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test06212() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test06213() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test06214() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test06215() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test06216() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0, locale0);
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test07217() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    }

    @Test(timeout = 4000)
    public void test07218() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test07219() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test07220() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
    }

    @Test(timeout = 4000)
    public void test07221() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test07222() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test07223() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test07224() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test07225() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test07226() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test07227() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
    }

    @Test(timeout = 4000)
    public void test07229() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test07230() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test07231() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test07232() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test07233() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test07234() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test07235() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test08236() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
    }

    @Test(timeout = 4000)
    public void test08237() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test08238() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test08239() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test08240() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test08241() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test08242() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test08247() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test08248() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test08249() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test08250() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test08251() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test08252() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test08253() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test08254() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test08255() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test08262() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test08263() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test08264() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test08265() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test08266() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test08267() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test08268() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test08269() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test08270() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        timeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test08271() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        timeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test08272() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test08273() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        timeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test08274() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, "0\"ED.Cahr1Cm/{Vt");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        timeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test09275() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
    }

    @Test(timeout = 4000)
    public void test09276() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test09277() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test09278() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test09279() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test09280() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test09281() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test09286() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test09287() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test09288() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test09289() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test09290() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test09291() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test09293() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test09294() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test09301() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test09302() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test09303() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test09304() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test09305() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test09306() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test09307() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test09308() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test09309() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test09310() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        timeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test09311() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        timeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test09312() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        timeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test09313() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        TimeZone timeZone0 = fastDateFormat0.getTimeZone();
        timeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test10314() throws Throwable {
        Locale locale0 = Locale.GERMANY;
    }

    @Test(timeout = 4000)
    public void test10315() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test10316() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test10317() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test10318() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test10319() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test10320() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test10321() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
    }

    @Test(timeout = 4000)
    public void test10326() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test10327() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test10328() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test10329() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test10330() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test10331() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test10332() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test10333() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test10334() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test10335() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test10341() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test10342() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test10343() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test10344() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test10345() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test10346() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test10347() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test10348() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test10349() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.getPattern();
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test11350() throws Throwable {
        Locale locale0 = Locale.CANADA;
    }

    @Test(timeout = 4000)
    public void test11351() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test11352() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test11353() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test11354() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test11355() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test11356() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test11357() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
    }

    @Test(timeout = 4000)
    public void test11362() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test11363() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test11364() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test11365() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test11366() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test11367() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test11368() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test11369() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test11370() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test11371() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test11376() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test11377() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test11378() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test11379() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test11380() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test11381() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test11382() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test11383() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test11384() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test12392() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
    }

    @Test(timeout = 4000)
    public void test12393() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test12394() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test12395() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test12396() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test12397() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test12398() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test12403() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test12404() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test12405() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test12406() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test12407() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test12408() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test12409() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test12410() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test12411() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test12412() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test12413() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test12414() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test12415() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test12416() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z", (TimeZone) simpleTimeZone0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test13417() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test13422() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test13423() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test13424() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test14425() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
    }

    @Test(timeout = 4000)
    public void test14426() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test14427() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test14428() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test14429() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test14430() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test14431() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test14432() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
    }

    @Test(timeout = 4000)
    public void test14437() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test14438() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test14439() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test14440() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test14441() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test14442() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test14443() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test14444() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test14445() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("'XETJC", locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test15446() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
    }

    @Test(timeout = 4000)
    public void test15451() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test15452() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test15453() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("sa");
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test16454() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test16459() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test16460() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test16461() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test17462() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
    }

    @Test(timeout = 4000)
    public void test17463() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test17464() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test17465() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test17466() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test17467() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test17468() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test17469() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test17474() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test17475() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test17476() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test17477() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test17478() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test17479() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test17480() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test17481() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test17482() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test17483() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
    }

    @Test(timeout = 4000)
    public void test17484() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    }

    @Test(timeout = 4000)
    public void test17489() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test17490() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test17491() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test17492() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test17493() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test17494() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test17495() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test17496() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test17497() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test17498() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test18521() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test18527() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test18528() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test18529() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test18530() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test18531() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test18532() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test18533() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test18534() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test18535() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test18536() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test19537() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    }

    @Test(timeout = 4000)
    public void test19538() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test19539() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test19540() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test19541() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test19542() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test19543() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test19548() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test19549() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test19550() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test19551() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test19552() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test19553() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test19554() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test19555() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test19556() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
    }

    @Test(timeout = 4000)
    public void test19557() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test19558() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test19559() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test19560() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test19561() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test19562() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test19563() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    }

    @Test(timeout = 4000)
    public void test19564() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
    }

    @Test(timeout = 4000)
    public void test19565() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test19566() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test19567() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test19574() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test19575() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test19576() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test19577() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test19578() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test19579() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test19580() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test19581() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test19582() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test19583() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test19584() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test19585() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test19586() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test19587() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test19588() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test19589() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test19590() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test19591() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test19592() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test19593() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test19594() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test19595() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0);
        Locale locale0 = Locale.ITALY;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test20596() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
    }

    @Test(timeout = 4000)
    public void test20601() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test20602() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test20603() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test20604() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    }

    @Test(timeout = 4000)
    public void test20605() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    }

    @Test(timeout = 4000)
    public void test20606() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        mockSimpleDateFormat0.toLocalizedPattern();
    }

    @Test(timeout = 4000)
    public void test20607() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        mockSimpleDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test20608() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        mockSimpleDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test20609() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test20610() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test20611() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test20612() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test20613() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
    }

    @Test(timeout = 4000)
    public void test20619() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test20620() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test20621() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test20622() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        mockSimpleDateFormat0.toLocalizedPattern();
    }

    @Test(timeout = 4000)
    public void test20623() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        mockSimpleDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test20624() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        mockSimpleDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test20625() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test20626() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test20627() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test20628() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test21629() throws Throwable {
        Locale locale0 = Locale.FRANCE;
    }

    @Test(timeout = 4000)
    public void test21630() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test21631() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test21632() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test21633() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test21634() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test21635() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test21636() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
    }

    @Test(timeout = 4000)
    public void test21641() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test21642() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test21643() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test21644() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test21645() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test21646() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test21647() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test21648() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test21649() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test21650() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
    }

    @Test(timeout = 4000)
    public void test21656() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test21657() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test21658() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test21659() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test21660() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test21661() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test21662() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test21663() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test21664() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(2480L);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test22686() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        int[] intArray0 = new int[3];
        fastDateFormat0.parseToken("", intArray0);
    }

    @Test(timeout = 4000)
    public void test23695() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        fastDateFormat0.parseToken("", (int[]) null);
    }

    @Test(timeout = 4000)
    public void test24696() throws Throwable {
        Locale locale0 = Locale.GERMAN;
    }

    @Test(timeout = 4000)
    public void test24697() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test24698() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test24699() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test24700() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test24701() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test24702() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test24703() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 0, locale0);
    }

    @Test(timeout = 4000)
    public void test25704() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
    }

    @Test(timeout = 4000)
    public void test25705() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test25706() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
    }

    @Test(timeout = 4000)
    public void test25707() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test25708() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test25709() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test25710() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test25711() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test25712() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test25713() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("A:=");
        FastDateFormat.getTimeInstance(2623, timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test26720() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat.getTimeInstance(15, (TimeZone) simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test27728() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat.getTimeInstance(739, locale0);
    }

    @Test(timeout = 4000)
    public void test28729() throws Throwable {
        FastDateFormat.getTimeInstance(100);
    }

    @Test(timeout = 4000)
    public void test29730() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
    }

    @Test(timeout = 4000)
    public void test29731() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test29732() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat.getDateTimeInstance((-339), (-339), timeZone0);
    }

    @Test(timeout = 4000)
    public void test30733() throws Throwable {
        FastDateFormat.getDateTimeInstance(13, 31);
    }

    @Test(timeout = 4000)
    public void test31734() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
    }

    @Test(timeout = 4000)
    public void test31735() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test31736() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test31737() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test31738() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test31739() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test31740() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "`{,s8u`5e* '8 v");
        FastDateFormat.getDateInstance(6, (TimeZone) simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test32741() throws Throwable {
        Locale locale0 = new Locale("");
    }

    @Test(timeout = 4000)
    public void test32742() throws Throwable {
        Locale locale0 = new Locale("");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test32743() throws Throwable {
        Locale locale0 = new Locale("");
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test32744() throws Throwable {
        Locale locale0 = new Locale("");
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test32745() throws Throwable {
        Locale locale0 = new Locale("");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test32746() throws Throwable {
        Locale locale0 = new Locale("");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test32747() throws Throwable {
        Locale locale0 = new Locale("");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test32748() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat.getDateInstance((-1), locale0);
    }

    @Test(timeout = 4000)
    public void test33749() throws Throwable {
        FastDateFormat.getDateInstance((-2289));
    }

    @Test(timeout = 4000)
    public void test34758() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(10, 835, 0);
    }

    @Test(timeout = 4000)
    public void test34759() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(10, 835, 0);
        fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    }

    @Test(timeout = 4000)
    public void test35768() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.format((Date) null);
    }

    @Test(timeout = 4000)
    public void test36769() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    }

    @Test(timeout = 4000)
    public void test36774() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test36775() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test36776() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test36777() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
        fastDateFormat0.format(0L, (StringBuffer) null);
    }

    @Test(timeout = 4000)
    public void test37780() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
    }

    @Test(timeout = 4000)
    public void test37781() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test37782() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test37783() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test37784() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test37785() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test37786() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test37787() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test37792() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test37793() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test37794() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test37795() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test37796() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test37797() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test37798() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test37799() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test37800() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test37801() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test37802() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        fastDateFormat0.format(0L);
    }

    @Test(timeout = 4000)
    public void test38811() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        StringBuffer stringBuffer0 = new StringBuffer("No date time pattern for locale: ");
    }

    @Test(timeout = 4000)
    public void test38812() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        StringBuffer stringBuffer0 = new StringBuffer("No date time pattern for locale: ");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test38813() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        StringBuffer stringBuffer0 = new StringBuffer("No date time pattern for locale: ");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test38814() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        StringBuffer stringBuffer0 = new StringBuffer("No date time pattern for locale: ");
        fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test39834() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    }

    @Test(timeout = 4000)
    public void test39835() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    }

    @Test(timeout = 4000)
    public void test39836() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        mockSimpleDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test39837() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        mockSimpleDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test39838() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        mockSimpleDateFormat0.toLocalizedPattern();
    }

    @Test(timeout = 4000)
    public void test39839() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test39840() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test39841() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test39842() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test39843() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
    }

    @Test(timeout = 4000)
    public void test39849() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test39850() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test39851() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test39852() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test39853() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test39854() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test39855() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test39856() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test39857() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        mockSimpleDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test39858() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        mockSimpleDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test39859() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        mockSimpleDateFormat0.toLocalizedPattern();
    }

    @Test(timeout = 4000)
    public void test39860() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test39861() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test39862() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test39863() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "IH2");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
        String string0 = fastDateFormat0.format(calendar0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test40872() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
    }

    @Test(timeout = 4000)
    public void test40876() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test40877() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test40878() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test41887() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
    }

    @Test(timeout = 4000)
    public void test41888() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test41889() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test41890() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test41891() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test41892() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test41893() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test41894() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    }

    @Test(timeout = 4000)
    public void test41895() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Locale locale0 = Locale.US;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
    }

    @Test(timeout = 4000)
    public void test42896() throws Throwable {
        FastDateFormat.getDateTimeInstance((-1105), 0, (TimeZone) null, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test43897() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
    }

    @Test(timeout = 4000)
    public void test43898() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test43899() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
    }

    @Test(timeout = 4000)
    public void test43900() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test43901() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test43902() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test43903() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test43904() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test43905() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test43906() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test43911() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test43912() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test43913() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test43914() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test43915() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test43916() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test43917() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test43918() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test43919() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test43920() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone(" 9JtTd.$cJi'MXwGE");
        Locale locale0 = Locale.KOREA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test44921() throws Throwable {
        Locale locale0 = new Locale("", "", "");
    }

    @Test(timeout = 4000)
    public void test44922() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test44923() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test44924() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test44925() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test44926() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test44927() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test44928() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test44933() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test44934() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test44935() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test44936() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test44937() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test44938() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test44939() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test44940() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test44941() throws Throwable {
        Locale locale0 = new Locale("", "", "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test45949() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
    }

    @Test(timeout = 4000)
    public void test45950() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test45951() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test45952() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test45953() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test45954() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test45955() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test45960() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test45961() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test45962() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test45963() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test45964() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test45965() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test45966() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test45967() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test45968() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test45969() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test45970() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test45971() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test45972() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test45973() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test46974() throws Throwable {
        FastDateFormat.getDateInstance(103, (TimeZone) null, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test47983() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
    }

    @Test(timeout = 4000)
    public void test47984() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
    }

    @Test(timeout = 4000)
    public void test47985() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test47986() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test47987() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test47994() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test47995() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test47996() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test47997() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test47998() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test47999() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test471000() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test471001() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A:=");
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test481010() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
    }

    @Test(timeout = 4000)
    public void test481011() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test481017() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test481018() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test481019() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test481020() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate(4120L);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test491021() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test491026() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test491027() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test491028() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test491029() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    }

    @Test(timeout = 4000)
    public void test491030() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test491036() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test491037() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test491038() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test491039() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        mockGregorianCalendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test491040() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        mockGregorianCalendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test491041() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        mockGregorianCalendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test491042() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test501051() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
    }

    @Test(timeout = 4000)
    public void test501052() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
    }

    @Test(timeout = 4000)
    public void test501057() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test501058() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test501059() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test501060() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = fastDateFormat0.equals(mockDate0);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test511061() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    }

    @Test(timeout = 4000)
    public void test511062() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test511063() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test511064() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test511065() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test511066() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test511067() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
    }

    @Test(timeout = 4000)
    public void test511068() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test511069() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test511070() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test511071() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test511072() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test511073() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test511074() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test511079() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test511080() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test511081() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test511082() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test511083() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test511084() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test511085() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test511086() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test511087() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test511088() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test511089() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test511090() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test511091() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test511092() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test511093() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
    }

    @Test(timeout = 4000)
    public void test511094() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test511095() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test511096() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test511097() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test511098() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test511099() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test511100() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test511101() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test511102() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test511103() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test511104() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
    }

    @Test(timeout = 4000)
    public void test511105() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test511106() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test511107() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test511114() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test511115() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test511116() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test511117() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test511118() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test511119() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test511120() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test511121() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test511122() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test511123() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test511124() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test511125() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test511126() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test511127() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test511128() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test511129() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test511130() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test511131() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test511132() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test511133() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test511134() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test511135() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test521144() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
    }

    @Test(timeout = 4000)
    public void test521146() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
    }

    @Test(timeout = 4000)
    public void test521151() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test521152() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test521153() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test521154() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        attributedCharacterIterator0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test521155() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        attributedCharacterIterator0.getRunLimit();
    }

    @Test(timeout = 4000)
    public void test521156() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        attributedCharacterIterator0.getIndex();
    }

    @Test(timeout = 4000)
    public void test521157() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        attributedCharacterIterator0.getRunStart();
    }

    @Test(timeout = 4000)
    public void test521158() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long((-1211L));
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
        attributedCharacterIterator0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test531166() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    }

    @Test(timeout = 4000)
    public void test531171() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test531172() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test531173() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test531174() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test531175() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test531176() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test531177() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test531178() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test531179() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test531180() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    }

    @Test(timeout = 4000)
    public void test531181() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
    }

    @Test(timeout = 4000)
    public void test531182() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test531183() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test531184() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    }

    @Test(timeout = 4000)
    public void test531185() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test531186() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test531187() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test531188() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test531195() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test531196() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test531197() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test531198() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test531199() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test531200() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test531201() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test531202() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test531203() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test531204() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        mockGregorianCalendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test531205() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        mockGregorianCalendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test531206() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test531207() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        mockGregorianCalendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test531208() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test531209() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test531210() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test531211() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test531212() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test531213() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test531214() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test541247() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
    }

    @Test(timeout = 4000)
    public void test541248() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test541249() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test541250() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    }

    @Test(timeout = 4000)
    public void test541251() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test541252() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test541253() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test541254() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.CHINA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        fastDateFormat0.format((Object) "", stringBuffer0, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test551255() throws Throwable {
        FastDateFormat.getInstance("HmEwv:<G%uK-&");
    }

    @Test(timeout = 4000)
    public void test561256() throws Throwable {
        FastDateFormat.getInstance("|~#+%|r<");
    }

    @Test(timeout = 4000)
    public void test571257() throws Throwable {
        FastDateFormat.getInstance(".hp7jH`/1_94X/S#");
    }

    @Test(timeout = 4000)
    public void test581258() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
    }

    @Test(timeout = 4000)
    public void test581259() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test581260() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test581261() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test581262() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test581263() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test581264() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField");
        FastDateFormat.getInstance("org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField", (TimeZone) simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test591265() throws Throwable {
        FastDateFormat.getInstance("<null>");
    }

    @Test(timeout = 4000)
    public void test601266() throws Throwable {
        FastDateFormat.getInstance("F|&l");
    }

    @Test(timeout = 4000)
    public void test611267() throws Throwable {
        FastDateFormat.getInstance("*y%[}sjm@y", (Locale) null);
    }

    @Test(timeout = 4000)
    public void test621268() throws Throwable {
        FastDateFormat.getInstance("$h]hz[im+[", (TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test631271() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat.getInstance(".y^g%D]]q!ZT", timeZone0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test641272() throws Throwable {
        FastDateFormat.getInstance("*#m(F_fi<WsDs3");
    }

    @Test(timeout = 4000)
    public void test651280() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat.getInstance("&c+c", locale0);
    }

    @Test(timeout = 4000)
    public void test661281() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
    }

    @Test(timeout = 4000)
    public void test661282() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    }

    @Test(timeout = 4000)
    public void test661283() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test661284() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
    }

    @Test(timeout = 4000)
    public void test661285() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test661286() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test661287() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test661288() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test661289() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test661290() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = new Locale("", "4Yaav@[swc8|");
        FastDateFormat.getInstance("4Yaav@[swc8|", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test671292() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
    }

    @Test(timeout = 4000)
    public void test671293() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test671294() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test671295() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
    }

    @Test(timeout = 4000)
    public void test671300() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test671301() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test671302() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test671303() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("W9", timeZone0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test681310() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
    }

    @Test(timeout = 4000)
    public void test681311() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test681312() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test681313() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test681314() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test681315() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test681316() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test681317() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 45, 0, 45, 0, 1);
        Locale locale0 = Locale.GERMANY;
        FastDateFormat.getInstance("Unknown class: ", (TimeZone) simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test691318() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
    }

    @Test(timeout = 4000)
    public void test691319() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test691320() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test691321() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test691322() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test691323() throws Throwable {
        Locale locale0 = new Locale("No date time pattern for locale: ", "S<qo?y0");
        FastDateFormat.getInstance("S<qo?y0", locale0);
    }

    @Test(timeout = 4000)
    public void test701326() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat.getInstance("{363RHP)", timeZone0);
    }

    @Test(timeout = 4000)
    public void test711327() throws Throwable {
        FastDateFormat.getInstance("L");
    }

    @Test(timeout = 4000)
    public void test721328() throws Throwable {
        Locale locale0 = Locale.KOREA;
    }

    @Test(timeout = 4000)
    public void test721329() throws Throwable {
        Locale locale0 = Locale.KOREA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test721330() throws Throwable {
        Locale locale0 = Locale.KOREA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test721331() throws Throwable {
        Locale locale0 = Locale.KOREA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test721332() throws Throwable {
        Locale locale0 = Locale.KOREA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test721333() throws Throwable {
        Locale locale0 = Locale.KOREA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test721334() throws Throwable {
        Locale locale0 = Locale.KOREA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test721335() throws Throwable {
        Locale locale0 = Locale.KOREA;
        FastDateFormat.getInstance(" 9JtTd.$cJi'MXwGE", locale0);
    }

    @Test(timeout = 4000)
    public void test731336() throws Throwable {
        FastDateFormat.getInstance("IWw|");
    }

    @Test(timeout = 4000)
    public void test741337() throws Throwable {
        FastDateFormat.getInstance("\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00");
    }

    @Test(timeout = 4000)
    public void test751338() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
    }

    @Test(timeout = 4000)
    public void test751339() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test751340() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test751341() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test751342() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test751343() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test751344() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), "");
        FastDateFormat.getInstance("FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]", (TimeZone) simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test761345() throws Throwable {
        FastDateFormat.getInstance("C/");
    }

    @Test(timeout = 4000)
    public void test771346() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
    }

    @Test(timeout = 4000)
    public void test771347() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test771348() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test771349() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test771350() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test771351() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test771352() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test771353() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("%!6BqT/ 2.y");
        FastDateFormat.getInstance("%!6BqT/ 2.y", locale0);
    }

    @Test(timeout = 4000)
    public void test781354() throws Throwable {
        Locale locale0 = Locale.CHINA;
    }

    @Test(timeout = 4000)
    public void test781355() throws Throwable {
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test781356() throws Throwable {
        Locale locale0 = Locale.CHINA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test781357() throws Throwable {
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test781358() throws Throwable {
        Locale locale0 = Locale.CHINA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test781359() throws Throwable {
        Locale locale0 = Locale.CHINA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test781360() throws Throwable {
        Locale locale0 = Locale.CHINA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test781361() throws Throwable {
        Locale locale0 = Locale.CHINA;
        FastDateFormat.getInstance("@AwdO6>Z*", locale0);
    }

    @Test(timeout = 4000)
    public void test791369() throws Throwable {
        Locale locale0 = Locale.CHINA;
        FastDateFormat.getInstance((String) null, locale0);
    }

    @Test(timeout = 4000)
    public void test801370() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
    }

    @Test(timeout = 4000)
    public void test801371() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        fastDateFormat1.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test801372() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
        fastDateFormat1.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test811373() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        ZoneId.getAvailableZoneIds();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        fastDateFormat0.hashCode();
        zoneOffset0.getRules();
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        StringBuffer stringBuffer1 = decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
        fastDateFormat0.format((long) 0, stringBuffer1);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test811374() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        ZoneId.getAvailableZoneIds();
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        fastDateFormat0.hashCode();
        zoneOffset0.getRules();
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        StringBuffer stringBuffer1 = decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
        fastDateFormat0.format((long) 0, stringBuffer1);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test821375() throws Throwable {
        Locale locale0 = new Locale("");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test831376() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        ZoneId.getAvailableZoneIds();
        timeZone0.setID("sa");
        zoneOffset0.getRules();
        DecimalFormat decimalFormat0 = new DecimalFormat();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "sa");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
        decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
        Locale locale0 = Locale.UK;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test841377() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("km\"=7X{|rJ");
        Locale locale0 = new Locale("4|<9 ,H| Do&/", "IUgG1T[MPmf6/yGLlvX", "km\"=7X{|rJ");
        FastDateFormat.getInstance("km\"=7X{|rJ", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test851378() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        String string0 = fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test861380() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getLocale();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test871381() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(1);
        fastDateFormat0.parseObject("", parsePosition0);
        parsePosition0.getErrorIndex();
    }

    @Test(timeout = 4000)
    public void test871382() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(1);
        fastDateFormat0.parseObject("", parsePosition0);
        fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test881383() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
        fastDateFormat0.format((Calendar) null);
    }

    @Test(timeout = 4000)
    public void test891384() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, "");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test901385() throws Throwable {
        FastDateFormat.getTimeInstance(0);
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);
    }

    @Test(timeout = 4000)
    public void test911386() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        String string0 = fastDateFormat0.format((long) 0);
    }

    @Test(timeout = 4000)
    public void test921387() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    }

    @Test(timeout = 4000)
    public void test931388() throws Throwable {
        FastDateFormat.getDateTimeInstance(1960, 0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test941389() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        String string0 = fastDateFormat0.toString();
    }

    @Test(timeout = 4000)
    public void test951390() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
        int int0 = fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test961391() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0);
        fastDateFormat0.parseObject("\u683C\u6797\u5A01\u6CBB\u65F6\u95F4", (ParsePosition) null);
    }

    @Test(timeout = 4000)
    public void test971392() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 3, 3, 337);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test971393() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 3, 3, 337);
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.toString();
    }
}
