[
  {
    "signature": "org.apache.commons.lang3.reflect.TypeUtils()",
    "name": "org.apache.commons.lang3.reflect.TypeUtils",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "isAssignable(java.lang.reflect.Type type, java.lang.reflect.Type toType)",
    "name": "isAssignable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.reflect.Type",
          "name": "Type",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "java.lang.reflect.Type",
          "name": "Type",
          "isArray": false
        },
        "name": "toType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.Type",
            "name": "Type",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "the subject type to be assigned to the target type.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.Type",
            "name": "Type",
            "isArray": false
          },
          "name": "toType"
        },
        "comment": "the target type.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if type is assignable to toType.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTypeArguments(java.lang.reflect.ParameterizedType type)",
    "name": "getTypeArguments",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>",
      "name": "java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.reflect.ParameterizedType",
          "name": "ParameterizedType",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.ParameterizedType",
            "name": "ParameterizedType",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "specifies the subject parameterized type from which to harvest the parameters.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a map of the type arguments to their respective type variables.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getTypeArguments(java.lang.reflect.Type type, java.lang.Class<?> toClass)",
    "name": "getTypeArguments",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>",
      "name": "java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.reflect.Type",
          "name": "Type",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "toClass"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.Type",
            "name": "Type",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "the type from which to determine the type parameters of toClass.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "toClass"
        },
        "comment": "the class whose type parameters are to be determined based on the subtype type.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a map of the type assignments for the type variables in each type in the inheritance hierarchy from type to toClass inclusive.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "determineTypeArguments(java.lang.Class<?> cls, java.lang.reflect.ParameterizedType superType)",
    "name": "determineTypeArguments",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>",
      "name": "java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "cls"
      },
      {
        "type": {
          "qualifiedName": "java.lang.reflect.ParameterizedType",
          "name": "ParameterizedType",
          "isArray": false
        },
        "name": "superType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "cls"
        },
        "comment": "the class whose type parameters are to be determined.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.ParameterizedType",
            "name": "ParameterizedType",
            "isArray": false
          },
          "name": "superType"
        },
        "comment": "superType is super. super type from which cls's type arguments are to be determined.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a map of the type assignments that could be determined for the type variables in each type in the inheritance hierarchy from type to toClass inclusive.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isInstance(java.lang.Object value, java.lang.reflect.Type type)",
    "name": "isInstance",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      },
      {
        "type": {
          "qualifiedName": "java.lang.reflect.Type",
          "name": "Type",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "value"
        },
        "comment": "the value to be checked.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.Type",
            "name": "Type",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "the target type.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true of value is an instance of type.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "normalizeUpperBounds(java.lang.reflect.Type[] bounds)",
    "name": "normalizeUpperBounds",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.reflect.Type[]",
      "name": "java.lang.reflect.Type[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.reflect.Type;",
          "name": "Type[]",
          "isArray": true
        },
        "name": "bounds"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.reflect.Type;",
            "name": "Type[]",
            "isArray": true
          },
          "name": "bounds"
        },
        "comment": "an array of types representing the upper bounds of either WildcardType or TypeVariable.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an array containing the values from bounds minus the redundant types.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getImplicitBounds(java.lang.reflect.TypeVariable<?> typeVariable)",
    "name": "getImplicitBounds",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.reflect.Type[]",
      "name": "java.lang.reflect.Type[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.reflect.TypeVariable",
          "name": "TypeVariable",
          "isArray": false
        },
        "name": "typeVariable"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.TypeVariable",
            "name": "TypeVariable",
            "isArray": false
          },
          "name": "typeVariable"
        },
        "comment": "the subject type variable.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a not empty array containing the bounds of the type variable.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getImplicitUpperBounds(java.lang.reflect.WildcardType wildcardType)",
    "name": "getImplicitUpperBounds",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.reflect.Type[]",
      "name": "java.lang.reflect.Type[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.reflect.WildcardType",
          "name": "WildcardType",
          "isArray": false
        },
        "name": "wildcardType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.WildcardType",
            "name": "WildcardType",
            "isArray": false
          },
          "name": "wildcardType"
        },
        "comment": "the subject wildcard type.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a not empty array containing the upper bounds of the wildcard type.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getImplicitLowerBounds(java.lang.reflect.WildcardType wildcardType)",
    "name": "getImplicitLowerBounds",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.reflect.Type[]",
      "name": "java.lang.reflect.Type[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.reflect.WildcardType",
          "name": "WildcardType",
          "isArray": false
        },
        "name": "wildcardType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.WildcardType",
            "name": "WildcardType",
            "isArray": false
          },
          "name": "wildcardType"
        },
        "comment": "the subject wildcard type.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a not empty array containing the lower bounds of the wildcard type.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "typesSatisfyVariables(java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> typeVarAssigns)",
    "name": "typesSatisfyVariables",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "typeVarAssigns"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Map",
            "name": "Map",
            "isArray": false
          },
          "name": "typeVarAssigns"
        },
        "comment": "specifies the potential types to be assigned to the type variables.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "True if or not the types can be assigned to their respective type variables., false otherwise",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getRawType(java.lang.reflect.Type type, java.lang.reflect.Type assigningType)",
    "name": "getRawType",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Class<?>",
      "name": "java.lang.Class<?>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.reflect.Type",
          "name": "Type",
          "isArray": false
        },
        "name": "type"
      },
      {
        "type": {
          "qualifiedName": "java.lang.reflect.Type",
          "name": "Type",
          "isArray": false
        },
        "name": "assigningType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.Type",
            "name": "Type",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "to resolve.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.Type",
            "name": "Type",
            "isArray": false
          },
          "name": "assigningType"
        },
        "comment": "type to be resolved against.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the resolved Class object or null if the type could not be resolved.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isArrayType(java.lang.reflect.Type type)",
    "name": "isArrayType",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.reflect.Type",
          "name": "Type",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.Type",
            "name": "Type",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "the type to be checked.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if type is an array class or a GenericArrayType.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getArrayComponentType(java.lang.reflect.Type type)",
    "name": "getArrayComponentType",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.reflect.TypeUtils",
      "name": "TypeUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.reflect.TypeUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.reflect.Type",
      "name": "java.lang.reflect.Type",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.reflect.Type",
          "name": "Type",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.reflect.Type",
            "name": "Type",
            "isArray": false
          },
          "name": "type"
        },
        "comment": "the type to be checked.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "component type or null if type is not an array type.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]