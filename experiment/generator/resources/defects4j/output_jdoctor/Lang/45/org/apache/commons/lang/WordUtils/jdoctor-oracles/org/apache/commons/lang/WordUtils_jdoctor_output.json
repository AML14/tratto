[
  {
    "signature": "org.apache.commons.lang.WordUtils()",
    "name": "org.apache.commons.lang.WordUtils",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.WordUtils",
      "name": "WordUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.WordUtils",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "wrap(java.lang.String str, int wrapLength)",
    "name": "wrap",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.WordUtils",
      "name": "WordUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.WordUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "wrapLength"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to be word wrapped null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "wrapLength"
        },
        "comment": "the column to wrap the words at. wrapLength is less than 1 is treated as 1.",
        "kind": "PARAM",
        "condition": "args[1]<1"
      }
    ],
    "returnTag": {
      "comment": "a line with newlines inserted, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "wrap(java.lang.String str, int wrapLength, java.lang.String newLineStr, boolean wrapLongWords)",
    "name": "wrap",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.WordUtils",
      "name": "WordUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.WordUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "wrapLength"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "newLineStr"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "wrapLongWords"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to be word wrapped null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "wrapLength"
        },
        "comment": "the column to wrap the words at. wrapLength is less than 1 is treated as 1.",
        "kind": "PARAM",
        "condition": "args[1]<1"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "newLineStr"
        },
        "comment": "the string to insert for a new line. newLineStr is null uses the system property line separator.",
        "kind": "PARAM",
        "condition": "args[2]==null"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "wrapLongWords"
        },
        "comment": "wrapLongWords is true. true if long words (such as URLs) should be wrapped.",
        "kind": "PARAM",
        "condition": "args[3]==true"
      }
    ],
    "returnTag": {
      "comment": "a line with newlines inserted, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "capitalize(java.lang.String str)",
    "name": "capitalize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.WordUtils",
      "name": "WordUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.WordUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to capitalize null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "capitalized String, null if null String input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "capitalize(java.lang.String str, char[] delimiters)",
    "name": "capitalize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.WordUtils",
      "name": "WordUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.WordUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      },
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "delimiters"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to capitalize null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "delimiters"
        },
        "comment": "set of characters to determine capitalization. delimiters is null means whitespace.",
        "kind": "PARAM",
        "condition": "args[1]==null"
      }
    ],
    "returnTag": {
      "comment": "capitalized String, null if null String input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "capitalizeFully(java.lang.String str)",
    "name": "capitalizeFully",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.WordUtils",
      "name": "WordUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.WordUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to capitalize null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "capitalized String, null if null String input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "capitalizeFully(java.lang.String str, char[] delimiters)",
    "name": "capitalizeFully",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.WordUtils",
      "name": "WordUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.WordUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      },
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "delimiters"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to capitalize null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "delimiters"
        },
        "comment": "set of characters to determine capitalization. delimiters is null means whitespace.",
        "kind": "PARAM",
        "condition": "args[1]==null"
      }
    ],
    "returnTag": {
      "comment": "capitalized String, null if null String input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "uncapitalize(java.lang.String str)",
    "name": "uncapitalize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.WordUtils",
      "name": "WordUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.WordUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to uncapitalize null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "uncapitalized String, null if null String input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "uncapitalize(java.lang.String str, char[] delimiters)",
    "name": "uncapitalize",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.WordUtils",
      "name": "WordUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.WordUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      },
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "delimiters"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to uncapitalize null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "delimiters"
        },
        "comment": "set of characters to determine uncapitalization. delimiters is null means whitespace.",
        "kind": "PARAM",
        "condition": "args[1]==null"
      }
    ],
    "returnTag": {
      "comment": "uncapitalized String, null if null String input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "swapCase(java.lang.String str)",
    "name": "swapCase",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.WordUtils",
      "name": "WordUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.WordUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to swap case null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the changed String, null if null String input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "initials(java.lang.String str)",
    "name": "initials",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.WordUtils",
      "name": "WordUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.WordUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to get initials from null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "String of initial letters, null if null String input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "initials(java.lang.String str, char[] delimiters)",
    "name": "initials",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.WordUtils",
      "name": "WordUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.WordUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      },
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "delimiters"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the String to get initials from null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[C",
            "name": "char[]",
            "isArray": true
          },
          "name": "delimiters"
        },
        "comment": "set of characters to determine words. delimiters is null means whitespace.",
        "kind": "PARAM",
        "condition": "args[1]==null"
      }
    ],
    "returnTag": {
      "comment": "String of initial letters, null if null String input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "abbreviate(java.lang.String str, int lower, int upper, java.lang.String appendToEnd)",
    "name": "abbreviate",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang.WordUtils",
      "name": "WordUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang.WordUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "str"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "lower"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "upper"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "appendToEnd"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "str"
        },
        "comment": "the string to be abbreviated. If null is passed null is returned. If the empty String is passed. str is the empty string is returned.",
        "kind": "PARAM",
        "condition": "args[0].isEmpty()"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "lower"
        },
        "comment": "the lower limit.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "upper"
        },
        "comment": "the upper limit; specify -1 if no limit is desired. If the upper limit is lower than the lower limit upper . upper is adjusted to be the same as the lower limit.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "appendToEnd"
        },
        "comment": "String to be appended to the end of the abbreviated string. This is appended ONLY if the string was indeed abbreviated. The append does not count towards the lower or upper limits.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the abbreviated String.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]