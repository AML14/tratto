/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:01:37 GMT 2023
 */
package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3359);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.KOREA;
        FastDateParser fastDateParser0 = new FastDateParser(":EW{hTz :fAa", timeZone0, locale0);
        FastDateParser fastDateParser1 = new FastDateParser(":EW{hTz :fAa", timeZone0, locale0);
        boolean boolean0 = fastDateParser0.equals(fastDateParser1);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        ParsePosition parsePosition0 = new ParsePosition(0);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MIT");
        FastDateParser fastDateParser0 = new FastDateParser("GMTPLT", simpleTimeZone0, locale0);
        Object object0 = fastDateParser0.parseObject("ART", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        FastDateParser fastDateParser0 = new FastDateParser("GMTPLT", simpleTimeZone0, locale0);
        boolean boolean0 = fastDateParser0.isNextNumber();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("");
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MIT");
        FastDateParser fastDateParser0 = new FastDateParser("GMTPLT", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDateParser0.getTimeZone();
        timeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2517, "D;0%RsvvZ+v");
        Locale locale0 = Locale.GERMANY;
        FastDateParser fastDateParser0 = new FastDateParser("D;0%RsvvZ+v", simpleTimeZone0, locale0);
        int int0 = fastDateParser0.adjustYear((-2126));
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2517, "D;0%_RsvvZ+v");
        Locale locale0 = Locale.GERMANY;
        FastDateParser fastDateParser0 = new FastDateParser("D;0%_RsvvZ+v", simpleTimeZone0, locale0);
        fastDateParser0.parseObject((String) null, (ParsePosition) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ROOT;
        FastDateParser fastDateParser0 = new FastDateParser(":W4tH7$Ghf;D$g", timeZone0, locale0);
        fastDateParser0.parseObject((String) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDateParser fastDateParser0 = new FastDateParser("`V;I`35Rf", timeZone0, locale0);
        fastDateParser0.getFieldWidth();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Locale locale0 = Locale.PRC;
        FastDateParser fastDateParser0 = null;
        fastDateParser0 = new FastDateParser("", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ROOT;
        FastDateParser fastDateParser0 = new FastDateParser("zkf+qpgno/ RW", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}{");
        Locale locale0 = Locale.ITALY;
        FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2517, "D;0%RsvvZ+v");
        Locale locale0 = Locale.GERMANY;
        FastDateParser fastDateParser0 = new FastDateParser("D;0%RsvvZ+v", simpleTimeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(0);
        Date date0 = fastDateParser0.parse("D;0%RsvvZ+v", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = Locale.JAPAN;
        FastDateParser fastDateParser0 = new FastDateParser("1xB{r[zmHb.(", simpleTimeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(0);
        fastDateParser0.parse("1xB{r[zmHb.(", parsePosition0);
        parsePosition0.toString();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = Locale.JAPAN;
        FastDateParser fastDateParser0 = new FastDateParser("1xB{r[zmHb.(", simpleTimeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(0);
        fastDateParser0.parse("1xB{r[zmHb.(", parsePosition0);
        parsePosition0.getIndex();
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREAN;
        FastDateParser fastDateParser0 = new FastDateParser("(d0_&", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("`b{Fp1epV!Dih");
        Locale locale0 = Locale.CHINESE;
        FastDateParser fastDateParser0 = new FastDateParser("`b{Fp1epV!Dih", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(110, "F{Hm(%q)7_+Oghi");
        Locale locale0 = Locale.PRC;
        FastDateParser fastDateParser0 = new FastDateParser("F{Hm(%q)7_+Oghi", simpleTimeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TAIWAN;
        FastDateParser fastDateParser0 = new FastDateParser("<#L';fdTB&OKlfSwF ", timeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(0);
        fastDateParser0.parseObject("<#L';fdTB&OKlfSwF ", parsePosition0);
        parsePosition0.toString();
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TAIWAN;
        FastDateParser fastDateParser0 = new FastDateParser("<#L';fdTB&OKlfSwF ", timeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(0);
        fastDateParser0.parseObject("<#L';fdTB&OKlfSwF ", parsePosition0);
        parsePosition0.getIndex();
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        Locale locale0 = Locale.CANADA;
        TimeZone timeZone0 = TimeZone.getTimeZone("hQ$_,auW,te");
        FastDateParser fastDateParser0 = new FastDateParser("K97g#1", timeZone0, locale0);
        fastDateParser0.parse("Invalid field value ");
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateParser$2");
        Locale locale0 = Locale.TAIWAN;
        FastDateParser fastDateParser0 = new FastDateParser("8", simpleTimeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(93);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.JAPAN;
        FastDateParser fastDateParser0 = new FastDateParser("7 R~", timeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(439);
        fastDateParser0.parse("GMTVST", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateParser$2");
        Locale locale0 = Locale.TAIWAN;
        FastDateParser fastDateParser0 = new FastDateParser("5", simpleTimeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("3aa");
        Locale locale0 = Locale.FRENCH;
        FastDateParser fastDateParser0 = new FastDateParser("3aa", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = Locale.JAPAN;
        FastDateParser fastDateParser0 = new FastDateParser("1xB{r[zmHb.(", simpleTimeZone0, locale0);
        Date date0 = fastDateParser0.parse("1xB{r[zmHb.(");
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREAN;
        FastDateParser fastDateParser0 = new FastDateParser("0.&", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREAN;
        FastDateParser fastDateParser0 = new FastDateParser(".", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3359);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.KOREA;
        FastDateParser fastDateParser0 = new FastDateParser("-", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1235);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateParser fastDateParser0 = new FastDateParser(",J%B02lSG", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        FastDateParser fastDateParser0 = new FastDateParser("*R@cvnS>}~H/R", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
        FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
        fastDateParser0.parse((String) null);
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3359);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.KOREA;
        FastDateParser fastDateParser0 = new FastDateParser(":EW{hTz :fAa", timeZone0, locale0);
        int int0 = fastDateParser0.adjustYear(3359);
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("|k_M6Sk6}c");
        Locale locale0 = Locale.FRANCE;
        FastDateParser fastDateParser0 = new FastDateParser("|k_M6Sk6}c", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREAN;
        FastDateParser fastDateParser0 = new FastDateParser("^#YK.", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2447, "");
        FastDateParser fastDateParser0 = new FastDateParser("Z[kQoFG|3r4_", simpleTimeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("k_M6Sk6}c");
        Locale locale0 = Locale.GERMAN;
        FastDateParser fastDateParser0 = new FastDateParser("+?x1bg", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.US;
        FastDateParser fastDateParser0 = new FastDateParser("$*9vp+j", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
        FastDateParser fastDateParser0 = new FastDateParser(")", timeZone0, locale0);
        fastDateParser0.parse("org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy");
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3097);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CHINA;
        FastDateParser fastDateParser0 = new FastDateParser("/*x#w]*4qA", timeZone0, locale0);
        Object object0 = fastDateParser0.parseObject("/*x#w]*4qA");
        object0.toString();
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3359);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.KOREA;
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
        FastDateParser fastDateParser0 = new FastDateParser(":EW{hTz :fAa", timeZone0, locale0);
        boolean boolean0 = fastDateParser0.equals(locale_FilteringMode0);
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINESE;
        FastDateParser fastDateParser0 = null;
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3359);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.KOREA;
        FastDateParser fastDateParser0 = new FastDateParser(":EW{hTz :fAa", timeZone0, locale0);
        Pattern pattern0 = fastDateParser0.getParsePattern();
        pattern0.pattern();
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2517, "D;0%RsvvZ+v");
        Locale locale0 = Locale.GERMANY;
        FastDateParser fastDateParser0 = new FastDateParser("D;0%RsvvZ+v", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDateParser0.getTimeZone();
        timeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALIAN;
        FastDateParser fastDateParser0 = new FastDateParser("4B9o", timeZone0, locale0);
        fastDateParser0.parseObject(";u|F");
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALIAN;
        FastDateParser fastDateParser0 = new FastDateParser("4B9o", timeZone0, locale0);
        Locale locale1 = fastDateParser0.getLocale();
        locale1.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALIAN;
        FastDateParser fastDateParser0 = new FastDateParser("4B9o", timeZone0, locale0);
        String string0 = fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test4446() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("s@zD6D]");
        ParsePosition parsePosition0 = new ParsePosition((-1521));
        Locale locale0 = Locale.FRENCH;
        FastDateParser fastDateParser0 = new FastDateParser("s@zD6D]", timeZone0, locale0);
        fastDateParser0.parseObject("W", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test4547() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3359);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.KOREA;
        FastDateParser fastDateParser0 = new FastDateParser(":EW{hTz :fAa", timeZone0, locale0);
        String string0 = fastDateParser0.toString();
    }

    @Test(timeout = 4000)
    public void test4648() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3359);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.KOREA;
        FastDateParser fastDateParser0 = new FastDateParser(":EW{hTz :fAa", timeZone0, locale0);
        fastDateParser0.hashCode();
    }

    @Test(timeout = 4000)
    public void test4749() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z p1^UzA61<RL)qPYXL");
        Locale locale0 = Locale.TAIWAN;
        FastDateParser fastDateParser0 = new FastDateParser("saR#-_1'KPl{ii0|1#", timeZone0, locale0);
        FastDateParser fastDateParser1 = new FastDateParser("z p1^UzA61<RL)qPYXL", timeZone0, locale0);
        boolean boolean0 = fastDateParser0.equals(fastDateParser1);
    }

    @Test(timeout = 4000)
    public void test4850() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(3359);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.KOREA;
        FastDateParser fastDateParser0 = new FastDateParser(":EW{hzT:fAj", timeZone0, locale0);
        fastDateParser0.getPattern();
    }

    @Test(timeout = 4000)
    public void test4951() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("+OJq9i?");
        Locale locale0 = Locale.PRC;
        FastDateParser fastDateParser0 = new FastDateParser("z p1^UzA61<RL)qPYXL", timeZone0, locale0);
        ParsePosition parsePosition0 = new ParsePosition(7);
        fastDateParser0.parse((String) null, parsePosition0);
    }
}
