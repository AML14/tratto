[
  {
    "signature": "org.apache.commons.lang3.ClassUtils()",
    "name": "org.apache.commons.lang3.ClassUtils",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getShortClassName(java.lang.Object object, java.lang.String valueIfNull)",
    "name": "getShortClassName",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "valueIfNull"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "object"
        },
        "comment": "the class to get the short name for null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "valueIfNull"
        },
        "comment": "the value to return if null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the class name of the object without the package name, or the null value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getShortClassName(java.lang.Class<?> cls)",
    "name": "getShortClassName",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "cls"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "cls"
        },
        "comment": "the class to get the short name for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the class name without the package name or an empty string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getShortClassName(java.lang.String className)",
    "name": "getShortClassName",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "className"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "className"
        },
        "comment": "the className to get the short name for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the class name of the class without the package name or an empty string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPackageName(java.lang.Object object, java.lang.String valueIfNull)",
    "name": "getPackageName",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "valueIfNull"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "object"
        },
        "comment": "the class to get the package name for null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "valueIfNull"
        },
        "comment": "the value to return if null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the package name of the object, or the null value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPackageName(java.lang.Class<?> cls)",
    "name": "getPackageName",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "cls"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "cls"
        },
        "comment": "the class to get the package name for null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the package name or an empty string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPackageName(java.lang.String className)",
    "name": "getPackageName",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "className"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "className"
        },
        "comment": "the className to get the package name for null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the package name or an empty string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getAllSuperclasses(java.lang.Class<?> cls)",
    "name": "getAllSuperclasses",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<java.lang.Class<?>>",
      "name": "java.util.List<java.lang.Class<?>>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "cls"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "cls"
        },
        "comment": "the class to look up null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the List of superclasses in order going up from this one null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getAllInterfaces(java.lang.Class<?> cls)",
    "name": "getAllInterfaces",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<java.lang.Class<?>>",
      "name": "java.util.List<java.lang.Class<?>>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "cls"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "cls"
        },
        "comment": "the class to look up null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the List of interfaces in order, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "convertClassNamesToClasses(java.util.List<java.lang.String> classNames)",
    "name": "convertClassNamesToClasses",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<java.lang.Class<?>>",
      "name": "java.util.List<java.lang.Class<?>>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "classNames"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "classNames"
        },
        "comment": "the classNames to change.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a List of Class objects corresponding to the class names, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ClassCastException",
          "name": "ClassCastException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "classNames contains a non String entry.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "convertClassesToClassNames(java.util.List<java.lang.Class<?>> classes)",
    "name": "convertClassesToClassNames",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<java.lang.String>",
      "name": "java.util.List<java.lang.String>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.List",
          "name": "List",
          "isArray": false
        },
        "name": "classes"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.List",
            "name": "List",
            "isArray": false
          },
          "name": "classes"
        },
        "comment": "the classes to change.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a List of class names corresponding to the Class objects, null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ClassCastException",
          "name": "ClassCastException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "classes contains a non-Class entry.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "isAssignable(java.lang.Class<?>[] classArray, java.lang.Class<?>[] toClassArray)",
    "name": "isAssignable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Class;",
          "name": "Class[]",
          "isArray": true
        },
        "name": "classArray"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Class;",
          "name": "Class[]",
          "isArray": true
        },
        "name": "toClassArray"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Class;",
            "name": "Class[]",
            "isArray": true
          },
          "name": "classArray"
        },
        "comment": "the array of Classes to check null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Class;",
            "name": "Class[]",
            "isArray": true
          },
          "name": "toClassArray"
        },
        "comment": "the array of Classes to try to assign into null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if assignment possible.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isAssignable(java.lang.Class<?>[] classArray, java.lang.Class<?>[] toClassArray, boolean autoboxing)",
    "name": "isAssignable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Class;",
          "name": "Class[]",
          "isArray": true
        },
        "name": "classArray"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Class;",
          "name": "Class[]",
          "isArray": true
        },
        "name": "toClassArray"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "autoboxing"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Class;",
            "name": "Class[]",
            "isArray": true
          },
          "name": "classArray"
        },
        "comment": "the array of Classes to check null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Class;",
            "name": "Class[]",
            "isArray": true
          },
          "name": "toClassArray"
        },
        "comment": "the array of Classes to try to assign into null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "autoboxing"
        },
        "comment": "whether to use implicit autoboxing/unboxing between primitives and wrappers.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if assignment possible.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isAssignable(java.lang.Class<?> cls, java.lang.Class<?> toClass)",
    "name": "isAssignable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "cls"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "toClass"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "cls"
        },
        "comment": "the Class to check null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "toClass"
        },
        "comment": "the Class to try to assign into. toClass is returns false if null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if assignment possible.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isAssignable(java.lang.Class<?> cls, java.lang.Class<?> toClass, boolean autoboxing)",
    "name": "isAssignable",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "cls"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "toClass"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "autoboxing"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "cls"
        },
        "comment": "the Class to check null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "toClass"
        },
        "comment": "the Class to try to assign into. toClass is returns false if null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "autoboxing"
        },
        "comment": "whether to use implicit autoboxing/unboxing between primitives and wrappers.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if assignment possible.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "primitiveToWrapper(java.lang.Class<?> cls)",
    "name": "primitiveToWrapper",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Class<?>",
      "name": "java.lang.Class<?>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "cls"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "cls"
        },
        "comment": "the class to convert null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the wrapper class for cls or cls if cls is not a primitive. null if null input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "primitivesToWrappers(java.lang.Class<?>[] classes)",
    "name": "primitivesToWrappers",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Class<?>[]",
      "name": "java.lang.Class<?>[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Class;",
          "name": "Class[]",
          "isArray": true
        },
        "name": "classes"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Class;",
            "name": "Class[]",
            "isArray": true
          },
          "name": "classes"
        },
        "comment": "the class array to convert null or empty.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an array which contains for each given class, the wrapper class or the original class if class is not a primitive. null if null input. Empty array if an empty array passed in.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "wrapperToPrimitive(java.lang.Class<?> cls)",
    "name": "wrapperToPrimitive",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Class<?>",
      "name": "java.lang.Class<?>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "cls"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "cls"
        },
        "comment": "the class to convert null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the corresponding primitive type if cls is a wrapper class, null otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "wrappersToPrimitives(java.lang.Class<?>[] classes)",
    "name": "wrappersToPrimitives",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Class<?>[]",
      "name": "java.lang.Class<?>[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Class;",
          "name": "Class[]",
          "isArray": true
        },
        "name": "classes"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Class;",
            "name": "Class[]",
            "isArray": true
          },
          "name": "classes"
        },
        "comment": "the class array to convert null or empty.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an array which contains for each given class, the primitive class or null if the original class is not a wrapper class. null if null input. Empty array if an empty array passed in.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isInnerClass(java.lang.Class<?> cls)",
    "name": "isInnerClass",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "cls"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "cls"
        },
        "comment": "the class to check null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if the class is an inner or static nested class, false if not or null.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getClass(java.lang.ClassLoader classLoader, java.lang.String className, boolean initialize)",
    "name": "getClass",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Class<?>",
      "name": "java.lang.Class<?>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.ClassLoader",
          "name": "ClassLoader",
          "isArray": false
        },
        "name": "classLoader"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "className"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "initialize"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.ClassLoader",
            "name": "ClassLoader",
            "isArray": false
          },
          "name": "classLoader"
        },
        "comment": "the class loader to use to load the class.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "className"
        },
        "comment": "the class name.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "initialize"
        },
        "comment": "whether the class . initialize is initialized.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the class represented by className using the classLoader.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ClassNotFoundException",
          "name": "ClassNotFoundException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the class is not found.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getClass(java.lang.ClassLoader classLoader, java.lang.String className)",
    "name": "getClass",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Class<?>",
      "name": "java.lang.Class<?>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.ClassLoader",
          "name": "ClassLoader",
          "isArray": false
        },
        "name": "classLoader"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "className"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.ClassLoader",
            "name": "ClassLoader",
            "isArray": false
          },
          "name": "classLoader"
        },
        "comment": "the class loader to use to load the class.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "className"
        },
        "comment": "the class name.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the class represented by className using the classLoader.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ClassNotFoundException",
          "name": "ClassNotFoundException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the class is not found.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getClass(java.lang.String className)",
    "name": "getClass",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Class<?>",
      "name": "java.lang.Class<?>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "className"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "className"
        },
        "comment": "the class name.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the class represented by className using the current thread's context class loader.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ClassNotFoundException",
          "name": "ClassNotFoundException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the class is not found.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getClass(java.lang.String className, boolean initialize)",
    "name": "getClass",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Class<?>",
      "name": "java.lang.Class<?>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "className"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "initialize"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "className"
        },
        "comment": "the class name.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "initialize"
        },
        "comment": "whether the class . initialize is initialized.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the class represented by className using the current thread's context class loader.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.ClassNotFoundException",
          "name": "ClassNotFoundException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the class is not found.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "getPublicMethod(java.lang.Class<?> cls, java.lang.String methodName, java.lang.Class<?>[] parameterTypes)",
    "name": "getPublicMethod",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.reflect.Method",
      "name": "java.lang.reflect.Method",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "cls"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "methodName"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Class;",
          "name": "Class[]",
          "isArray": true
        },
        "name": "parameterTypes"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "cls"
        },
        "comment": "the class to check. cls is not null.",
        "kind": "PARAM",
        "condition": "(args[0]==null) == false"
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "methodName"
        },
        "comment": "the name of the method.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Class;",
            "name": "Class[]",
            "isArray": true
          },
          "name": "parameterTypes"
        },
        "comment": "the list of parameters.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the method.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NullPointerException",
          "name": "NullPointerException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the class is null.",
        "kind": "THROWS",
        "condition": "args[0]==null"
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.SecurityException",
          "name": "SecurityException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "a a security violation occured.",
        "kind": "THROWS",
        "condition": ""
      },
      {
        "exceptionType": {
          "qualifiedName": "java.lang.NoSuchMethodException",
          "name": "NoSuchMethodException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "the method is not found in the given class or if the metothod doen't conform with the requirements.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "toClass(java.lang.Object[] array)",
    "name": "toClass",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Class<?>[]",
      "name": "java.lang.Class<?>[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.Object;",
            "name": "Object[]",
            "isArray": true
          },
          "name": "array"
        },
        "comment": "array is Object. Object array.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "a Class array, null if null array input.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getShortCanonicalName(java.lang.Object object, java.lang.String valueIfNull)",
    "name": "getShortCanonicalName",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "valueIfNull"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "object"
        },
        "comment": "the class to get the short name for null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "valueIfNull"
        },
        "comment": "the value to return if null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the canonical name of the object without the package name, or the null value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getShortCanonicalName(java.lang.Class<?> cls)",
    "name": "getShortCanonicalName",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "cls"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "cls"
        },
        "comment": "the class to get the short name for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the canonical name without the package name or an empty string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getShortCanonicalName(java.lang.String canonicalName)",
    "name": "getShortCanonicalName",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "canonicalName"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "canonicalName"
        },
        "comment": "the class name to get the short name for.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the canonical name of the class without the package name or an empty string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPackageCanonicalName(java.lang.Object object, java.lang.String valueIfNull)",
    "name": "getPackageCanonicalName",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "object"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "valueIfNull"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Object",
            "name": "Object",
            "isArray": false
          },
          "name": "object"
        },
        "comment": "the class to get the package name for null.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "valueIfNull"
        },
        "comment": "the value to return if null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the package name of the object, or the null value.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPackageCanonicalName(java.lang.Class<?> cls)",
    "name": "getPackageCanonicalName",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "cls"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.Class",
            "name": "Class",
            "isArray": false
          },
          "name": "cls"
        },
        "comment": "the class to get the package name for null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the package name or an empty string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "getPackageCanonicalName(java.lang.String canonicalName)",
    "name": "getPackageCanonicalName",
    "containingClass": {
      "qualifiedName": "org.apache.commons.lang3.ClassUtils",
      "name": "ClassUtils",
      "isArray": false
    },
    "targetClass": "org.apache.commons.lang3.ClassUtils",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "canonicalName"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "canonicalName"
        },
        "comment": "canonicalName is canonical. canonical name to get the package name for null.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the package name or an empty string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]