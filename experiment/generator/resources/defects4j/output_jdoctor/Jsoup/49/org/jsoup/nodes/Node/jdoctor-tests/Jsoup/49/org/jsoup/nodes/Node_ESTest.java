/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:53:19 GMT 2023
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Node_ESTest extends Node_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Document document0 = Document.createShell("");
        document0.hashCode();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Document document0 = Document.createShell("");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(48);
        Document document1 = document0.outputSettings(document_OutputSettings1);
        StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
        document1.outerHtml(stringBuilder0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TextNode textNode0 = new TextNode("_>]a7|h#'9\"0Sj`W[4", "V057A=bIz*i\"|3<sq3");
        Document document0 = Document.createShell("");
        document0.setParentNode(textNode0);
        document0.normalise();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        XmlDeclaration xmlDeclaration0 = new XmlDeclaration("s=Tjx%\"", "s=Tjx%\"", true);
        xmlDeclaration0.replaceWith((Node) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        XmlDeclaration xmlDeclaration0 = new XmlDeclaration("wnRp-,!q*6*?", "wnRp-,!q*6*?", true);
        TextNode textNode0 = TextNode.createFromEncoded("", "wnRp-,!q*6*?");
        textNode0.reparentChild(xmlDeclaration0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Document document0 = Document.createShell("F`R^h& qTEYfB{");
        Document document1 = (Document) document0.appendChild(document0);
        document1.removeChild(document0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("F!dPV6AR3rv2KD", "'~|)F;y5jFWP>");
        StringBuilder stringBuilder0 = new StringBuilder("abs:");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        textNode0.indent(stringBuilder0, 0, document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Document document0 = new Document("8l0ew#'-vz");
        Node[] nodeArray0 = new Node[7];
        nodeArray0[0] = (Node) document0;
        nodeArray0[1] = (Node) document0;
        nodeArray0[2] = (Node) document0;
        nodeArray0[3] = (Node) document0;
        nodeArray0[4] = (Node) document0;
        nodeArray0[5] = (Node) document0;
        nodeArray0[6] = (Node) document0;
        document0.addChildren(0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Document document0 = Document.createShell("bzMh%v{<0[Kf[K");
        document0.setSiblingIndex(39);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Document document0 = Document.createShell("#text");
        document0.ensureChildNodes();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Tag tag0 = Tag.valueOf("#text");
        TextNode textNode0 = new TextNode(".Pj\"ey'U>5", ".Pj\"ey'U>5");
        Attributes attributes0 = textNode0.attributes();
        FormElement formElement0 = new FormElement(tag0, "#text", attributes0);
        Document document0 = Document.createShell(".Pj\"ey'U>5");
        document0.appendChild(formElement0);
        formElement0.before((Node) document0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Document document0 = Document.createShell("");
        NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
        document0.traverse(nodeVisitor0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Document document0 = Document.createShell("TagOpen");
        document0.toString();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Document document0 = Document.createShell("]._GfgtZw");
        Element element0 = document0.head();
        element0.removeAttr("8l0ew#'-vz");
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Document document0 = new Document("CV=j)~@|qSj-h`");
        Document document1 = document0.normalise();
        Element element0 = document1.head();
        element0.parent();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Document document0 = Document.createShell("Xs*@5EX");
        document0.appendChild(document0);
        document0.parent();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Document document0 = new Document("");
        document0.ownerDocument();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Document document0 = Document.createShell("#text");
        document0.nodeName();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Document document0 = Document.createShell("#text");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document document1 = document0.outputSettings(document_OutputSettings0);
        document_OutputSettings0.prettyPrint(false);
        document1.getOutputSettings();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Comment comment0 = new Comment("eQ>", "eQ>");
        comment0.getOutputSettings();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        TextNode textNode0 = new TextNode("[%I/,&4uJ([", "#text");
        textNode0.equals("#text");
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Document document0 = new Document("e)?W\"u=jdE\"");
        Comment comment0 = new Comment("abs:", "PekqQ2W~");
        comment0.doClone(document0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Document document0 = Document.createShell("B;Hfj&J");
        document0.doClone(document0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Document document0 = Document.createShell("#text");
        document0.clone();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Document document0 = Document.createShell("Xs*@5EX");
        document0.childNodesAsArray();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Node$OuterHtmlVisitor");
        Element element0 = document0.prependElement("clas");
        element0.before("org.jsoup.nodes.Node$OuterHtmlVisitor");
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Document document0 = Document.createShell("");
        Node[] nodeArray0 = new Node[7];
        nodeArray0[0] = (Node) document0;
        nodeArray0[1] = (Node) document0;
        nodeArray0[2] = (Node) document0;
        nodeArray0[3] = (Node) document0;
        nodeArray0[4] = (Node) document0;
        nodeArray0[5] = (Node) document0;
        nodeArray0[6] = (Node) document0;
        document0.addChildren(nodeArray0);
        nodeArray0[1].before("'rOh*d+Lic:-!");
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Document document0 = Document.createShell("");
        Document document1 = document0.clone();
        Node[] nodeArray0 = new Node[7];
        nodeArray0[0] = (Node) document0;
        nodeArray0[1] = (Node) document1;
        nodeArray0[2] = (Node) document1;
        nodeArray0[3] = (Node) document0;
        nodeArray0[4] = (Node) document1;
        nodeArray0[5] = (Node) document1;
        nodeArray0[6] = (Node) document0;
        document1.addChildren(nodeArray0);
        document1.after((Node) document0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("", " F,,%C3muSk&bx!K8VG");
        textNode0.wrap("");
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        DataNode dataNode0 = new DataNode("tq?:bUCasT<", "");
        dataNode0.unwrap();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Document document0 = new Document("i:)K%Q`1L1fTx1k0l");
        document0.prependChild(document0);
        // Undeclared exception!
        document0.toString();
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Document document0 = Document.createShell("=*>cz@9R#W8%Q&d");
        Tag tag0 = document0.tag();
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "=*>cz@9R#W8%Q&d", attributes0);
        formElement0.replaceChild((Node) null, document0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Document document0 = Document.createShell("(s>xIjA]71~Jy");
        document0.reparentChild((Node) null);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("1-EQ:+\"ti!L3bRU&F", "1-EQ:+\"ti!L3bRU&F");
        TextNode textNode1 = textNode0.text("1-EQ:+\"ti!L3bRU&F");
        textNode1.parentNode = (Node) textNode0;
        textNode1.parentNode.remove();
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Document document0 = Document.createShell("TagOpen");
        document0.outerHtml((StringBuilder) null);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Document document0 = Document.createShell(" version=\"");
        StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " version=\"");
        document0.indent(stringBuilder0, (-2984), (Document.OutputSettings) null);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Comment comment0 = new Comment("eQ>", "$ 3[Z~zTxi");
        comment0.hasAttr((String) null);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Document document0 = new Document("tic!");
        document0.appendText("tic!");
        document0.childNode((-106223338));
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Document document0 = new Document(";48HOnOd#ch0<},u^[");
        document0.attr((String) null, ";48HOnOd#ch0<},u^[");
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        Document document0 = Document.createShell("F`R^h& qTEYfB{");
        document0.attr((String) null);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        TextNode textNode0 = new TextNode("", ";b^!-.");
        textNode0.after(";b^!-.");
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        Document document0 = Document.createShell("F`R^h& qTEYfB{");
        document0.addChildren((Node[]) null);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        Document document0 = Document.createShell("");
        document0.addChildren(0, (Node[]) null);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        Document document0 = new Document("");
        Node[] nodeArray0 = new Node[8];
        nodeArray0[0] = (Node) document0;
        nodeArray0[1] = (Node) document0;
        nodeArray0[2] = (Node) document0;
        nodeArray0[3] = (Node) document0;
        nodeArray0[4] = (Node) document0;
        nodeArray0[5] = (Node) document0;
        nodeArray0[6] = (Node) document0;
        nodeArray0[7] = (Node) document0;
        document0.addChildren((-2368), nodeArray0);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "", false);
        xmlDeclaration0.absUrl("");
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        Comment comment0 = new Comment("", "`V;I`35Rf");
        Node node0 = comment0.nextSibling();
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        Document document0 = new Document("K.i52T");
        document0.wrap("option");
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded(".Ly+Cw;O", "org.jsoup.nodes.Node$1");
        textNode0.wrap(".Ly+Cw;O");
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("7Jsq@*k[Yk", "7Jsq@*k[Yk");
        Document document0 = textNode0.ownerDocument();
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        Document document0 = Document.createShell("");
        Element element0 = document0.body();
        element0.ownerDocument();
        element0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        Document document0 = Document.createShell("6UG3");
        boolean boolean0 = document0.hasAttr("6UG3");
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        Document document0 = new Document("");
        String string0 = document0.attr("#document");
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        TextNode textNode0 = new TextNode("org.jsoup.nodes.Node", "cg5J<");
        Document document0 = new Document("@wFn#Teo$gd)");
        textNode0.after((Node) document0);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        Document document0 = Document.createShell("");
        Node node0 = document0.parentNode();
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        DataNode dataNode0 = new DataNode("abs:", "abs:");
        int int0 = dataNode0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        Document document0 = new Document("");
        NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
        Document document1 = (Document) document0.traverse(nodeVisitor0);
        document1.isBlock();
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        DocumentType documentType0 = new DocumentType(")Li-p;e\"^JD!w d3S", "v/hxrdc", "1wi|)69inibTwJvLT", "{5FDsD$u");
        Document document0 = new Document("v/hxrdc");
        documentType0.before((Node) document0);
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        DataNode dataNode0 = new DataNode("", "");
        dataNode0.before("sP`u+I ,=U*");
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("1-EQ:+\"ti!L3bRU&F", "1-EQ:+\"ti!L3bRU&F");
        List<Node> list0 = textNode0.childNodes();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        Document document0 = Document.createShell("thead");
        int int0 = document0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.select.Evaluator$Attribute");
        String string0 = document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        Comment comment0 = new Comment("eQ>", "$ 38]~zTxx$i");
        Node node0 = comment0.parent();
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        Comment comment0 = new Comment("eQ>", " 38]~zTx$i");
        comment0.childNode(4);
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        Comment comment0 = new Comment("eQ>", "eQ>");
        Node node0 = comment0.attr("\n", "?gL");
        node0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded(",sCr%h", ",sCr%h");
        Node node0 = textNode0.clone();
    }

    @Test(timeout = 4000)
    public void test6466() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded(",sCr%h", ",sCr%h");
        Node node0 = textNode0.clone();
        node0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test6567() throws Throwable {
        Comment comment0 = new Comment("eQ>", "$ 3[Z~zTxi");
        comment0.hashCode();
    }

    @Test(timeout = 4000)
    public void test6668() throws Throwable {
        DataNode dataNode0 = DataNode.createFromEncoded("2$\"4\"!NJW,?j f;", "2$\"4\"!NJW,?j f;");
        Node node0 = dataNode0.previousSibling();
    }

    @Test(timeout = 4000)
    public void test6769() throws Throwable {
        Comment comment0 = new Comment("eQ>", " 38]~zTx$i");
        List<Node> list0 = comment0.siblingNodes();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test6870() throws Throwable {
        Comment comment0 = new Comment("eQ>", "$ 3[Z~zTxi");
        XmlDeclaration xmlDeclaration0 = new XmlDeclaration("7NS %8!(", "$ 3[Z~zTxi", false);
        comment0.removeChild(xmlDeclaration0);
    }

    @Test(timeout = 4000)
    public void test6971() throws Throwable {
        Document document0 = new Document("6,FWe48IGtmGTkXj<");
        DocumentType documentType0 = new DocumentType("", "6,FWe48IGtmGTkXj<", "", "6,FWe48IGtmGTkXj<");
        documentType0.replaceChild(document0, document0);
    }

    @Test(timeout = 4000)
    public void test7072() throws Throwable {
        Document document0 = Document.createShell("TagOpen");
        document0.setParentNode(document0);
        Element element0 = document0.wrap("TagOpen");
    }

    @Test(timeout = 4000)
    public void test7173() throws Throwable {
        Document document0 = new Document("i:)K%Q`1L1fTx1k0l");
        document0.prependChild(document0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test7174() throws Throwable {
        Document document0 = new Document("i:)K%Q`1L1fTx1k0l");
        document0.prependChild(document0);
        document0.after("clas");
        document0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test7275() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded(",sCr%h", ",sCr%h");
        TextNode textNode1 = TextNode.createFromEncoded(",sCr%h", ",sCr%h");
        textNode1.parentNode = (Node) textNode0;
        textNode1.after(",sCr%h");
    }

    @Test(timeout = 4000)
    public void test7376() throws Throwable {
        Document document0 = Document.createShell("F`R^h& qTEYfB{");
        List<Node> list0 = document0.childNodesCopy();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test7477() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded("", " F,,%C3muSk&bx!K8VG");
        List<Node> list0 = textNode0.childNodesCopy();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test7578() throws Throwable {
        Document document0 = Document.createShell("cB");
        String string0 = document0.absUrl("abs:declaration");
    }

    @Test(timeout = 4000)
    public void test7679() throws Throwable {
        TextNode textNode0 = new TextNode("abs:publicid", "abs:publicid");
        String string0 = textNode0.attr("abs:publicid");
    }

    @Test(timeout = 4000)
    public void test7780() throws Throwable {
        Document document0 = Document.createShell("");
        document0.removeClass("#emJ^bQ? uQNA!");
        Element element0 = document0.addClass("`");
    }

    @Test(timeout = 4000)
    public void test7881() throws Throwable {
        XmlDeclaration xmlDeclaration0 = new XmlDeclaration("vI+", "", false);
        Attributes attributes0 = xmlDeclaration0.attributes();
    }

    @Test(timeout = 4000)
    public void test7982() throws Throwable {
        TextNode textNode0 = new TextNode("", "");
        textNode0.replaceWith(textNode0);
    }

    @Test(timeout = 4000)
    public void test8083() throws Throwable {
        TextNode textNode0 = TextNode.createFromEncoded(",sCr%h", ",sCr%h");
        textNode0.outerHtml();
        textNode0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test8184() throws Throwable {
        Document document0 = Document.createShell("Xs*@5EX");
        Node node0 = document0.removeAttr("abs:systemid");
        node0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test8285() throws Throwable {
        Tag tag0 = Tag.valueOf("~b");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "", attributes0);
        formElement0.remove();
    }

    @Test(timeout = 4000)
    public void test8386() throws Throwable {
        Comment comment0 = new Comment("eQ>", "$ 3[Z~zTxi");
        Node[] nodeArray0 = comment0.childNodesAsArray();
    }

    @Test(timeout = 4000)
    public void test8487() throws Throwable {
        Comment comment0 = new Comment("eQ>", "$ 3[Z~zTxi");
        comment0.setBaseUri("$ 3[Z~zTxi");
        comment0.childNodeSize();
    }
}
