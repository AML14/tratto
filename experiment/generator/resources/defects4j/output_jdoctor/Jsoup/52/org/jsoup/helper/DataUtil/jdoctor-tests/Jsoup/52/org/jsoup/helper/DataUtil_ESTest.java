/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:58:32 GMT 2023
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        File file0 = MockFile.createTempFile(")sY>=FL", "encoding");
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(mockFileInputStream0);
        byteBuffer0.hasArray();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        MockFile mockFile0 = new MockFile("A:=");
        File file0 = MockFile.createTempFile("--------------------------------", "--------------------------------", (File) mockFile0);
        ByteBuffer byteBuffer0 = DataUtil.readFileToByteBuffer(file0);
        byteBuffer0.hasRemaining();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, "%v{<");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DataUtil.readToByteBuffer((InputStream) null, 190);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2432), (byte) 37);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
        DataUtil.readToByteBuffer(pushbackInputStream0, (byte) 27);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(59);
        DataUtil.readToByteBuffer(pipedInputStream0, 0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        DataUtil.readToByteBuffer((InputStream) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 2054);
        DataUtil.readToByteBuffer(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        DataUtil.readToByteBuffer(mockFileInputStream0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        DataUtil.readFileToByteBuffer((File) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        MockFile mockFile0 = new MockFile("");
        DataUtil.readFileToByteBuffer(mockFile0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        MockFile mockFile0 = new MockFile("--------------------------------", "--------------------------------");
        DataUtil.readFileToByteBuffer(mockFile0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        CharBuffer charBuffer0 = CharBuffer.allocate(1457);
        ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
        Parser parser0 = Parser.xmlParser();
        DataUtil.parseByteData(byteBuffer0, "=Fg@ryywr@HmQ^zj", "=Fg@ryywr@HmQ^zj", parser0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        DataUtil.parseByteData((ByteBuffer) null, "U\"(.s>>e#=*>", "U\"(.s>>e#=*>", parser0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        Parser parser0 = Parser.htmlParser();
        DataUtil.load((InputStream) dataInputStream0, "http-equiv", "http-equiv", parser0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        Parser parser0 = Parser.xmlParser();
        DataUtil.load((InputStream) sequenceInputStream0, "HA$xqe}&@", "+93d?}", parser0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        Parser parser0 = Parser.htmlParser();
        DataUtil.load((InputStream) dataInputStream0, "", "", parser0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2350), 14);
        DataUtil.load((InputStream) byteArrayInputStream0, "p5yKSI(cg", "p5yKSI(cg", (Parser) null);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        Parser parser0 = Parser.htmlParser();
        DataUtil.load((InputStream) pushbackInputStream0, "9T(g;UY\"6=Q", (String) null, parser0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DataUtil.load((InputStream) byteArrayInputStream0, "XMkJhJtHbP.1v", "%v{<");
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        DataUtil.load((InputStream) null, ",ewW_Cekp\u0001;<T", ",ewW_Cekp\u0001;<T");
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 65, (byte) 65);
        DataUtil.load((InputStream) byteArrayInputStream0, "", "");
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-65), 65279);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
        DataUtil.load((InputStream) pushbackInputStream0, "", "");
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DataUtil.load((InputStream) pipedInputStream0, "{H$gLRs'Ti^7lA'`1", "{H$gLRs'Ti^7lA'`1");
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        File file0 = MockFile.createTempFile("!Ft!bp T", "r");
        DataUtil.load(file0, "!Ft!bp T", "!Ft!bp T");
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        DataUtil.load((File) null, "", "http-equiv");
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        MockFile mockFile0 = new MockFile("xml", "meter");
        File file0 = MockFile.createTempFile("meter", (String) null, (File) mockFile0);
        DataUtil.load(file0, "", "xml");
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        DataUtil.crossStreams((InputStream) null, (OutputStream) null);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(5);
        MockPrintStream mockPrintStream0 = new MockPrintStream("`tgj4uH");
        DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
        DataUtil.crossStreams(pipedInputStream0, dataOutputStream0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[2] = (byte) 1;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        byteArrayInputStream0.read();
        Parser parser0 = Parser.htmlParser();
        Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, "ap[=w", parser0);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-74);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.htmlParser();
        Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, "ap[=w", parser0);
        document0.location();
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        String string0 = DataUtil.mimeBoundary();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("charset=");
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType((String) null);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        String string0 = "O\\uHYC<!SsdX>DIw+";
        String string1 = DataUtil.getCharsetFromContentType(string0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        MockFile mockFile0 = new MockFile(uRI0);
        MockFile.createTempFile("--------------------------------", "10T_G?TG]/S", (File) mockFile0);
        DataUtil.load((File) mockFile0, "10T_G?TG]/S", "k+m5,CY cLcM(YN2E_I");
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0, 423);
        byteBuffer0.remaining();
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        DataUtil.readToByteBuffer((InputStream) null, (-2049));
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        File file0 = MockFile.createTempFile("c.bO}Xo", "c.bO}Xo");
        Document document0 = DataUtil.load(file0, "UTF-8", "UTF-8");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        DataUtil.crossStreams(byteArrayInputStream0, byteArrayOutputStream0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        DataUtil.crossStreams(byteArrayInputStream0, byteArrayOutputStream0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        DataUtil.load((InputStream) null, "", "", (Parser) null);
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        MockFile mockFile0 = new MockFile(" E;", "--------------------------------");
        DataUtil.load((File) mockFile0, " E;", "--------------------------------");
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        ByteBuffer byteBuffer0 = DataUtil.emptyByteBuffer();
        Parser parser0 = Parser.xmlParser();
        DataUtil.parseByteData(byteBuffer0, "", "sui>LN.I~DnL+", parser0);
    }

    @Test(timeout = 4000)
    public void test4344() throws Throwable {
        Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataUtil.load((InputStream) sequenceInputStream0, "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", "--------------------------------");
    }
}
