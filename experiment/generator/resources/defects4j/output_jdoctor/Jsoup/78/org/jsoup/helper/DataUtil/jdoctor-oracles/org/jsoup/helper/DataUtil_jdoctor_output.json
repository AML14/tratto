[
  {
    "signature": "load(java.io.File in, java.lang.String charsetName, java.lang.String baseUri)",
    "name": "load",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.DataUtil",
      "name": "DataUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.DataUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jsoup.nodes.Document",
      "name": "org.jsoup.nodes.Document",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.File",
          "name": "File",
          "isArray": false
        },
        "name": "in"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "charsetName"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "baseUri"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.File",
            "name": "File",
            "isArray": false
          },
          "name": "in"
        },
        "comment": "file to load.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "charsetName"
        },
        "comment": "character set of input.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "baseUri"
        },
        "comment": "base URI of document. baseUri is to resolve relative links against.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Document.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "on IO error.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "load(java.io.InputStream in, java.lang.String charsetName, java.lang.String baseUri)",
    "name": "load",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.DataUtil",
      "name": "DataUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.DataUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jsoup.nodes.Document",
      "name": "org.jsoup.nodes.Document",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "in"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "charsetName"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "baseUri"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.InputStream",
            "name": "InputStream",
            "isArray": false
          },
          "name": "in"
        },
        "comment": "input stream to parse. You will need to close it.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "charsetName"
        },
        "comment": "character set of input.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "baseUri"
        },
        "comment": "base URI of document. baseUri is to resolve relative links against.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Document.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "on IO error.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "load(java.io.InputStream in, java.lang.String charsetName, java.lang.String baseUri, org.jsoup.parser.Parser parser)",
    "name": "load",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.DataUtil",
      "name": "DataUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.DataUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jsoup.nodes.Document",
      "name": "org.jsoup.nodes.Document",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "in"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "charsetName"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "baseUri"
      },
      {
        "type": {
          "qualifiedName": "org.jsoup.parser.Parser",
          "name": "Parser",
          "isArray": false
        },
        "name": "parser"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.InputStream",
            "name": "InputStream",
            "isArray": false
          },
          "name": "in"
        },
        "comment": "input stream to parse. You will need to close it.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "charsetName"
        },
        "comment": "character set of input.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "baseUri"
        },
        "comment": "base URI of document. baseUri is to resolve relative links against.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "org.jsoup.parser.Parser",
            "name": "Parser",
            "isArray": false
          },
          "name": "parser"
        },
        "comment": "alternate Parser#xmlParser() parser to use.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "Document.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "on IO error.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "crossStreams(java.io.InputStream in, java.io.OutputStream out)",
    "name": "crossStreams",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.DataUtil",
      "name": "DataUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.DataUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "in"
      },
      {
        "type": {
          "qualifiedName": "java.io.OutputStream",
          "name": "OutputStream",
          "isArray": false
        },
        "name": "out"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.InputStream",
            "name": "InputStream",
            "isArray": false
          },
          "name": "in"
        },
        "comment": "input stream to read from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.OutputStream",
            "name": "OutputStream",
            "isArray": false
          },
          "name": "out"
        },
        "comment": "output stream to write to.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "on IO error.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "parseInputStream(java.io.InputStream input, java.lang.String charsetName, java.lang.String baseUri, org.jsoup.parser.Parser parser)",
    "name": "parseInputStream",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.DataUtil",
      "name": "DataUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.DataUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.jsoup.nodes.Document",
      "name": "org.jsoup.nodes.Document",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "input"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "charsetName"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "baseUri"
      },
      {
        "type": {
          "qualifiedName": "org.jsoup.parser.Parser",
          "name": "Parser",
          "isArray": false
        },
        "name": "parser"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readToByteBuffer(java.io.InputStream inStream, int maxSize)",
    "name": "readToByteBuffer",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.DataUtil",
      "name": "DataUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.DataUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.nio.ByteBuffer",
      "name": "java.nio.ByteBuffer",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "inStream"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "maxSize"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.io.InputStream",
            "name": "InputStream",
            "isArray": false
          },
          "name": "inStream"
        },
        "comment": "the input stream to read from.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "maxSize"
        },
        "comment": "maxSize is maximum. maximum size in bytes to read from the stream. Set to 0 to be unlimited.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the filled byte buffer.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.io.IOException",
          "name": "IOException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an exception occurs whilst reading from the input stream.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "readToByteBuffer(java.io.InputStream inStream)",
    "name": "readToByteBuffer",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.DataUtil",
      "name": "DataUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.DataUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.nio.ByteBuffer",
      "name": "java.nio.ByteBuffer",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "inStream"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "readFileToByteBuffer(java.io.File file)",
    "name": "readFileToByteBuffer",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.DataUtil",
      "name": "DataUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.DataUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.nio.ByteBuffer",
      "name": "java.nio.ByteBuffer",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.File",
          "name": "File",
          "isArray": false
        },
        "name": "file"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "emptyByteBuffer()",
    "name": "emptyByteBuffer",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.DataUtil",
      "name": "DataUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.DataUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.nio.ByteBuffer",
      "name": "java.nio.ByteBuffer",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "getCharsetFromContentType(java.lang.String contentType)",
    "name": "getCharsetFromContentType",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.DataUtil",
      "name": "DataUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.DataUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "contentType"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "contentType"
        },
        "comment": "e.g. \"text/html. contentType is charset=EUC-JP\".",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "\"EUC-JP\", or null if not found. Charset is trimmed and uppercased.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "mimeBoundary()",
    "name": "mimeBoundary",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.DataUtil",
      "name": "DataUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.DataUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "throwsTags": []
  }
]