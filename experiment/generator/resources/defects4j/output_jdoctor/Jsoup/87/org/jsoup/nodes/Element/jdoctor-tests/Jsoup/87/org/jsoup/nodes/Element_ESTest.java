/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 23:33:00 GMT 2023
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Element_ESTest extends Element_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Document document0 = Document.createShell("Jx0DNRLj<alwcB8)!l");
        document0.appendTo(document0);
        // Undeclared exception!
        document0.toString();
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Element element0 = new Element("qQn<6$94fs6)");
        Element element1 = element0.toggleClass("<qQn<6$94fs6)>\n LM{u}E3,4vQN,%yK&lt;\n</qQn<6$94fs6)>");
        element1.hasClass((String) null);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Element element0 = new Element("EEfI]*c@.$$]K");
        element0.getElementsByAttributeValueMatching(" ", "hmE%tkd0#,Z}M;zfFm4");
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("C-^Yd0t&y ~o(}I;[u", parseSettings0);
        CDataNode cDataNode0 = new CDataNode("");
        Attributes attributes0 = cDataNode0.attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "C-^Yd0t&y ~o(}I;[u", attributes0);
        pseudoTextElement0.getElementsByAttributeValueEnding("y:42W$^2.M:\"_/HHT.", "C-^Yd0t&y ~o(}I;[u");
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.DataNode");
        Element element0 = document0.appendElement("org.jsoup.nodes.DataNode");
        Element element1 = element0.before((Node) document0);
        element1.previousElementSiblings();
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        Document document0 = Parser.parse("summary", "!x@}:d~k7M}nQ'_5E1");
        Element element0 = document0.body();
        Node[] nodeArray0 = new Node[3];
        element0.insertChildren(0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Document document0 = Parser.parse("summary", "!x@}:d~k7M}nQ'_5E1");
        Element element0 = document0.empty();
        Node[] nodeArray0 = new Node[3];
        element0.insertChildren(0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("}", "}");
        Node[] nodeArray0 = new Node[3];
        document0.insertChildren((-2460), nodeArray0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
        document0.insertChildren((-598), (Collection<? extends Node>) linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        Tag tag0 = Tag.valueOf("'Z\":d*gb.");
        Element element0 = new Element(tag0, "ec Sm{(t%>PLe'>AZ");
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "ec Sm{(t%>PLe'>AZ");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        element0.outerHtmlTail(stringBuffer0, 1274, document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        Document document0 = Parser.parseBodyFragment("&zthxQlbh7gpq`{urB", "&zthxQlbh7gpq`{urB");
        document0.nodelistChanged();
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        Document document0 = Parser.parse(".oqJf(4SF(-", ".oqJf(4SF(-");
        document0.ensureChildNodes();
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("{ZI3k9(tZo", "{ZI3k9(tZo");
        document0.wrap("{ZI3k9(tZo");
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        Element element0 = document0.body();
        element0.wrap("E~jv6+BPlyUKmY1");
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        Document document0 = Document.createShell("8_ETU<]{!@.9<");
        document0.wholeText();
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        Element element0 = document0.body();
        element0.val("org.jsoup.nodes.Element$1");
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        Document document0 = Parser.parse("html", "html");
        document0.setSiblingIndex(1);
        document0.toggleClass("&XUeG%2");
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        Document document0 = new Document("Dx1HW;:~(ZBeT");
        document0.text();
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        Document document0 = Document.createShell("2J");
        Element element0 = document0.head();
        element0.tagName("U9|:%@Orh-e@C");
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        Document document0 = Parser.parse(".oqJf(4SF(-", ".oqJf(4SF(-");
        document0.tagName("Could not parse nth-index '%s': unexpected format");
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        Document document0 = Document.createShell("YZtm_``3&_");
        Element element0 = document0.body();
        element0.shallowClone();
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
        Document document1 = document0.clone();
        document1.prependChild(document0);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("O5xo)t8;k }'", "");
        Element element0 = document0.head();
        element0.prepend("");
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        Document document0 = Document.createShell("ScriptDataDoubleEscapedDash");
        Element element0 = document0.head();
        element0.parent();
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("}", "}");
        Element element0 = document0.doClone(document0);
        element0.parent();
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("-zSS]J}30h", "    ");
        document0.ownText();
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        Document document0 = Parser.parse("summary", "");
        Element element0 = document0.body();
        Element element1 = element0.empty();
        element1.lastElementSibling();
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        Element element0 = document0.body();
        element0.isBlock();
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        Element element0 = document0.body();
        Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
        element0.is((Evaluator) evaluator_IsOnlyOfType0);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        Document document0 = Parser.parseBodyFragment("", "");
        document0.html("");
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        Document document0 = new Document("Dx1HW;:~(ZBeT");
        document0.html((PipedWriter) null);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        Document document0 = Document.createShell("Split offset must be not be negative");
        Element element0 = document0.prependElement("Split offset must be not be negative");
        element0.html();
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        Document document0 = Parser.parseBodyFragment(" ", " ");
        document0.hasAttributes();
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        Element element0 = new Element("f");
        Pattern pattern0 = Pattern.compile("f", 2581);
        element0.getElementsMatchingText(pattern0);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        Document document0 = Document.createShell("mS_3:Y2L|C.lPGbKT]");
        document0.getElementsMatchingText("mS_3:Y2L|C.lPGbKT]");
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        Document document0 = new Document("W");
        Pattern pattern0 = Pattern.compile("W");
        document0.getElementsMatchingOwnText(pattern0);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        Document document0 = Document.createShell("E[d7^n");
        document0.getElementsContainingText("ZfDTY!n5h{");
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        Document document0 = Document.createShell("mS_3:Y2L|C.lPGbKT]");
        document0.getElementsContainingOwnText("$si");
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        Document document0 = Parser.parse("summary", "!x@}:d~k7M}nQ'_5E1");
        document0.getElementsByIndexLessThan(0);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        Element element0 = new Element("qQn<6$94fs6)");
        element0.getElementsByIndexGreaterThan(3437);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        Document document0 = Parser.parse("summary", "!x@}:d~k7M}nQ'_5E1");
        Element element0 = document0.body();
        element0.getElementsByIndexEquals(0);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        Document document0 = Document.createShell("E[d7^n");
        document0.getElementsByAttributeValueStarting("|{h5Ptc}db#s98oV", "textarea");
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        Document document0 = Parser.parse("LS~9WRP0h`9{", "LS~9WRP0h`9{");
        Element element0 = document0.val("value");
        element0.getElementsByAttributeValueEnding("value", "value");
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        Document document0 = Parser.parseBodyFragment(" ", " ");
        document0.getElementsByAttributeValueContaining("wHbu;j5KwVXd}", " ");
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        Document document0 = Parser.parse("summary", "!x@}:d~k7M}nQ'_5E1");
        document0.getElementsByAttribute("br");
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        Document document0 = Document.createShell("wc4C628iW%TPp");
        document0.setSiblingIndex((-1475));
        document0.empty();
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        Element element0 = new Element("body");
        CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element");
        element0.doClone(cDataNode0);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        Document document0 = Parser.parseBodyFragment("inert", "_%:b");
        document0.clone();
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("ScriptDataEscapedDash", "body");
        DocumentType documentType0 = new DocumentType("body", "body", "html", "", "html");
        Element element0 = document0.doClone(documentType0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        element0.classNames((Set<String>) linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("mE", "mE");
        document0.children();
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        Element element0 = new Element("-=9DB");
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        Tag tag0 = Tag.valueOf("bJ&g%s:dSe");
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "X@GA&__\"zL`<\"UIlq,*", attributes0);
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.htmlDefault;
        Tag tag0 = Tag.valueOf("GyhKo9Ly{f3", parseSettings0);
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("GyhKo9Ly{f3", "GyhKo9Ly{f3");
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "GyhKo9Ly{f3", attributes1);
        pseudoTextElement0.attributes();
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        Document document0 = Document.createShell("c");
        Document document1 = document0.normalise();
        document1.parentNode = (Node) document0;
        document1.attr("c", true);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
        document0.attr(" />", true);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        Document document0 = Document.createShell("");
        Element element0 = document0.head();
        element0.attr("[^%s]", "rCQ");
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        Document document0 = Parser.parseBodyFragment("inert", "_%:b");
        Tag tag0 = Tag.valueOf("_%:b");
        Element element0 = new Element(tag0, "_%:b", (Attributes) null);
        document0.appendTo(element0);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        Document document0 = Document.createShell("ScriptDataDoubleEscapedDash");
        Element element0 = document0.head();
        element0.appendTo(document0);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        Document document0 = Document.createShell("YZtm_``3&_");
        Element element0 = document0.body();
        element0.appendChild(document0);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        Document document0 = Document.createShell("YZtm_``3&_");
        Element element0 = document0.shallowClone();
        element0.appendChild(document0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        Document document0 = Document.createShell("wc4C628iW%TPp");
        document0.setSiblingIndex((-1475));
        document0.append(" ");
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        Element element0 = new Element("~2a)IqaIp");
        element0.append("");
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        Document document0 = Document.createShell("c");
        Document document1 = document0.normalise();
        document1.parentNode = (Node) document0;
        document1.addClass("c");
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("samp", "samp");
        document0.parentNode = (Node) document0;
        // Undeclared exception!
        document0.wrap("samp");
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        Document document0 = new Document("Wu:");
        Element element0 = document0.prependChild(document0);
        // Undeclared exception!
        element0.val("Xqwb+");
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        Document document0 = Document.createShell("Split offset must be not be negative");
        document0.toggleClass((String) null);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        Document document0 = new Document("Dx1HW;:~(ZBeT");
        document0.text("J^bT=H0;uiY");
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        Tag tag0 = Tag.valueOf("{>p\"4k43#oE/");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
        Element element0 = pseudoTextElement0.prependElement("#root");
        element0.after((Node) pseudoTextElement0);
        // Undeclared exception!
        pseudoTextElement0.tagName("{>p\"4k43#oE/");
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        Document document0 = Parser.parse("", "");
        document0.tagName("");
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        Document document0 = Document.createShell("E[d7^n");
        document0.selectFirst("<Yw])&|XWe?!'w");
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        StringReader stringReader0 = new StringReader("");
        Document document0 = parser0.parseInput((Reader) stringReader0, "");
        document0.selectFirst((String) null);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        Tag tag0 = Tag.valueOf("bJ&g%s:dSe");
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "X@GA&__\"zL`<\"UIlq,*", attributes0);
        element0.select("X@GA&__\"zL`<\"UIlq,*");
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("", "~n");
        document0.select("");
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        Document document0 = Parser.parse("summary", "");
        document0.removeClass((String) null);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        Document document0 = new Document("");
        document0.prependElement("");
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        Document document0 = Parser.parseBodyFragment("JG#sgA$$!", "");
        document0.setParentNode(document0);
        document0.empty();
        document0.prependChild(document0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " />");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document0.outerHtmlTail(charBuffer0, 0, document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        Element element0 = new Element("LT");
        char[] charArray0 = new char[2];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        element0.outerHtmlTail(charBuffer0, 0, document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document0.outerHtmlTail((Appendable) null, (-1432352094), document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        Document document0 = Document.createShell("8_ETU<]{!@.9<");
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "8_ETU<]{!@.9<");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document0.outerHtmlTail(stringBuffer0, (-1107), document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        document0.lastElementSibling();
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        Document document0 = new Document("");
        document0.is((Evaluator) null);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        Document document0 = Document.createShell("2J");
        document0.is("tL%oKup3Pz=w@I]*O");
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        Document document0 = Parser.parse("summary", "!x@}:d~k7M}nQ'_5E1");
        Node[] nodeArray0 = new Node[3];
        nodeArray0[0] = (Node) document0;
        nodeArray0[1] = (Node) document0;
        nodeArray0[2] = (Node) document0;
        document0.insertChildren(0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        Document document0 = new Document("org.jsoup.nodes.DataNode");
        Element element0 = document0.appendElement("c:$]:,sV");
        element0.before((Node) document0);
        // Undeclared exception!
        document0.html("KKQ~>s~mAUwWzEH");
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        Document document0 = new Document("eD'*bNhe8Fl*m}32");
        document0.html((String) null);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        Document document0 = new Document("=Bo9qZ`J}ywF");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document document1 = document0.outputSettings(document_OutputSettings0);
        document_OutputSettings0.charset((Charset) null);
        document1.appendElement("AfterDoctypeName");
        StringWriter stringWriter0 = new StringWriter(54);
        document1.html(stringWriter0);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        document0.childNodes = null;
        document0.hasText();
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        Document document0 = Document.createShell("Unexpected count of entities loaded");
        document0.getElementsMatchingText((Pattern) null);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("mE", "mE");
        document0.getElementsMatchingText("IT]bUjnNE,o[*.xh3y");
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        Document document0 = Parser.parse(".oqJf(4SF(-", ".oqJf(4SF(-");
        document0.getElementsMatchingOwnText((Pattern) null);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        document0.getElementsMatchingOwnText(")p(lx%q%6");
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        Tag tag0 = Tag.valueOf("Ay@Z^kD:[0gtH");
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "Ay@Z^kD:[0gtH", attributes0);
        element0.getElementsByTag("");
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("ScriptDataEscapedDash", "body");
        DocumentType documentType0 = new DocumentType("body", "body", "html", "", "html");
        Element element0 = document0.doClone(documentType0);
        element0.getElementsByIndexEquals(4);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        StringReader stringReader0 = new StringReader("X#\"D6r5qdy<$'b");
        Document document0 = parser0.parseInput((Reader) stringReader0, "_J>8xxG");
        document0.getElementsByClass("");
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("C-^Yd0t&y ~o(}I;[u", parseSettings0);
        CDataNode cDataNode0 = new CDataNode("");
        Attributes attributes0 = cDataNode0.attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "C-^Yd0t&y ~o(}I;[u", attributes0);
        pseudoTextElement0.getElementsByAttributeValueNot((String) null, "bgsound");
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        Document document0 = Parser.parse("textarea", "textarea");
        document0.getElementsByAttributeValue("", "<yhYGe.:UVj");
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        Tag tag0 = Tag.valueOf(":matches(%s)");
        Element element0 = new Element(tag0, "");
        element0.getElementById("");
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("{ZI3k9(tZo", "{ZI3k9(tZo");
        document0.firstElementSibling();
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        Document document0 = new Document("");
        document0.classNames((Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("samp", "samp");
        document0.parentNode = (Node) document0;
        // Undeclared exception!
        document0.attr("", "samp");
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        Document document0 = new Document("`?)vQk9T<h9");
        document0.attr((String) null, "#doctype");
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        Element element0 = new Element("7HWI B(^;]V8^*%yD=");
        element0.appendElement("");
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        Tag tag0 = Tag.valueOf("dd");
        Element element0 = new Element(tag0, "dd");
        element0.appendChild((Node) null);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        Document document0 = new Document("org.jsoup.nodes.DataNode");
        Element element0 = document0.appendElement("c:$]:,sV");
        element0.before((Node) document0);
        // Undeclared exception!
        document0.append("EwTIK69F");
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        Document document0 = new Document("org.jsoup.nodes.DataNode");
        Element element0 = document0.appendElement("c:$]:,sV");
        Element element1 = element0.before((Node) document0);
        element1.after((Node) document0);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        Element element0 = null;
        element0 = new Element((Tag) null, (String) null);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        Element element0 = null;
        element0 = new Element((String) null);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        Document document0 = Document.createShell("Split offset must be not be negative");
        document0.html();
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        Document document0 = Parser.parse(".oqJf(4SF(-", ".oqJf(4SF(-");
        document0.hasClass("W)_}-39xb-/z^gU}O");
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("-zSS]J}30h", "    ");
        Element element0 = document0.addClass("-zSS]J}30h");
        Set<String> set0 = element0.classNames();
        element0.classNames(set0);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("Hcd,oq)aD/-g_X_;G", parseSettings0);
        CDataNode cDataNode0 = new CDataNode((String) null);
        Attributes attributes0 = cDataNode0.attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Hcd,oq)aD/-g_X_;G", attributes0);
        Locale locale0 = new Locale("", "");
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        pseudoTextElement0.classNames(set0);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        Element element0 = document0.body();
        element0.data();
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        Document document0 = Parser.parse("", "");
        document0.elementSiblingIndex();
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.DataNode");
        Element element0 = document0.appendElement("org.jsoup.nodes.DataNode");
        element0.elementSiblingIndex();
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        Document document0 = Document.createShell("c");
        Document document1 = document0.normalise();
        document1.parentNode = (Node) document0;
        document0.previousElementSibling();
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("{ZI3k9(tZo", "{ZI3k9(tZo");
        Document document1 = document0.normalise();
        Element element0 = document1.body();
        element0.previousElementSibling();
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.DataNode");
        document0.attributes();
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        Document document0 = Parser.parse("textarea", "textarea");
        document0.getElementsByTag("textarea");
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        Document document0 = Parser.parseBodyFragment("", "");
        document0.children();
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        Document document0 = Parser.parseBodyFragment(" ", " ");
        document0.className();
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("7KJ,.bH/A@L,UD5xLc:", parseSettings0);
        FormElement formElement0 = new FormElement(tag0, "3mZ!-QI }(rk", (Attributes) null);
        formElement0.parent();
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        ParseSettings parseSettings0 = new ParseSettings(true, true);
        Tag tag0 = Tag.valueOf("|\".ruG`_9wJs~", parseSettings0);
        FormElement formElement0 = new FormElement(tag0, "    ", (Attributes) null);
        formElement0.text("|\".ruG`_9wJs~");
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        Document document0 = Document.createShell("mS_3:Y2L|C.lPGbKT]");
        Pattern pattern0 = Pattern.compile("", 1004);
        document0.getElementsMatchingOwnText(pattern0);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        Document document0 = Parser.parseBodyFragment("", "");
        document0.ownText();
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        Document document0 = Document.createShell("LF_$>C%V6[t6<)");
        document0.attr("LF_$>C%V6[t6<)", "");
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        document0.isBlock();
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        Document document0 = Document.createShell("E[d7^n");
        document0.prependChild((Node) null);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        CDataNode cDataNode0 = new CDataNode("A!W21O");
        Attributes attributes0 = cDataNode0.attributes();
        Element element0 = null;
        element0 = new Element((Tag) null, "A!W21O", attributes0);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        Document document0 = Document.createShell("E[d7^n");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        Document document0 = Parser.parseBodyFragment("", "");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        Document document0 = Document.createShell("YZtm_``3&_");
        document0.tagName();
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        Element element0 = new Element("~2a)IqaIp");
        element0.nodeName();
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        Document document0 = Parser.parse("textarea", "textarea");
        Pattern pattern0 = Pattern.compile("");
        document0.getElementsByAttributeValueMatching("<yhYGe.:UVj", pattern0);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        Element element0 = new Element("qQn<6$94fs6)");
        element0.tag();
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("", "~n");
        Element element0 = document0.head();
        element0.clone();
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("", "v");
        document0.id();
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        Element element0 = new Element("qQn<6$94fs6)");
        element0.classNames();
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        Element element0 = new Element("qQn<6$94fs6)");
        element0.outerHtml();
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        Document document0 = Document.createShell("LF_$>C%V6[t6<)");
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        CharsetEncoder charsetEncoder0 = document_OutputSettings0.prepareEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
        document0.html(outputStreamWriter0);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        StringReader stringReader0 = new StringReader("X#\"D6r5qdy<$'b");
        Document document0 = parser0.parseInput((Reader) stringReader0, "_J>8xxG");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
        StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "X#\"D6r5qdy<$'b");
        document0.outerHtmlHead(stringBuilder0, 1478, document_OutputSettings1);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        Document document0 = Parser.parse("summary", "");
        document0.val();
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        document0.data();
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        Document document0 = Parser.parseBodyFragment("Na [AVw_`e", "");
        document0.hasText();
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        document0.hasText();
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("samp", "samp");
        document0.parentNode = (Node) document0;
        document0.text();
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        Element.preserveWhitespace((Node) null);
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        Document document0 = Parser.parse(".oqJf(4SF(-", ".oqJf(4SF(-");
        document0.title("");
        document0.getElementsMatchingOwnText("q2 jYUI./fmfAU#Zw");
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        Document document0 = Parser.parseBodyFragment("(,l'Z", "");
        Element element0 = document0.appendText("(,l'Z");
        Pattern pattern0 = Pattern.compile("");
        element0.getElementsMatchingText(pattern0);
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("", ":eq(%d)");
        document0.getElementById("#");
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("}", "}");
        Element element0 = document0.doClone(document0);
        element0.nextElementSibling();
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        Document document0 = Parser.parse("summary", "");
        Element element0 = document0.body();
        element0.lastElementSibling();
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("", "~n");
        Element element0 = document0.head();
        element0.firstElementSibling();
    }

    @Test(timeout = 4000)
    public void test153153() throws Throwable {
        Document document0 = Parser.parseBodyFragment("}", "}");
        Element element0 = document0.doClone(document0);
        element0.firstElementSibling();
    }

    @Test(timeout = 4000)
    public void test154154() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("{ZI3k9(tZo", "{ZI3k9(tZo");
        document0.previousElementSibling();
    }

    @Test(timeout = 4000)
    public void test155155() throws Throwable {
        Document document0 = new Document("org.jsoup.nodes.DataNode");
        Element element0 = document0.appendElement("c:$]:,sV");
        element0.previousElementSiblings();
    }

    @Test(timeout = 4000)
    public void test156156() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        Element element0 = document0.head();
        element0.nextElementSiblings();
    }

    @Test(timeout = 4000)
    public void test157157() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("2k\"7m\"K=hBC/7}", "org.jsoup.nodes.Element$2");
        document0.nextElementSibling();
    }

    @Test(timeout = 4000)
    public void test158158() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        Element element0 = document0.body();
    }

    @Test(timeout = 4000)
    public void test158159() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        Element element0 = document0.body();
        Elements elements0 = element0.nextElementSiblings();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test158160() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        Element element0 = document0.body();
        Elements elements0 = element0.nextElementSiblings();
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test159161() throws Throwable {
        Document document0 = new Document("L;8l\"?PN");
        document0.siblingElements();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test160162() throws Throwable {
        Document document0 = new Document("org.jsoup.nodes.DataNode");
        Element element0 = document0.appendElement("c:$]:,sV");
        element0.before((Node) document0);
        document0.cssSelector();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test161163() throws Throwable {
        Document document0 = Parser.parseBodyFragment("}", "}");
        Node[] nodeArray0 = new Node[8];
        document0.insertChildren(7, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test162164() throws Throwable {
        Document document0 = new Document("");
        Elements elements0 = document0.parents();
        Element element0 = document0.insertChildren(0, (Collection<? extends Node>) elements0);
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test163165() throws Throwable {
        Document document0 = new Document("mark");
        Elements elements0 = document0.getElementsByIndexGreaterThan((-1203186048));
        document0.insertChildren((-1203186048), (Collection<? extends Node>) elements0);
    }

    @Test(timeout = 4000)
    public void test164166() throws Throwable {
        Document document0 = Parser.parseBodyFragment("B:[Ih@_g", "");
        Elements elements0 = document0.previousElementSiblings();
        document0.insertChildren(1621, (Collection<? extends Node>) elements0);
    }

    @Test(timeout = 4000)
    public void test165167() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        List<DataNode> list0 = document0.dataNodes();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test165168() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        List<DataNode> list0 = document0.dataNodes();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test165169() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        List<DataNode> list0 = document0.dataNodes();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test166170() throws Throwable {
        Document document0 = Document.createShell("E[d7^n");
        List<TextNode> list0 = document0.textNodes();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test166171() throws Throwable {
        Document document0 = Document.createShell("E[d7^n");
        List<TextNode> list0 = document0.textNodes();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test166172() throws Throwable {
        Document document0 = Document.createShell("E[d7^n");
        List<TextNode> list0 = document0.textNodes();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test167173() throws Throwable {
        Document document0 = Parser.parse("LS~9WRP0h`9{", "LS~9WRP0h`9{");
        Element element0 = document0.prependText("value");
        element0.getElementsByIndexLessThan(4);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test167174() throws Throwable {
        Document document0 = Parser.parse("LS~9WRP0h`9{", "LS~9WRP0h`9{");
        Element element0 = document0.prependText("value");
        element0.getElementsByIndexLessThan(4);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test168175() throws Throwable {
        Document document0 = Document.createShell("head");
        document0.selectFirst("br");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test168176() throws Throwable {
        Document document0 = Document.createShell("head");
        document0.selectFirst("br");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test169177() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        document0.is("dt");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test169178() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        document0.is("dt");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test170179() throws Throwable {
        Document document0 = new Document("+J{L0$Y-}]");
        document0.getAllElements();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test171180() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        Element element0 = document0.removeClass("org.jsoupgnodes._lement");
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test171181() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        Element element0 = document0.removeClass("org.jsoupgnodes._lement");
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test172182() throws Throwable {
        Element element0 = new Element("~2a)IqaIp");
        element0.before(".>a");
    }

    @Test(timeout = 4000)
    public void test173183() throws Throwable {
        Document document0 = Parser.parse("summary", "");
        document0.getElementsByAttribute("");
    }

    @Test(timeout = 4000)
    public void test174184() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        Elements elements0 = document0.getElementsByAttributeValueNot("org.jsoupgnodes._lement", "2aU(8*wN9L");
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test174185() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        Elements elements0 = document0.getElementsByAttributeValueNot("org.jsoupgnodes._lement", "2aU(8*wN9L");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test175186() throws Throwable {
        Tag tag0 = Tag.valueOf("{>p\"4k43#oE/");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
        pseudoTextElement0.after((Node) pseudoTextElement0);
    }

    @Test(timeout = 4000)
    public void test176187() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("{ZI3k9(tZo", "{ZI3k9(tZo");
        document0.getElementsByAttributeValueContaining("", "i3b|e\"s>4cqA.");
    }

    @Test(timeout = 4000)
    public void test177188() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        Elements elements0 = document0.getElementsContainingText("org.jsoupgnodes._lement");
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test177189() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        Elements elements0 = document0.getElementsContainingText("org.jsoupgnodes._lement");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test178190() throws Throwable {
        Document document0 = Document.createShell("Unexpected count of entities loaded");
        Elements elements0 = document0.getElementsByClass("o|Lbl");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test178191() throws Throwable {
        Document document0 = Document.createShell("Unexpected count of entities loaded");
        Elements elements0 = document0.getElementsByClass("o|Lbl");
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test178192() throws Throwable {
        Document document0 = Document.createShell("Unexpected count of entities loaded");
        Elements elements0 = document0.getElementsByClass("o|Lbl");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test179193() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
        document0.is((Evaluator) evaluator_IsOnlyOfType0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test179194() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoupgnodes._lement", "2aU(8*wN9L");
        Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
        document0.is((Evaluator) evaluator_IsOnlyOfType0);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test180195() throws Throwable {
        Document document0 = Document.createShell("");
        document0.getElementsByAttributeValueMatching(">gZ]aGLQ|YyQgo$_\"/0", (String) null);
    }

    @Test(timeout = 4000)
    public void test181196() throws Throwable {
        Document document0 = Parser.parse("summary", "");
        Elements elements0 = document0.getElementsByIndexEquals(0);
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test182197() throws Throwable {
        Document document0 = Document.createShell("Split offset must be not be negative");
        document0.getElementsByAttributeStarting("%xL!h?;FT|<lx_!~");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test182198() throws Throwable {
        Document document0 = Document.createShell("Split offset must be not be negative");
        document0.getElementsByAttributeStarting("%xL!h?;FT|<lx_!~");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test183199() throws Throwable {
        Document document0 = new Document("dfn");
        document0.after("dfn");
    }

    @Test(timeout = 4000)
    public void test184200() throws Throwable {
        Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
        document0.prepend("org.jsoup.nodes.Element");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test185201() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        document0.select("eKe");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test185202() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
        document0.select("eKe");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test186203() throws Throwable {
        Document document0 = Document.createShell("Split offset must be not be negative");
        document0.getElementsByAttributeValueStarting("", "%xL!h?;FT|<lx_!~");
    }

    @Test(timeout = 4000)
    public void test187204() throws Throwable {
        Document document0 = new Document("org.jsoup.nodes.DataNode");
        document0.getElementsByAttributeValue(" />", " />");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test188205() throws Throwable {
        Document document0 = new Document("L;8l\"?PN");
        Element element0 = document0.attr("L;8l\"?PN", false);
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test189206() throws Throwable {
        Document document0 = new Document("org.jsoup.nodes.DataNode");
        document0.html("KKQ~>s~mAUwWzEH");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test190207() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("{ZI3k9(tZo", "{ZI3k9(tZo");
        String string0 = document0.wholeText();
    }

    @Test(timeout = 4000)
    public void test190208() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("{ZI3k9(tZo", "{ZI3k9(tZo");
        String string0 = document0.wholeText();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test191209() throws Throwable {
        Document document0 = new Document("org.jsoup.nodes.DataNode");
        document0.before((Node) document0);
    }

    @Test(timeout = 4000)
    public void test192210() throws Throwable {
        Element element0 = new Element("LF_$>C%V6[t6<)");
        element0.doSetBaseUri("LF_$>C%V6[t6<)");
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test193211() throws Throwable {
        Document document0 = new Document("L;8l\"?PN");
        document0.addClass("<iOZ :U6l^}(QHCFk ");
        document0.cssSelector();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test194212() throws Throwable {
        Document document0 = Parser.parseBodyFragment("}", "}");
        Elements elements0 = document0.getElementsContainingOwnText("}");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test194213() throws Throwable {
        Document document0 = Parser.parseBodyFragment("}", "}");
        Elements elements0 = document0.getElementsContainingOwnText("}");
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test194214() throws Throwable {
        Document document0 = Parser.parseBodyFragment("}", "}");
        Elements elements0 = document0.getElementsContainingOwnText("}");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test195215() throws Throwable {
        Document document0 = new Document("L;8l\"?PN");
        document0.dataset();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test196216() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "2aU(8*wN9L");
        document0.child(1448);
    }

    @Test(timeout = 4000)
    public void test197217() throws Throwable {
        Document document0 = new Document("L;8l\"?PN");
        document0.getElementsMatchingText("");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test198218() throws Throwable {
        Document document0 = Document.createShell("nowrap");
        document0.wrap(":matchText");
    }
}
