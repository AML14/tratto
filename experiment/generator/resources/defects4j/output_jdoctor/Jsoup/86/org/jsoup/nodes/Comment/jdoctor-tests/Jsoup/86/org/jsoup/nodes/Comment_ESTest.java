/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 23:29:58 GMT 2023
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Comment_ESTest extends Comment_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Comment comment0 = new Comment("comment", "em");
        StringWriter stringWriter0 = new StringWriter();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        comment0.outerHtmlTail(stringWriter0, (-3824), document_OutputSettings0);
        document_OutputSettings0.outline();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Comment comment0 = new Comment((String) null);
        comment0.getData();
        comment0.nodeName();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Comment comment0 = new Comment("", "iframe");
        comment0.getData();
        comment0.nodeName();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Comment comment0 = new Comment(";ZMy", ";ZMy");
        XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Comment comment0 = new Comment(";ZMy", ";ZMy");
        XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
        comment0.nodeName();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Comment comment0 = new Comment("j7)*@new9&DAC-ekb8W", "j7)*@new9&DAC-ekb8W");
        comment0.reparentChild(comment0);
        // Undeclared exception!
        comment0.toString();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Comment comment0 = new Comment("?EF'5F+\"", "comment");
        Object object0 = new Object();
        comment0.value = object0;
        comment0.toString();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Comment comment0 = new Comment(";ZMy", ";ZMy");
        Parser parser0 = Parser.xmlParser();
        Document document0 = parser0.parseInput("+!_]D7gjO9H]'9|", "+!_]D7gjO9H]'9|");
        comment0.setParentNode(document0);
        comment0.siblingIndex = (-923);
        comment0.toString();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Comment comment0 = new Comment("comment", "em");
        StringWriter stringWriter0 = new StringWriter();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        document_OutputSettings0.indentAmount(35);
        // Undeclared exception!
        comment0.outerHtmlHead(stringWriter0, 958, document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Comment comment0 = new Comment("org.jsoup.SerializationException");
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "#comment");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        comment0.outerHtmlHead(charBuffer0, 27, document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Comment comment0 = new Comment("");
        char[] charArray0 = new char[6];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        comment0.outerHtmlHead(charBuffer0, 1, document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Comment comment0 = new Comment("org.jsoup.nodes.Comment");
        comment0.outerHtmlHead((Appendable) null, 3720, (Document.OutputSettings) null);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Comment comment0 = new Comment("GXy}3", "GXy}3");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        StringBuilder stringBuilder0 = new StringBuilder(1);
        comment0.outerHtmlHead(stringBuilder0, (-20569767), document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Comment comment0 = new Comment("", "!>206&d5");
        MockPrintStream mockPrintStream0 = new MockPrintStream("!>206&d5");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        comment0.value = (Object) document_OutputSettings0;
        comment0.outerHtmlHead(mockPrintStream0, 79, document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Comment comment0 = new Comment(">206&d5", ">206&d5");
        PipedWriter pipedWriter0 = new PipedWriter();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        comment0.outerHtmlHead(pipedWriter0, 26, document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Comment comment0 = new Comment((String) null);
        comment0.isXmlDeclaration();
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        Comment comment0 = new Comment("");
        Object object0 = new Object();
        comment0.value = object0;
        comment0.isXmlDeclaration();
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        Comment comment0 = new Comment("?EF'5F+\"", "comment");
        Object object0 = new Object();
        comment0.value = object0;
        comment0.getData();
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        Comment comment0 = new Comment("", "");
        comment0.asXmlDeclaration();
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        Comment comment0 = new Comment((String) null);
        comment0.asXmlDeclaration();
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        Comment comment0 = new Comment("!stZ9RYK_*dt!B:`e8h", "^4pj{Mp:,@&");
        Tag tag0 = Tag.valueOf("<");
        Attributes attributes0 = new Attributes();
        PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "G", attributes0);
        comment0.value = (Object) pseudoTextElement0;
        comment0.asXmlDeclaration();
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        Comment comment0 = new Comment("?NV^SU^", "");
        boolean boolean0 = comment0.isXmlDeclaration();
        comment0.nodeName();
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        Comment comment0 = new Comment("?NV^SU^", "");
        boolean boolean0 = comment0.isXmlDeclaration();
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        Comment comment0 = new Comment("comment", "em");
        comment0.getData();
        comment0.nodeName();
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        Comment comment0 = new Comment("org.jsoup.SerializationException");
        String string0 = comment0.nodeName();
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        Comment comment0 = new Comment("m/i4B(xa", "m/i4B(xa");
        XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        Comment comment0 = new Comment("m/i4B(xa", "m/i4B(xa");
        XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
        comment0.nodeName();
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        Comment comment0 = new Comment("m?j49`a");
        comment0.asXmlDeclaration();
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        Comment comment0 = new Comment("GXy}3", "GXy}3");
        boolean boolean0 = comment0.isXmlDeclaration();
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        Comment comment0 = new Comment("GXy}3", "GXy}3");
        boolean boolean0 = comment0.isXmlDeclaration();
        comment0.nodeName();
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        Comment comment0 = new Comment("", "!>206&d5");
        boolean boolean0 = comment0.isXmlDeclaration();
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        Comment comment0 = new Comment("", "!>206&d5");
        boolean boolean0 = comment0.isXmlDeclaration();
        comment0.nodeName();
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        Comment comment0 = new Comment(";ZMy", ";ZMy");
        String string0 = comment0.toString();
        comment0.nodeName();
    }

    @Test(timeout = 4000)
    public void test2733() throws Throwable {
        Comment comment0 = new Comment(";ZMy", ";ZMy");
        String string0 = comment0.toString();
    }

    @Test(timeout = 4000)
    public void test2834() throws Throwable {
        Comment comment0 = new Comment("", "!>206&d5");
        MockPrintStream mockPrintStream0 = new MockPrintStream("!>206&d5");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
        comment0.outerHtmlHead(mockPrintStream0, 79, document_OutputSettings1);
        comment0.nodeName();
    }

    @Test(timeout = 4000)
    public void test2935() throws Throwable {
        Comment comment0 = new Comment("!+PV");
        boolean boolean0 = comment0.isXmlDeclaration();
        comment0.nodeName();
    }

    @Test(timeout = 4000)
    public void test2936() throws Throwable {
        Comment comment0 = new Comment("!+PV");
        boolean boolean0 = comment0.isXmlDeclaration();
    }
}
