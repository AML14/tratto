/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:11:07 GMT 2023
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(sequenceInputStream0);
        byteBuffer0.hasArray();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DataUtil.readToByteBuffer((InputStream) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        DataUtil.readToByteBuffer(mockFileInputStream0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
        Parser parser0 = Parser.xmlParser();
        DataUtil.parseByteData(byteBuffer0, "charset", (String) null, parser0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        ByteBuffer byteBuffer0 = charset0.encode("org.jsoup.helper.DataUtil");
        Parser parser0 = Parser.xmlParser();
        DataUtil.parseByteData(byteBuffer0, "rQ]69>0KK$J{YU2%", "rQ]69>0KK$J{YU2%", parser0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        DataUtil.parseByteData((ByteBuffer) null, (String) null, (String) null, (Parser) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        ByteBuffer byteBuffer0 = charset0.encode("");
        Parser parser0 = Parser.htmlParser();
        DataUtil.parseByteData(byteBuffer0, "", "", parser0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 12, 65279);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte) 12);
        DataUtil.load((InputStream) bufferedInputStream0, "m", "m", (Parser) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MockFile mockFile0 = new MockFile("", "|2|");
        File file0 = MockFile.createTempFile("|2|", "|2|", (File) mockFile0);
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
        Parser parser0 = Parser.xmlParser();
        DataUtil.load((InputStream) mockFileInputStream0, "|2|", "", parser0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        DataUtil.load((InputStream) null, "", "", parser0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(3);
        Parser parser0 = Parser.htmlParser();
        DataUtil.load((InputStream) pipedInputStream0, (String) null, (String) null, parser0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 0);
        DataUtil.load((InputStream) byteArrayInputStream0, "http-equiv", "bPee$@q");
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2309, (byte) (-40));
        DataUtil.load((InputStream) byteArrayInputStream0, "J\"k!#N $O!CJ]g)K", "J\"k!#N $O!CJ]g)K");
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, 375);
        DataUtil.load((InputStream) byteArrayInputStream0, "", "charset");
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-73), 1);
        DataUtil.load((InputStream) byteArrayInputStream0, "J", "J");
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
        DataUtil.load((InputStream) sequenceInputStream0, "1lk7KQ@~ ", "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        File file0 = MockFile.createTempFile("}I^BQbZ>9E]lM", "1h{x");
        DataUtil.load(file0, "1h{x", "}I^BQbZ>9E]lM");
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        MockFile mockFile0 = new MockFile("%i#IWVpcB''hy7");
        File file0 = MockFile.createTempFile("%i#IWVpcB''hy7", "%i#IWVpcB''hy7", (File) mockFile0);
        DataUtil.load(file0, "", "%i#IWVpcB''hy7");
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        MockFile mockFile0 = new MockFile("org.jsoup.nodes.Attribute");
        DataUtil.load((File) mockFile0, "vB*2=go T", "[P#W6*\"H");
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType((String) null);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("");
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
        Document document0 = DataUtil.load((InputStream) pushbackInputStream0, (String) null, "");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(20);
        Parser parser0 = Parser.htmlParser();
        Document document0 = DataUtil.parseByteData(byteBuffer0, "UTF-8", "-5s'(s", parser0);
        document0.isBlock();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        MockFile mockFile0 = new MockFile("eMOm7:77|eeBPQG1J4");
        File file0 = MockFile.createTempFile("eMOm7:77|eeBPQG1J4", "B|J).FQ", (File) mockFile0);
        DataUtil.load(file0, "f", "AyhlOB%Rm_a");
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        DataUtil.load((File) null, "", "");
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        File file0 = MockFile.createTempFile("4(0VrUXQ*zG_q", (String) null);
        Document document0 = DataUtil.load(file0, (String) null, "4(0VrUXQ*zG_q");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        Parser parser0 = Parser.htmlParser();
        DataUtil.load((InputStream) sequenceInputStream0, "", "", parser0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        DataUtil.load((InputStream) null, "|", "|");
    }
}
