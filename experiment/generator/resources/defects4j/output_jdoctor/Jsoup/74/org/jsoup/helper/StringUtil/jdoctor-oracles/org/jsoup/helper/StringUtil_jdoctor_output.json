[
  {
    "signature": "join(java.util.Collection strings, java.lang.String sep)",
    "name": "join",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "strings"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "sep"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Collection",
            "name": "Collection",
            "isArray": false
          },
          "name": "strings"
        },
        "comment": "collection of string objects.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "sep"
        },
        "comment": "string to place between strings.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "joined string.",
      "kind": "RETURN",
      "condition": "true ? methodResultID.equals(args[1])"
    },
    "throwsTags": []
  },
  {
    "signature": "join(java.util.Iterator strings, java.lang.String sep)",
    "name": "join",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "strings"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "sep"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.util.Iterator",
            "name": "Iterator",
            "isArray": false
          },
          "name": "strings"
        },
        "comment": "iterator of string objects.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "sep"
        },
        "comment": "string to place between strings.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "joined string.",
      "kind": "RETURN",
      "condition": "true ? methodResultID.equals(args[1])"
    },
    "throwsTags": []
  },
  {
    "signature": "join(java.lang.String[] strings, java.lang.String sep)",
    "name": "join",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "strings"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "sep"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "[Ljava.lang.String;",
            "name": "String[]",
            "isArray": true
          },
          "name": "strings"
        },
        "comment": "collection of string objects.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "sep"
        },
        "comment": "string to place between strings.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "joined string.",
      "kind": "RETURN",
      "condition": "true ? methodResultID.equals(args[1])"
    },
    "throwsTags": []
  },
  {
    "signature": "padding(int width)",
    "name": "padding",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "width"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "width"
        },
        "comment": "amount of padding desired.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "string of spaces * width.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isBlank(java.lang.String string)",
    "name": "isBlank",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "string to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "if string is blank.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isNumeric(java.lang.String string)",
    "name": "isNumeric",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "string to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if only digit chars, false if empty or null or contains non-digit chars.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isWhitespace(int c)",
    "name": "isWhitespace",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "c"
        },
        "comment": "code point to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if code point is whitespace, false otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "isActuallyWhitespace(int c)",
    "name": "isActuallyWhitespace",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "int",
            "name": "int",
            "isArray": false
          },
          "name": "c"
        },
        "comment": "code point to test.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "true if code point is whitespace, false otherwise.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "normaliseWhitespace(java.lang.String string)",
    "name": "normaliseWhitespace",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "string is content. content to normalise.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "normalised string.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "appendNormalisedWhitespace(java.lang.StringBuilder accum, java.lang.String string, boolean stripLeading)",
    "name": "appendNormalisedWhitespace",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.StringBuilder",
          "name": "StringBuilder",
          "isArray": false
        },
        "name": "accum"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "stripLeading"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.StringBuilder",
            "name": "StringBuilder",
            "isArray": false
          },
          "name": "accum"
        },
        "comment": "builder to append to.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "string"
        },
        "comment": "string to normalize whitespace within.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "boolean",
            "name": "boolean",
            "isArray": false
          },
          "name": "stripLeading"
        },
        "comment": "set to true if you wish to remove any leading whitespace.",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "throwsTags": []
  },
  {
    "signature": "in(java.lang.String needle, java.lang.String... haystack)",
    "name": "in",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "needle"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "haystack"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "inSorted(java.lang.String needle, java.lang.String[] haystack)",
    "name": "inSorted",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "needle"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "haystack"
      }
    ],
    "paramTags": [],
    "throwsTags": []
  },
  {
    "signature": "resolve(java.net.URL base, java.lang.String relUrl)",
    "name": "resolve",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.net.URL",
      "name": "java.net.URL",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.net.URL",
          "name": "URL",
          "isArray": false
        },
        "name": "base"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "relUrl"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.net.URL",
            "name": "URL",
            "isArray": false
          },
          "name": "base"
        },
        "comment": "the existing absolute base URL.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "relUrl"
        },
        "comment": "the relative URL to resolve. (If it's already absolute relative . relUrl is returned).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "the resolved absolute URL.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": [
      {
        "exceptionType": {
          "qualifiedName": "java.net.MalformedURLException",
          "name": "MalformedURLException",
          "isArray": false
        },
        "codeTags": [],
        "comment": "an error occurred generating the URL.",
        "kind": "THROWS",
        "condition": ""
      }
    ]
  },
  {
    "signature": "resolve(java.lang.String baseUrl, java.lang.String relUrl)",
    "name": "resolve",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "baseUrl"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "relUrl"
      }
    ],
    "paramTags": [
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "baseUrl"
        },
        "comment": "the existing absolute base URL.",
        "kind": "PARAM",
        "condition": ""
      },
      {
        "parameter": {
          "type": {
            "qualifiedName": "java.lang.String",
            "name": "String",
            "isArray": false
          },
          "name": "relUrl"
        },
        "comment": "the relative URL to resolve. (If it's already absolute relative . relUrl is returned).",
        "kind": "PARAM",
        "condition": ""
      }
    ],
    "returnTag": {
      "comment": "an absolute URL if one was able to be generated, or the empty string if not.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  },
  {
    "signature": "stringBuilder()",
    "name": "stringBuilder",
    "containingClass": {
      "qualifiedName": "org.jsoup.helper.StringUtil",
      "name": "StringUtil",
      "isArray": false
    },
    "targetClass": "org.jsoup.helper.StringUtil",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.StringBuilder",
      "name": "java.lang.StringBuilder",
      "isArray": false
    },
    "parameters": [],
    "paramTags": [],
    "returnTag": {
      "comment": "an empty StringBuilder.",
      "kind": "RETURN",
      "condition": ""
    },
    "throwsTags": []
  }
]