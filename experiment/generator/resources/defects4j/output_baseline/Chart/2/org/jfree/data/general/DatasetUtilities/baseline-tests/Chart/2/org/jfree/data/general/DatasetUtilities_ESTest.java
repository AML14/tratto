/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 01:46:20 GMT 2023
 */
package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.event.HierarchyListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.Clock;
import java.time.Instant;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.EventListener;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.UnaryOperator;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.plaf.synth.SynthListUI;
import javax.swing.text.DefaultFormatterFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryDatasetSelectionState;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeries;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
        defaultKeyedValues0.clear();
        TableXYDataset tableXYDataset0 = null;
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        double[][] doubleArray0 = new double[5][9];
        double[] doubleArray1 = new double[4];
        doubleArray1[0] = (-153.30124);
        doubleArray1[1] = (double) 277L;
        doubleArray1[2] = 3270.9782;
        doubleArray1[3] = (double) 277L;
        doubleArray0[0] = doubleArray1;
        doubleArray1[2] = 3270.9782;
        doubleArray0[1] = doubleArray1;
        double[] doubleArray2 = new double[6];
        doubleArray2[0] = (double) 277L;
        doubleArray2[1] = 3270.9782;
        doubleArray2[2] = (-268.39);
        doubleArray2[3] = (double) 277L;
        doubleArray2[4] = (-153.30124);
        doubleArray2[5] = (-153.30124);
        doubleArray0[2] = doubleArray2;
        double[] doubleArray3 = new double[0];
        doubleArray0[3] = doubleArray3;
        double[] doubleArray4 = new double[4];
        doubleArray4[0] = (-268.39);
        doubleArray4[1] = (double) 277L;
        doubleArray4[2] = (-268.39);
        doubleArray4[3] = (-153.30124);
        doubleArray0[4] = doubleArray4;
        SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 32, 32);
        TableOrder tableOrder0 = TableOrder.BY_ROW;
        CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingGanttCategoryDataset0, tableOrder0, 2402);
        DatasetUtilities.createCategoryDataset((Comparable) 277.0, (KeyedValues) categoryToPieDataset0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        double[][] doubleArray0 = new double[1][7];
        double[] doubleArray1 = new double[8];
        doubleArray1[2] = 0.0;
        doubleArray1[3] = 2992.2094992533757;
        doubleArray1[4] = (-320.9347322552927);
        doubleArray1[6] = 623.349;
        doubleArray1[7] = 842.78474997;
        doubleArray0[0] = doubleArray1;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(":/pX-Jfo^1pNyn", "", doubleArray0);
        ((DefaultCategoryDataset) categoryDataset0).getColumnCount();
        DatasetUtilities.findMinimumRangeValue(categoryDataset0);
        SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
        simpleHistogramDataset0.validateObject();
        DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0, true);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
        TableOrder tableOrder0 = TableOrder.BY_ROW;
        CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 1830);
        Second second0 = new Second();
        PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) second0, (double) 0, 0);
        DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
        MatrixSeries matrixSeries0 = null;
        matrixSeries0 = new MatrixSeries("Null 'xRange' argument", 1830, (-1));
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
        JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
        Year year0 = new Year((-689));
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-689), 9999, 9999);
        year0.getLastMillisecond((Calendar) mockGregorianCalendar0);
        Week week0 = new Week((-689), year0);
        jDBCCategoryDataset0.setValue((-3011.5958), (Comparable) week0, (Comparable) week0);
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0);
        DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 9999);
        LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
        Byte byte0 = new Byte((byte) 25);
        linkedList0.add(byte0);
        linkedList0.stream();
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, false);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        double[][] doubleArray0 = new double[7][1];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = Double.POSITIVE_INFINITY;
        doubleArray1[1] = 1.5;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[5];
        doubleArray2[0] = (-1770.07);
        doubleArray2[1] = (-4291.547029677244);
        doubleArray2[2] = Double.POSITIVE_INFINITY;
        doubleArray2[3] = (-2478.4);
        doubleArray2[4] = 1.5;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[2];
        doubleArray3[0] = (-1770.07);
        doubleArray3[1] = (-4291.547029677244);
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[6];
        doubleArray4[0] = (-4291.547029677244);
        doubleArray4[1] = Double.POSITIVE_INFINITY;
        doubleArray4[2] = 1.5;
        doubleArray4[3] = Double.POSITIVE_INFINITY;
        doubleArray4[4] = 1.5;
        doubleArray4[5] = 1.5;
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[5];
        doubleArray5[0] = (-1770.07);
        doubleArray5[1] = (-4291.547029677244);
        doubleArray5[2] = (-1770.07);
        doubleArray5[3] = (-4291.547029677244);
        doubleArray5[4] = (-2478.4);
        doubleArray0[4] = doubleArray5;
        double[] doubleArray6 = new double[4];
        doubleArray6[0] = Double.POSITIVE_INFINITY;
        doubleArray6[1] = (-2478.4);
        doubleArray6[2] = (-2478.4);
        doubleArray6[3] = 1.5;
        doubleArray0[5] = doubleArray6;
        double[] doubleArray7 = new double[5];
        doubleArray7[0] = (-4291.547029677244);
        doubleArray7[1] = Double.POSITIVE_INFINITY;
        doubleArray7[2] = (-4291.547029677244);
        doubleArray7[3] = (-1770.07);
        doubleArray7[4] = (-1770.07);
        doubleArray0[6] = doubleArray7;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
        DatasetUtilities.findRangeBounds(categoryDataset0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        double[][] doubleArray0 = new double[1][7];
        double[] doubleArray1 = new double[8];
        doubleArray1[0] = 411.805232725492;
        doubleArray1[1] = (-153.30124);
        doubleArray1[2] = 3344.261;
        doubleArray1[3] = 2992.2094992533757;
        doubleArray1[4] = (-321.14284);
        doubleArray1[5] = Double.NaN;
        doubleArray1[6] = 623.349;
        doubleArray1[7] = 842.78474997;
        doubleArray0[0] = doubleArray1;
        DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset) DatasetUtilities.createCategoryDataset(":/pX-Jfo^1pNyn", "", doubleArray0);
        defaultCategoryDataset0.setSelectionState((CategoryDatasetSelectionState) null);
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
        defaultStatisticalCategoryDataset0.clear();
        Vector<JDBCXYDataset> vector0 = new Vector<JDBCXYDataset>();
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries(minute0);
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
        DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        double[][] doubleArray0 = new double[1][7];
        double[] doubleArray1 = new double[8];
        doubleArray1[0] = 411.805232725492;
        doubleArray1[1] = (-153.30124);
        doubleArray1[2] = 3344.261;
        doubleArray1[3] = 2992.2094992533757;
        doubleArray1[4] = (-321.14284);
        doubleArray1[5] = Double.NaN;
        doubleArray1[6] = 623.349;
        doubleArray1[7] = 842.78474997;
        doubleArray0[0] = doubleArray1;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(":/pX-Jfo^1pNyn", "", doubleArray0);
        DatasetUtilities.iterateRangeBounds(categoryDataset0);
        DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        CategoryDataset categoryDataset0 = null;
        int int0 = (-1954);
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (-1954));
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        double[][] doubleArray0 = new double[1][7];
        double[] doubleArray1 = new double[8];
        doubleArray1[0] = 411.805232725492;
        doubleArray1[1] = (-153.30124);
        doubleArray1[2] = 3344.261;
        doubleArray1[3] = 2992.2094992533757;
        doubleArray1[4] = (-321.14284);
        doubleArray1[5] = Double.NaN;
        doubleArray1[6] = 623.349;
        doubleArray1[7] = 842.78474997;
        doubleArray0[0] = doubleArray1;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(":/pX-Jfo^1pNyn", "", doubleArray0);
        DatasetUtilities.iterateRangeBounds(categoryDataset0);
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) 411.805232725492);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        TableXYDataset tableXYDataset0 = null;
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (-1577.7035365477923));
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        double[][] doubleArray0 = new double[0][6];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-10029));
        DatasetUtilities.isEmptyOrNull(pieDataset0);
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
        DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
        DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
        DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-10029));
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 0);
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        MockDate mockDate0 = new MockDate((-35), 0, (-10029), 1637, 0);
        ZoneId.systemDefault();
        LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
        double[] doubleArray1 = new double[4];
        doubleArray1[0] = (double) 0;
        doubleArray1[1] = (double) (-35);
        doubleArray1[2] = (double) 0;
        doubleArray1[3] = (double) 1637;
        PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-3594.08685), 1.0, 0, (-35.0));
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
        XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
        defaultTableXYDataset0.removeChangeListener(xYDatasetTableModel0);
        defaultTableXYDataset0.getDomainBounds(true);
        TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
        int int0 = 2146658270;
        SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 2146658270, 2146658270);
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
        IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0, false);
        intervalXYDelegate0.setAutoWidth(true);
        xYSeriesCollection0.equals(intervalXYDelegate0);
        Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        vector0.add(defaultStatisticalCategoryDataset0);
        DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, vector0, true);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
        LineFunction2D lineFunction2D0 = new LineFunction2D(3547.0, 250.3764192399988);
        double double0 = (-1610.9777705227953);
        double double1 = 1.5;
        int int0 = 129;
        Hour hour0 = null;
        Minute minute0 = null;
        minute0 = new Minute(129, (Hour) null);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        double[][] doubleArray0 = new double[1][5];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
        AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
        AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
        int int0 = (-1);
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-1));
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        double[][] doubleArray0 = new double[4][9];
        double[] doubleArray1 = new double[4];
        doubleArray1[0] = 2285.945769167;
        doubleArray1[1] = (-153.3);
        doubleArray1[2] = 0.5;
        doubleArray1[3] = 2089.4427043978453;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[1];
        doubleArray2[0] = 2089.4427043978453;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[3];
        doubleArray3[0] = (-153.3);
        doubleArray3[1] = 2089.4427043978453;
        doubleArray3[2] = 0.5;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[8];
        doubleArray4[0] = (-153.3);
        doubleArray4[1] = (-153.3);
        doubleArray4[2] = (-153.3);
        doubleArray4[3] = 0.5;
        doubleArray4[4] = 2285.945769167;
        doubleArray4[5] = 2089.4427043978453;
        doubleArray4[6] = 2089.4427043978453;
        doubleArray4[7] = (-153.3);
        doubleArray0[3] = doubleArray4;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("6aN<xb#.", "6aN<xb#.", doubleArray0);
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 17);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        XYDataset xYDataset0 = null;
        Stack<Float> stack0 = new Stack<Float>();
        Float float0 = new Float(0.0);
        UnaryOperator<Float> unaryOperator0 = UnaryOperator.identity();
        stack0.replaceAll(unaryOperator0);
        Float.sum(1.0F, 0.0F);
        Float.max(2913.986F, 4602.78F);
        Float.min(1.0F, 264.0215F);
        stack0.add(float0);
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, true);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        Comparable<IntervalXYDelegate>[] comparableArray0 = (Comparable<IntervalXYDelegate>[]) Array.newInstance(Comparable.class, 1);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4L);
        RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
        comparableArray0[0] = (Comparable<IntervalXYDelegate>) regularTimePeriod0;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        calendar0.setTimeZone(timeZone0);
        regularTimePeriod0.peg(calendar0);
        regularTimePeriod0.toString();
        double[][] doubleArray0 = new double[0][5];
        DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
        DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) regularTimePeriod0);
        DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
        PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) comparableArray0[0], 0.0, 2000);
        DatasetUtilities.isEmptyOrNull(pieDataset1);
        CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
        categoryTableXYDataset0.getSeriesCount();
        DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory();
        JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatterFactory) defaultFormatterFactory0);
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NEGATIVE_INFINITY);
        defaultPieDataset0.isSelected(comparableArray0[0]);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
        LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
        DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, true);
        MockDate mockDate0 = new MockDate(0L);
        String string0 = "(t9{s^D/~<Dsm;UbQ";
        TimeZone timeZone0 = TimeZone.getTimeZone("(t9{s^D/~<Dsm;UbQ");
        Year year0 = new Year(mockDate0, timeZone0);
        RegularTimePeriod regularTimePeriod0 = year0.previous();
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 1.0, 1.0, (-748), regularTimePeriod0);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
        DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, (List) null, true);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
        XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
        defaultTableXYDataset0.removeChangeListener(xYDatasetTableModel0);
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
        TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
        int int0 = 2146658270;
        SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2146658270, 2146658270);
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        // Undeclared exception!
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (double) 2146658270);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) linkedList0, true);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[23];
        doubleArray1[0] = (-995.7472);
        doubleArray1[1] = (-884.0);
        doubleArray1[2] = (-1615.96999);
        doubleArray1[3] = (-1615.96999);
        doubleArray1[4] = (-1528.7);
        doubleArray1[5] = 0.0;
        doubleArray1[7] = (-153.30124);
        doubleArray1[8] = 0.0;
        doubleArray0[0] = doubleArray1;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        keyToGroupMap0.getKeyCount(0.0);
        keyToGroupMap0.getGroup((-153.30124));
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
        AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
        AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
        defaultIntervalCategoryDataset0.hasListener((EventListener) null);
        int int0 = (-1);
        Number[][] numberArray0 = new Number[3][7];
        Number[] numberArray1 = new Number[4];
        numberArray1[0] = (Number) (-153.30124);
        numberArray1[1] = (Number) (-1615.96999);
        numberArray1[2] = (Number) (-153.30124);
        numberArray1[3] = (Number) (-153.30124);
        numberArray0[0] = numberArray1;
        Number[] numberArray2 = new Number[2];
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        numberArray2[0] = (Number) integer0;
        numberArray2[1] = (Number) (-1615.96999);
        numberArray0[1] = numberArray2;
        Number[] numberArray3 = new Number[1];
        numberArray3[0] = (Number) (-1615.96999);
        numberArray0[2] = numberArray3;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, false);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("Requires 'samples' > 1");
        DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, timeZone0);
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        Number[][] numberArray0 = new Number[5][0];
        Number[] numberArray1 = new Number[6];
        Integer integer0 = JLayeredPane.POPUP_LAYER;
        numberArray1[0] = (Number) integer0;
        double[][] doubleArray0 = new double[5][6];
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = (-1266.170435924111);
        doubleArray1[1] = 0.0;
        doubleArray1[2] = 832.2;
        doubleArray1[3] = 0.0;
        doubleArray1[4] = 1960.74534886;
        doubleArray1[5] = 0.0;
        doubleArray1[6] = Double.POSITIVE_INFINITY;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[2];
        doubleArray2[0] = 1960.74534886;
        doubleArray2[1] = 0.0;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[7];
        doubleArray3[0] = 832.2;
        doubleArray3[1] = 832.2;
        doubleArray3[2] = (-1266.170435924111);
        doubleArray3[3] = 832.2;
        doubleArray3[4] = 0.0;
        doubleArray3[5] = 1960.74534886;
        doubleArray3[6] = Double.POSITIVE_INFINITY;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[4];
        doubleArray4[0] = (-1266.170435924111);
        doubleArray4[1] = (-1266.170435924111);
        doubleArray4[2] = 1041.0;
        doubleArray4[3] = Double.NEGATIVE_INFINITY;
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[7];
        doubleArray5[0] = Double.POSITIVE_INFINITY;
        doubleArray5[1] = 1041.0;
        doubleArray5[2] = 1960.74534886;
        doubleArray5[3] = 832.2;
        doubleArray5[4] = 0.0;
        doubleArray5[5] = 0.0;
        doubleArray5[6] = Double.NEGATIVE_INFINITY;
        doubleArray0[4] = doubleArray5;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("'3&m", "B6F%", doubleArray0);
        Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
        numberArray1[1] = number0;
        BigInteger bigInteger0 = BigInteger.TEN;
        numberArray1[2] = (Number) bigInteger0;
        Byte byte0 = new Byte((byte) 16);
        numberArray1[3] = (Number) byte0;
        Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
        numberArray1[4] = (Number) integer1;
        Float float0 = new Float(0.0F);
        numberArray1[5] = (Number) float0;
        numberArray0[0] = numberArray1;
        Number[] numberArray2 = new Number[3];
        numberArray2[0] = (Number) (-1266.170435924111);
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        defaultStatisticalCategoryDataset0.getMeanValue((Comparable) 1960.74534886, (Comparable) integer1);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        double[][] doubleArray0 = new double[0][6];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-10029));
        DatasetUtilities.isEmptyOrNull(pieDataset0);
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
        DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
        DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
        DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-10029));
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 0);
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        MockDate mockDate0 = new MockDate(0, 0, (-10029), 1637, 0);
        ZoneId.systemDefault();
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) null, (Range) null, true);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
        ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
        DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
        arrayList0.add(defaultIntervalXYDataset0);
        defaultXYZDataset0.indexOf((Comparable) null);
        DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, (List) arrayList0, false);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        Number[][] numberArray0 = new Number[0][4];
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("|?F})&*JK:tm,JUs", "|?F})&*JK:tm,JUs", numberArray0);
        DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
        Range.expandToInclude((Range) null, Double.NEGATIVE_INFINITY);
        XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
        Range.combine((Range) null, (Range) null);
        DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
        Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
        Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Millisecond millisecond0 = new Millisecond(mockDate0);
        mockDate0.toInstant();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "5WHAMs+gM}", "");
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 0);
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
        DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
        DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
        Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 7);
        Hour hour0 = null;
        hour0 = new Hour(835, 999, 999, 0);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 4004);
        Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
    }

    @Test(timeout = 4000)
    public void test03334() throws Throwable {
        DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 4004);
        Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
        double[][] doubleArray0 = new double[6][0];
        double[] doubleArray1 = new double[9];
        doubleArray1[0] = (double) 2;
        doubleArray1[1] = (double) 2;
        doubleArray1[2] = (double) 2;
        doubleArray1[3] = (-2261.6673903);
        doubleArray1[4] = (double) 0;
        doubleArray1[5] = (double) 0;
        doubleArray1[6] = (-3700.0004452741387);
        doubleArray1[7] = (double) 2;
        doubleArray1[8] = (double) 2;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[8];
        doubleArray2[0] = (double) 4004;
        doubleArray2[1] = (double) 0;
        doubleArray2[2] = (double) 0;
        doubleArray2[3] = (-1307.7243822259504);
        doubleArray2[4] = (double) 4004;
        doubleArray2[5] = (double) 1;
        doubleArray2[6] = (-3700.0004452741387);
        doubleArray2[7] = (double) 0;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[0];
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[2];
        doubleArray4[0] = (-1.0);
        doubleArray4[1] = (-3700.0004452741387);
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[0];
        doubleArray0[4] = doubleArray5;
        double[] doubleArray6 = new double[5];
        doubleArray6[0] = (double) 4004;
        doubleArray6[1] = (double) 1;
        doubleArray6[2] = (double) 1;
        doubleArray6[3] = (-1.0);
        doubleArray6[4] = (double) 0;
        doubleArray0[5] = doubleArray6;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
    }

    @Test(timeout = 4000)
    public void test03435() throws Throwable {
        DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
        ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
        arrayList0.clear();
        DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
        DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
        arrayList0.add((DefaultIntervalXYDataset) null);
        defaultXYZDataset0.setGroup(datasetGroup0);
        DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, (List) arrayList0, false);
    }

    @Test(timeout = 4000)
    public void test03536() throws Throwable {
        System.setCurrentTimeMillis(277L);
        double[][] doubleArray0 = new double[5][9];
        double[] doubleArray1 = new double[4];
        doubleArray1[0] = (-153.30124);
        doubleArray1[1] = (double) 277L;
        doubleArray1[2] = 3270.9782;
        doubleArray1[3] = (double) 277L;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[2];
        doubleArray2[0] = 3270.9782;
        doubleArray2[1] = (-153.30124);
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[6];
        doubleArray3[0] = (double) 277L;
        doubleArray3[1] = 3270.9782;
        doubleArray3[2] = (-268.39);
        doubleArray3[3] = (double) 277L;
        doubleArray3[4] = (-153.30124);
        doubleArray3[5] = (-153.30124);
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[0];
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[4];
        doubleArray5[0] = (-268.39);
        doubleArray5[1] = (double) 277L;
        doubleArray5[2] = (-268.39);
        doubleArray5[3] = (-153.30124);
        doubleArray0[4] = doubleArray5;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2402);
    }

    @Test(timeout = 4000)
    public void test03637() throws Throwable {
        DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 4004);
        Number[][] numberArray0 = new Number[2][2];
        Number[] numberArray1 = new Number[3];
        numberArray1[0] = (Number) 0;
        numberArray1[1] = (Number) 2;
        numberArray1[2] = (Number) 0;
        numberArray0[0] = numberArray1;
        Number[] numberArray2 = new Number[6];
        Integer integer0 = JLayeredPane.PALETTE_LAYER;
        numberArray2[0] = (Number) integer0;
        numberArray2[1] = (Number) 2;
        numberArray2[2] = (Number) 1;
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = new BigInteger(0, mockRandom0);
        numberArray2[3] = (Number) bigInteger0;
        numberArray2[4] = (Number) 1;
        numberArray2[5] = (Number) 2;
        numberArray0[1] = numberArray2;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
        boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
    }

    @Test(timeout = 4000)
    public void test03738() throws Throwable {
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[23];
        doubleArray1[0] = (-995.7472);
        doubleArray1[1] = (-884.0);
        doubleArray1[2] = (-1615.96999);
        doubleArray1[3] = (-131.02254433443989);
        doubleArray1[4] = (-1528.7);
        doubleArray1[5] = 0.0;
        doubleArray1[6] = 2462.351;
        doubleArray1[7] = (-153.30124);
        doubleArray1[8] = 0.0;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        keyToGroupMap0.getGroup((-153.30124));
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
        AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
        AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
        defaultIntervalCategoryDataset0.hasListener((EventListener) null);
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-1));
    }

    @Test(timeout = 4000)
    public void test03839() throws Throwable {
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[23];
        doubleArray1[0] = (-995.7472);
        doubleArray1[1] = (-884.0);
        doubleArray1[2] = (-1615.96999);
        doubleArray1[3] = (-1615.96999);
        doubleArray1[4] = (-1528.7);
        doubleArray1[5] = 0.0;
        doubleArray1[7] = (-153.30124);
        doubleArray1[8] = 0.0;
        doubleArray0[0] = doubleArray1;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        keyToGroupMap0.getGroup((-153.30124));
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
        AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
        AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
        defaultIntervalCategoryDataset0.hasListener((EventListener) null);
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-1));
    }

    @Test(timeout = 4000)
    public void test03940() throws Throwable {
        XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
        DatasetUtilities.findMaximumRangeValue((XYDataset) xIntervalSeriesCollection0);
        Number[][] numberArray0 = new Number[1][9];
        Number[] numberArray1 = new Number[2];
        numberArray1[0] = null;
        numberArray1[1] = null;
        numberArray0[0] = numberArray1;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) null);
    }

    @Test(timeout = 4000)
    public void test04041() throws Throwable {
        CategoryDataset categoryDataset0 = null;
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
    }

    @Test(timeout = 4000)
    public void test04142() throws Throwable {
        double[] doubleArray0 = new double[23];
        doubleArray0[0] = (-995.7472);
        doubleArray0[1] = (-884.0);
        doubleArray0[2] = (-1615.96999);
        doubleArray0[3] = (-131.02254433443989);
        doubleArray0[4] = (-1528.7);
        doubleArray0[5] = 0.0;
        doubleArray0[6] = 2462.351;
        doubleArray0[7] = (-153.30124);
        doubleArray0[8] = 0.0;
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        keyToGroupMap0.getGroupIndex((-1528.7));
        keyToGroupMap0.getGroup((-153.30124));
        HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
        AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
        AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) (-884.0), (-131.02254433443989), 9);
    }

    @Test(timeout = 4000)
    public void test04243() throws Throwable {
        Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
        Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
        doReturn((Statement) null).when(connection0).createStatement();
        XYSeries xYSeries0 = new XYSeries("");
        XYSeries xYSeries1 = xYSeries0.createCopy((-2602), (-728));
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
        DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
        JDBCCategoryDataset jDBCCategoryDataset0 = null;
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "");
    }

    @Test(timeout = 4000)
    public void test04344() throws Throwable {
        double[][] doubleArray0 = new double[2][9];
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = (double) 0;
        doubleArray1[1] = (-441.8488248513);
        doubleArray1[2] = (double) 4004;
        doubleArray1[3] = (double) 0;
        doubleArray1[4] = 316.5778903727;
        doubleArray1[5] = (double) 0;
        doubleArray1[6] = (double) 0;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[6];
        doubleArray2[0] = 316.5778903727;
        doubleArray2[1] = 316.5778903727;
        doubleArray2[2] = (-441.8488248513);
        doubleArray2[3] = (-441.8488248513);
        doubleArray2[4] = 2715.457920937507;
        doubleArray2[5] = (double) 0;
        doubleArray0[1] = doubleArray2;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.hasListener((EventListener) null);
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
    }

    @Test(timeout = 4000)
    public void test04445() throws Throwable {
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[9];
        doubleArray1[0] = (-995.7472);
        doubleArray1[1] = (-884.0);
        doubleArray1[2] = (-1615.96999);
        doubleArray1[3] = (-135.43254029657);
        doubleArray1[4] = 1.0;
        doubleArray1[5] = 0.0;
        doubleArray1[6] = 1.0;
        doubleArray1[7] = (-153.30124);
        doubleArray1[8] = 0.0;
        doubleArray0[0] = doubleArray1;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        keyToGroupMap0.getGroup((-153.30124));
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
        AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
        AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
        defaultIntervalCategoryDataset0.hasListener((EventListener) null);
        int int0 = (-1);
        defaultIntervalCategoryDataset0.getValue((Comparable) 1.0, (Comparable) (-884.0));
    }

    @Test(timeout = 4000)
    public void test04546() throws Throwable {
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[9];
        doubleArray1[0] = (-995.7472);
        doubleArray1[1] = (-884.0);
        doubleArray1[2] = (-1615.96999);
        doubleArray1[3] = (-135.43254029657);
        doubleArray1[4] = (-1528.7);
        doubleArray1[5] = 0.0;
        doubleArray1[6] = 2462.351;
        doubleArray1[7] = (-153.30124);
        doubleArray1[8] = 0.0;
        doubleArray0[0] = doubleArray1;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        keyToGroupMap0.mapKeyToGroup((-884.0), (-995.7472));
        keyToGroupMap0.getGroup((-153.30124));
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
        AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
        AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
        defaultIntervalCategoryDataset0.hasListener((EventListener) null);
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) (-135.43254029657));
    }

    @Test(timeout = 4000)
    public void test04647() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Millisecond millisecond0 = new Millisecond(mockDate0);
        mockDate0.toInstant();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "5WHAMs+gM}", "");
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 0);
        Class<DefaultHighLowDataset> class0 = DefaultHighLowDataset.class;
        RegularTimePeriod.downsize(class0);
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
        DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
        DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
        Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 7);
        Hour hour0 = null;
        hour0 = new Hour(835, 999, 999, 0);
    }

    @Test(timeout = 4000)
    public void test04748() throws Throwable {
        DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
        Quarter quarter0 = new Quarter();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0, "Vb?!O1XUIL+p{", "Vb?!O1XUIL+p{");
        timePeriodValues0.add((TimePeriod) quarter0, (double) 4);
        TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
        Number number0 = DatasetUtilities.findMinimumDomainValue(timePeriodValuesCollection0);
    }

    @Test(timeout = 4000)
    public void test04849() throws Throwable {
        ArrayList<Double> arrayList0 = new ArrayList<Double>();
        Stack<Double> stack0 = new Stack<Double>();
        stack0.listIterator();
        arrayList0.addAll((Collection<? extends Double>) stack0);
        Object[][][] objectArray0 = new Object[0][8][5];
        DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
    }

    @Test(timeout = 4000)
    public void test04950() throws Throwable {
        ArrayList<Double> arrayList0 = new ArrayList<Double>();
        Stack<Double> stack0 = new Stack<Double>();
        stack0.listIterator();
        arrayList0.addAll((Collection<? extends Double>) stack0);
        Object[][][] objectArray0 = new Object[0][8][5];
        DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
        DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
        Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
        JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
        arrayList0.add((Double) null);
        XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
        jDBCPieDataset0.addChangeListener(xYDatasetTableModel0);
        arrayList0.add((Double) null);
        DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(jDBCPieDataset0);
        DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
        xYSeriesCollection0.getDomainBounds(true);
        DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
        int int0 = (-1);
        int int1 = 1733;
        PowerFunction2D powerFunction2D0 = new PowerFunction2D(1733, (-943.823));
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-3011.5958), (-3011.5958), (-1), "zR$1LM*-UH+gu/`");
    }

    @Test(timeout = 4000)
    public void test05051() throws Throwable {
        PowerFunction2D powerFunction2D0 = new PowerFunction2D((-70.34), Double.POSITIVE_INFINITY);
        int int0 = (-2146986242);
        Comparable<Month> comparable0 = null;
        DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1674.50537), (-70.34), (-2146986242), (Comparable) null);
    }

    @Test(timeout = 4000)
    public void test05152() throws Throwable {
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
        IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0, false);
        intervalXYDelegate0.setAutoWidth(false);
        xYSeriesCollection0.equals(intervalXYDelegate0);
        Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
        DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, vector0, true);
        DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) vector0, false);
        Number[][] numberArray0 = new Number[6][5];
        Number[] numberArray1 = new Number[4];
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.abs();
        numberArray1[0] = (Number) bigInteger0;
        String[] stringArray0 = new String[8];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "";
        stringArray0[3] = "Pqk Cmo_!";
        stringArray0[4] = "Sq?hUM=/";
        stringArray0[5] = "Pqk Cmo_!";
        stringArray0[6] = "Pqk Cmo_!";
        stringArray0[7] = "";
        DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
        DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
        DefaultWindDataset defaultWindDataset0 = null;
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, (Object[][][]) null);
    }

    @Test(timeout = 4000)
    public void test05253() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Millisecond millisecond0 = new Millisecond(mockDate0);
        mockDate0.toInstant();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "5WHAMs+gM}", "");
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
        Class<DefaultHighLowDataset> class0 = DefaultHighLowDataset.class;
        RegularTimePeriod.downsize(class0);
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
        DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
        timeSeries0.add((RegularTimePeriod) millisecond0, 2894.8601826361);
        DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
        millisecond0.toString();
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
        Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 7);
        Hour hour0 = null;
        hour0 = new Hour(835, 999, 999, 0);
    }

    @Test(timeout = 4000)
    public void test05354() throws Throwable {
        MockDate mockDate0 = new MockDate(17, 6, 2, (-989), 17);
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        ZoneOffset.from(zoneOffset0);
        Locale locale0 = Locale.JAPAN;
        timeZone0.getDisplayName(locale0);
        Week week0 = new Week(mockDate0, timeZone0);
        DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) null);
    }

    @Test(timeout = 4000)
    public void test05455() throws Throwable {
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[9];
        doubleArray1[0] = (-995.7472);
        doubleArray1[1] = (-884.0);
        doubleArray1[2] = (-1615.96999);
        doubleArray1[3] = (-135.43254029657);
        doubleArray1[4] = (-1528.7);
        doubleArray1[5] = 0.0;
        doubleArray1[6] = 2462.351;
        doubleArray1[7] = (-153.30124);
        doubleArray1[8] = 0.0;
        doubleArray0[0] = doubleArray1;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        keyToGroupMap0.mapKeyToGroup(0.0, (-135.43254029657));
        keyToGroupMap0.getGroup((-153.30124));
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
        AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
        AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
        defaultIntervalCategoryDataset0.hasListener((EventListener) null);
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-1));
    }

    @Test(timeout = 4000)
    public void test05556() throws Throwable {
        MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
        Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
    }

    @Test(timeout = 4000)
    public void test05657() throws Throwable {
        TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
        DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
        OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
        MockDate mockDate0 = new MockDate(13, 552, 552);
        OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-5969.0), 13, 552, (-5969.0), 552);
        oHLCDataItemArray0[0] = oHLCDataItem0;
        OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 552, (-2190.475756), 552, 552, 1726.9735728909);
        oHLCDataItemArray0[1] = oHLCDataItem1;
        OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-5969.0), 1726.9735728909, 552, 13, (-1696.0));
        oHLCDataItemArray0[2] = oHLCDataItem2;
        OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-5969.0), (-5969.0), 5.474603, 3508.722777123, 1726.9735728909);
        oHLCDataItemArray0[3] = oHLCDataItem3;
        OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1726.9735728909, (-1696.0), Double.POSITIVE_INFINITY, (-1696.0), Double.NEGATIVE_INFINITY);
        oHLCDataItemArray0[4] = oHLCDataItem4;
        OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 13, 1726.9735728909, Double.POSITIVE_INFINITY, 3508.722777123, (-212.44789625));
        oHLCDataItemArray0[5] = oHLCDataItem5;
        OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 1726.9735728909, 3508.722777123, (-1696.0), (-5969.0), Double.POSITIVE_INFINITY);
        oHLCDataItemArray0[6] = oHLCDataItem6;
        OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate0, 1726.9735728909, Double.NEGATIVE_INFINITY, 2600.7638, 1.0, 0.8);
        oHLCDataItemArray0[7] = oHLCDataItem7;
        DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
        Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
        Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, vector0, true);
    }

    @Test(timeout = 4000)
    public void test05758() throws Throwable {
        DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
        ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
        DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, (List) arrayList0, true);
        Number number0 = DatasetUtilities.findMinimumDomainValue(defaultXYZDataset0);
    }

    @Test(timeout = 4000)
    public void test05859() throws Throwable {
        double[][] doubleArray0 = new double[2][6];
        double[] doubleArray1 = new double[9];
        doubleArray1[0] = (-4863.12431);
        doubleArray1[1] = (-1528.8059311006582);
        doubleArray1[2] = (-1107.917639589);
        doubleArray1[3] = 1595.9882890167971;
        doubleArray1[4] = 2360.2068255;
        doubleArray1[5] = 481.443201124572;
        doubleArray1[6] = (-1.7976931348623157E308);
        doubleArray1[7] = 1.5;
        doubleArray1[8] = 575.9881082;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[0];
        doubleArray0[1] = doubleArray2;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
    }

    @Test(timeout = 4000)
    public void test05960() throws Throwable {
        Comparable<IntervalXYDelegate>[] comparableArray0 = (Comparable<IntervalXYDelegate>[]) Array.newInstance(Comparable.class, 1);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4L);
        RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
        comparableArray0[0] = (Comparable<IntervalXYDelegate>) regularTimePeriod0;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        regularTimePeriod0.peg(calendar0);
        regularTimePeriod0.toString();
        double[][] doubleArray0 = new double[0][5];
        DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) regularTimePeriod0);
        DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
        PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) comparableArray0[0], 0.0, 2000);
        DatasetUtilities.isEmptyOrNull(pieDataset1);
        CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
        categoryTableXYDataset0.getSeriesCount();
        SynthListUI synthListUI0 = new SynthListUI();
        DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory();
        JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatterFactory) defaultFormatterFactory0);
        synthListUI0.getAccessibleChild(jFormattedTextField0, 2000);
        categoryTableXYDataset0.hasListener(synthListUI0);
        defaultPieDataset0.isSelected(comparableArray0[0]);
    }

    @Test(timeout = 4000)
    public void test06061() throws Throwable {
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
        DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 2592.5339103;
        doubleArray1[1] = 0.0;
        doubleArray1[2] = (-361.21076);
        doubleArray1[3] = (-995.7472);
        doubleArray1[4] = (-823.58973472);
        doubleArray1[5] = (-551.1);
        doubleArray1[6] = 0.0;
        doubleArray0[0] = doubleArray1;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
    }

    @Test(timeout = 4000)
    public void test06162() throws Throwable {
        CategoryDataset categoryDataset0 = null;
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
    }

    @Test(timeout = 4000)
    public void test06263() throws Throwable {
        Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
        JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
        double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
    }

    @Test(timeout = 4000)
    public void test06364() throws Throwable {
        CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
        categoryTableXYDataset0.getDomainBounds(true);
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) null, (Range) null, true);
    }

    @Test(timeout = 4000)
    public void test06465() throws Throwable {
        double[][] doubleArray0 = new double[0][3];
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("@/)?omcFS,eQy`J^J;", "@/)?omcFS,eQy`J^J;", doubleArray0);
        DatasetUtilities.findMinimumRangeValue(categoryDataset0);
        Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 3);
        comparableArray0[0] = (Comparable<String>) "@/)?omcFS,eQy`J^J;";
        comparableArray0[1] = (Comparable<String>) "@/)?omcFS,eQy`J^J;";
        comparableArray0[2] = (Comparable<String>) "@/)?omcFS,eQy`J^J;";
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test06566() throws Throwable {
        TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
        SerialDate serialDate0 = SerialDate.createInstance(2);
        timeTableXYDataset0.indexOf(serialDate0);
        timeTableXYDataset0.getItemCount();
        timeTableXYDataset0.getSeriesCount();
        Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 0);
        range0.getLowerBound();
    }

    @Test(timeout = 4000)
    public void test06567() throws Throwable {
        TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
        SerialDate serialDate0 = SerialDate.createInstance(2);
        timeTableXYDataset0.indexOf(serialDate0);
        timeTableXYDataset0.getItemCount();
        timeTableXYDataset0.getSeriesCount();
        Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 0);
        range0.getUpperBound();
    }

    @Test(timeout = 4000)
    public void test06668() throws Throwable {
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[9];
        doubleArray1[0] = (-995.7472);
        doubleArray1[1] = (-884.0);
        doubleArray1[2] = (-1615.96999);
        doubleArray1[3] = (-135.43254029657);
        doubleArray1[4] = (-1528.7);
        doubleArray1[5] = 0.0;
        doubleArray1[6] = 2462.351;
        doubleArray1[7] = (-153.30124);
        doubleArray1[8] = 0.0;
        doubleArray0[0] = doubleArray1;
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        keyToGroupMap0.getGroup((-153.30124));
        HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
        AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
        AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
        boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
    }

    @Test(timeout = 4000)
    public void test06769() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = (-995.7472);
        doubleArray0[1] = (-884.0);
        doubleArray0[2] = (-1615.96999);
        doubleArray0[3] = (-135.43254029657);
        doubleArray0[4] = Double.POSITIVE_INFINITY;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = 2462.351;
        doubleArray0[7] = (-153.30124);
        doubleArray0[8] = 0.0;
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        keyToGroupMap0.getGroup((-153.30124));
        HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
        AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
        AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
        boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
    }

    @Test(timeout = 4000)
    public void test06870() throws Throwable {
        CategoryDataset categoryDataset0 = null;
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
    }

    @Test(timeout = 4000)
    public void test06971() throws Throwable {
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
    }

    @Test(timeout = 4000)
    public void test07072() throws Throwable {
        int int0 = 0;
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
        ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
        DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, (Range) null, true);
    }

    @Test(timeout = 4000)
    public void test07173() throws Throwable {
        Comparable<IntervalXYDelegate>[] comparableArray0 = (Comparable<IntervalXYDelegate>[]) Array.newInstance(Comparable.class, 1);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4L);
        RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
        comparableArray0[0] = (Comparable<IntervalXYDelegate>) regularTimePeriod0;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        regularTimePeriod0.peg(calendar0);
        regularTimePeriod0.toString();
        double[][] doubleArray0 = new double[1][5];
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test07274() throws Throwable {
        double[][] doubleArray0 = new double[8][2];
        double[] doubleArray1 = new double[5];
        doubleArray1[0] = 2841.068717;
        doubleArray1[1] = (-361.21076);
        doubleArray1[2] = Double.POSITIVE_INFINITY;
        doubleArray1[3] = 0.0;
        doubleArray1[4] = 3815.0;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[1];
        doubleArray2[0] = 2841.068717;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[4];
        doubleArray3[0] = 2841.068717;
        doubleArray3[1] = 2841.068717;
        doubleArray3[2] = 2841.068717;
        doubleArray3[3] = 2841.068717;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[1];
        doubleArray4[0] = (-361.21076);
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[3];
        doubleArray5[0] = 2841.068717;
        doubleArray5[1] = 3815.0;
        doubleArray5[2] = 0.0;
        doubleArray0[4] = doubleArray5;
        double[] doubleArray6 = new double[8];
        doubleArray6[0] = Double.POSITIVE_INFINITY;
        doubleArray6[1] = Double.POSITIVE_INFINITY;
        doubleArray6[2] = 3815.0;
        doubleArray6[3] = 2841.068717;
        doubleArray6[4] = 0.0;
        doubleArray6[5] = 2841.068717;
        doubleArray6[6] = 3815.0;
        doubleArray6[7] = 0.0;
        doubleArray0[5] = doubleArray6;
        double[] doubleArray7 = new double[9];
        doubleArray7[0] = 0.0;
        doubleArray7[1] = Double.POSITIVE_INFINITY;
        doubleArray7[2] = Double.POSITIVE_INFINITY;
        doubleArray7[3] = Double.POSITIVE_INFINITY;
        doubleArray7[4] = 0.0;
        doubleArray7[5] = 2841.068717;
        doubleArray7[6] = (-361.21076);
        doubleArray7[7] = 2841.068717;
        doubleArray7[8] = Double.POSITIVE_INFINITY;
        doubleArray0[6] = doubleArray7;
        double[] doubleArray8 = new double[3];
        doubleArray8[0] = (-361.21076);
        doubleArray8[1] = Double.POSITIVE_INFINITY;
        doubleArray8[2] = (-361.21076);
        doubleArray0[7] = doubleArray8;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("os+x4RH@Amv\u00079P&@", "os+x4RH@Amv\u00079P&@", doubleArray0);
        Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
    }

    @Test(timeout = 4000)
    public void test07376() throws Throwable {
        DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
        Quarter quarter0 = new Quarter();
        RegularTimePeriod regularTimePeriod0 = quarter0.next();
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) quarter0, (double) 1, 1);
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
        PowerFunction2D powerFunction2D0 = new PowerFunction2D(1, 4);
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 4, 4, 4, regularTimePeriod0);
    }

    @Test(timeout = 4000)
    public void test07477() throws Throwable {
        CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
        Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
        TableOrder tableOrder0 = TableOrder.BY_COLUMN;
        DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
        ArrayList<String> arrayList0 = new ArrayList<String>();
        boolean boolean0 = false;
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
        categoryTableXYDataset0.getEndY(0, 0);
    }

    @Test(timeout = 4000)
    public void test07578() throws Throwable {
        double[][] doubleArray0 = new double[1][9];
        double[] doubleArray1 = new double[6];
        doubleArray1[0] = Double.POSITIVE_INFINITY;
        doubleArray1[1] = 1121.4644702;
        doubleArray1[2] = (-2723.79);
        doubleArray1[3] = (-2616.0705072337855);
        doubleArray1[4] = 345.4102;
        doubleArray1[5] = (-568.3622578099);
        doubleArray0[0] = doubleArray1;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'data' argument.", (String) null, doubleArray0);
        Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
    }

    @Test(timeout = 4000)
    public void test07680() throws Throwable {
        Month month0 = Month.AUGUST;
        Month month1 = month0.firstMonthOfQuarter();
        double double0 = 0.0;
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) month1, 0.0);
    }

    @Test(timeout = 4000)
    public void test07781() throws Throwable {
        Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
        Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
        doReturn(statement0).when(connection0).createStatement();
        String string0 = "";
        DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
        JDBCCategoryDataset jDBCCategoryDataset0 = null;
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "");
    }

    @Test(timeout = 4000)
    public void test07882() throws Throwable {
        Number[][] numberArray0 = new Number[3][3];
        Number[] numberArray1 = new Number[1];
        SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Requires 'samples' > 1");
        DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
        numberArray1[0] = null;
        numberArray0[0] = numberArray1;
        Number[] numberArray2 = new Number[9];
        numberArray2[0] = null;
        numberArray2[1] = null;
        numberArray2[2] = null;
        numberArray2[3] = null;
        Integer integer0 = JLayeredPane.POPUP_LAYER;
        numberArray2[4] = (Number) integer0;
        numberArray2[5] = null;
        numberArray2[6] = null;
        numberArray2[7] = null;
        Short short0 = new Short((short) (-746));
        numberArray2[8] = (Number) short0;
        numberArray0[1] = numberArray2;
        Number[] numberArray3 = new Number[9];
        numberArray3[0] = (Number) short0;
        numberArray3[1] = null;
        numberArray3[2] = (Number) short0;
        numberArray3[3] = null;
        numberArray3[4] = (Number) short0;
        numberArray3[5] = (Number) integer0;
        numberArray3[6] = (Number) short0;
        numberArray3[7] = (Number) short0;
        numberArray3[8] = (Number) short0;
        numberArray0[2] = numberArray3;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'samples' > 1", "Requires 'samples' > 1", numberArray0);
    }

    @Test(timeout = 4000)
    public void test07983() throws Throwable {
        DatasetUtilities.findDomainBounds((XYDataset) null);
    }

    @Test(timeout = 4000)
    public void test08084() throws Throwable {
        XYDataset xYDataset0 = null;
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
    }

    @Test(timeout = 4000)
    public void test08185() throws Throwable {
        CategoryDataset categoryDataset0 = null;
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
    }

    @Test(timeout = 4000)
    public void test08286() throws Throwable {
        int int0 = 0;
        DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
        Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
        Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
        DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
        stack0.add(defaultBoxAndWhiskerCategoryDataset0);
        Range.scale(range0, 0.0);
        dynamicTimeSeriesCollection0.getStartY(0, 0);
    }

    @Test(timeout = 4000)
    public void test08387() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = (-441.89);
        doubleArray0[2] = (-1.0);
        PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
        // Undeclared exception!
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-441.89), 1650.443, 1380, 0.0);
    }

    @Test(timeout = 4000)
    public void test08488() throws Throwable {
        MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
        Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
        MockDate mockDate0 = new MockDate((-1L));
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
        RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
        OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
        OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1L), 0.0, (-1L), 3619.8488444387854, Double.NEGATIVE_INFINITY);
        oHLCDataItemArray0[0] = oHLCDataItem0;
        OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, 2.0, 0.0, 0.0, 3619.8488444387854);
        oHLCDataItemArray0[1] = oHLCDataItem1;
        MockDate mockDate1 = new MockDate(1253, 0, 0, 0, 1253, 0);
        OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate1, Double.NEGATIVE_INFINITY, 0.0, 0.5, 0, (-1L));
        oHLCDataItemArray0[2] = oHLCDataItem2;
        OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate1, 0.5, 0.5, (-2.147483648E9), 0, 2406.0);
        oHLCDataItemArray0[3] = oHLCDataItem3;
        OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-9.3233983437), 0.0, 1.0, 0.0, 1.0);
        oHLCDataItemArray0[4] = oHLCDataItem4;
        OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 0.0, 0.0, 0.0, 1.0, 2.0);
        oHLCDataItemArray0[5] = oHLCDataItem5;
        OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, 2.0, (-672.7012241948491), 0.0, (-1.7976931348623157E308), 302.1338568253993);
        oHLCDataItemArray0[6] = oHLCDataItem6;
        OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, (-672.7012241948491), 0.0, 0.0, 0.0);
        oHLCDataItemArray0[7] = oHLCDataItem7;
        DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(regularTimePeriod0, oHLCDataItemArray0);
        vector0.add(defaultOHLCDataset0);
        JComboBox<DefaultOHLCDataset> jComboBox0 = new JComboBox<DefaultOHLCDataset>(vector0);
        matrixSeriesCollection0.hasListener(jComboBox0);
        DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) null, false);
    }

    @Test(timeout = 4000)
    public void test08589() throws Throwable {
        TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
        LinkedList<DefaultStatisticalCategoryDataset> linkedList0 = new LinkedList<DefaultStatisticalCategoryDataset>();
        DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
        Range.shift((Range) null, 797.93035);
    }

    @Test(timeout = 4000)
    public void test08690() throws Throwable {
        CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-2045));
        categoryTableXYDataset0.add((-511.7527853), (-511.7527853), "nbeXU/c/agdpHU)BCN$");
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        defaultStatisticalCategoryDataset0.getColumnKeys();
        defaultStatisticalCategoryDataset0.clear();
        defaultStatisticalCategoryDataset0.getColumnIndex("nbeXU/c/agdpHU)BCN$");
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-3631));
    }

    @Test(timeout = 4000)
    public void test08791() throws Throwable {
        double[][] doubleArray0 = new double[7][3];
        double[] doubleArray1 = new double[6];
        doubleArray1[0] = 1.0;
        doubleArray1[1] = 388.1744289564125;
        doubleArray1[2] = 1540.256;
        doubleArray1[3] = (-237.0139726);
        doubleArray1[4] = 2137.847;
        doubleArray1[5] = 719.367676293484;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[0];
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[1];
        doubleArray3[0] = 388.1744289564125;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[7];
        doubleArray4[0] = (-237.0139726);
        doubleArray4[1] = 1540.256;
        doubleArray4[2] = 388.1744289564125;
        doubleArray4[3] = (-2857.0);
        doubleArray4[4] = 1540.256;
        doubleArray4[5] = (-237.0139726);
        doubleArray4[6] = (-237.0139726);
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[1];
        doubleArray5[0] = 590.564;
        doubleArray0[4] = doubleArray5;
        double[] doubleArray6 = new double[0];
        doubleArray0[5] = doubleArray6;
        double[] doubleArray7 = new double[7];
        doubleArray7[0] = (-2857.0);
        doubleArray7[1] = (-237.0139726);
        doubleArray7[2] = 388.1744289564125;
        doubleArray7[3] = 590.564;
        doubleArray7[4] = 1540.256;
        doubleArray7[5] = (-237.0139726);
        doubleArray7[6] = 719.367676293484;
        doubleArray0[6] = doubleArray7;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("xg>XhaK+", "xg>XhaK+", doubleArray0);
        TableOrder tableOrder0 = TableOrder.BY_ROW;
        CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-531));
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
    }

    @Test(timeout = 4000)
    public void test08892() throws Throwable {
        CategoryDataset categoryDataset0 = null;
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
    }

    @Test(timeout = 4000)
    public void test08993() throws Throwable {
        String string0 = "";
        Number[][] numberArray0 = new Number[0][6];
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
        DatasetUtilities.iterateRangeBounds(categoryDataset0);
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) null, true);
    }

    @Test(timeout = 4000)
    public void test09094() throws Throwable {
        Number[][] numberArray0 = new Number[0][2];
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("<srp", "0`F7+b{", numberArray0);
        boolean boolean0 = false;
        DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) null, false);
    }

    @Test(timeout = 4000)
    public void test09195() throws Throwable {
        DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
        Comparable<DefaultHighLowDataset> comparable0 = null;
        DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
        XYBarDataset xYBarDataset0 = new XYBarDataset(defaultXYDataset0, 1616.2926532);
        defaultKeyedValues2DDataset0.removeChangeListener(xYBarDataset0);
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) null);
    }

    @Test(timeout = 4000)
    public void test09296() throws Throwable {
        YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
        Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
        DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) vector0, false);
        XYDataset xYDataset0 = null;
        boolean boolean0 = false;
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
    }

    @Test(timeout = 4000)
    public void test09397() throws Throwable {
        CategoryDataset categoryDataset0 = null;
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
    }

    @Test(timeout = 4000)
    public void test09498() throws Throwable {
        XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
        DatasetUtilities.iterateXYRangeBounds(xYIntervalSeriesCollection0);
        DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
        Object[] objectArray0 = new Object[0];
        JList<Object> jList0 = new JList<Object>(objectArray0);
        List<Object> list0 = jList0.getSelectedValuesList();
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, false);
        CategoryDataset categoryDataset0 = null;
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) null);
    }

    @Test(timeout = 4000)
    public void test09599() throws Throwable {
        XYDataset xYDataset0 = null;
        DatasetUtilities.findDomainBounds((XYDataset) null);
    }

    @Test(timeout = 4000)
    public void test096100() throws Throwable {
        Number[][] numberArray0 = new Number[0][2];
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("a.#CazwtE`h>JM${", "a.#CazwtE`h>JM${", numberArray0);
        TableOrder tableOrder0 = TableOrder.BY_COLUMN;
        CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "a.#CazwtE`h>JM${", (double) 0, (-5));
        double[][] doubleArray0 = new double[5][6];
        double[] doubleArray1 = new double[8];
        doubleArray1[0] = (double) 0;
        doubleArray1[1] = (double) (-5);
        doubleArray1[2] = (double) (-5);
        doubleArray1[3] = (double) (-5);
        doubleArray1[4] = (double) (-5);
        doubleArray1[5] = (double) (-5);
        doubleArray1[6] = (double) 0;
        doubleArray1[7] = (double) 0;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[6];
        doubleArray2[0] = (double) (-5);
        doubleArray2[1] = (double) (-5);
        doubleArray2[2] = (double) 0;
        doubleArray2[3] = (double) (-5);
        doubleArray2[4] = (double) 0;
        doubleArray2[5] = (double) 0;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[2];
        doubleArray3[0] = (double) (-5);
        doubleArray3[1] = (double) (-5);
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[3];
        doubleArray4[0] = (double) 0;
        doubleArray4[1] = (double) (-5);
        doubleArray4[2] = (double) (-5);
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[5];
        doubleArray5[0] = (double) 0;
        doubleArray5[1] = (double) (-5);
        doubleArray5[2] = (double) 0;
        doubleArray5[3] = (double) 0;
        doubleArray5[4] = (-2120.0);
        doubleArray0[4] = doubleArray5;
        CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("ly%I?7y:$m$Z", "g;", doubleArray0);
        categoryDataset1.equals((Object) categoryDataset0);
    }

    @Test(timeout = 4000)
    public void test097101() throws Throwable {
        int int0 = 0;
        Day day0 = new Day();
        Hour hour0 = new Hour(0, day0);
        CategoryDataset categoryDataset0 = null;
        TableOrder tableOrder0 = TableOrder.BY_ROW;
        int int1 = 611;
        CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 611);
        CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) hour0, (KeyedValues) categoryToPieDataset0);
        DatasetUtilities.findMaximumStackedRangeValue(categoryDataset1);
        CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
        DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        boolean boolean0 = false;
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) arrayList0, false);
    }

    @Test(timeout = 4000)
    public void test098102() throws Throwable {
        XYDataset xYDataset0 = null;
        boolean boolean0 = false;
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
    }

    @Test(timeout = 4000)
    public void test099103() throws Throwable {
        XYDataset xYDataset0 = null;
        boolean boolean0 = false;
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
    }

    @Test(timeout = 4000)
    public void test100104() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 1, 1, 0, 1, 0, (-4), (-4), 0);
        Locale locale0 = Locale.FRENCH;
        Year year0 = new Year(304);
        Class<DefaultIntervalCategoryDataset> class0 = DefaultIntervalCategoryDataset.class;
        RegularTimePeriod.downsize(class0);
        double[][] doubleArray0 = new double[0][9];
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
        DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
        DatasetUtilities.findRangeBounds(categoryDataset0);
        DatasetUtilities.findStackedRangeBounds(categoryDataset0, 100.2929);
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
    }

    @Test(timeout = 4000)
    public void test101105() throws Throwable {
        DatasetUtilities.findRangeBounds((XYDataset) null);
    }

    @Test(timeout = 4000)
    public void test102106() throws Throwable {
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
        SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(timeSeriesCollection0);
        SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo((SeriesChangeType) null, 0, 0);
        seriesChangeEvent0.setSummary((SeriesChangeInfo) null);
        seriesChangeEvent0.setSummary(seriesChangeInfo0);
        seriesChangeEvent0.setSummary((SeriesChangeInfo) null);
        seriesChangeEvent0.setSummary((SeriesChangeInfo) null);
        timeSeriesCollection0.seriesChanged(seriesChangeEvent0);
        DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
        DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
        IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0);
        defaultPieDataset0.addChangeListener(intervalXYDelegate0);
        defaultPieDataset0.fireSelectionEvent();
        DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
        TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
        DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
        DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 0);
        double[][] doubleArray0 = new double[3][7];
        double[] doubleArray1 = new double[8];
        doubleArray1[0] = (double) 0;
        doubleArray1[1] = (double) 0;
        doubleArray1[2] = (double) 0;
        doubleArray1[3] = (double) 0;
        doubleArray1[4] = (double) 0;
        doubleArray1[5] = (double) 0;
        doubleArray1[6] = (double) 0;
        doubleArray1[7] = 0.0;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[6];
        doubleArray2[0] = (double) 0;
        doubleArray2[1] = (double) 0;
        doubleArray2[2] = (double) 0;
        doubleArray2[3] = (double) 0;
        doubleArray2[4] = (double) 0;
        doubleArray2[5] = 0.0;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[2];
        doubleArray3[0] = (double) 0;
        doubleArray3[1] = (double) 0;
        doubleArray0[2] = doubleArray3;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
    }

    @Test(timeout = 4000)
    public void test103107() throws Throwable {
        DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
        Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
    }

    @Test(timeout = 4000)
    public void test104108() throws Throwable {
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
    }

    @Test(timeout = 4000)
    public void test105109() throws Throwable {
        LinkedList<Long> linkedList0 = new LinkedList<Long>();
        ArrayList<Short> arrayList0 = new ArrayList<Short>();
        linkedList0.retainAll(arrayList0);
        boolean boolean0 = true;
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) linkedList0, true);
    }

    @Test(timeout = 4000)
    public void test106110() throws Throwable {
        LinkedList<Long> linkedList0 = new LinkedList<Long>();
        ArrayList<Short> arrayList0 = new ArrayList<Short>();
        linkedList0.retainAll(arrayList0);
        linkedList0.listIterator();
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) linkedList0, false);
    }

    @Test(timeout = 4000)
    public void test107111() throws Throwable {
        String string0 = "Null 'visibleSeriesKeys' argument.";
        String string1 = "'3&m";
        Number[][] numberArray0 = new Number[5][0];
        Number[] numberArray1 = new Number[6];
        Integer integer0 = JLayeredPane.POPUP_LAYER;
        numberArray1[0] = (Number) integer0;
        double[][] doubleArray0 = new double[5][6];
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = (-1266.170435924111);
        doubleArray1[1] = 0.0;
        doubleArray1[2] = 832.2;
        doubleArray1[3] = 0.0;
        doubleArray1[4] = 1960.74534886;
        doubleArray1[5] = 0.0;
        doubleArray1[6] = 0.0;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[2];
        doubleArray2[0] = 1960.74534886;
        doubleArray2[1] = 0.0;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[7];
        doubleArray3[0] = 832.2;
        doubleArray3[1] = 832.2;
        doubleArray3[2] = (-1266.170435924111);
        doubleArray3[3] = 832.2;
        doubleArray3[4] = 0.0;
        doubleArray3[5] = 1960.74534886;
        doubleArray3[6] = 0.0;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[4];
        doubleArray4[0] = (-1266.170435924111);
        doubleArray4[1] = (-1266.170435924111);
        doubleArray4[2] = 1041.0;
        doubleArray4[3] = Double.NEGATIVE_INFINITY;
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[7];
        doubleArray5[0] = 0.0;
        doubleArray5[1] = 1041.0;
        doubleArray5[2] = 1960.74534886;
        doubleArray5[3] = 832.2;
        doubleArray5[4] = 0.0;
        doubleArray5[5] = 0.0;
        doubleArray5[6] = Double.NEGATIVE_INFINITY;
        doubleArray0[4] = doubleArray5;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("'3&m", "B6F%", doubleArray0);
        Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
        numberArray1[1] = number0;
        BigInteger bigInteger0 = BigInteger.TEN;
        numberArray1[2] = (Number) bigInteger0;
        Byte byte0 = new Byte((byte) (-1));
        numberArray1[3] = (Number) byte0;
        Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
        numberArray1[4] = (Number) integer1;
        Float float0 = new Float(0.0F);
        numberArray1[5] = (Number) float0;
        numberArray0[0] = numberArray1;
        Number[] numberArray2 = new Number[3];
        numberArray2[0] = (Number) (-1266.170435924111);
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        defaultStatisticalCategoryDataset0.getMeanValue((Comparable) 1960.74534886, (Comparable) integer1);
    }

    @Test(timeout = 4000)
    public void test108112() throws Throwable {
        double[][] doubleArray0 = new double[2][3];
        double[] doubleArray1 = new double[3];
        doubleArray1[0] = 0.0;
        doubleArray1[1] = 2600.8186;
        doubleArray1[2] = 2715.457920937507;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[6];
        doubleArray2[0] = 0.0;
        doubleArray2[1] = 0.0;
        doubleArray2[2] = 2715.457920937507;
        doubleArray2[3] = (-2470.9437);
        doubleArray2[4] = 2715.457920937507;
        doubleArray2[5] = 2715.457920937507;
        doubleArray0[1] = doubleArray2;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
    }

    @Test(timeout = 4000)
    public void test108113() throws Throwable {
        double[][] doubleArray0 = new double[2][3];
        double[] doubleArray1 = new double[3];
        doubleArray1[0] = 0.0;
        doubleArray1[1] = 2600.8186;
        doubleArray1[2] = 2715.457920937507;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[6];
        doubleArray2[0] = 0.0;
        doubleArray2[1] = 0.0;
        doubleArray2[2] = 2715.457920937507;
        doubleArray2[3] = (-2470.9437);
        doubleArray2[4] = 2715.457920937507;
        doubleArray2[5] = 2715.457920937507;
        doubleArray0[1] = doubleArray2;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
        Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
    }

    @Test(timeout = 4000)
    public void test109115() throws Throwable {
        DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
        DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
        SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
        int int0 = 1248;
        Week week0 = new Week();
        int int1 = 0;
        int int2 = 0;
        week0.toString();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(53, 8, 1, 0, 1, 0);
        week0.getLastMillisecond((Calendar) mockGregorianCalendar0);
        defaultXYDataset0.removeSeries(week0);
        SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, 1248, 1248);
        SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultMultiValueCategoryDataset0, seriesChangeInfo0);
        defaultXYDataset0.seriesChanged(seriesChangeEvent0);
        DatasetUtilities.iterateXYRangeBounds(defaultXYDataset0);
        DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
        TimeZone timeZone0 = TimeZone.getDefault();
        TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 8);
        Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 8);
        comparableArray0[0] = (Comparable<Long>) week0;
        int int3 = 1896;
        int int4 = 212;
        int int5 = 100;
        int int6 = 3496;
        int int7 = 2166;
        Second second0 = null;
        second0 = new Second(8, 1896, 212, 100, 3496, 2166);
    }

    @Test(timeout = 4000)
    public void test110116() throws Throwable {
        DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
        DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
        int int0 = 52;
        int int1 = 1322;
        int int2 = 2;
        SerialDate serialDate0 = SerialDate.createInstance(1322);
        SerialDate.addDays(Integer.MAX_VALUE, serialDate0);
    }

    @Test(timeout = 4000)
    public void test111117() throws Throwable {
        CategoryDataset categoryDataset0 = null;
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 0.0);
    }

    @Test(timeout = 4000)
    public void test112118() throws Throwable {
        TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
        ArrayList<Object> arrayList0 = new ArrayList<Object>(1737);
        Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
    }

    @Test(timeout = 4000)
    public void test113119() throws Throwable {
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
        xYSeriesCollection0.getRangeLowerBound(false);
        Number number0 = DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
    }

    @Test(timeout = 4000)
    public void test114120() throws Throwable {
        CategoryDataset categoryDataset0 = null;
        double double0 = 0.0;
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 0.0);
    }

    @Test(timeout = 4000)
    public void test115121() throws Throwable {
        CategoryDataset categoryDataset0 = null;
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
    }

    @Test(timeout = 4000)
    public void test116122() throws Throwable {
        double[][] doubleArray0 = new double[2][5];
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 1272.0406384985379;
        doubleArray1[1] = 589.1;
        doubleArray1[2] = (-1941.7961312942532);
        doubleArray1[3] = (-577.835817178533);
        doubleArray1[4] = Double.NaN;
        doubleArray1[5] = 751.6;
        doubleArray1[6] = 0.0;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[1];
        doubleArray2[0] = 589.1;
        doubleArray0[1] = doubleArray2;
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test117123() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Millisecond millisecond0 = new Millisecond(mockDate0);
        mockDate0.toInstant();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "5WHAMs+gM}", "");
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
        Class<DefaultHighLowDataset> class0 = DefaultHighLowDataset.class;
        RegularTimePeriod.downsize(class0);
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
        DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
        DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
        Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 7);
        int int0 = 835;
        Hour hour0 = null;
        hour0 = new Hour(835, 999, 999, 0);
    }

    @Test(timeout = 4000)
    public void test118124() throws Throwable {
        XYDataset xYDataset0 = null;
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
    }

    @Test(timeout = 4000)
    public void test119125() throws Throwable {
        VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
        DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
        Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 5);
        Float float0 = new Float(3693.73F);
        comparableArray0[0] = (Comparable<Float>) float0;
        SerialDate serialDate0 = SerialDate.createInstance(2);
        SerialDate serialDate1 = SerialDate.addMonths(2, serialDate0);
        comparableArray0[1] = (Comparable<Float>) serialDate1;
        MockDate mockDate0 = new MockDate(3, 0, (-1120));
        OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 1.0, Double.POSITIVE_INFINITY, 3, 3);
        comparableArray0[2] = (Comparable<Float>) oHLCDataItem0;
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
        comparableArray0[3] = (Comparable<Float>) regularTimePeriod0;
        Second.parseSecond("+a`.vb]A");
        comparableArray0[4] = (Comparable<Float>) null;
        Comparable<DefaultTableXYDataset>[] comparableArray1 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 4);
        comparableArray1[0] = (Comparable<DefaultTableXYDataset>) null;
        comparableArray1[1] = (Comparable<DefaultTableXYDataset>) null;
        comparableArray1[2] = (Comparable<DefaultTableXYDataset>) serialDate0;
        comparableArray1[3] = (Comparable<DefaultTableXYDataset>) serialDate0;
        double[][] doubleArray0 = new double[6][0];
        double[] doubleArray1 = new double[6];
        doubleArray1[0] = (double) (-1120);
        doubleArray1[1] = (double) 5;
        doubleArray1[2] = (double) 1900;
        doubleArray1[3] = (double) 4;
        doubleArray1[4] = 0.0;
        doubleArray1[5] = (double) 9999;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[2];
        doubleArray2[0] = (double) 2958465;
        doubleArray2[1] = (double) 0;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[2];
        doubleArray3[0] = (double) 2;
        doubleArray3[1] = (double) 4;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[6];
        doubleArray4[0] = (double) 1;
        doubleArray4[1] = (double) 3;
        doubleArray4[2] = (double) 2;
        doubleArray4[3] = (double) 6;
        doubleArray4[4] = (double) 0;
        doubleArray4[5] = (double) (-1);
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[9];
        doubleArray5[0] = (double) 3;
        doubleArray5[1] = (double) 0;
        doubleArray5[2] = (double) 3693.73F;
        doubleArray5[3] = Double.POSITIVE_INFINITY;
        doubleArray5[4] = (double) 0;
        doubleArray5[5] = 0.0;
        doubleArray5[6] = Double.POSITIVE_INFINITY;
        doubleArray5[7] = 1.0;
        doubleArray5[8] = (double) 9999;
        doubleArray0[4] = doubleArray5;
        double[] doubleArray6 = new double[7];
        doubleArray6[0] = (double) 5;
        doubleArray6[1] = 1.0;
        doubleArray6[2] = (double) 3;
        doubleArray6[3] = 2456.99111;
        doubleArray6[4] = (double) 3;
        doubleArray6[5] = (-3603.7938);
        doubleArray6[6] = 0.0;
        doubleArray0[5] = doubleArray6;
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test120126() throws Throwable {
        DatasetUtilities.createCategoryDataset("org.jfree.data.resources.DataPackageResources", (String) null, (Number[][]) null);
    }

    @Test(timeout = 4000)
    public void test121127() throws Throwable {
        DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
        Minute.parseMinute("e\"^JD!w d3S");
        PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) null, (-248.48335696));
        DatasetUtilities.isEmptyOrNull(pieDataset0);
        TimePeriodValues timePeriodValues0 = null;
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
    }

    @Test(timeout = 4000)
    public void test122128() throws Throwable {
        DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
        Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, true);
    }

    @Test(timeout = 4000)
    public void test123129() throws Throwable {
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
    }

    @Test(timeout = 4000)
    public void test124130() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 418.62818443988;
        doubleArray0[1] = 435.69181581094;
        doubleArray0[2] = 1443.94108897;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 2639.7620011948;
        doubleArray0[5] = 0.0;
        PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
        polynomialFunction2D0.getCoefficients();
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1.5, 0.0, 2815, 0.0);
    }

    @Test(timeout = 4000)
    public void test125131() throws Throwable {
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[9];
        doubleArray1[0] = (-995.7472);
        doubleArray1[1] = (-884.0);
        doubleArray1[2] = (-1615.96999);
        doubleArray1[3] = (-135.43254029657);
        doubleArray1[4] = (-1528.7);
        doubleArray1[5] = 0.0;
        doubleArray1[6] = 2462.351;
        doubleArray1[7] = (-153.30124);
        doubleArray1[8] = 0.0;
        doubleArray0[0] = doubleArray1;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        keyToGroupMap0.getGroup((-153.30124));
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
        AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
        AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
        defaultIntervalCategoryDataset0.hasListener((EventListener) null);
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-1));
    }

    @Test(timeout = 4000)
    public void test126132() throws Throwable {
        double[][] doubleArray0 = new double[6][7];
        double[] doubleArray1 = new double[3];
        doubleArray1[0] = Double.POSITIVE_INFINITY;
        doubleArray1[1] = (-1564.4);
        doubleArray1[2] = 1710.563;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[0];
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[9];
        doubleArray3[0] = (-1207.643);
        doubleArray3[1] = 1650.443;
        doubleArray3[2] = Double.POSITIVE_INFINITY;
        doubleArray3[3] = Double.POSITIVE_INFINITY;
        doubleArray3[4] = Double.POSITIVE_INFINITY;
        doubleArray3[5] = Double.POSITIVE_INFINITY;
        doubleArray3[6] = Double.POSITIVE_INFINITY;
        doubleArray3[7] = Double.POSITIVE_INFINITY;
        doubleArray3[8] = 1710.563;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[0];
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[9];
        doubleArray5[0] = Double.POSITIVE_INFINITY;
        doubleArray5[1] = (-1207.643);
        doubleArray5[2] = (-19.0);
        doubleArray5[3] = (-1583.0);
        doubleArray5[4] = 1710.563;
        doubleArray5[5] = (-1207.643);
        doubleArray5[6] = Double.POSITIVE_INFINITY;
        doubleArray5[7] = 1710.563;
        doubleArray5[8] = 1710.563;
        doubleArray0[4] = doubleArray5;
        double[] doubleArray6 = new double[2];
        doubleArray6[0] = Double.POSITIVE_INFINITY;
        doubleArray6[1] = (-1583.0);
        doubleArray0[5] = doubleArray6;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "Requires 'start' < 'end'.", doubleArray0);
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) (-1207.643));
    }

    @Test(timeout = 4000)
    public void test127133() throws Throwable {
        XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
        xYIntervalSeriesCollection0.clone();
        xYIntervalSeriesCollection0.getDomainOrder();
        DatasetUtilities.iterateRangeBounds((XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.getY(0, 0);
    }

    @Test(timeout = 4000)
    public void test128134() throws Throwable {
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (-622));
    }

    @Test(timeout = 4000)
    public void test129135() throws Throwable {
        XYDataset xYDataset0 = null;
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
    }

    @Test(timeout = 4000)
    public void test130136() throws Throwable {
        TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
        DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
        taskSeriesCollection0.getSeriesCount();
        DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
        XYDataset xYDataset0 = null;
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
    }

    @Test(timeout = 4000)
    public void test131137() throws Throwable {
        int int0 = 0;
        int int1 = 1450;
        Day day0 = new Day();
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 1450, regularTimePeriod0);
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
    }

    @Test(timeout = 4000)
    public void test132138() throws Throwable {
        String string0 = "";
        DatasetUtilities.createCategoryDataset("", "&2^Ap%N_Y1\" Km`", (double[][]) null);
    }

    @Test(timeout = 4000)
    public void test133139() throws Throwable {
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
        DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
        int int0 = (-176);
        timeSeriesCollection0.getSeriesKey((-176));
    }

    @Test(timeout = 4000)
    public void test134140() throws Throwable {
        double[][] doubleArray0 = new double[8][2];
        double[] doubleArray1 = new double[5];
        doubleArray1[0] = 2841.068717;
        doubleArray1[1] = (-361.21076);
        doubleArray1[2] = Double.POSITIVE_INFINITY;
        doubleArray1[3] = 0.0;
        doubleArray1[4] = 3815.0;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[1];
        doubleArray2[0] = 2841.068717;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[4];
        doubleArray3[0] = 2841.068717;
        doubleArray3[1] = 2841.068717;
        doubleArray3[2] = 2841.068717;
        doubleArray3[3] = 2841.068717;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[1];
        doubleArray4[0] = (-361.21076);
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[3];
        doubleArray5[0] = 2841.068717;
        doubleArray5[1] = 3815.0;
        doubleArray5[2] = 0.0;
        doubleArray0[4] = doubleArray5;
        double[] doubleArray6 = new double[8];
        doubleArray6[0] = Double.POSITIVE_INFINITY;
        doubleArray6[1] = Double.POSITIVE_INFINITY;
        doubleArray6[2] = 3815.0;
        doubleArray6[3] = 2841.068717;
        doubleArray6[4] = 0.0;
        doubleArray6[5] = 2841.068717;
        doubleArray6[6] = 3815.0;
        doubleArray6[7] = 0.0;
        doubleArray0[5] = doubleArray6;
        double[] doubleArray7 = new double[9];
        doubleArray7[0] = (-361.21076);
        doubleArray7[1] = Double.POSITIVE_INFINITY;
        doubleArray7[2] = Double.POSITIVE_INFINITY;
        doubleArray7[3] = Double.POSITIVE_INFINITY;
        doubleArray7[4] = 0.0;
        doubleArray7[5] = 2841.068717;
        doubleArray7[6] = (-361.21076);
        doubleArray7[7] = 2841.068717;
        doubleArray7[8] = Double.POSITIVE_INFINITY;
        doubleArray0[6] = doubleArray7;
        double[] doubleArray8 = new double[3];
        doubleArray8[0] = (-361.21076);
        doubleArray8[1] = Double.POSITIVE_INFINITY;
        doubleArray8[2] = (-361.21076);
        doubleArray0[7] = doubleArray8;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("os+x4RH@Amv\u00079P&@", "os+x4RH@Amv\u00079P&@", doubleArray0);
        Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
    }

    @Test(timeout = 4000)
    public void test135142() throws Throwable {
        TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
        ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
        ArrayList<DefaultMultiValueCategoryDataset> arrayList1 = new ArrayList<DefaultMultiValueCategoryDataset>(arrayList0);
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
        timeSeriesCollection0.getDomainBounds(true);
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList1, (Range) null, true);
    }

    @Test(timeout = 4000)
    public void test136143() throws Throwable {
        LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
        defaultTableXYDataset0.getDomainBounds(true);
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) linkedList0, (Range) null, false);
    }

    @Test(timeout = 4000)
    public void test137144() throws Throwable {
        DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-3288));
        Vector<Float> vector0 = new Vector<Float>();
        CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
        Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
        boolean boolean0 = true;
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) vector0, range0, true);
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 432.490343);
        TimeTableXYDataset timeTableXYDataset0 = null;
        timeTableXYDataset0 = new TimeTableXYDataset((TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test138145() throws Throwable {
        Number[][] numberArray0 = new Number[1][6];
        Number[] numberArray1 = new Number[0];
        numberArray0[0] = numberArray1;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TimePeriodAnchor.MIDDLE", (String) null, numberArray0);
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2458);
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset0);
    }

    @Test(timeout = 4000)
    public void test139146() throws Throwable {
        double[][] doubleArray0 = new double[6][4];
        double[] doubleArray1 = new double[5];
        doubleArray1[0] = (-1057.49404);
        doubleArray1[1] = 1264.99;
        doubleArray1[2] = 2587.438;
        doubleArray1[3] = 1364.1678;
        doubleArray1[4] = 0.8;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[3];
        doubleArray2[0] = 1264.99;
        doubleArray2[1] = 0.8;
        doubleArray2[2] = 0.8;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[8];
        doubleArray3[0] = 2587.438;
        doubleArray3[1] = 1364.1678;
        doubleArray3[2] = (-1057.49404);
        doubleArray3[3] = 1264.99;
        doubleArray3[4] = 0.8;
        doubleArray3[5] = 2587.438;
        doubleArray3[6] = (-1057.49404);
        doubleArray3[7] = 1364.1678;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[1];
        doubleArray4[0] = 0.8;
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[0];
        doubleArray0[4] = doubleArray5;
        double[] doubleArray6 = new double[9];
        doubleArray6[0] = (-1057.49404);
        doubleArray6[1] = 1264.99;
        doubleArray6[2] = 1364.1678;
        doubleArray6[3] = 1364.1678;
        doubleArray6[4] = 0.8;
        doubleArray6[5] = 1264.99;
        doubleArray6[6] = 0.8;
        doubleArray6[7] = 1364.1678;
        doubleArray6[8] = 1264.99;
        doubleArray0[5] = doubleArray6;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(") is not recognised.", ") is not recognised.", doubleArray0);
        Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
        range0.getCentralValue();
    }

    @Test(timeout = 4000)
    public void test139147() throws Throwable {
        double[][] doubleArray0 = new double[6][4];
        double[] doubleArray1 = new double[5];
        doubleArray1[0] = (-1057.49404);
        doubleArray1[1] = 1264.99;
        doubleArray1[2] = 2587.438;
        doubleArray1[3] = 1364.1678;
        doubleArray1[4] = 0.8;
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[3];
        doubleArray2[0] = 1264.99;
        doubleArray2[1] = 0.8;
        doubleArray2[2] = 0.8;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[8];
        doubleArray3[0] = 2587.438;
        doubleArray3[1] = 1364.1678;
        doubleArray3[2] = (-1057.49404);
        doubleArray3[3] = 1264.99;
        doubleArray3[4] = 0.8;
        doubleArray3[5] = 2587.438;
        doubleArray3[6] = (-1057.49404);
        doubleArray3[7] = 1364.1678;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[1];
        doubleArray4[0] = 0.8;
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[0];
        doubleArray0[4] = doubleArray5;
        double[] doubleArray6 = new double[9];
        doubleArray6[0] = (-1057.49404);
        doubleArray6[1] = 1264.99;
        doubleArray6[2] = 1364.1678;
        doubleArray6[3] = 1364.1678;
        doubleArray6[4] = 0.8;
        doubleArray6[5] = 1264.99;
        doubleArray6[6] = 0.8;
        doubleArray6[7] = 1364.1678;
        doubleArray6[8] = 1264.99;
        doubleArray0[5] = doubleArray6;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(") is not recognised.", ") is not recognised.", doubleArray0);
        Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
    }

    @Test(timeout = 4000)
    public void test140148() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 3332.926112469845;
        doubleArray0[1] = Double.NaN;
        doubleArray0[2] = (-873.614);
        doubleArray0[3] = Double.POSITIVE_INFINITY;
        doubleArray0[4] = Double.NaN;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = (-1159.0);
        doubleArray0[7] = 0.0;
        doubleArray0[8] = 1059.11;
        PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
        // Undeclared exception!
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NaN, Double.NaN, 3528, (-873.614));
    }

    @Test(timeout = 4000)
    public void test141149() throws Throwable {
        PowerFunction2D powerFunction2D0 = new PowerFunction2D(1713.2591525, 1713.2591525);
        int int0 = 1900;
        MockDate mockDate0 = new MockDate();
        Day day0 = new Day(mockDate0);
        day0.getSerialIndex();
        // Undeclared exception!
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 0.0, 1713.2591525, 1900, day0);
    }

    @Test(timeout = 4000)
    public void test142150() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 1145.837375;
        doubleArray0[2] = (-1085.335003009539);
        doubleArray0[3] = 882.701;
        PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 0.0, (-3960), 1145.837375);
    }

    @Test(timeout = 4000)
    public void test143151() throws Throwable {
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
        IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0, false);
        xYSeriesCollection0.equals(intervalXYDelegate0);
        Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
        DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, vector0, true);
        DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) vector0, false);
        String string0 = "Pqk Cmo_!";
        String string1 = "";
        Number[][] numberArray0 = new Number[6][5];
        Number[] numberArray1 = new Number[4];
        BigInteger bigInteger0 = BigInteger.ZERO;
        numberArray1[0] = (Number) bigInteger0;
        String[] stringArray0 = new String[8];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "";
        stringArray0[3] = "Pqk Cmo_!";
        stringArray0[4] = "Sq?hUM=/";
        stringArray0[5] = "Pqk Cmo_!";
        stringArray0[6] = "Pqk Cmo_!";
        stringArray0[7] = "";
        DefaultWindDataset defaultWindDataset0 = null;
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, (Object[][][]) null);
    }

    @Test(timeout = 4000)
    public void test144152() throws Throwable {
        XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
        Vector<Long> vector0 = new Vector<Long>();
        DatasetUtilities.iterateToFindDomainBounds(xYIntervalSeriesCollection0, vector0, false);
        String string0 = "Null 'visibleSeriesKeys' argument.";
        String string1 = "";
        Number[][] numberArray0 = new Number[3][7];
        Number[] numberArray1 = new Number[8];
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        numberArray1[0] = (Number) integer0;
        int int0 = 2;
        Integer integer1 = new Integer(2);
        numberArray1[1] = (Number) integer1;
        Integer integer2 = JLayeredPane.POPUP_LAYER;
        numberArray1[2] = (Number) integer2;
        Integer.getInteger("");
        numberArray1[3] = (Number) null;
        Integer integer3 = JLayeredPane.POPUP_LAYER;
        numberArray1[4] = (Number) integer3;
        Integer integer4 = JLayeredPane.DRAG_LAYER;
        numberArray1[5] = (Number) integer4;
        DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
        defaultXYDataset0.getY(2, 2);
    }

    @Test(timeout = 4000)
    public void test145153() throws Throwable {
        CategoryDataset categoryDataset0 = null;
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
    }

    @Test(timeout = 4000)
    public void test146154() throws Throwable {
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 2);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
    }

    @Test(timeout = 4000)
    public void test146155() throws Throwable {
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 2);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
        MockDate mockDate0 = new MockDate((-183L));
        Minute minute0 = new Minute(mockDate0);
        Second second0 = new Second(2, minute0);
        RegularTimePeriod regularTimePeriod0 = second0.previous();
        PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) regularTimePeriod0);
        pieDataset1.equals((Object) pieDataset0);
    }

    @Test(timeout = 4000)
    public void test147156() throws Throwable {
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
    }

    @Test(timeout = 4000)
    public void test148157() throws Throwable {
        TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
        SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1022, 1022);
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("Null 'rowData' argument.");
        Quarter quarter0 = new Quarter(mockDate0, timeZone0);
        slidingGanttCategoryDataset0.getColumnIndex(quarter0);
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
        ArrayList<Object> arrayList0 = new ArrayList<Object>();
        DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) arrayList0, true);
        int int0 = (-1);
        SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 1022, (-1));
        DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
    }

    @Test(timeout = 4000)
    public void test149158() throws Throwable {
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
        LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
        linkedList0.remove((Object) defaultTableXYDataset0);
        defaultTableXYDataset0.getDomainOrder();
        DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, false);
        DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 3992.295716469);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(xYDataItem0);
        keyToGroupMap0.getGroup(xYDataItem0);
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
        Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
    }

    @Test(timeout = 4000)
    public void test150159() throws Throwable {
        MockDate mockDate0 = new MockDate(9223372036854775807L);
        Year year0 = new Year(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(year0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2374, 2455, 2374, (-765), 2321, 9999);
        year0.getLastMillisecond((Calendar) mockGregorianCalendar0);
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
        boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
    }

    @Test(timeout = 4000)
    public void test151160() throws Throwable {
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
        Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
    }

    @Test(timeout = 4000)
    public void test152161() throws Throwable {
        Comparable<IntervalXYDelegate>[] comparableArray0 = (Comparable<IntervalXYDelegate>[]) Array.newInstance(Comparable.class, 1);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4L);
        RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
        comparableArray0[0] = (Comparable<IntervalXYDelegate>) regularTimePeriod0;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        regularTimePeriod0.peg(calendar0);
        regularTimePeriod0.toString();
        double[][] doubleArray0 = new double[0][5];
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test153162() throws Throwable {
        Number[][] numberArray0 = new Number[7][1];
        Number[] numberArray1 = new Number[2];
        Integer integer0 = new Integer(2);
        numberArray1[0] = (Number) integer0;
        BigInteger bigInteger0 = BigInteger.ONE;
        numberArray1[1] = (Number) bigInteger0;
        numberArray0[0] = numberArray1;
        Number[] numberArray2 = new Number[0];
        numberArray0[1] = numberArray2;
        Number[] numberArray3 = new Number[2];
        numberArray3[0] = (Number) integer0;
        numberArray3[1] = (Number) bigInteger0;
        numberArray0[2] = numberArray3;
        Number[] numberArray4 = new Number[1];
        numberArray4[0] = (Number) integer0;
        numberArray0[3] = numberArray4;
        Number[] numberArray5 = new Number[1];
        numberArray5[0] = (Number) integer0;
        numberArray0[4] = numberArray5;
        Number[] numberArray6 = new Number[4];
        byte[] byteArray0 = new byte[5];
        byteArray0[0] = (byte) 0;
        byteArray0[1] = (byte) 59;
        byteArray0[2] = (byte) 0;
        byteArray0[3] = (byte) 87;
        byteArray0[4] = (byte) (-19);
        BigInteger bigInteger1 = new BigInteger(byteArray0);
        numberArray6[0] = (Number) bigInteger1;
        numberArray6[1] = (Number) bigInteger0;
        numberArray6[2] = (Number) integer0;
        numberArray6[3] = (Number) bigInteger0;
        numberArray0[5] = numberArray6;
        Number[] numberArray7 = new Number[2];
        numberArray7[0] = (Number) (byte) (-19);
        numberArray7[1] = (Number) bigInteger0;
        numberArray0[6] = numberArray7;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
    }

    @Test(timeout = 4000)
    public void test153163() throws Throwable {
        Number[][] numberArray0 = new Number[7][1];
        Number[] numberArray1 = new Number[2];
        Integer integer0 = new Integer(2);
        numberArray1[0] = (Number) integer0;
        BigInteger bigInteger0 = BigInteger.ONE;
        numberArray1[1] = (Number) bigInteger0;
        numberArray0[0] = numberArray1;
        Number[] numberArray2 = new Number[0];
        numberArray0[1] = numberArray2;
        Number[] numberArray3 = new Number[2];
        numberArray3[0] = (Number) integer0;
        numberArray3[1] = (Number) bigInteger0;
        numberArray0[2] = numberArray3;
        Number[] numberArray4 = new Number[1];
        numberArray4[0] = (Number) integer0;
        numberArray0[3] = numberArray4;
        Number[] numberArray5 = new Number[1];
        numberArray5[0] = (Number) integer0;
        numberArray0[4] = numberArray5;
        Number[] numberArray6 = new Number[4];
        byte[] byteArray0 = new byte[5];
        byteArray0[0] = (byte) 0;
        byteArray0[1] = (byte) 59;
        byteArray0[2] = (byte) 0;
        byteArray0[3] = (byte) 87;
        byteArray0[4] = (byte) (-19);
        BigInteger bigInteger1 = new BigInteger(byteArray0);
        numberArray6[0] = (Number) bigInteger1;
        numberArray6[1] = (Number) bigInteger0;
        numberArray6[2] = (Number) integer0;
        numberArray6[3] = (Number) bigInteger0;
        numberArray0[5] = numberArray6;
        Number[] numberArray7 = new Number[2];
        numberArray7[0] = (Number) (byte) (-19);
        numberArray7[1] = (Number) bigInteger0;
        numberArray0[6] = numberArray7;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
        range0.getUpperBound();
    }

    @Test(timeout = 4000)
    public void test154164() throws Throwable {
        DatasetUtilities.createCategoryDataset("lj", "bmSNVlg4vV0xm7+b", (double[][]) null);
    }

    @Test(timeout = 4000)
    public void test155165() throws Throwable {
        TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
        SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-379), (-379));
        SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 479, (-620));
        Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
    }

    @Test(timeout = 4000)
    public void test156166() throws Throwable {
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
        Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2190.475756));
    }

    @Test(timeout = 4000)
    public void test156167() throws Throwable {
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
        Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2190.475756));
        range0.getCentralValue();
    }

    @Test(timeout = 4000)
    public void test156168() throws Throwable {
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
        Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2190.475756));
        DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
        boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
    }

    @Test(timeout = 4000)
    public void test157169() throws Throwable {
        TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
        timeTableXYDataset0.getSeriesCount();
        Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 1.7976931348623157E308);
        range0.getLowerBound();
    }

    @Test(timeout = 4000)
    public void test157170() throws Throwable {
        TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
        timeTableXYDataset0.getSeriesCount();
        Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 1.7976931348623157E308);
    }

    @Test(timeout = 4000)
    public void test158171() throws Throwable {
        TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
        Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
    }

    @Test(timeout = 4000)
    public void test159172() throws Throwable {
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, (-1863));
    }

    @Test(timeout = 4000)
    public void test160173() throws Throwable {
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
    }

    @Test(timeout = 4000)
    public void test161174() throws Throwable {
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
        Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
    }

    @Test(timeout = 4000)
    public void test162175() throws Throwable {
        DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
        DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
        DatasetUtilities.findMaximumDomainValue(defaultIntervalXYDataset0);
        int int0 = 0;
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
        DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultIntervalXYDataset0, false);
        DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, false);
        Comparable<DynamicTimeSeriesCollection>[] comparableArray0 = (Comparable<DynamicTimeSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[8];
        doubleArray1[0] = (double) 0;
        doubleArray1[1] = (double) 0;
        doubleArray1[2] = (double) 0;
        doubleArray1[3] = (double) 0;
        doubleArray1[4] = (double) 0;
        doubleArray1[5] = (double) 0;
        doubleArray1[6] = (double) 0;
        doubleArray1[7] = 0.0;
        doubleArray0[0] = doubleArray1;
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test163176() throws Throwable {
        CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
        Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
        range0.getLowerBound();
    }

    @Test(timeout = 4000)
    public void test163177() throws Throwable {
        CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
        Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
        range0.getUpperBound();
    }

    @Test(timeout = 4000)
    public void test164178() throws Throwable {
        Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
        JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
        DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0);
        DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
        int int0 = (-3224);
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (-3224));
        jDBCCategoryDataset0.clone();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Day day0 = null;
        day0 = new Day((Date) null, timeZone0);
    }

    @Test(timeout = 4000)
    public void test165179() throws Throwable {
        double[][] doubleArray0 = new double[0][6];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-9999));
        DatasetUtilities.isEmptyOrNull(pieDataset0);
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
        DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
        DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
        DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-9999));
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 0);
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        MockDate mockDate0 = new MockDate(0, 0, (-9999), 1637, 0);
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Hour hour0 = null;
        hour0 = new Hour(mockDate0, timeZone0);
    }

    @Test(timeout = 4000)
    public void test166180() throws Throwable {
        DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
        Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
        Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
    }

    @Test(timeout = 4000)
    public void test166181() throws Throwable {
        DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
        Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
        Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
        DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
        DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0);
        Week week0 = new Week((-1), (-1));
        OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
        MockDate mockDate0 = new MockDate(1, (-2306), 0);
        OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 53, 263.3488528894, (-3782.3734216), 28.49601688905808, (-2306));
        oHLCDataItemArray0[0] = oHLCDataItem0;
        OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.NaN, 53, 0.0, 0, (-2306));
        oHLCDataItemArray0[1] = oHLCDataItem1;
        OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 28.49601688905808, 0.0, 263.3488528894, 0.0, 20.693388221);
        oHLCDataItemArray0[2] = oHLCDataItem2;
        OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 20.693388221, 1, 1, 1, (-2306));
        oHLCDataItemArray0[3] = oHLCDataItem3;
        DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(week0, oHLCDataItemArray0);
        Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
        range0.getLength();
    }

    @Test(timeout = 4000)
    public void test167182() throws Throwable {
        Comparable<DynamicTimeSeriesCollection>[] comparableArray0 = (Comparable<DynamicTimeSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
    }

    @Test(timeout = 4000)
    public void test168183() throws Throwable {
        DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
        Vector<Short> vector0 = new Vector<Short>();
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
        Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
    }

    @Test(timeout = 4000)
    public void test169184() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (-1.0));
        SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(timeSeriesDataItem0);
        DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
        JDBCCategoryDataset jDBCCategoryDataset0 = null;
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null, "J*u*S:KyZ7~h,");
    }

    @Test(timeout = 4000)
    public void test170185() throws Throwable {
        double[][] doubleArray0 = new double[1][7];
        double[] doubleArray1 = new double[8];
        doubleArray1[1] = (-153.30124);
        doubleArray1[2] = (-153.30124);
        doubleArray1[3] = 2992.2094992533757;
        doubleArray1[4] = (-320.9347322552927);
        doubleArray1[5] = Double.NaN;
        doubleArray1[6] = 623.349;
        doubleArray1[7] = 842.78474997;
        doubleArray0[0] = doubleArray1;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(":/pX-Jfo^1pNyn", "", doubleArray0);
        int int0 = ((DefaultCategoryDataset) categoryDataset0).getColumnCount();
    }

    @Test(timeout = 4000)
    public void test170186() throws Throwable {
        double[][] doubleArray0 = new double[1][7];
        double[] doubleArray1 = new double[8];
        doubleArray1[1] = (-153.30124);
        doubleArray1[2] = (-153.30124);
        doubleArray1[3] = 2992.2094992533757;
        doubleArray1[4] = (-320.9347322552927);
        doubleArray1[5] = Double.NaN;
        doubleArray1[6] = 623.349;
        doubleArray1[7] = 842.78474997;
        doubleArray0[0] = doubleArray1;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(":/pX-Jfo^1pNyn", "", doubleArray0);
        int int0 = ((DefaultCategoryDataset) categoryDataset0).getColumnCount();
        DatasetUtilities.iterateRangeBounds(categoryDataset0);
        Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
    }

    @Test(timeout = 4000)
    public void test171188() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (-1.0));
        SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(timeSeriesDataItem0);
        JDBCCategoryDataset jDBCCategoryDataset0 = null;
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null, "J*u*S:KyZ7~h,");
    }

    @Test(timeout = 4000)
    public void test172189() throws Throwable {
        DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) date0);
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
        DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) instant0, 1243.114928959583);
        double[][] doubleArray0 = new double[5][8];
        double[] doubleArray1 = new double[4];
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[8];
        doubleArray2[0] = 832.2;
        doubleArray2[2] = (double) (-1142);
        doubleArray2[3] = Double.NEGATIVE_INFINITY;
        doubleArray2[6] = (double) (-4204);
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[5];
        doubleArray3[2] = (-3182.6);
        doubleArray3[3] = 832.2;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[8];
        doubleArray4[0] = 832.2;
        doubleArray4[2] = Double.NEGATIVE_INFINITY;
        doubleArray4[3] = (double) (-4204);
        doubleArray4[4] = 1243.114928959583;
        doubleArray4[7] = (double) (-1142);
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[2];
        doubleArray5[0] = 832.2;
        doubleArray5[1] = (double) (-1142);
        doubleArray0[4] = doubleArray5;
    }

    @Test(timeout = 4000)
    public void test173190() throws Throwable {
        double[][] doubleArray0 = new double[6][4];
        double[] doubleArray1 = new double[9];
        doubleArray1[0] = 1425.078056;
        doubleArray1[1] = 1155.617823315733;
        doubleArray1[2] = Double.POSITIVE_INFINITY;
        doubleArray1[3] = 295.708;
        doubleArray1[4] = (-3011.5958);
        doubleArray1[5] = (-505.0);
        doubleArray1[6] = (-1.0);
        doubleArray1[7] = (-857.5751058492701);
        doubleArray1[8] = (-1867.55);
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[6];
        doubleArray2[0] = (-857.5751058492701);
        doubleArray2[1] = Double.POSITIVE_INFINITY;
        doubleArray2[2] = 1155.617823315733;
        doubleArray2[3] = 1155.617823315733;
        doubleArray2[4] = (-1.0);
        doubleArray2[5] = (-1867.55);
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[9];
        doubleArray3[0] = 295.708;
        doubleArray3[1] = 1155.617823315733;
        doubleArray3[2] = (-1867.55);
        doubleArray3[3] = 1155.617823315733;
        doubleArray3[4] = Double.POSITIVE_INFINITY;
        doubleArray3[5] = 295.708;
        doubleArray3[6] = (-1867.55);
        doubleArray3[7] = Double.POSITIVE_INFINITY;
        doubleArray3[8] = Double.POSITIVE_INFINITY;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[6];
        doubleArray4[0] = (-857.5751058492701);
        doubleArray4[1] = (-3011.5958);
        doubleArray4[2] = 295.708;
        doubleArray4[3] = Double.POSITIVE_INFINITY;
        doubleArray4[4] = 1155.617823315733;
        doubleArray4[5] = 295.708;
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[8];
        doubleArray5[0] = Double.POSITIVE_INFINITY;
        doubleArray5[1] = (-1542.3364349701374);
        doubleArray5[2] = 1425.078056;
        doubleArray5[3] = Double.POSITIVE_INFINITY;
        doubleArray5[4] = (-505.0);
        doubleArray5[5] = Double.POSITIVE_INFINITY;
        doubleArray5[6] = Double.NEGATIVE_INFINITY;
        doubleArray5[7] = (-857.5751058492701);
        doubleArray0[4] = doubleArray5;
        double[] doubleArray6 = new double[1];
        doubleArray6[0] = (-2.147483648E9);
        doubleArray0[5] = doubleArray6;
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test174191() throws Throwable {
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[23];
        doubleArray1[0] = (-995.7472);
        doubleArray1[1] = (-884.0);
        doubleArray1[2] = (-1615.96999);
        doubleArray1[3] = (-1615.96999);
        doubleArray1[4] = (-1528.7);
        doubleArray1[5] = 0.0;
        doubleArray1[7] = (-153.30124);
        doubleArray1[8] = 0.0;
        doubleArray0[0] = doubleArray1;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        keyToGroupMap0.getGroupIndex((-995.7472));
        keyToGroupMap0.getGroup((-153.30124));
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
        AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
        AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
        defaultIntervalCategoryDataset0.hasListener((EventListener) null);
        int int0 = (-1);
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-1));
    }

    @Test(timeout = 4000)
    public void test175192() throws Throwable {
        double[][] doubleArray0 = new double[1][5];
        double[] doubleArray1 = new double[23];
        doubleArray1[0] = (-995.7472);
        doubleArray1[1] = (-884.0);
        doubleArray1[2] = (-1615.96999);
        doubleArray1[3] = (-1615.96999);
        doubleArray1[4] = (-1528.7);
        doubleArray1[5] = 0.0;
        doubleArray1[7] = (-153.30124);
        doubleArray1[8] = 0.0;
        doubleArray0[0] = doubleArray1;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
        keyToGroupMap0.getGroup((-153.30124));
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
        AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
        AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
        defaultIntervalCategoryDataset0.hasListener((EventListener) null);
        int int0 = (-1);
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-1));
    }

    @Test(timeout = 4000)
    public void test176193() throws Throwable {
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
        IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYSeriesCollection0, false);
        intervalXYDelegate0.setAutoWidth(true);
        xYSeriesCollection0.equals(intervalXYDelegate0);
        Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
        DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, vector0, true);
        DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) vector0, false);
        Number[][] numberArray0 = new Number[6][5];
        Number[] numberArray1 = new Number[4];
        String[] stringArray0 = new String[8];
        stringArray0[0] = "";
        stringArray0[1] = "";
        stringArray0[2] = "";
        stringArray0[4] = "Sq?hUM=/";
        stringArray0[7] = "";
        DefaultWindDataset defaultWindDataset0 = null;
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, (Object[][][]) null);
    }

    @Test(timeout = 4000)
    public void test177194() throws Throwable {
        double[][] doubleArray0 = new double[9][3];
        double[] doubleArray1 = new double[0];
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[7];
        doubleArray2[0] = 0.0;
        doubleArray2[1] = 6.283185307179586;
        doubleArray2[2] = 1.5;
        doubleArray2[3] = Double.NEGATIVE_INFINITY;
        doubleArray2[4] = (-2042.7121291175);
        doubleArray2[5] = 0.0;
        doubleArray2[6] = (-3648.53);
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[5];
        doubleArray3[0] = 1.5;
        doubleArray3[1] = (-2042.7121291175);
        doubleArray3[2] = 0.0;
        doubleArray3[3] = (-2042.7121291175);
        doubleArray3[4] = (-2042.7121291175);
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[3];
        doubleArray4[0] = (-2042.7121291175);
        doubleArray4[1] = 0.0;
        doubleArray4[2] = 0.0;
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[8];
        doubleArray5[0] = 1.0;
        doubleArray5[1] = 6.283185307179586;
        doubleArray5[2] = (-1864.31290834);
        doubleArray5[3] = 1.5;
        doubleArray5[4] = 0.0;
        doubleArray5[5] = (-3648.53);
        doubleArray5[6] = 0.0;
        doubleArray5[7] = (-3648.53);
        doubleArray0[4] = doubleArray5;
        doubleArray0[5] = doubleArray3;
        double[] doubleArray6 = new double[6];
        doubleArray6[0] = 6.283185307179586;
        doubleArray6[1] = 6.283185307179586;
        doubleArray6[2] = Double.NEGATIVE_INFINITY;
        doubleArray6[3] = 0.0;
        doubleArray6[4] = (-1864.31290834);
        doubleArray6[5] = 1.0;
        doubleArray0[6] = doubleArray6;
        double[] doubleArray7 = new double[9];
        doubleArray7[0] = 0.0;
        doubleArray7[1] = 1.5;
        doubleArray7[2] = 0.0;
        doubleArray7[3] = 0.0;
        doubleArray7[4] = 942.1295534;
        doubleArray7[5] = 0.0;
        doubleArray7[6] = 0.0;
        doubleArray7[7] = (-2042.7121291175);
        doubleArray7[8] = (-2042.7121291175);
        doubleArray0[7] = doubleArray7;
        double[] doubleArray8 = new double[5];
        doubleArray8[0] = 0.0;
        doubleArray8[1] = (-1864.31290834);
        doubleArray8[2] = (-1864.31290834);
        doubleArray8[3] = 1444.77187127;
        doubleArray8[4] = Double.NEGATIVE_INFINITY;
        doubleArray0[8] = doubleArray8;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 1989, 0);
        ArrayList<Double> arrayList0 = new ArrayList<Double>();
        Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) arrayList0, false);
    }

    @Test(timeout = 4000)
    public void test178195() throws Throwable {
        Number[][] numberArray0 = new Number[5][0];
        Number[] numberArray1 = new Number[6];
        Integer integer0 = JLayeredPane.POPUP_LAYER;
        numberArray1[0] = (Number) integer0;
        double[][] doubleArray0 = new double[5][6];
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = (-1266.170435924111);
        doubleArray1[1] = 0.0;
        doubleArray1[2] = 832.2;
        doubleArray1[3] = 2662.161301467715;
        doubleArray1[4] = 0.0;
        doubleArray1[5] = 0.0;
        doubleArray1[6] = 0.0;
        double[] doubleArray2 = new double[2];
        doubleArray2[0] = 1960.74534886;
        doubleArray2[1] = 2662.161301467715;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[7];
        doubleArray3[0] = 832.2;
        doubleArray3[1] = 832.2;
        doubleArray3[2] = (-1266.170435924111);
        doubleArray3[3] = 832.2;
        doubleArray3[4] = 2662.161301467715;
        doubleArray3[5] = 1960.74534886;
        doubleArray3[6] = 0.0;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[4];
        doubleArray4[0] = (-1266.170435924111);
        doubleArray4[1] = (-1266.170435924111);
        doubleArray4[2] = 1041.0;
        doubleArray4[3] = Double.NEGATIVE_INFINITY;
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[7];
        doubleArray5[0] = 0.0;
        doubleArray5[1] = 1041.0;
        doubleArray5[2] = 1960.74534886;
        doubleArray5[3] = 1041.0;
        doubleArray5[4] = 0.0;
        doubleArray5[5] = 0.0;
        doubleArray5[6] = Double.NEGATIVE_INFINITY;
        doubleArray0[4] = doubleArray5;
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("'3&m", "B6F%", doubleArray0);
        Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
        numberArray1[1] = number0;
        BigInteger bigInteger0 = BigInteger.TEN;
        numberArray1[2] = (Number) bigInteger0;
        Byte byte0 = new Byte((byte) (-1));
        numberArray1[3] = (Number) byte0;
        Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
        numberArray1[4] = (Number) integer1;
        Float float0 = new Float(0.0F);
        numberArray1[5] = (Number) float0;
        numberArray0[0] = numberArray1;
        Number[] numberArray2 = new Number[3];
        numberArray2[0] = (Number) (-1266.170435924111);
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        defaultStatisticalCategoryDataset0.getMeanValue((Comparable) 1960.74534886, (Comparable) integer1);
    }

    @Test(timeout = 4000)
    public void test179196() throws Throwable {
        Comparable<IntervalXYDelegate>[] comparableArray0 = (Comparable<IntervalXYDelegate>[]) Array.newInstance(Comparable.class, 1);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4L);
        RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
        comparableArray0[0] = (Comparable<IntervalXYDelegate>) regularTimePeriod0;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        regularTimePeriod0.next();
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        regularTimePeriod0.peg(calendar0);
        regularTimePeriod0.toString();
        double[][] doubleArray0 = new double[0][5];
        DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
        DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) regularTimePeriod0);
        DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
        PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) comparableArray0[0], 0.0, 2000);
        DatasetUtilities.isEmptyOrNull(pieDataset1);
        CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
        categoryTableXYDataset0.getSeriesCount();
        DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory();
        JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatterFactory) defaultFormatterFactory0);
        Stack<TimePeriodValuesCollection> stack0 = new Stack<TimePeriodValuesCollection>();
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, (Range) null, false);
    }

    @Test(timeout = 4000)
    public void test180197() throws Throwable {
        double[][] doubleArray0 = new double[9][2];
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 1.7976931348623157E308;
        doubleArray1[1] = 1526.0;
        doubleArray1[2] = 0.0;
        doubleArray1[3] = 0.0;
        doubleArray1[4] = 0.0;
        doubleArray1[5] = (-3011.5958);
        doubleArray1[6] = (-512.7529803);
        doubleArray0[0] = doubleArray1;
        double[] doubleArray2 = new double[9];
        doubleArray2[0] = (-512.7529803);
        doubleArray2[1] = 0.0;
        doubleArray2[2] = 1.7976931348623157E308;
        doubleArray2[3] = 0.0;
        doubleArray2[4] = 0.0;
        doubleArray2[5] = 0.0;
        doubleArray2[6] = (-512.7529803);
        doubleArray2[7] = (-3011.5958);
        doubleArray2[8] = 0.0;
        doubleArray0[1] = doubleArray2;
        double[] doubleArray3 = new double[6];
        doubleArray3[0] = (-512.7529803);
        doubleArray3[1] = 0.0;
        doubleArray3[2] = 0.0;
        doubleArray3[3] = 0.0;
        doubleArray3[4] = (-3011.5958);
        doubleArray3[5] = 0.0;
        doubleArray0[2] = doubleArray3;
        double[] doubleArray4 = new double[3];
        doubleArray4[0] = (-3011.5958);
        doubleArray4[1] = Double.NaN;
        doubleArray4[2] = 0.0;
        doubleArray0[3] = doubleArray4;
        double[] doubleArray5 = new double[8];
        doubleArray5[0] = 0.0;
        doubleArray5[1] = (-3011.5958);
        doubleArray5[2] = 1.7976931348623157E308;
        doubleArray5[3] = 0.0;
        doubleArray5[4] = (-3011.5958);
        doubleArray5[5] = 1526.0;
        doubleArray5[6] = 0.5;
        doubleArray5[7] = 0.0;
        doubleArray0[4] = doubleArray5;
        double[] doubleArray6 = new double[2];
        doubleArray6[0] = (-4316.366336588769);
        doubleArray6[1] = 0.5;
        doubleArray0[5] = doubleArray6;
        double[] doubleArray7 = new double[7];
        doubleArray7[0] = 0.0;
        doubleArray7[1] = (-512.7529803);
        doubleArray7[2] = 1526.0;
        doubleArray7[3] = 0.0;
        doubleArray7[4] = 0.0;
        doubleArray7[5] = 1526.0;
        doubleArray7[6] = (-4316.366336588769);
        doubleArray0[6] = doubleArray7;
        double[] doubleArray8 = new double[0];
        doubleArray0[7] = doubleArray8;
        double[] doubleArray9 = new double[0];
        doubleArray0[8] = doubleArray9;
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
    }

    @Test(timeout = 4000)
    public void test181198() throws Throwable {
        double[][] doubleArray0 = new double[0][6];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        defaultIntervalCategoryDataset0.validateObject();
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-10029));
        DatasetUtilities.isEmptyOrNull(pieDataset0);
        DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
        DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
        DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
        DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-10029));
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 0);
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        MockDate mockDate0 = new MockDate(0, 0, (-10029), 1637, 0);
        ZoneId.systemDefault();
        LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
        DatasetUtilities.findStackedRangeBounds(categoryDataset0);
        CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) pieDataset0);
        Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset1);
    }

    @Test(timeout = 4000)
    public void test182199() throws Throwable {
        String string0 = "";
        YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
        YIntervalSeries yIntervalSeries0 = new YIntervalSeries("]%*TW,hG%53s[");
        yIntervalSeries0.indexOf("]%*TW,hG%53s[");
        yIntervalSeriesCollection0.addSeries(yIntervalSeries0);
        DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
        CategoryDataset categoryDataset0 = null;
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
    }

    @Test(timeout = 4000)
    public void test183200() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Millisecond millisecond0 = new Millisecond(mockDate0);
        mockDate0.toInstant();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "5WHAMs+gM}", "%rdWt314'Qe+pNY");
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 0);
        Class<DefaultHighLowDataset> class0 = DefaultHighLowDataset.class;
        RegularTimePeriod.downsize(class0);
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
        DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
        DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
        Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 7);
        Hour hour0 = null;
        hour0 = new Hour(835, 999, 999, 0);
    }
}
