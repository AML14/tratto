/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 02:21:14 GMT 2023
 */
package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Panel;
import java.text.ParsePosition;
import java.time.Clock;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Day day0 = new Day();
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        Class<Month> class0 = Month.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "=wzUe FC9tegUK,&]d", (String) null, class0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        Day day0 = new Day();
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        Class<Month> class0 = Month.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "=wzUe FC9tegUK,&]d", (String) null, class0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        Day day0 = new Day();
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        Class<Month> class0 = Month.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "=wzUe FC9tegUK,&]d", (String) null, class0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
        timeSeries0.add(regularTimePeriod0, (Number) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
        timeSeries0.delete((RegularTimePeriod) day0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yFneyFE");
        Day day0 = new Day(mockDate0, timeZone0);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
        timeSeries0.add(regularTimePeriod0, (Number) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test0025() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yFneyFE");
        Day day0 = new Day(mockDate0, timeZone0);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
        timeSeries0.add(regularTimePeriod0, (Number) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
        timeSeries0.setMaximumItemAge(415L);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test0036() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
        timeSeries0.add(regularTimePeriod0, (Number) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (-291.0));
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        MockDate mockDate0 = new MockDate((-507), (-507), 0);
        Quarter quarter0 = new Quarter(mockDate0);
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Requires start >= 0.", "You are attempting to add an observation for ", class0);
        timeSeries0.setMaximumItemCount(Integer.MAX_VALUE);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test0048() throws Throwable {
        MockDate mockDate0 = new MockDate((-507), (-507), 0);
        Quarter quarter0 = new Quarter(mockDate0);
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Requires start >= 0.", "You are attempting to add an observation for ", class0);
        timeSeries0.setMaximumItemCount(Integer.MAX_VALUE);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test0049() throws Throwable {
        MockDate mockDate0 = new MockDate((-507), (-507), 0);
        Quarter quarter0 = new Quarter(mockDate0);
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Requires start >= 0.", "You are attempting to add an observation for ", class0);
        timeSeries0.setMaximumItemCount(Integer.MAX_VALUE);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test00410() throws Throwable {
        MockDate mockDate0 = new MockDate((-507), (-507), 0);
        Quarter quarter0 = new Quarter(mockDate0);
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Requires start >= 0.", "You are attempting to add an observation for ", class0);
        timeSeries0.setMaximumItemCount(Integer.MAX_VALUE);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test00511() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Day day0 = new Day(mockDate0);
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "org.jfree.data.time.TimeSeries", class0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test00512() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Day day0 = new Day(mockDate0);
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "org.jfree.data.time.TimeSeries", class0);
        timeSeries0.setDomainDescription((String) null);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test00513() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Day day0 = new Day(mockDate0);
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "org.jfree.data.time.TimeSeries", class0);
        timeSeries0.setDomainDescription((String) null);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test00514() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Day day0 = new Day(mockDate0);
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "org.jfree.data.time.TimeSeries", class0);
        timeSeries0.setDomainDescription((String) null);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test00615() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), 2958418, (-1), 1376);
        Minute minute0 = new Minute(mockDate0);
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries("WN");
        timeSeries0.add((RegularTimePeriod) day0, (Number) 0, false);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test00616() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), 2958418, (-1), 1376);
        Minute minute0 = new Minute(mockDate0);
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries("WN");
        timeSeries0.add((RegularTimePeriod) day0, (Number) 0, false);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test00617() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), 2958418, (-1), 1376);
        Minute minute0 = new Minute(mockDate0);
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries("WN");
        timeSeries0.add((RegularTimePeriod) day0, (Number) 0, false);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test00618() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), 2958418, (-1), 1376);
        Minute minute0 = new Minute(mockDate0);
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries("WN");
        timeSeries0.add((RegularTimePeriod) day0, (Number) 0, false);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test00719() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries0.update(0, (Number) 0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test00720() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries0.update(0, (Number) 0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test00721() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries0.update(0, (Number) 0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test00722() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries0.update(0, (Number) 0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test00823() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test00824() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test00825() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test00826() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test00827() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 0, 0, 0);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test00928() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test00929() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test00930() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test00931() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01032() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01033() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    }

    @Test(timeout = 4000)
    public void test01034() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01036() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01037() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01138() throws Throwable {
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        TimeSeries timeSeries0 = new TimeSeries("java.util.TimeZone", "java.util.TimeZone", "java.util.TimeZone", class0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01139() throws Throwable {
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        TimeSeries timeSeries0 = new TimeSeries("java.util.TimeZone", "java.util.TimeZone", "java.util.TimeZone", class0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01140() throws Throwable {
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        TimeSeries timeSeries0 = new TimeSeries("java.util.TimeZone", "java.util.TimeZone", "java.util.TimeZone", class0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01141() throws Throwable {
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        TimeSeries timeSeries0 = new TimeSeries("java.util.TimeZone", "java.util.TimeZone", "java.util.TimeZone", class0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01242() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
        timeSeries0.add(regularTimePeriod0, (Number) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test01243() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
        timeSeries0.add(regularTimePeriod0, (Number) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
        timeSeries0.getTimePeriod(1);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01344() throws Throwable {
        Minute minute0 = new Minute();
        Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01345() throws Throwable {
        Minute minute0 = new Minute();
        Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01346() throws Throwable {
        Minute minute0 = new Minute();
        Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
        String string0 = timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01347() throws Throwable {
        Minute minute0 = new Minute();
        Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01448() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        ParsePosition parsePosition0 = new ParsePosition((-1829));
        Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
        Day day0 = new Day(date0);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01449() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        ParsePosition parsePosition0 = new ParsePosition((-1829));
        Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
        Day day0 = new Day(date0);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01450() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        ParsePosition parsePosition0 = new ParsePosition((-1829));
        Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
        Day day0 = new Day(date0);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01451() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
        ParsePosition parsePosition0 = new ParsePosition((-1829));
        Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
        Day day0 = new Day(date0);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "", "", class0);
        String string0 = timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01552() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, (Number) null);
        timeSeries0.getNextTimePeriod();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01553() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, (Number) null);
        timeSeries0.getNextTimePeriod();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01554() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, (Number) null);
        timeSeries0.getNextTimePeriod();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01555() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, (Number) null);
        timeSeries0.getNextTimePeriod();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01656() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        timeSeries0.setMaximumItemCount(0);
        int int0 = timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01757() throws Throwable {
        Day day0 = new Day();
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
        int int0 = timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test01858() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
        timeSeries0.getIndex(day0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01859() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
        timeSeries0.getIndex(day0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01860() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
        timeSeries0.getIndex(day0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01861() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
        timeSeries0.getIndex(day0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01962() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
        timeSeries0.add(regularTimePeriod0, (Number) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
        int int0 = timeSeries0.getIndex(day0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test01963() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
        timeSeries0.add(regularTimePeriod0, (Number) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
        int int0 = timeSeries0.getIndex(day0);
    }

    @Test(timeout = 4000)
    public void test02064() throws Throwable {
        Month month0 = new Month();
        Class<Year> class0 = Year.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, "", "", class0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test02065() throws Throwable {
        Month month0 = new Month();
        Class<Year> class0 = Year.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, "", "", class0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test02066() throws Throwable {
        Month month0 = new Month();
        Class<Year> class0 = Year.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, "", "", class0);
        String string0 = timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test02067() throws Throwable {
        Month month0 = new Month();
        Class<Year> class0 = Year.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, "", "", class0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test02168() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test02169() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.setMaximumItemAge(0L);
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test02270() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, (Number) null);
        timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test02371() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        timeSeries0.setMaximumItemCount(0);
        timeSeries0.createCopy(0, 999);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test02473() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.setMaximumItemAge(0L);
        TimeSeries timeSeries1 = timeSeries0.createCopy(0, 2958489);
    }

    @Test(timeout = 4000)
    public void test02574() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-380.28592));
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test02675() throws Throwable {
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries("b", "", "b", class0);
        timeSeries0.update((RegularTimePeriod) null, (Number) 23);
    }

    @Test(timeout = 4000)
    public void test02776() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        Stack<Millisecond> stack0 = new Stack<Millisecond>();
        timeSeries0.data = (List) stack0;
        timeSeries0.update(445, (Number) 0);
    }

    @Test(timeout = 4000)
    public void test02877() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        timeSeries0.removeAgedItems((long) 0, true);
    }

    @Test(timeout = 4000)
    public void test02978() throws Throwable {
        MockDate mockDate0 = new MockDate((-507), (-507), 0);
        Quarter quarter0 = new Quarter(mockDate0);
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Requires start >= 0.", "You are attempting to add an observation for ", class0);
        timeSeries0.getValue((-279));
    }

    @Test(timeout = 4000)
    public void test03079() throws Throwable {
        MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        timeSeries1.data = null;
        timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test03180() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, class0);
        timeSeries0.getTimePeriod((-161));
    }

    @Test(timeout = 4000)
    public void test03281() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries(minute0);
        LinkedList<Minute> linkedList0 = new LinkedList<Minute>();
        timeSeries0.data = (List) linkedList0;
        timeSeries0.getNextTimePeriod();
    }

    @Test(timeout = 4000)
    public void test03382() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        Month month0 = new Month(date0);
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, "", "", class0);
        timeSeries0.getDataItem((RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test03483() throws Throwable {
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(integer0, "", "^", class0);
        timeSeries0.getDataItem((-1));
    }

    @Test(timeout = 4000)
    public void test03584() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.delete((RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test03685() throws Throwable {
        Minute minute0 = new Minute();
        Class<Second> class0 = Second.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
        timeSeries0.delete((-963), 970);
    }

    @Test(timeout = 4000)
    public void test03786() throws Throwable {
        MockDate mockDate0 = new MockDate((-4654));
        SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(serialDate0);
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 2958465);
    }

    @Test(timeout = 4000)
    public void test03887() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        timeSeries0.addAndOrUpdate((TimeSeries) null);
    }

    @Test(timeout = 4000)
    public void test03988() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
        TimeZone timeZone0 = TimeZone.getDefault();
        Quarter quarter0 = new Quarter(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(quarter0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, (Number) 1);
        timeSeries0.add(timeSeriesDataItem0);
    }

    @Test(timeout = 4000)
    public void test04089() throws Throwable {
        Month month0 = new Month(2, (-4399));
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, "BdJ{+$", "W~B4\"g?V.YjTJ@!}F7", class0);
        timeSeries0.add((TimeSeriesDataItem) null);
    }

    @Test(timeout = 4000)
    public void test04190() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, (String) null, "1\"T\"ptclv%", class0);
        Integer integer0 = new Integer((-24));
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0, false);
    }

    @Test(timeout = 4000)
    public void test04291() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries(minute0);
        timeSeries0.add((RegularTimePeriod) minute0, (Number) 59);
    }

    @Test(timeout = 4000)
    public void test04392() throws Throwable {
        SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1.0), Double.POSITIVE_INFINITY);
        Class<Day> class0 = Day.class;
        TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0, class0);
        Short short0 = new Short((short) 0);
        timeSeries0.add((RegularTimePeriod) null, (Number) short0);
    }

    @Test(timeout = 4000)
    public void test04493() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("vX{{15");
        timeSeries0.add((RegularTimePeriod) null, 0.0);
    }

    @Test(timeout = 4000)
    public void test04594() throws Throwable {
        Class<Year> class0 = Year.class;
        TimeSeries timeSeries0 = null;
        timeSeries0 = new TimeSeries((Comparable) null, "Requires start on or before end.", "You are trying to add data where the time period class ", class0);
    }

    @Test(timeout = 4000)
    public void test04695() throws Throwable {
        Class<Panel> class0 = Panel.class;
        TimeSeries timeSeries0 = null;
        timeSeries0 = new TimeSeries((Comparable) null, class0);
    }

    @Test(timeout = 4000)
    public void test04796() throws Throwable {
        TimeSeries timeSeries0 = null;
        timeSeries0 = new TimeSeries((Comparable) null);
    }

    @Test(timeout = 4000)
    public void test04897() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries0.createCopy(45, 640);
    }

    @Test(timeout = 4000)
    public void test04998() throws Throwable {
        MockDate mockDate0 = new MockDate(1293, 716, 917);
        Minute minute0 = new Minute(mockDate0);
        Day day0 = minute0.getDay();
        Class<Quarter> class0 = Quarter.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, class0);
        timeSeries0.createCopy(1293, 439);
    }

    @Test(timeout = 4000)
    public void test05099() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.delete(2958465, 2958465);
    }

    @Test(timeout = 4000)
    public void test051100() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
        timeSeries0.add(regularTimePeriod0, (Number) null);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
        timeSeries0.removeAgedItems(false);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test052101() throws Throwable {
        Minute minute0 = new Minute();
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, "Null 'serialDate' argument.", (String) null, class0);
        timeSeries0.removeAgedItems(false);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test052102() throws Throwable {
        Minute minute0 = new Minute();
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, "Null 'serialDate' argument.", (String) null, class0);
        timeSeries0.removeAgedItems(false);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test052103() throws Throwable {
        Minute minute0 = new Minute();
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, "Null 'serialDate' argument.", (String) null, class0);
        timeSeries0.removeAgedItems(false);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test053104() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        timeSeries0.setMaximumItemCount(0);
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 999);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test054105() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(12L);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-1035.328606761431));
        Class<Integer> class0 = Integer.class;
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0, "Negative 'maximum' argument.", "", class0);
        timeSeries0.add(timeSeriesDataItem0, true);
    }

    @Test(timeout = 4000)
    public void test055106() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("h");
        timeSeries0.getIndex((RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test056107() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test056108() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test056109() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test056110() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test057111() throws Throwable {
        Class<Second> class0 = Second.class;
        TimeSeries timeSeries0 = new TimeSeries("w[I", "w[I", (String) null, class0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test057112() throws Throwable {
        Class<Second> class0 = Second.class;
        TimeSeries timeSeries0 = new TimeSeries("w[I", "w[I", (String) null, class0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test057113() throws Throwable {
        Class<Second> class0 = Second.class;
        TimeSeries timeSeries0 = new TimeSeries("w[I", "w[I", (String) null, class0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test058114() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        int int0 = timeSeries0.getMaximumItemCount();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test058115() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        int int0 = timeSeries0.getMaximumItemCount();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test058116() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        int int0 = timeSeries0.getMaximumItemCount();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test058117() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        int int0 = timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test059118() throws Throwable {
        Day day0 = new Day();
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, class0);
        long long0 = timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test059119() throws Throwable {
        Day day0 = new Day();
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, class0);
        long long0 = timeSeries0.getMaximumItemAge();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test059120() throws Throwable {
        Day day0 = new Day();
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, class0);
        long long0 = timeSeries0.getMaximumItemAge();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test059121() throws Throwable {
        Day day0 = new Day();
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, class0);
        long long0 = timeSeries0.getMaximumItemAge();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test060122() throws Throwable {
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        Class<Object> class0 = Object.class;
        TimeSeries timeSeries0 = new TimeSeries(integer0, "", (String) null, class0);
        String string0 = timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test060123() throws Throwable {
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        Class<Object> class0 = Object.class;
        TimeSeries timeSeries0 = new TimeSeries(integer0, "", (String) null, class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test060124() throws Throwable {
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        Class<Object> class0 = Object.class;
        TimeSeries timeSeries0 = new TimeSeries(integer0, "", (String) null, class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test060125() throws Throwable {
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        Class<Object> class0 = Object.class;
        TimeSeries timeSeries0 = new TimeSeries(integer0, "", (String) null, class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test061126() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("WN");
        timeSeries0.getValue(0);
    }

    @Test(timeout = 4000)
    public void test062127() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        timeSeries0.add((RegularTimePeriod) null, (Number) 999, true);
    }

    @Test(timeout = 4000)
    public void test063128() throws Throwable {
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        TimeSeries timeSeries0 = new TimeSeries("java.util.TimeZone", "java.util.TimeZone", "java.util.TimeZone", class0);
        timeSeries0.getTimePeriod(174);
    }

    @Test(timeout = 4000)
    public void test064129() throws Throwable {
        Day day0 = new Day();
        Class<Month> class0 = Month.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "=wzUe FC9tegUK,&]d", (String) null, class0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test064130() throws Throwable {
        Day day0 = new Day();
        Class<Month> class0 = Month.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "=wzUe FC9tegUK,&]d", (String) null, class0);
        String string0 = timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test064132() throws Throwable {
        Day day0 = new Day();
        Class<Month> class0 = Month.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "=wzUe FC9tegUK,&]d", (String) null, class0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test065133() throws Throwable {
        Day day0 = new Day();
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "<A$nQ", "java.lang.Class", class0);
        timeSeries0.getDataItem(1);
    }

    @Test(timeout = 4000)
    public void test066134() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
        timeSeries0.add(timeSeriesDataItem0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test066135() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
        timeSeries0.add(timeSeriesDataItem0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test066136() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
        timeSeries0.add(timeSeriesDataItem0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test066137() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, (Number) null);
        timeSeries0.add(timeSeriesDataItem0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test067138() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        timeSeries0.getItemCount();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test067139() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        timeSeries0.getItemCount();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test067140() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        timeSeries0.getItemCount();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test067141() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        timeSeries0.getItemCount();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test068142() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-380.28592));
        timeSeries0.hashCode();
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test069143() throws Throwable {
        Day day0 = new Day();
        Class<Month> class0 = Month.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "=wzUe FC9tegUK,&]d", (String) null, class0);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test069144() throws Throwable {
        Day day0 = new Day();
        Class<Month> class0 = Month.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "=wzUe FC9tegUK,&]d", (String) null, class0);
        timeSeries0.hashCode();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test069145() throws Throwable {
        Day day0 = new Day();
        Class<Month> class0 = Month.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, "=wzUe FC9tegUK,&]d", (String) null, class0);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test070146() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, "-9OJT/.", (Class) null);
        timeSeries0.hashCode();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test070147() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, "-9OJT/.", (Class) null);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test070148() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, (String) null, "-9OJT/.", (Class) null);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test071149() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        Class<Day> class1 = Day.class;
        TimeSeries timeSeries1 = new TimeSeries(mockDate0, "InD", "InD", class1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test071150() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        Class<Day> class1 = Day.class;
        TimeSeries timeSeries1 = new TimeSeries(mockDate0, "InD", "InD", class1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test071151() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        Class<Day> class1 = Day.class;
        TimeSeries timeSeries1 = new TimeSeries(mockDate0, "InD", "InD", class1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test071152() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        Class<Day> class1 = Day.class;
        TimeSeries timeSeries1 = new TimeSeries(mockDate0, "InD", "InD", class1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test071153() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        Class<Day> class1 = Day.class;
        TimeSeries timeSeries1 = new TimeSeries(mockDate0, "InD", "InD", class1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test071154() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        Class<Day> class1 = Day.class;
        TimeSeries timeSeries1 = new TimeSeries(mockDate0, "InD", "InD", class1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test071155() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        Class<Day> class1 = Day.class;
        TimeSeries timeSeries1 = new TimeSeries(mockDate0, "InD", "InD", class1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test072156() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        boolean boolean0 = timeSeries0.equals(millisecond0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test072157() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        boolean boolean0 = timeSeries0.equals(millisecond0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test072158() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        boolean boolean0 = timeSeries0.equals(millisecond0);
    }

    @Test(timeout = 4000)
    public void test072159() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        boolean boolean0 = timeSeries0.equals(millisecond0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test072160() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        boolean boolean0 = timeSeries0.equals(millisecond0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test073161() throws Throwable {
        MockDate mockDate0 = new MockDate((-1L));
        Second second0 = new Second(mockDate0);
        RegularTimePeriod regularTimePeriod0 = second0.next();
        Class<Integer> class0 = Integer.class;
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, class0);
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) second0);
    }

    @Test(timeout = 4000)
    public void test074162() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test075163() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        Month month0 = new Month(date0);
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, "", "", class0);
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) month0);
    }

    @Test(timeout = 4000)
    public void test076164() throws Throwable {
        Minute minute0 = new Minute();
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, "Null 'serialDate' argument.", (String) null, class0);
        timeSeries0.createCopy((-984), 59);
    }

    @Test(timeout = 4000)
    public void test077165() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(92);
        Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
        TimeSeries timeSeries0 = new TimeSeries(spreadsheetDate0, "YZM wgVx0wYOEyW67", ";])ZY", class0);
        timeSeries0.delete(2786, 44);
    }

    @Test(timeout = 4000)
    public void test078166() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
        timeSeries0.delete((RegularTimePeriod) day0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test079167() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.delete((RegularTimePeriod) day0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test079168() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.delete((RegularTimePeriod) day0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test079169() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.delete((RegularTimePeriod) day0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test079170() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.delete((RegularTimePeriod) day0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test080171() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test080172() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries0.clear();
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test081173() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        timeSeries0.clear();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test081174() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        timeSeries0.clear();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test081175() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        timeSeries0.clear();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test081176() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        timeSeries0.clear();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test082177() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-380.28592));
        timeSeries0.removeAgedItems((long) 0, false);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test083178() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.removeAgedItems(1392409281320L, false);
        timeSeries0.removeAgedItems((-208L), true);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test083179() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.removeAgedItems(1392409281320L, false);
        timeSeries0.removeAgedItems((-208L), true);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test083180() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.removeAgedItems(1392409281320L, false);
        timeSeries0.removeAgedItems((-208L), true);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test083181() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.removeAgedItems(1392409281320L, false);
        timeSeries0.removeAgedItems((-208L), true);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test084182() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        TimeSeries timeSeries0 = new TimeSeries(date0);
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) integer0);
    }

    @Test(timeout = 4000)
    public void test085183() throws Throwable {
        MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries1.addAndOrUpdate(timeSeries0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test085184() throws Throwable {
        MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries1.addAndOrUpdate(timeSeries0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test086185() throws Throwable {
        MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries0.addAndOrUpdate(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test087186() throws Throwable {
        Minute minute0 = new Minute();
        Second second0 = new Second(273, minute0);
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.update((RegularTimePeriod) second0, (Number) 59);
    }

    @Test(timeout = 4000)
    public void test088187() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0);
        timeSeries0.add(regularTimePeriod0, (Number) null);
        timeSeries0.add((RegularTimePeriod) day0, (Number) null);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test089188() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 718.0, false);
        timeSeries0.add((RegularTimePeriod) day0, 882.599950745);
    }

    @Test(timeout = 4000)
    public void test090189() throws Throwable {
        MockDate mockDate0 = new MockDate((-230));
        Second second0 = new Second(mockDate0);
        Millisecond millisecond0 = new Millisecond((-230), second0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.add((TimeSeriesDataItem) null, true);
    }

    @Test(timeout = 4000)
    public void test091190() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        timeSeries0.getValue((RegularTimePeriod) month0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test091191() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        timeSeries0.getValue((RegularTimePeriod) month0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test091192() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        timeSeries0.getValue((RegularTimePeriod) month0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test091193() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        timeSeries0.getValue((RegularTimePeriod) month0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test092194() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        timeSeries0.getValue((RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test093195() throws Throwable {
        MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test093196() throws Throwable {
        MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test094197() throws Throwable {
        MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        Second second0 = millisecond0.getSecond();
        timeSeries0.addOrUpdate((RegularTimePeriod) second0, 0.0);
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test095198() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("2:aXr!");
        timeSeries0.getTimePeriods();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test095199() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("2:aXr!");
        timeSeries0.getTimePeriods();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test095200() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("2:aXr!");
        timeSeries0.getTimePeriods();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test095201() throws Throwable {
        TimeSeries timeSeries0 = new TimeSeries("2:aXr!");
        timeSeries0.getTimePeriods();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test096202() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(date0);
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
        timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test097203() throws Throwable {
        MockDate mockDate0 = new MockDate((-507), (-507), 0);
        Quarter quarter0 = new Quarter(mockDate0);
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Requires start >= 0.", "You are attempting to add an observation for ", class0);
        timeSeries0.getDataItem((RegularTimePeriod) quarter0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test097204() throws Throwable {
        MockDate mockDate0 = new MockDate((-507), (-507), 0);
        Quarter quarter0 = new Quarter(mockDate0);
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Requires start >= 0.", "You are attempting to add an observation for ", class0);
        timeSeries0.getDataItem((RegularTimePeriod) quarter0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test097205() throws Throwable {
        MockDate mockDate0 = new MockDate((-507), (-507), 0);
        Quarter quarter0 = new Quarter(mockDate0);
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Requires start >= 0.", "You are attempting to add an observation for ", class0);
        timeSeries0.getDataItem((RegularTimePeriod) quarter0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test097206() throws Throwable {
        MockDate mockDate0 = new MockDate((-507), (-507), 0);
        Quarter quarter0 = new Quarter(mockDate0);
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "Requires start >= 0.", "You are attempting to add an observation for ", class0);
        timeSeries0.getDataItem((RegularTimePeriod) quarter0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test098207() throws Throwable {
        Class<String> class0 = String.class;
        Millisecond millisecond0 = new Millisecond();
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "-)OJT/.", "-)OJT/.", class0);
        timeSeries0.setMaximumItemAge((-689L));
    }

    @Test(timeout = 4000)
    public void test099208() throws Throwable {
        MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test099209() throws Throwable {
        MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.setMaximumItemAge(0L);
        timeSeries0.getMaximumItemAge();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test100210() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        Class<Object> class0 = Object.class;
        TimeSeries timeSeries0 = new TimeSeries("-)OJT/.", class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) (-689L));
        timeSeries0.setMaximumItemCount(0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test101211() throws Throwable {
        Minute minute0 = new Minute();
        Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, class0);
        timeSeries0.setMaximumItemCount((-1031));
    }

    @Test(timeout = 4000)
    public void test102212() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        TimeSeries timeSeries1 = new TimeSeries(date0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test102213() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        TimeSeries timeSeries1 = new TimeSeries(date0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test102214() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        TimeSeries timeSeries1 = new TimeSeries(date0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test102215() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        TimeSeries timeSeries1 = new TimeSeries(date0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test103216() throws Throwable {
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries("b", "", "b", class0);
        timeSeries0.setRangeDescription("]BlbnZ5}4H4");
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test104217() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, (Number) null);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test104218() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getTimeZone("yehcE");
        Day day0 = new Day(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, (Number) null);
        timeSeries0.update((RegularTimePeriod) day0, (Number) null);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test105219() throws Throwable {
        MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.clone();
    }

    @Test(timeout = 4000)
    public void test106220() throws Throwable {
        MockDate mockDate0 = new MockDate(45, 0, 0, 1525, 45);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0, true);
    }

    @Test(timeout = 4000)
    public void test107221() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries("2:aXr!");
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 59);
        timeSeries0.getValue((RegularTimePeriod) minute0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test108222() throws Throwable {
        MockDate mockDate0 = new MockDate(714, 479, 1351);
        Month month0 = new Month(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(month0, class0);
        timeSeries0.getNextTimePeriod();
    }

    @Test(timeout = 4000)
    public void test109223() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getItems();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test109224() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getItems();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test109225() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getItems();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test109226() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getItems();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test110227() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 45, 0, 1525, 1525, 1525);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        timeSeries0.update(45, (Number) 0);
    }

    @Test(timeout = 4000)
    public void test111228() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries("2:aXr!");
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test111229() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries("2:aXr!");
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test111230() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries("2:aXr!");
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test111231() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries("2:aXr!");
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test111232() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries("2:aXr!");
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaximumItemAge();
    }
}
