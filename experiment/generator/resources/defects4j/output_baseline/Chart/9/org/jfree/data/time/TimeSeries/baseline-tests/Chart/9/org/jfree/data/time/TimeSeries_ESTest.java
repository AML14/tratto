/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 01:59:40 GMT 2023
 */
package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Panel;
import java.beans.PropertyChangeListener;
import java.math.BigInteger;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.plaf.metal.MetalComboBoxUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
        ParsePosition parsePosition0 = new ParsePosition(2);
        Date date0 = mockSimpleDateFormat0.parse("java.lang.Class", parsePosition0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Millisecond millisecond0 = new Millisecond(date0, timeZone0);
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "", class0);
        timeSeries0.hashCode();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
        ParsePosition parsePosition0 = new ParsePosition(2);
        Date date0 = mockSimpleDateFormat0.parse("java.lang.Class", parsePosition0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Millisecond millisecond0 = new Millisecond(date0, timeZone0);
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "", class0);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
        ParsePosition parsePosition0 = new ParsePosition(2);
        Date date0 = mockSimpleDateFormat0.parse("java.lang.Class", parsePosition0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Millisecond millisecond0 = new Millisecond(date0, timeZone0);
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "", class0);
        timeSeries0.hashCode();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
        ParsePosition parsePosition0 = new ParsePosition(2);
        Date date0 = mockSimpleDateFormat0.parse("java.lang.Class", parsePosition0);
        TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
        Millisecond millisecond0 = new Millisecond(date0, timeZone0);
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "", class0);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test0014() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
        timeSeries1.equals((Object) timeSeries0);
    }

    @Test(timeout = 4000)
    public void test0015() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
        timeSeries1.addOrUpdate((RegularTimePeriod) week0, (double) 33);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.equals((Object) timeSeries0);
    }

    @Test(timeout = 4000)
    public void test0016() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
        timeSeries1.addOrUpdate((RegularTimePeriod) week0, (double) 33);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test0027() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        Year year0 = new Year();
        RegularTimePeriod regularTimePeriod0 = year0.next();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test0028() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        Year year0 = new Year();
        RegularTimePeriod regularTimePeriod0 = year0.next();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test0029() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        Year year0 = new Year();
        RegularTimePeriod regularTimePeriod0 = year0.next();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test00210() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        Year year0 = new Year();
        RegularTimePeriod regularTimePeriod0 = year0.next();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test00311() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance(3);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        timeSeries0.setMaximumItemCount(1);
        Year year0 = new Year();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test00412() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "]?FcP(On#", class0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test00413() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "]?FcP(On#", class0);
        timeSeries0.setRangeDescription("");
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test00514() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "]?FcP(On#", class0);
        timeSeries0.setDomainDescription("Invalid 'index': ");
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test00615() throws Throwable {
        Class<Year> class0 = Year.class;
        TimeSeries timeSeries0 = new TimeSeries("", class0);
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 0.0);
        timeSeries0.add(timeSeriesDataItem0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test00616() throws Throwable {
        Class<Year> class0 = Year.class;
        TimeSeries timeSeries0 = new TimeSeries("", class0);
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 0.0);
        timeSeries0.add(timeSeriesDataItem0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test00617() throws Throwable {
        Class<Year> class0 = Year.class;
        TimeSeries timeSeries0 = new TimeSeries("", class0);
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 0.0);
        timeSeries0.add(timeSeriesDataItem0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test00618() throws Throwable {
        Class<Year> class0 = Year.class;
        TimeSeries timeSeries0 = new TimeSeries("", class0);
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 0.0);
        timeSeries0.add(timeSeriesDataItem0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test00719() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getDefault();
        Day day0 = new Day(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 0.0, true);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test00720() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getDefault();
        Day day0 = new Day(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 0.0, true);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test00721() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getDefault();
        Day day0 = new Day(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 0.0, true);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test00722() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getDefault();
        Day day0 = new Day(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, 0.0, true);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test00823() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        Year year0 = new Year();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        timeSeries0.update(0, (Number) 1);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test00824() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        Year year0 = new Year();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        timeSeries0.update(0, (Number) 1);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test00825() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        Year year0 = new Year();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        timeSeries0.update(0, (Number) 1);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test00826() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        Year year0 = new Year();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        timeSeries0.update(0, (Number) 1);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test00927() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test00928() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test00929() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test00930() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test00931() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        boolean boolean0 = timeSeries0.equals(timeSeries0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01032() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01033() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01034() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01035() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01036() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
        timeSeries1.getItemCount();
    }

    @Test(timeout = 4000)
    public void test01137() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Minute minute0 = new Minute(mockDate0);
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01138() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Minute minute0 = new Minute(mockDate0);
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01139() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Minute minute0 = new Minute(mockDate0);
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01140() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Minute minute0 = new Minute(mockDate0);
        Day day0 = minute0.getDay();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01241() throws Throwable {
        Year year0 = new Year();
        Week week0 = new Week(29, year0);
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(week0, "", "xq}MLAs|G'WLFu,", class0);
        timeSeries0.add((RegularTimePeriod) week0, (double) 53);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01242() throws Throwable {
        Year year0 = new Year();
        Week week0 = new Week(29, year0);
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(week0, "", "xq}MLAs|G'WLFu,", class0);
        timeSeries0.add((RegularTimePeriod) week0, (double) 53);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01243() throws Throwable {
        Year year0 = new Year();
        Week week0 = new Week(29, year0);
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(week0, "", "xq}MLAs|G'WLFu,", class0);
        timeSeries0.add((RegularTimePeriod) week0, (double) 53);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01244() throws Throwable {
        Year year0 = new Year();
        Week week0 = new Week(29, year0);
        Class<Week> class0 = Week.class;
        TimeSeries timeSeries0 = new TimeSeries(week0, "", "xq}MLAs|G'WLFu,", class0);
        timeSeries0.add((RegularTimePeriod) week0, (double) 53);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01345() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
        Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    }

    @Test(timeout = 4000)
    public void test01346() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
        Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01347() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
        Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01349() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
        Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01350() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
        Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01451() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01452() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01453() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    }

    @Test(timeout = 4000)
    public void test01454() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01455() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01556() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    }

    @Test(timeout = 4000)
    public void test01557() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01558() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01559() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01560() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01662() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries(minute0, "java.lang.Class", "java.lang.Class", (Class) null);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01663() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries(minute0, "java.lang.Class", "java.lang.Class", (Class) null);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01664() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries(minute0, "java.lang.Class", "java.lang.Class", (Class) null);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01665() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries(minute0, "java.lang.Class", "java.lang.Class", (Class) null);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01766() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute(0, hour0);
        Second second0 = new Second(2883, minute0);
        Class<Object> class0 = Object.class;
        TimeSeries timeSeries0 = new TimeSeries(second0, class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01767() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute(0, hour0);
        Second second0 = new Second(2883, minute0);
        Class<Object> class0 = Object.class;
        TimeSeries timeSeries0 = new TimeSeries(second0, class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01768() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute(0, hour0);
        Second second0 = new Second(2883, minute0);
        Class<Object> class0 = Object.class;
        TimeSeries timeSeries0 = new TimeSeries(second0, class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01769() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute(0, hour0);
        Second second0 = new Second(2883, minute0);
        Class<Object> class0 = Object.class;
        TimeSeries timeSeries0 = new TimeSeries(second0, class0);
        String string0 = timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01870() throws Throwable {
        MockDate mockDate0 = new MockDate(4350L);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "Null 'range' argument.", "", class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test01871() throws Throwable {
        MockDate mockDate0 = new MockDate(4350L);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "Null 'range' argument.", "", class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01872() throws Throwable {
        MockDate mockDate0 = new MockDate(4350L);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "Null 'range' argument.", "", class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01873() throws Throwable {
        MockDate mockDate0 = new MockDate(4350L);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        Class<Millisecond> class0 = Millisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(millisecond0, "Null 'range' argument.", "", class0);
        String string0 = timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01974() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(264, mockRandom0);
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        timeSeries0.getNextTimePeriod();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test01975() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(264, mockRandom0);
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        timeSeries0.getNextTimePeriod();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test01976() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(264, mockRandom0);
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        timeSeries0.getNextTimePeriod();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test01977() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(264, mockRandom0);
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        timeSeries0.getNextTimePeriod();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test02078() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test02079() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.setMaximumItemAge(0);
        timeSeries0.getMaximumItemAge();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test02180() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
        timeSeries0.getItemCount();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test02181() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
        timeSeries0.getItemCount();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test02182() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
        timeSeries0.getItemCount();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test02183() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
        timeSeries0.getItemCount();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test02284() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test02285() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test02286() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test02287() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test02388() throws Throwable {
        Year year0 = new Year();
        Class<FixedMillisecond> class0 = FixedMillisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test02389() throws Throwable {
        Year year0 = new Year();
        Class<FixedMillisecond> class0 = FixedMillisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
        String string0 = timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test02390() throws Throwable {
        Year year0 = new Year();
        Class<FixedMillisecond> class0 = FixedMillisecond.class;
        TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test02491() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
        timeSeries0.getDataItem(0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test02492() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
        timeSeries0.getDataItem(0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test02493() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
        timeSeries0.getDataItem(0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test02494() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
        timeSeries0.getDataItem(0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test02595() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test02596() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test02597() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test02598() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.setNotify(false);
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test02699() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries(minute0);
        Hour hour0 = minute0.getHour();
        timeSeries0.setMaximumItemCount(0);
        timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test027100() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test027101() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.setMaximumItemAge(0L);
        timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test028102() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test028103() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test028104() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test028105() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test029106() throws Throwable {
        Minute minute0 = new Minute();
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, "java.lang.Class", "java.lang.Class", class0);
        timeSeries0.update((RegularTimePeriod) null, (Number) 59);
    }

    @Test(timeout = 4000)
    public void test030107() throws Throwable {
        Second second0 = new Second();
        Class<Second> class0 = Second.class;
        TimeSeries timeSeries0 = new TimeSeries(second0, "Null 'start' argument.", "", class0);
        timeSeries0.update(59, (Number) 59);
    }

    @Test(timeout = 4000)
    public void test031108() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries(minute0);
        MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
        PropertyChangeListener propertyChangeListener0 = metalComboBoxUI0.createPropertyChangeListener();
        timeSeries0.addPropertyChangeListener(propertyChangeListener0);
        timeSeries0.setDomainDescription("FXx>Zd5FG:E_0INv");
    }

    @Test(timeout = 4000)
    public void test032109() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        Class<Integer> class0 = Integer.class;
        TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, class0);
        timeSeries0.removeAgedItems((-3466L), true);
    }

    @Test(timeout = 4000)
    public void test033110() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.getValue((-260));
    }

    @Test(timeout = 4000)
    public void test034111() throws Throwable {
        Year year0 = new Year();
        TimeSeries timeSeries0 = new TimeSeries(year0);
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
    }

    @Test(timeout = 4000)
    public void test035112() throws Throwable {
        MockDate mockDate0 = new MockDate(3, 3, (-746), (-746), (-746));
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        Week week0 = new Week(mockDate0, timeZone0, locale0);
        Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
        TimeSeries timeSeries0 = new TimeSeries(week0, class0);
        timeSeries0.getTimePeriod(3673);
    }

    @Test(timeout = 4000)
    public void test036113() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        LinkedList<TimeSeries> linkedList0 = new LinkedList<TimeSeries>();
        timeSeries0.data = (List) linkedList0;
        timeSeries0.getNextTimePeriod();
    }

    @Test(timeout = 4000)
    public void test037114() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        LinkedList<TimeSeries> linkedList0 = new LinkedList<TimeSeries>();
        timeSeries0.data = (List) linkedList0;
        linkedList0.add(timeSeries0);
        timeSeries0.getNextTimePeriod();
    }

    @Test(timeout = 4000)
    public void test038115() throws Throwable {
        Year year0 = new Year();
        Class<Hour> class0 = Hour.class;
        TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
        timeSeries0.getDataItem((RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test039116() throws Throwable {
        MockDate mockDate0 = new MockDate();
        TimeZone timeZone0 = TimeZone.getDefault();
        Day day0 = new Day(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.getDataItem((-1562));
    }

    @Test(timeout = 4000)
    public void test040117() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.delete((RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test041118() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.data = null;
        timeSeries0.delete((-1461), 999);
    }

    @Test(timeout = 4000)
    public void test042119() throws Throwable {
        Minute minute0 = new Minute();
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, "java.lang.Class", "org.jfree.data.time.FixedMillisecond", class0);
        timeSeries0.delete(2, 59);
    }

    @Test(timeout = 4000)
    public void test043120() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance(3);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        List list0 = timeSeries0.getItems();
        timeSeries0.data = list0;
        Year year0 = new Year();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    }

    @Test(timeout = 4000)
    public void test044121() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        LinkedList<TimeSeries> linkedList0 = new LinkedList<TimeSeries>();
        timeSeries0.data = (List) linkedList0;
        linkedList0.add(timeSeries0);
        Year year0 = new Year();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    }

    @Test(timeout = 4000)
    public void test045122() throws Throwable {
        Year year0 = new Year();
        Week week0 = new Week(9999, year0);
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.addAndOrUpdate((TimeSeries) null);
    }

    @Test(timeout = 4000)
    public void test046123() throws Throwable {
        Hour hour0 = new Hour();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 0);
        timeSeries0.add(timeSeriesDataItem0);
    }

    @Test(timeout = 4000)
    public void test047124() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.add((RegularTimePeriod) week0, (Number) 53, true);
    }

    @Test(timeout = 4000)
    public void test048125() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.data = null;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    }

    @Test(timeout = 4000)
    public void test049126() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.add((RegularTimePeriod) null, (Number) null, true);
    }

    @Test(timeout = 4000)
    public void test050127() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.add((RegularTimePeriod) null, (-1.0), true);
    }

    @Test(timeout = 4000)
    public void test051128() throws Throwable {
        Minute minute0 = new Minute();
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, "java.lang.Class", "java.lang.Class", class0);
        timeSeries0.add((RegularTimePeriod) minute0, (-2.147483648E9));
    }

    @Test(timeout = 4000)
    public void test052129() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries(minute0, "java.lang.Class", "java.lang.Class", (Class) null);
        timeSeries0.add((RegularTimePeriod) minute0, (double) 59);
    }

    @Test(timeout = 4000)
    public void test053130() throws Throwable {
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = null;
        timeSeries0 = new TimeSeries((Comparable) null, "", "", class0);
    }

    @Test(timeout = 4000)
    public void test054131() throws Throwable {
        Class<Integer> class0 = Integer.class;
        TimeSeries timeSeries0 = null;
        timeSeries0 = new TimeSeries((Comparable) null, class0);
    }

    @Test(timeout = 4000)
    public void test055132() throws Throwable {
        TimeSeries timeSeries0 = null;
        timeSeries0 = new TimeSeries((Comparable) null);
    }

    @Test(timeout = 4000)
    public void test056133() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        timeSeries0.createCopy(2, 29);
    }

    @Test(timeout = 4000)
    public void test057134() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.delete((-1500), (-1500));
    }

    @Test(timeout = 4000)
    public void test058135() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.removeAgedItems(false);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test058136() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.removeAgedItems(false);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test058137() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.removeAgedItems(false);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test058138() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.removeAgedItems(false);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test059139() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test059140() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test059141() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test059142() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test060143() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
        timeSeries0.add(timeSeriesDataItem0, true);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test060144() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
        timeSeries0.add(timeSeriesDataItem0, true);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test060145() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
        timeSeries0.add(timeSeriesDataItem0, true);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test060146() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
        timeSeries0.add(timeSeriesDataItem0, true);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test061147() throws Throwable {
        MockDate mockDate0 = new MockDate(0L);
        Millisecond millisecond0 = new Millisecond(mockDate0);
        TimeSeries timeSeries0 = new TimeSeries(millisecond0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(millisecond0, (Number) null);
        timeSeries0.add(timeSeriesDataItem0, false);
    }

    @Test(timeout = 4000)
    public void test062148() throws Throwable {
        MockDate mockDate0 = new MockDate(1439, 1713, 1439, 3, 13);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "", class0);
        timeSeries0.add((TimeSeriesDataItem) null, false);
    }

    @Test(timeout = 4000)
    public void test063149() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.getIndex((RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test064150() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test064151() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test064152() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test064153() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.getIndex(fixedMillisecond0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test065154() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test065155() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test065156() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test065157() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.getTimePeriodClass();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test066158() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        long long0 = timeSeries0.getMaximumItemAge();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test066159() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        long long0 = timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test066160() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        long long0 = timeSeries0.getMaximumItemAge();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test066161() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        long long0 = timeSeries0.getMaximumItemAge();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test067162() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.add((RegularTimePeriod) minute0, (double) (-3500), true);
    }

    @Test(timeout = 4000)
    public void test068163() throws Throwable {
        Class<Panel> class0 = Panel.class;
        TimeSeries timeSeries0 = new TimeSeries("You are attempting to add an observation for ", "[BD", (String) null, class0);
        String string0 = timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test068164() throws Throwable {
        Class<Panel> class0 = Panel.class;
        TimeSeries timeSeries0 = new TimeSeries("You are attempting to add an observation for ", "[BD", (String) null, class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test068165() throws Throwable {
        Class<Panel> class0 = Panel.class;
        TimeSeries timeSeries0 = new TimeSeries("You are attempting to add an observation for ", "[BD", (String) null, class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test068166() throws Throwable {
        Class<Panel> class0 = Panel.class;
        TimeSeries timeSeries0 = new TimeSeries("You are attempting to add an observation for ", "[BD", (String) null, class0);
        String string0 = timeSeries0.getRangeDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test069167() throws Throwable {
        MockDate mockDate0 = new MockDate(59L);
        TimeZone timeZone0 = TimeZone.getDefault();
        Hour hour0 = new Hour(mockDate0, timeZone0);
        TimeSeries timeSeries0 = new TimeSeries(hour0);
        timeSeries0.getValue(151);
    }

    @Test(timeout = 4000)
    public void test070168() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
        TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
        timeSeries0.getTimePeriod((-2387));
    }

    @Test(timeout = 4000)
    public void test071169() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.getDataItem(59);
    }

    @Test(timeout = 4000)
    public void test072170() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        timeSeries0.getItemCount();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test072171() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        timeSeries0.getItemCount();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test072172() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        timeSeries0.getItemCount();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test072173() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        timeSeries0.getItemCount();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test073174() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test073175() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        timeSeries0.hashCode();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test073176() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        timeSeries0.hashCode();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test073177() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        timeSeries0.hashCode();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test074178() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
        timeSeries1.setMaximumItemAge(1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test074179() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
        timeSeries1.setMaximumItemAge(1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test075181() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
        timeSeries1.setDomainDescription((String) null);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.equals((Object) timeSeries0);
    }

    @Test(timeout = 4000)
    public void test075182() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
        timeSeries1.setDomainDescription((String) null);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test076183() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries1 = new TimeSeries(minute0, "[", "", class0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
    }

    @Test(timeout = 4000)
    public void test076184() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries1 = new TimeSeries(minute0, "[", "", class0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test076185() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries1 = new TimeSeries(minute0, "[", "", class0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test076186() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries1 = new TimeSeries(minute0, "[", "", class0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test076187() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries1 = new TimeSeries(minute0, "[", "", class0);
        boolean boolean0 = timeSeries0.equals(timeSeries1);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test077188() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
        boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test077189() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
        boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test077190() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
        boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test077191() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
        boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
    }

    @Test(timeout = 4000)
    public void test077192() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
        boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test078194() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
        timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) week0.LAST_WEEK_IN_YEAR);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test079195() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
        timeSeries1.getItemCount();
    }

    @Test(timeout = 4000)
    public void test079196() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test079197() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test079198() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    }

    @Test(timeout = 4000)
    public void test079199() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test079200() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        RegularTimePeriod regularTimePeriod0 = day0.previous();
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test080201() throws Throwable {
        Week week0 = new Week();
        Class<Minute> class0 = Minute.class;
        RegularTimePeriod regularTimePeriod0 = week0.next();
        TimeSeries timeSeries0 = new TimeSeries(week0, class0);
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) week0);
    }

    @Test(timeout = 4000)
    public void test081202() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test082203() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test083204() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Quarter quarter0 = new Quarter(mockDate0);
        Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "s)~xX[|lsmF}\"lH@", "s)~xX[|lsmF}\"lH@", class0);
        timeSeries0.createCopy(Integer.MAX_VALUE, 4);
    }

    @Test(timeout = 4000)
    public void test084205() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.createCopy((-625), 0);
    }

    @Test(timeout = 4000)
    public void test085206() throws Throwable {
        Second second0 = new Second();
        TimeSeries timeSeries0 = new TimeSeries(second0);
        timeSeries0.delete(1073741824, 297);
    }

    @Test(timeout = 4000)
    public void test086207() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        timeSeries0.delete((RegularTimePeriod) minute0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test087208() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test087209() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test087210() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test087211() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test088212() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
        timeSeries0.add(timeSeriesDataItem0, false);
        timeSeries0.clear();
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test089213() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.clear();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test089214() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.clear();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test089215() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.clear();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test089216() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.clear();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test090217() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        timeSeries0.removeAgedItems(0L, true);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test091218() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.removeAgedItems((long) (-3500), false);
        timeSeries0.removeAgedItems(2032L, false);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test091219() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.removeAgedItems((long) (-3500), false);
        timeSeries0.removeAgedItems(2032L, false);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test091220() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.removeAgedItems((long) (-3500), false);
        timeSeries0.removeAgedItems(2032L, false);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test091221() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.removeAgedItems((long) (-3500), false);
        timeSeries0.removeAgedItems(2032L, false);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test092222() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance(3);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        timeSeries0.setMaximumItemCount(0);
        Year year0 = new Year();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test093223() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 1);
    }

    @Test(timeout = 4000)
    public void test094224() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        timeSeries1.addAndOrUpdate(timeSeries0);
        timeSeries1.getItemCount();
    }

    @Test(timeout = 4000)
    public void test095225() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test095226() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test095227() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test095228() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test095229() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        timeSeries1.getItemCount();
    }

    @Test(timeout = 4000)
    public void test095230() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test096231() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test096232() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test097233() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        MockRandom mockRandom0 = new MockRandom();
        BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test098234() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
        timeSeries0.add(timeSeriesDataItem0, false);
    }

    @Test(timeout = 4000)
    public void test099235() throws Throwable {
        MockDate mockDate0 = new MockDate((-1750L));
        Week week0 = new Week(mockDate0);
        Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
        TimeSeries timeSeries0 = new TimeSeries(week0, "FB6}c-sW?", "Key not found: ", class0);
        timeSeries0.add((TimeSeriesDataItem) null);
    }

    @Test(timeout = 4000)
    public void test100236() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.getValue((RegularTimePeriod) minute0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test100237() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.getValue((RegularTimePeriod) minute0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test100238() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.getValue((RegularTimePeriod) minute0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test100239() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.getValue((RegularTimePeriod) minute0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test101240() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.getValue((RegularTimePeriod) null);
    }

    @Test(timeout = 4000)
    public void test102241() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
        TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
        timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
        timeSeries1.getItemCount();
    }

    @Test(timeout = 4000)
    public void test102242() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
        TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
        timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test103243() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.TEN;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test104244() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.getTimePeriods();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test104245() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.getTimePeriods();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test104246() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.getTimePeriods();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test104247() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.getTimePeriods();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test105248() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        timeSeries0.getDataItem((RegularTimePeriod) day0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test106249() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.getDataItem((RegularTimePeriod) day0);
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test106250() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.getDataItem((RegularTimePeriod) day0);
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test106251() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.getDataItem((RegularTimePeriod) day0);
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test106252() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        timeSeries0.getDataItem((RegularTimePeriod) day0);
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test107253() throws Throwable {
        Year year0 = new Year();
        Week week0 = new Week(9999, year0);
        TimeSeries timeSeries0 = new TimeSeries(week0);
        timeSeries0.setMaximumItemAge((-1L));
    }

    @Test(timeout = 4000)
    public void test108254() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        Year year0 = new Year();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test108255() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        Year year0 = new Year();
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        timeSeries0.setMaximumItemCount(0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test109256() throws Throwable {
        Minute minute0 = new Minute();
        TimeSeries timeSeries0 = new TimeSeries(minute0);
        timeSeries0.setMaximumItemCount((-685));
    }

    @Test(timeout = 4000)
    public void test110257() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test110258() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test110259() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test110260() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
        TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test111261() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
    }

    @Test(timeout = 4000)
    public void test111263() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test111264() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test111265() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test111266() throws Throwable {
        Week week0 = new Week();
        TimeSeries timeSeries0 = new TimeSeries(week0);
        TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
        boolean boolean0 = timeSeries1.equals(timeSeries0);
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test112267() throws Throwable {
        Day day0 = new Day();
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        TimeSeries timeSeries0 = new TimeSeries(day0, class0);
        Short short0 = new Short((short) 305);
        timeSeries0.add((RegularTimePeriod) day0, (Number) short0);
    }

    @Test(timeout = 4000)
    public void test113268() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        timeSeries1.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test113269() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        timeSeries1.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test113270() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        timeSeries1.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test113271() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
        timeSeries1.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test113272() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    }

    @Test(timeout = 4000)
    public void test114273() throws Throwable {
        Minute minute0 = new Minute();
        Class<String> class0 = String.class;
        TimeSeries timeSeries0 = new TimeSeries(minute0, "java.lang.Class", "java.lang.Class", class0);
        timeSeries0.add((RegularTimePeriod) null, (-2.147483648E9));
    }

    @Test(timeout = 4000)
    public void test115274() throws Throwable {
        Day day0 = new Day();
        TimeSeries timeSeries0 = new TimeSeries(day0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        timeSeries0.getValue((RegularTimePeriod) day0);
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test116275() throws Throwable {
        SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
        Class<TimeSeries> class0 = TimeSeries.class;
        TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
        timeSeries0.getNextTimePeriod();
    }

    @Test(timeout = 4000)
    public void test117276() throws Throwable {
        Hour hour0 = new Hour();
        Minute minute0 = new Minute((-3500), hour0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
        TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
        timeSeries0.getTimePeriods();
        timeSeries0.getItemCount();
    }

    @Test(timeout = 4000)
    public void test118277() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        int int0 = timeSeries0.getMaximumItemCount();
        timeSeries0.getMaximumItemAge();
    }

    @Test(timeout = 4000)
    public void test118278() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        int int0 = timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test118279() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        int int0 = timeSeries0.getMaximumItemCount();
        timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test118280() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        int int0 = timeSeries0.getMaximumItemCount();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test119281() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 1997, (-1375), 3, 3);
        OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-211.3533), 295.78733, 0, (-211.3533), 820.5191593314);
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, class0);
        timeSeries0.update((-739), (Number) null);
    }

    @Test(timeout = 4000)
    public void test120282() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaximumItemCount();
    }

    @Test(timeout = 4000)
    public void test120283() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getRangeDescription();
    }

    @Test(timeout = 4000)
    public void test120284() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        String string0 = timeSeries0.getDomainDescription();
    }

    @Test(timeout = 4000)
    public void test120285() throws Throwable {
        Quarter quarter0 = new Quarter();
        Class<Minute> class0 = Minute.class;
        TimeSeries timeSeries0 = new TimeSeries(quarter0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod", class0);
        String string0 = timeSeries0.getDomainDescription();
        timeSeries0.getMaximumItemAge();
    }
}
