/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 14 23:36:39 GMT 2023
 */
package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli2.Argument;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.option.Switch;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.UrlValidator;
import org.apache.commons.cli2.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("Argument.too.many.values").when(listIterator0).next();
        doReturn("Argument.too.many.values").when(listIterator0).previous();
        NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.too.many.values", "Argument.too.many.values", 1, 1, 'i', 't', numberValidator0, "Argument.too.many.values", linkedList0, (-2908));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("Argument.too.many.values").when(listIterator0).next();
        doReturn("Argument.too.many.values").when(listIterator0).previous();
        NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.too.many.values", "Argument.too.many.values", 1, 1, 'i', 't', numberValidator0, "Argument.too.many.values", linkedList0, (-2908));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.missing.values", "", 6837, 1910, true);
        groupImpl0.getAnonymous();
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.missing.values", "", 6837, 1910, true);
        groupImpl0.getAnonymous();
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.missing.values", "", 6837, 1910, true);
        groupImpl0.getAnonymous();
        groupImpl0.getPreferredName();
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.missing.values", "", 6837, 1910, true);
        groupImpl0.getAnonymous();
        groupImpl0.getDescription();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 91, 91, true);
        int int0 = groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 91, 91, true);
        int int0 = groupImpl0.getMaximum();
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.too.many.values", "Argument.too.many.values", 1, 1, 'i', 't', numberValidator0, "Argument.too.many.values", linkedList0, (-2908));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
        linkedList0.offerLast(sourceDestArgument0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines(0, displaySetting0.ALL, (Comparator) null);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.too.many.values", "Argument.too.many.values", 1, 1, 'i', 't', numberValidator0, "Argument.too.many.values", linkedList0, (-2908));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
        linkedList0.offerLast(sourceDestArgument0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines(0, displaySetting0.ALL, (Comparator) null);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        LinkedList<SourceDestArgument> linkedList1 = new LinkedList<SourceDestArgument>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList1, "", "2K1gjZtPWHU89!H-+)", 2149, (-2255), false);
        linkedList0.add((Object) groupImpl0);
        GroupImpl groupImpl1 = new GroupImpl(linkedList0, "", "", (-2255), (-2255), false);
        String string0 = groupImpl1.toString();
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        LinkedList<SourceDestArgument> linkedList1 = new LinkedList<SourceDestArgument>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList1, "", "2K1gjZtPWHU89!H-+)", 2149, (-2255), false);
        linkedList0.add((Object) groupImpl0);
        GroupImpl groupImpl1 = new GroupImpl(linkedList0, "", "", (-2255), (-2255), false);
        String string0 = groupImpl1.toString();
    }

    @Test(timeout = 4000)
    public void test0512() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 97, 97, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 97, 97, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test0514() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 97, 97, false);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "(", "(", 1825, 1825, false);
        DefaultOption defaultOption0 = new DefaultOption("(", "(", false, "(", "(", linkedHashSet0, (Set) null, false, (Argument) null, groupImpl0, 1825);
        linkedList0.add(defaultOption0);
        GroupImpl groupImpl1 = new GroupImpl(linkedList0, "(", "(", 1825, 1825, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl1, linkedList0);
        boolean boolean0 = groupImpl1.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "(");
        linkedList0.contains(defaultOption0);
    }

    @Test(timeout = 4000)
    public void test0616() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "(", "(", 1825, 1825, false);
        DefaultOption defaultOption0 = new DefaultOption("(", "(", false, "(", "(", linkedHashSet0, (Set) null, false, (Argument) null, groupImpl0, 1825);
        linkedList0.add(defaultOption0);
        GroupImpl groupImpl1 = new GroupImpl(linkedList0, "(", "(", 1825, 1825, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl1, linkedList0);
        boolean boolean0 = groupImpl1.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "(");
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
        linkedList1.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList1, "", "-D", (-4288), (-1121), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Lo");
        linkedList1.contains(propertyOption0);
    }

    @Test(timeout = 4000)
    public void test0718() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
        linkedList1.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList1, "", "-D", (-4288), (-1121), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Lo");
    }

    @Test(timeout = 4000)
    public void test0819() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption("", "-D", (-4288));
        linkedList1.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList1, "", "-D", (-4288), (-1121), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Lo");
        linkedList1.size();
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedList<PropertyOption> linkedList1 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption("", "-D", (-4288));
        linkedList1.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList1, "", "-D", (-4288), (-1121), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Lo");
    }

    @Test(timeout = 4000)
    public void test0921() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-725), (-725), true);
        PropertyOption propertyOption0 = new PropertyOption("", "", (-725));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test0922() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-725), (-725), true);
        PropertyOption propertyOption0 = new PropertyOption("", "", (-725));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
    }

    @Test(timeout = 4000)
    public void test0923() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-725), (-725), true);
        PropertyOption propertyOption0 = new PropertyOption("", "", (-725));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test1024() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("9F?66Q|Y\"#*", "9F?66Q|Y\"#*", 97, 97, 'd', 'd', numberValidator0, "Unexpected.token", linkedList0, 97);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "9F?66Q|Y\"#*", "9F?66Q|Y\"#*", 97, 97, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "9F?66Q|Y\"#*");
        linkedList0.contains(argumentImpl0);
    }

    @Test(timeout = 4000)
    public void test1025() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("9F?66Q|Y\"#*", "9F?66Q|Y\"#*", 97, 97, 'd', 'd', numberValidator0, "Unexpected.token", linkedList0, 97);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "9F?66Q|Y\"#*", "9F?66Q|Y\"#*", 97, 97, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "9F?66Q|Y\"#*");
    }

    @Test(timeout = 4000)
    public void test1126() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true, false, false).when(listIterator0).hasNext();
        doReturn("Unexpected.token").when(listIterator0).next();
        doReturn("Unexpected.token").when(listIterator0).previous();
        DateValidator dateValidator0 = new DateValidator();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Unexpected.token", "w1n:9", 312, 312, 'g', 'j', dateValidator0, "w1n:9", linkedList0, 312);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Unexpected.token", "Unexpected.token", 312, 312, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        linkedList0.contains(argumentImpl0);
    }

    @Test(timeout = 4000)
    public void test1127() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true, false, false).when(listIterator0).hasNext();
        doReturn("Unexpected.token").when(listIterator0).next();
        doReturn("Unexpected.token").when(listIterator0).previous();
        DateValidator dateValidator0 = new DateValidator();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Unexpected.token", "w1n:9", 312, 312, 'g', 'j', dateValidator0, "w1n:9", linkedList0, 312);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Unexpected.token", "Unexpected.token", 312, 312, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test1228() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("Argument.too.many.values").when(listIterator0).next();
        doReturn("Argument.too.many.values").when(listIterator0).previous();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        PropertyOption propertyOption0 = new PropertyOption("Argument.too.many.values", "Argument.too.many.values", 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test1229() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(listIterator0).hasNext();
        doReturn("Argument.too.many.values").when(listIterator0).next();
        doReturn("Argument.too.many.values").when(listIterator0).previous();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        PropertyOption propertyOption0 = new PropertyOption("Argument.too.many.values", "Argument.too.many.values", 0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test1330() throws Throwable {
        LinkedList<Switch> linkedList0 = new LinkedList<Switch>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Unexpected.token", "Unexpected.token", 41, 41, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
    }

    @Test(timeout = 4000)
    public void test1431() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "2dK7j!21Y9#@- `g S", "2dK7j!21Y9#@- `g S", (-848), (-848), true);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.isRequired();
    }

    @Test(timeout = 4000)
    public void test1432() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "2dK7j!21Y9#@- `g S", "2dK7j!21Y9#@- `g S", (-848), (-848), true);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test1433() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "2dK7j!21Y9#@- `g S", "2dK7j!21Y9#@- `g S", (-848), (-848), true);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test1534() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "2dK7j!21Y9#@- `g S", "2dK7j!21Y9#@- `g S", (-848), (-848), true);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        writeableCommandLineImpl0.addOption(groupImpl0);
        groupImpl0.validate(writeableCommandLineImpl0);
    }

    @Test(timeout = 4000)
    public void test1635() throws Throwable {
        LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "kYk", "9<iME\nW^T", (-2596), 1882, false);
        linkedList0.add(groupImpl0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        writeableCommandLineImpl0.addOption(groupImpl0);
        // Undeclared exception!
        groupImpl0.validate(writeableCommandLineImpl0);
    }

    @Test(timeout = 4000)
    public void test1736() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        UrlValidator urlValidator0 = new UrlValidator();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", (-1), (-1), 'g', 'g', urlValidator0, " ", linkedList0, 181);
        linkedList0.offerLast(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " ", " ", 0, (-1), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
    }

    @Test(timeout = 4000)
    public void test1837() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 94, 94, true);
        LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
        groupImpl0.isRequired();
    }

    @Test(timeout = 4000)
    public void test1838() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 94, 94, true);
        LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test1839() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 94, 94, true);
        LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test1940() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        linkedList0.add(propertyOption0);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "-D", (-4288), (-1121), true);
        String string0 = groupImpl0.toString();
        linkedList0.contains(propertyOption0);
    }

    @Test(timeout = 4000)
    public void test1941() throws Throwable {
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        linkedList0.add(propertyOption0);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "-D", (-4288), (-1121), true);
        String string0 = groupImpl0.toString();
    }

    @Test(timeout = 4000)
    public void test2042() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.to.any.va>ues", "Argument.to.any.va>ues", (-843), (-843), 'A', 'A', numberValidator0, "z<q3VEG^`2IJecgC>l", linkedList1, (-843));
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.to.any.va>ues", "Argument.to.any.va>ues", (-843), (-843), true);
        String string0 = groupImpl0.toString();
        linkedList0.contains(argumentImpl0);
    }

    @Test(timeout = 4000)
    public void test2043() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.to.any.va>ues", "Argument.to.any.va>ues", (-843), (-843), 'A', 'A', numberValidator0, "z<q3VEG^`2IJecgC>l", linkedList1, (-843));
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.to.any.va>ues", "Argument.to.any.va>ues", (-843), (-843), true);
        String string0 = groupImpl0.toString();
    }

    @Test(timeout = 4000)
    public void test2144() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines(842, linkedHashSet0, comparator0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2145() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines(842, linkedHashSet0, comparator0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2146() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.too.many.values", "Argument.too.many.values", 842, 842, true);
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines(842, linkedHashSet0, comparator0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test2247() throws Throwable {
        LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.comm<ns.clO2.option.ArgumentItpl", "org.apache.comm<ns.clO2.option.ArgumentItpl", 233, (-3481), true);
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines((-4140), displaySetting0.ALL, comparator0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test2248() throws Throwable {
        LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.comm<ns.clO2.option.ArgumentItpl", "org.apache.comm<ns.clO2.option.ArgumentItpl", 233, (-3481), true);
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines((-4140), displaySetting0.ALL, comparator0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2249() throws Throwable {
        LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.comm<ns.clO2.option.ArgumentItpl", "org.apache.comm<ns.clO2.option.ArgumentItpl", 233, (-3481), true);
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines((-4140), displaySetting0.ALL, comparator0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2350() throws Throwable {
        LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, (-3481), false);
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        DisplaySetting displaySetting1 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        linkedList0.add(displaySetting1);
        groupImpl0.helpLines(176, displaySetting0.ALL, (Comparator) null);
    }

    @Test(timeout = 4000)
    public void test2451() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 1859, 1859, true);
        DefaultOption defaultOption0 = new DefaultOption(" (", " (", true, " (", " (", linkedHashSet0, (Set) null, true, (Argument) null, groupImpl0, 1859);
        linkedList0.add(defaultOption0);
        Option option0 = groupImpl0.findOption(" (");
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2452() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 1859, 1859, true);
        DefaultOption defaultOption0 = new DefaultOption(" (", " (", true, " (", " (", linkedHashSet0, (Set) null, true, (Argument) null, groupImpl0, 1859);
        linkedList0.add(defaultOption0);
        Option option0 = groupImpl0.findOption(" (");
    }

    @Test(timeout = 4000)
    public void test2453() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, " (", " (", 1859, 1859, true);
        DefaultOption defaultOption0 = new DefaultOption(" (", " (", true, " (", " (", linkedHashSet0, (Set) null, true, (Argument) null, groupImpl0, 1859);
        linkedList0.add(defaultOption0);
        Option option0 = groupImpl0.findOption(" (");
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2554() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "N4hr$9|djnLV!", "N4hr$9|djnLV!", 50, 50, false);
        ArgumentImpl argumentImpl0 = new ArgumentImpl("N4hr$9|djnLV!", "N4hr$9|djnLV!", 50, 50, 'Y', 'Y', (Validator) null, "N4hr$9|djnLV!", linkedList0, 50);
        linkedList0.add(argumentImpl0);
        groupImpl0.findOption("N4hr$9|djnLV!");
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2555() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "N4hr$9|djnLV!", "N4hr$9|djnLV!", 50, 50, false);
        ArgumentImpl argumentImpl0 = new ArgumentImpl("N4hr$9|djnLV!", "N4hr$9|djnLV!", 50, 50, 'Y', 'Y', (Validator) null, "N4hr$9|djnLV!", linkedList0, 50);
        linkedList0.add(argumentImpl0);
        groupImpl0.findOption("N4hr$9|djnLV!");
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2656() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "?'OC%f`oP%tU2-'.S", "?'OC%f`oP%tU2-'.S", 1, 1, true);
        PropertyOption propertyOption0 = new PropertyOption();
        groupImpl0.setParent(propertyOption0);
        String string0 = groupImpl0.toString();
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2657() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "?'OC%f`oP%tU2-'.S", "?'OC%f`oP%tU2-'.S", 1, 1, true);
        PropertyOption propertyOption0 = new PropertyOption();
        groupImpl0.setParent(propertyOption0);
        String string0 = groupImpl0.toString();
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2658() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "?'OC%f`oP%tU2-'.S", "?'OC%f`oP%tU2-'.S", 1, 1, true);
        PropertyOption propertyOption0 = new PropertyOption();
        groupImpl0.setParent(propertyOption0);
        String string0 = groupImpl0.toString();
    }

    @Test(timeout = 4000)
    public void test2759() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Misming.option", "Misming.option", 2399, 2399, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test2760() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Misming.option", "Misming.option", 2399, 2399, true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2861() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.to.any.va>ues", "Argument.to.any.va>ues", (-843), (-843), 'A', 'A', numberValidator0, "z<q3VEG^`2IJecgC>l", linkedList1, (-843));
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.to.any.va>ues", "Argument.to.any.va>ues", (-843), (-843), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        linkedList0.contains(argumentImpl0);
    }

    @Test(timeout = 4000)
    public void test2862() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getIntegerInstance();
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.to.any.va>ues", "Argument.to.any.va>ues", (-843), (-843), 'A', 'A', numberValidator0, "z<q3VEG^`2IJecgC>l", linkedList1, (-843));
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Argument.to.any.va>ues", "Argument.to.any.va>ues", (-843), (-843), true);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        groupImpl0.getMinimum();
    }
}
