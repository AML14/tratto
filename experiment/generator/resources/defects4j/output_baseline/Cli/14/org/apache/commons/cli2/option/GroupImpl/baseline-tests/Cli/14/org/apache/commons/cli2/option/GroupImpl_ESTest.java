/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 14 23:07:48 GMT 2023
 */
package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import org.apache.commons.cli2.Argument;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.option.Switch;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.Validator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DateValidator.date.OutOfRange", "^>Td)Y'jfHlw,D_", (-134), (-134));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        writeableCommandLineImpl0.addSwitch(groupImpl0, true);
        groupImpl0.getDescription();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DateValidator.date.OutOfRange", "^>Td)Y'jfHlw,D_", (-134), (-134));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        writeableCommandLineImpl0.addSwitch(groupImpl0, true);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DateValidator.date.OutOfRange", "^>Td)Y'jfHlw,D_", (-134), (-134));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        writeableCommandLineImpl0.addSwitch(groupImpl0, true);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DateValidator.date.OutOfRange", "^>Td)Y'jfHlw,D_", (-134), (-134));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        writeableCommandLineImpl0.addSwitch(groupImpl0, true);
        groupImpl0.getPreferredName();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Hcw|cN^aFv%#", "|qXI,R?/98tI60Nb", 982, 982);
        groupImpl0.getAnonymous();
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Hcw|cN^aFv%#", "|qXI,R?/98tI60Nb", 982, 982);
        groupImpl0.getAnonymous();
        groupImpl0.getPreferredName();
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Hcw|cN^aFv%#", "|qXI,R?/98tI60Nb", 982, 982);
        groupImpl0.getAnonymous();
        groupImpl0.getDescription();
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Hcw|cN^aFv%#", "|qXI,R?/98tI60Nb", 982, 982);
        groupImpl0.getAnonymous();
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, 0);
        int int0 = groupImpl0.getMaximum();
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, 0);
        int int0 = groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test0310() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", "DateValidator.date.OutOfRange", 1626, 1626, 'l', 'l', (Validator) null, ">>Td)'jfHlw,D_", linkedList0, 1626);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DateValidator.date.OutOfRange", ">>Td)'jfHlw,D_", (-134), (-134));
        groupImpl0.toString();
        linkedList0.contains(argumentImpl0);
    }

    @Test(timeout = 4000)
    public void test0311() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", "DateValidator.date.OutOfRange", 1626, 1626, 'l', 'l', (Validator) null, ">>Td)'jfHlw,D_", linkedList0, 1626);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DateValidator.date.OutOfRange", ">>Td)'jfHlw,D_", (-134), (-134));
        groupImpl0.toString();
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "yjdo_:x{", 62, 569);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "yjdo_:x{", 62, 569);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test0414() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "yjdo_:x{", 62, 569);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
    }

    @Test(timeout = 4000)
    public void test0515() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-1056), (-1056));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0516() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-1056), (-1056));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
    }

    @Test(timeout = 4000)
    public void test0617() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption("", "", 14);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", 14, 14);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "T|QhH<[\"t,Cj7|!");
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0618() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption("", "", 14);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", 14, 14);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "T|QhH<[\"t,Cj7|!");
    }

    @Test(timeout = 4000)
    public void test0719() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-1056), (-1056));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Passes properties and values to the application");
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0720() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", (-1056), (-1056));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Passes properties and values to the application");
    }

    @Test(timeout = 4000)
    public void test0821() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 1999, 1999);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        groupImpl0.getDescription();
    }

    @Test(timeout = 4000)
    public void test0822() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 1999, 1999);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        groupImpl0.getPreferredName();
    }

    @Test(timeout = 4000)
    public void test0823() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 1999, 1999);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
    }

    @Test(timeout = 4000)
    public void test0824() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 1999, 1999);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test0825() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 1999, 1999);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test0926() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("DateValidator.date.OutOfRange", "DateValidator.date.OutOfRange", 1626, 1626, 'l', 'l', (Validator) null, "DateValidator.date.OutOfRange", linkedList0, 1626);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DateValidator.date.OutOfRange", "^>Td)Y'jfHlw,D_", (-134), (-134));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "ecELT)");
        linkedList0.contains(argumentImpl0);
    }

    @Test(timeout = 4000)
    public void test0927() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("DateValidator.date.OutOfRange", "DateValidator.date.OutOfRange", 1626, 1626, 'l', 'l', (Validator) null, "DateValidator.date.OutOfRange", linkedList0, 1626);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DateValidator.date.OutOfRange", "^>Td)Y'jfHlw,D_", (-134), (-134));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "ecELT)");
    }

    @Test(timeout = 4000)
    public void test1028() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 95, 95);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("-D");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    }

    @Test(timeout = 4000)
    public void test1129() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        PropertyOption propertyOption1 = new PropertyOption("", "", (-1205));
        linkedList0.add(propertyOption1);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-1205), (-1205));
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("Passes properties and values to the application");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test1130() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        PropertyOption propertyOption1 = new PropertyOption("", "", (-1205));
        linkedList0.add(propertyOption1);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-1205), (-1205));
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("Passes properties and values to the application");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test1231() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 95, 95);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("-D");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test1232() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 95, 95);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("-D");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test1233() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 95, 95);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("-D");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        listIterator0.hasPrevious();
    }

    @Test(timeout = 4000)
    public void test1334() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test1335() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
        LinkedList<String> linkedList1 = new LinkedList<String>();
        linkedList1.add("");
        ListIterator<String> listIterator0 = linkedList1.listIterator();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test1436() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", "DateValidator.date.OutOfRange", 1626, 1626, 'l', 'l', (Validator) null, "WD vn", linkedList0, 1626);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DateValidator.date.OutOfRange", "^>Td)Y'jfHlw,D_", (-134), (-134));
        argumentImpl0.toString();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true, false, false).when(listIterator0).hasNext();
        doReturn("--").when(listIterator0).next();
        doReturn("DateValidator.date.OutOfRange").when(listIterator0).previous();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        linkedList0.contains(argumentImpl0);
    }

    @Test(timeout = 4000)
    public void test1437() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("", "DateValidator.date.OutOfRange", 1626, 1626, 'l', 'l', (Validator) null, "WD vn", linkedList0, 1626);
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "DateValidator.date.OutOfRange", "^>Td)Y'jfHlw,D_", (-134), (-134));
        argumentImpl0.toString();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
        doReturn(true, false, false).when(listIterator0).hasNext();
        doReturn("--").when(listIterator0).next();
        doReturn("DateValidator.date.OutOfRange").when(listIterator0).previous();
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test1538() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-363), (-363));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
        groupImpl0.getDescription();
    }

    @Test(timeout = 4000)
    public void test1539() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-363), (-363));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test1540() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-363), (-363));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test1541() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-363), (-363));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
        groupImpl0.getPreferredName();
    }

    @Test(timeout = 4000)
    public void test1642() throws Throwable {
        LinkedList<Command> linkedList0 = new LinkedList<Command>();
        LinkedHashSet<Switch> linkedHashSet0 = new LinkedHashSet<Switch>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "-^=mE?U6H#JG\"|.\\x", 93, 93);
        Command command0 = new Command("|", "-^=mE?U6H#JG\"|.\\x", linkedHashSet0, true, (Argument) null, groupImpl0, 33);
        linkedList0.add(command0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(command0, linkedList0);
        groupImpl0.validate(writeableCommandLineImpl0);
    }

    @Test(timeout = 4000)
    public void test1743() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "=*>cz@9R#W8%Q&d", "=*>cz@9R#W8%Q&d", (-45), (-45));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        linkedList0.offer(groupImpl0);
        // Undeclared exception!
        groupImpl0.validate(writeableCommandLineImpl0);
    }

    @Test(timeout = 4000)
    public void test1844() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-363), (-363));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        groupImpl0.validate(writeableCommandLineImpl0);
    }

    @Test(timeout = 4000)
    public void test1945() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "NMZ~J)|5'/3$<OP'9t]", "NMZ~J)|5'/3$<OP'9t]", 41, 41);
        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList1);
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        groupImpl0.validate(writeableCommandLineImpl0);
    }

    @Test(timeout = 4000)
    public void test2046() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "org.apache.commons.cli2.DisplaySetting", "org.apache.commons.cli2.option.OptionImpl", (-1409), (-1570));
        FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.option.OptionImpl", "org.apache.commons.cli2.option.OptionImpl", (-1409), (-1409), '1', '1', fileValidator0, "QIZ", linkedList0, (-1570));
        SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '\u0000', 's', "j~", linkedList0);
        linkedList0.add((ArgumentImpl) sourceDestArgument0);
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        GroupImpl groupImpl1 = new GroupImpl(linkedList0, "", "--", (-1570), (-1409));
        groupImpl1.validate(writeableCommandLineImpl0);
    }

    @Test(timeout = 4000)
    public void test2147() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Unexpected.token", "Unexpected.token", 0, 0);
        LinkedHashSet<GroupImpl> linkedHashSet0 = new LinkedHashSet<GroupImpl>();
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) null, "[Unexpected.token ()]");
    }

    @Test(timeout = 4000)
    public void test2248() throws Throwable {
        LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 285, 285);
        LinkedHashSet<Switch> linkedHashSet0 = new LinkedHashSet<Switch>();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2249() throws Throwable {
        LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 285, 285);
        LinkedHashSet<Switch> linkedHashSet0 = new LinkedHashSet<Switch>();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2350() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.addFirst(propertyOption0);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 0, 0);
        String string0 = groupImpl0.toString();
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2351() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.addFirst(propertyOption0);
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 0, 0);
        String string0 = groupImpl0.toString();
    }

    @Test(timeout = 4000)
    public void test2452() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
        LinkedHashSet<GroupImpl> linkedHashSet0 = new LinkedHashSet<GroupImpl>();
        List list0 = groupImpl0.helpLines(0, linkedHashSet0, (Comparator) null);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2453() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
        LinkedHashSet<GroupImpl> linkedHashSet0 = new LinkedHashSet<GroupImpl>();
        List list0 = groupImpl0.helpLines(0, linkedHashSet0, (Comparator) null);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2454() throws Throwable {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 0, 0);
        LinkedHashSet<GroupImpl> linkedHashSet0 = new LinkedHashSet<GroupImpl>();
        List list0 = groupImpl0.helpLines(0, linkedHashSet0, (Comparator) null);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2555() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "ks9<Au", "ks9<Au", 1116, 1116);
        List list0 = groupImpl0.helpLines(1116, displaySetting0.ALL, (Comparator) null);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test2556() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "ks9<Au", "ks9<Au", 1116, 1116);
        List list0 = groupImpl0.helpLines(1116, displaySetting0.ALL, (Comparator) null);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2557() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "ks9<Au", "ks9<Au", 1116, 1116);
        List list0 = groupImpl0.helpLines(1116, displaySetting0.ALL, (Comparator) null);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2658() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "ksucA'", "ksucA'", (-1759), (-1759));
        Comparator<DisplaySetting> comparator0 = (Comparator<DisplaySetting>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines((-1759), displaySetting0.ALL, comparator0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test2659() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "ksucA'", "ksucA'", (-1759), (-1759));
        Comparator<DisplaySetting> comparator0 = (Comparator<DisplaySetting>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines((-1759), displaySetting0.ALL, comparator0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2660() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
        PropertyOption propertyOption0 = new PropertyOption();
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "ksucA'", "ksucA'", (-1759), (-1759));
        Comparator<DisplaySetting> comparator0 = (Comparator<DisplaySetting>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        List list0 = groupImpl0.helpLines((-1759), displaySetting0.ALL, comparator0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2761() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-330), (-330));
        Option option0 = groupImpl0.findOption("-D");
    }

    @Test(timeout = 4000)
    public void test2762() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-330), (-330));
        Option option0 = groupImpl0.findOption("-D");
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2763() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-330), (-330));
        Option option0 = groupImpl0.findOption("-D");
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2864() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-330), (-330));
        groupImpl0.findOption("Passes properties and values to the application");
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2865() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-330), (-330));
        groupImpl0.findOption("Passes properties and values to the application");
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2966() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 3440, 3440);
        boolean boolean0 = groupImpl0.isRequired();
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test2967() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 3440, 3440);
        boolean boolean0 = groupImpl0.isRequired();
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test2968() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 3440, 3440);
        boolean boolean0 = groupImpl0.isRequired();
    }

    @Test(timeout = 4000)
    public void test3069() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-330), (-330));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        groupImpl0.getMinimum();
    }

    @Test(timeout = 4000)
    public void test3070() throws Throwable {
        LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
        PropertyOption propertyOption0 = PropertyOption.INSTANCE;
        linkedList0.add(propertyOption0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-330), (-330));
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        groupImpl0.getMaximum();
    }

    @Test(timeout = 4000)
    public void test3171() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("'", "'", 281, 281, 'o', 'o', numberValidator0, "'", linkedList0, 'o');
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "'", "Unexpected.token", '\u0000', '\u0000');
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        linkedList0.contains(argumentImpl0);
    }

    @Test(timeout = 4000)
    public void test3172() throws Throwable {
        LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
        NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
        ArgumentImpl argumentImpl0 = new ArgumentImpl("'", "'", 281, 281, 'o', 'o', numberValidator0, "'", linkedList0, 'o');
        linkedList0.add(argumentImpl0);
        GroupImpl groupImpl0 = new GroupImpl(linkedList0, "'", "Unexpected.token", '\u0000', '\u0000');
        WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
        groupImpl0.defaults(writeableCommandLineImpl0);
        groupImpl0.getDescription();
    }
}
