/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:49:41 GMT 2023
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.UnknownServiceException;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        HttpConnection.Response.execute((Connection.Request) null, (HttpConnection.Response) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        HttpConnection.Response.execute((Connection.Request) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        httpConnection_Response0.body();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        String[] stringArray0 = new String[12];
        stringArray0[0] = "Method must not be null";
        connection0.data(stringArray0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        connection0.postDataCharset("u<r-agent");
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        URL uRL0 = MockURL.getFileExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        connection0.header("", "-$A';FJS!u\"w");
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        URL uRL0 = MockURL.getFileExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        connection0.get();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        connection0.cookies((Map<String, String>) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        HttpConnection.connect((URL) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        httpConnection_KeyVal0.key();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        httpConnection_KeyVal0.key("S+RmM<L0ei%");
        httpConnection_KeyVal0.value();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        connection0.url((String) null);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.url(uRL0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        httpConnection_KeyVal0.value();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        httpConnection_KeyVal0.value("ROvnX.t@( 8s9\"v9~");
        httpConnection_KeyVal0.key();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        httpConnection_Response0.url((URL) null);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        httpConnection_KeyVal0.inputStream((InputStream) sequenceInputStream0);
        boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
        httpConnection_KeyVal0.key();
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("4#", "S+RmM<L0ei%");
        boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
        httpConnection_KeyVal0.value();
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        hashMap0.put((String) null, linkedList0);
        httpConnection_Response0.processResponseHeaders(hashMap0);
        httpConnection_Response0.contentType();
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
        LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
        Locale locale0 = new Locale("", "T*w+\"We6~Sc5F1", "");
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
        hashMap0.put("title", list0);
        httpConnection_Response0.processResponseHeaders(hashMap0);
        hashMap0.size();
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        connection0.execute();
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        connection0.maxBodySize((-1841796721));
    }

    @Test(timeout = 4000)
    public void test2024() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        Connection.Response connection_Response0 = httpConnection_Response0.header("org.jsoup.nodes.Entities$1", "org.jsoup.nodes.Entities$1");
        Connection.Response connection_Response1 = httpConnection_Response0.removeHeader("org.jsoup.nodes.Entities$1");
    }

    @Test(timeout = 4000)
    public void test2125() throws Throwable {
        URL uRL0 = MockURL.getFileExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Attributes attributes0 = new Attributes();
        Map<String, String> map0 = attributes0.dataset();
        Connection connection1 = connection0.cookies(map0);
    }

    @Test(timeout = 4000)
    public void test2226() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        String[] stringArray0 = new String[0];
        Connection connection1 = connection0.data(stringArray0);
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        String[] stringArray0 = new String[1];
        connection0.data(stringArray0);
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(78);
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("6=>eKn_pz5&~WdrR*<", "", (InputStream) pipedInputStream0);
        String string0 = httpConnection_KeyVal0.toString();
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("0;1EV{AD @<s@^-", "|$+kkY&NC1%.#p*F?U");
        String string0 = httpConnection_KeyVal0.value();
        httpConnection_KeyVal0.key();
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("0;1EV{AD @<s@^-", "|$+kkY&NC1%.#p*F?U");
        String string0 = httpConnection_KeyVal0.value();
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(78);
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("6=>eKn_pz5&~WdrR*<", "", (InputStream) pipedInputStream0);
        httpConnection_KeyVal0.inputStream();
        httpConnection_KeyVal0.value();
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("r55=Tq>J<Z)HU", "Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", (InputStream) null);
        String string0 = httpConnection_KeyVal0.key();
    }

    @Test(timeout = 4000)
    public void test2733() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("r55=Tq>J<Z)HU", "Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", (InputStream) null);
        String string0 = httpConnection_KeyVal0.key();
        httpConnection_KeyVal0.value();
    }

    @Test(timeout = 4000)
    public void test2834() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        int int0 = httpConnection_Response0.statusCode();
    }

    @Test(timeout = 4000)
    public void test2935() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        String string0 = httpConnection_Response0.charset();
    }

    @Test(timeout = 4000)
    public void test3036() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        httpConnection_Response0.bodyAsBytes();
    }

    @Test(timeout = 4000)
    public void test3137() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        String string0 = httpConnection_Response0.contentType();
    }

    @Test(timeout = 4000)
    public void test3238() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        String string0 = httpConnection_Response0.statusMessage();
    }

    @Test(timeout = 4000)
    public void test3339() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        httpConnection_Response0.parse();
    }

    @Test(timeout = 4000)
    public void test3440() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.referrer("user-agent");
    }

    @Test(timeout = 4000)
    public void test3541() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.header("Content-Encoding", "4p-ijQ'56@U6dQ");
    }

    @Test(timeout = 4000)
    public void test3642() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        connection_Request0.validateTLSCertificates();
    }

    @Test(timeout = 4000)
    public void test3643() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        connection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test3644() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        connection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test3645() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        connection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test3646() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        connection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test3647() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        connection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test3648() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Request connection_Request0 = connection0.request();
        connection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test3749() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection.Method connection_Method0 = Connection.Method.PATCH;
        Connection connection1 = connection0.method(connection_Method0);
    }

    @Test(timeout = 4000)
    public void test3850() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        connection0.data((String) null, (String) null);
    }

    @Test(timeout = 4000)
    public void test3951() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.timeout(48);
    }

    @Test(timeout = 4000)
    public void test4052() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        connection0.postDataCharset("put");
    }

    @Test(timeout = 4000)
    public void test4153() throws Throwable {
        HttpConnection.connect("`^Bp5z}U|}|We");
    }

    @Test(timeout = 4000)
    public void test4254() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.maxBodySize(48);
    }

    @Test(timeout = 4000)
    public void test4355() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        connection0.get();
    }

    @Test(timeout = 4000)
    public void test4456() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.cookie("user-agent", "[6fu2");
    }

    @Test(timeout = 4000)
    public void test4557() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        Connection.Response connection_Response0 = httpConnection_Response0.removeCookie("map");
    }

    @Test(timeout = 4000)
    public void test4658() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.validateTLSCertificates(true);
    }

    @Test(timeout = 4000)
    public void test4759() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.ignoreContentType(false);
    }

    @Test(timeout = 4000)
    public void test4860() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        connection0.execute();
    }

    @Test(timeout = 4000)
    public void test4961() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Parser parser0 = Parser.xmlParser();
        Connection connection1 = connection0.parser(parser0);
    }

    @Test(timeout = 4000)
    public void test5062() throws Throwable {
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.data("(m)", "j?oGgW_86|C", (InputStream) null);
    }

    @Test(timeout = 4000)
    public void test5163() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        connection0.post();
    }

    @Test(timeout = 4000)
    public void test5264() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.ignoreHttpErrors(true);
    }

    @Test(timeout = 4000)
    public void test5365() throws Throwable {
        URL uRL0 = MockURL.getFileExample();
        Connection connection0 = HttpConnection.connect(uRL0);
        Connection connection1 = connection0.followRedirects(false);
    }
}
