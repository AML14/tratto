/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 20:52:02 GMT 2023
 */
package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Whitelist.AttributeValue whitelist_AttributeValue0 = Whitelist.AttributeValue.valueOf("_uqcH");
        boolean boolean0 = whitelist_AttributeValue0.equals(whitelist_AttributeValue0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("O7WvU");
        whitelist_TagName0.toString();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Whitelist.Protocol whitelist_Protocol0 = Whitelist.Protocol.valueOf("rel");
        whitelist_Protocol0.toString();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("");
        whitelist_Protocol0.toString();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("<K-$_H");
        whitelist_AttributeValue0.toString();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Whitelist.AttributeKey whitelist_AttributeKey0 = new Whitelist.AttributeKey("{_$)7BwF@^1>Y5`ch/L");
        whitelist_AttributeKey0.toString();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Whitelist whitelist0 = new Whitelist();
        whitelist0.isSafeTag((String) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Whitelist whitelist0 = new Whitelist();
        whitelist0.isSafeAttribute("^(}3h;}>In!+;^v(A", (Element) null, (Attribute) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        Document document0 = Document.createShell("");
        Attribute attribute0 = Attribute.createFromEncoded("TpiR24~u4yA)l", "h1");
        whitelist0.isSafeAttribute((String) null, document0, attribute0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        whitelist0.getEnforcedAttributes((String) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Whitelist whitelist0 = new Whitelist();
        String[] stringArray0 = new String[7];
        whitelist0.addTags(stringArray0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Whitelist whitelist0 = Whitelist.basicWithImages();
        whitelist0.addEnforcedAttribute((String) null, "h5", "L'$Lu?`8<U~}wARG");
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Whitelist whitelist0 = new Whitelist();
        String[] stringArray0 = new String[9];
        whitelist0.addAttributes("'PF:vg&>96:qIxO", stringArray0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Whitelist whitelist0 = Whitelist.basicWithImages();
        Document document0 = Document.createShell("$VALUES");
        Attribute attribute0 = new Attribute("2ig", "");
        boolean boolean0 = whitelist0.isSafeAttribute("start", document0, attribute0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Whitelist whitelist0 = new Whitelist();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "X";
        stringArray0[1] = "h6";
        Whitelist whitelist1 = whitelist0.addTags(stringArray0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf("TpiR24~u4yA)l");
        Integer integer0 = new Integer((-1886));
        boolean boolean0 = whitelist_TagName0.equals(integer0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Whitelist.AttributeValue whitelist_AttributeValue0 = Whitelist.AttributeValue.valueOf("_uqcH");
        boolean boolean0 = whitelist_AttributeValue0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Whitelist whitelist0 = Whitelist.simpleText();
        whitelist0.addEnforcedAttribute("c!58'_:^z+=", "sup", "u#hQ$_,");
        Attributes attributes0 = whitelist0.getEnforcedAttributes("c!58'_:^z+=");
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        Attributes attributes0 = whitelist0.getEnforcedAttributes("CK}XQ3Th2");
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "h5";
        stringArray0[1] = "h5";
        stringArray0[2] = "h5";
        stringArray0[3] = "CK}XQ3Th2";
        stringArray0[4] = "h5";
        stringArray0[5] = "h5";
        stringArray0[6] = "h5";
        Whitelist whitelist1 = whitelist0.addAttributes("h5", stringArray0);
        whitelist0.addProtocols("h5", "]_zCs1k?4+h#BKv", stringArray0);
        Document document0 = new Document("(>!$A|]j=B");
        Attribute attribute0 = Attribute.createFromEncoded("h5", "ul");
        boolean boolean0 = whitelist1.isSafeAttribute("h5", document0, attribute0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        String[] stringArray0 = new String[7];
        stringArray0[0] = "h5";
        stringArray0[1] = "h5";
        stringArray0[2] = "h5";
        stringArray0[3] = "CK}XQ3Th2";
        stringArray0[4] = "h5";
        stringArray0[5] = "h5";
        stringArray0[6] = "h5";
        Whitelist whitelist1 = whitelist0.addAttributes("h5", stringArray0);
        Document document0 = new Document("(>!$A|]j=B");
        Attribute attribute0 = Attribute.createFromEncoded("h5", "ul");
        boolean boolean0 = whitelist1.isSafeAttribute("h5", document0, attribute0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        String[] stringArray0 = new String[5];
        stringArray0[0] = "org.jsoup.safety.whitelist$attributevalue";
        stringArray0[1] = "org.jsoup.safety.whitelist$attributevalue";
        stringArray0[2] = "org.jsoup.safety.whitelist$attributevalue";
        stringArray0[3] = "org.jsoup.safety.whitelist$attributevalue";
        stringArray0[4] = "org.jsoup.safety.whitelist$attributevalue";
        whitelist0.addAttributes("org.jsoup.safety.whitelist$attributevalue", stringArray0);
        Document document0 = Document.createShell("");
        Attribute attribute0 = Attribute.createFromEncoded("|C-NA31w$6Dy", "h1");
        boolean boolean0 = whitelist0.isSafeAttribute("org.jsoup.safety.whitelist$attributevalue", document0, attribute0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        boolean boolean0 = whitelist0.isSafeTag("KyJA)");
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        String[] stringArray0 = new String[7];
        whitelist0.addProtocols("blockquote", "Umacr", stringArray0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        Whitelist whitelist1 = whitelist0.addEnforcedAttribute("io|-9u4z{BPik$:", "io|-9u4z{BPik$:", "io|-9u4z{BPik$:");
        Whitelist whitelist2 = whitelist0.addEnforcedAttribute("io|-9u4z{BPik$:", "Congruent", "T{<2vT-C]5");
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Whitelist.AttributeKey whitelist_AttributeKey0 = Whitelist.AttributeKey.valueOf("6i!!Aix.t)");
        String string0 = whitelist_AttributeKey0.toString();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Whitelist whitelist0 = Whitelist.relaxed();
        String[] stringArray0 = new String[5];
        stringArray0[0] = "org.jsoup.safety.whitelist$attributevalue";
        stringArray0[1] = "org.jsoup.safety.whitelist$attributevalue";
        stringArray0[2] = "org.jsoup.safety.whitelist$attributevalue";
        stringArray0[3] = "org.jsoup.safety.whitelist$attributevalue";
        stringArray0[4] = "org.jsoup.safety.whitelist$attributevalue";
        Whitelist whitelist1 = whitelist0.addAttributes("org.jsoup.safety.whitelist$attributevalue", stringArray0);
        Whitelist whitelist2 = whitelist1.addAttributes("org.jsoup.safety.whitelist$attributevalue", stringArray0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Whitelist whitelist0 = Whitelist.basicWithImages();
        boolean boolean0 = whitelist0.isSafeTag("dl");
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Whitelist whitelist0 = Whitelist.basic();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "8J%cfbH4E/i}yUkedb";
        stringArray0[1] = "table";
        whitelist0.addProtocols("8J%cfbH4E/i}yUkedb", "table", stringArray0);
        Whitelist whitelist1 = whitelist0.addProtocols("8J%cfbH4E/i}yUkedb", "table", stringArray0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Whitelist whitelist0 = Whitelist.none();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Whitelist whitelist0 = Whitelist.simpleText();
        Whitelist whitelist1 = whitelist0.preserveRelativeLinks(true);
    }
}
