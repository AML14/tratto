/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 06:37:28 GMT 2023
 */
package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Element element0 = htmlTreeBuilder0.getHeadElement();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("isindex", (Element) null, "isindex", parser0);
        htmlTreeBuilder0.processStartTag("isindex");
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.inListItemScope("");
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("table", (Element) null, "table", parser0);
        htmlTreeBuilder0.processStartTag("table");
        boolean boolean0 = htmlTreeBuilder0.processStartTag("v");
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Element element0 = new Element("tr");
        List<Node> list0 = Parser.parseFragment("frame", element0, "tr");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.insertMarkerToFormattingElements();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("class", (Element) null, "class", parser0);
        boolean boolean0 = htmlTreeBuilder0.processStartTag("select");
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        String[] stringArray0 = new String[1];
        htmlTreeBuilder0.inScope(stringArray0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        String string0 = htmlTreeBuilder0.getBaseUri();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragment("colgroup", "colgroup");
        htmlTreeBuilder0.isInActiveFormattingElements(document0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.push((Element) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.isSpecial((Element) null);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("T>tr4<?A{:", "Z'@$a7VC");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("table", (Element) null, "table", parser0);
        htmlTreeBuilder0.processStartTag("table");
        boolean boolean0 = htmlTreeBuilder0.processStartTag("table");
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        htmlTreeBuilder0.clearStackToTableContext();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Element element0 = new Element("title");
        List<Node> list0 = Parser.parseFragment("title", element0, "title");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Element element0 = new Element("style");
        List<Node> list0 = Parser.parseFragment("style", element0, "style");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
        Tag tag0 = Tag.valueOf("script", parseSettings0);
        Element element0 = new Element(tag0, "noQuirks");
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("noQuirks", element0, "noQuirks", parser0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Element element0 = new Element("noscript");
        List<Node> list0 = Parser.parseFragment("noscript", element0, "noscript");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Element element0 = new Element("plaintext");
        List<Node> list0 = Parser.parseFragment("plaintext", element0, "plaintext");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("DoG`xhU<izQ:f+>h");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "DoG`xhU<izQ:f+>h", attributes0);
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("DoG`xhU<izQ:f+>h", formElement0, "DoG`xhU<izQ:f+>h", parser0);
        htmlTreeBuilder0.clearStackToTableRowContext();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("`<*gZl$Gv_n", (Element) null, "th", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        token_StartTag0.nameAttr("th", attributes0);
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        htmlTreeBuilder0.maybeSetBaseUri(element0);
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("`<*gZl$Gv_n", (Element) null, "th", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        token_StartTag0.nameAttr("th", attributes0);
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        htmlTreeBuilder0.maybeSetBaseUri(element0);
        element0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Element element0 = new Element("frameset");
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Parser parser1 = parser0.setTrackErrors(100);
        List<Node> list0 = parser1.parseFragmentInput("frameset", element0, "frameset");
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragment("Hr", "Hr");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("Hr", document0, "Hr", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("Hr", attributes0);
        token_StartTag1.selfClosing = true;
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        element0.isBlock();
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = new Document("W]C?QUKW:]-//0vj");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("W]C?QUKW:]-//0vj", document0, "W]C?QUKW:]-//0vj", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("W]C?QUKW:]-//0vj", attributes0);
        token_StartTag1.selfClosing = true;
        Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
        element0.hasParent();
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = new Document("tr");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("tr", document0, "tr", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("tr", attributes0);
        token_StartTag1.selfClosing = true;
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment(".", (Element) null, "InCaption", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(".", attributes0);
        FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
        formElement0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment(".", (Element) null, "InCaption", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(".", attributes0);
        FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
        formElement0.baseUri();
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("<![CDATA[:1URn3hG%pMz Gr)]]>", (Element) null, "<![CDATA[:1URn3hG%pMz Gr)]]>", parser0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        htmlTreeBuilder0.parseFragment("script", (Element) null, "script", parser0);
        htmlTreeBuilder0.processStartTag("script");
        Token.Character token_Character0 = new Token.Character();
        htmlTreeBuilder0.insert(token_Character0);
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment(":%s(%d)", (Element) null, "style", parser0);
        htmlTreeBuilder0.processStartTag("style");
        Token.Character token_Character0 = new Token.Character();
        htmlTreeBuilder0.insert(token_Character0);
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        Document document0 = Parser.parseBodyFragment("A:lmzfB-o|+{", "A:lmzfB-o|+{");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Elements elements0 = document0.getElementsContainingText("A:lmzfB-o|+{");
        htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
        htmlTreeBuilder0.aboveOnStack(document0);
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("isindex", (Element) null, "isindex", parser0);
        htmlTreeBuilder0.insertInFosterParent((Node) null);
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("th", (Element) null, "th", parser0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("th", (Element) null, "th", parser0);
        boolean boolean0 = htmlTreeBuilder0.removeFromStack((Element) null);
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("DoG`xhU<izQ:f+>h", (Element) null, "DoG`xhU<izQ:f+>h", parser0);
        htmlTreeBuilder0.popStackToClose("DoG`xhU<izQ:f+>h");
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        parser0.parseInput("]'eTe 1x6Jb5O#Xv|", "]'eTe 1x6Jb5O#Xv|");
        String[] stringArray0 = new String[1];
        stringArray0[0] = "]'eTe 1x6Jb5O#Xv|";
        htmlTreeBuilder0.popStackToClose(stringArray0);
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("9H@s& my2he^]");
        Element element0 = new Element(tag0, "|rRJDLJiC>/]GI");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("?ONYK", element0, "script", parser0);
        String[] stringArray0 = new String[3];
        stringArray0[1] = "?ONYK";
        stringArray0[2] = "html";
        htmlTreeBuilder0.popStackToClose(stringArray0);
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        parser0.parseInput("Should not be reachable", "Should not be reachable");
        htmlTreeBuilder0.popStackToBefore("Should not be reachable");
        boolean boolean0 = htmlTreeBuilder0.inButtonScope("Should not be reachable");
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("table", (Element) null, "table", parser0);
        htmlTreeBuilder0.insertStartTag("plaintext");
        htmlTreeBuilder0.popStackToBefore("plaintext");
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        ArrayList<Document> arrayList0 = new ArrayList<Document>();
        ArrayList<Element> arrayList1 = new ArrayList<Element>(arrayList0);
        htmlTreeBuilder0.stack = arrayList1;
        htmlTreeBuilder0.clearStackToTableBodyContext();
    }

    @Test(timeout = 4000)
    public void test4144() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = new Document("tr");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("tr", document0, "tr", parser0);
        htmlTreeBuilder0.clearStackToTableRowContext();
    }

    @Test(timeout = 4000)
    public void test4245() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = new Document("tr");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("tr", document0, "tr", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        token_StartTag0.nameAttr("tr", attributes0);
        htmlTreeBuilder0.insert(token_StartTag0);
        htmlTreeBuilder0.clearStackToTableRowContext();
    }

    @Test(timeout = 4000)
    public void test4346() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Document document0 = parser0.parseInput("rp", "rp");
        htmlTreeBuilder0.aboveOnStack(document0);
    }

    @Test(timeout = 4000)
    public void test4447() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Document document0 = parser0.parseInput("tfoot", "tfoot");
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("v[#HsZj5%", "v[#HsZj5%");
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("v[#HsZj5%", document0, "v[#HsZj5%", parser0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test4549() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("v[#HsZj5%", "v[#HsZj5%");
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("v[#HsZj5%", document0, "v[#HsZj5%", parser0);
        Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
        Token.StartTag token_StartTag0 = tokeniser0.startPending;
        Attributes attributes0 = new Attributes();
        token_StartTag0.nameAttr("v[#HsZj5%", attributes0);
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        htmlTreeBuilder0.insertOnStackAfter(element0, document0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test4650() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("", (Element) null, "", parser0);
        htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
    }

    @Test(timeout = 4000)
    public void test4751() throws Throwable {
        Document document0 = Parser.parseBodyFragment("A:lmzfB-o|+{", "A:lmzfB-o|+{");
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Elements elements0 = document0.getElementsContainingText("A:lmzfB-o|+{");
        htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
        htmlTreeBuilder0.replaceOnStack(document0, document0);
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        StringReader stringReader0 = new StringReader("-U*A/zT|");
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.initialiseParse(stringReader0, "dI]F?", parser0);
        htmlTreeBuilder0.resetInsertionMode();
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        Element element0 = new Element("select");
        element0.prepend("select");
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        Element element0 = new Element("td");
        List<Node> list0 = Parser.parseFragment("td", element0, "@-}7XNK3");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("`<*gZl$Gv_n", (Element) null, "th", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        token_StartTag0.nameAttr("th", attributes0);
        htmlTreeBuilder0.insert(token_StartTag0);
        htmlTreeBuilder0.resetInsertionMode();
    }

    @Test(timeout = 4000)
    public void test5256() throws Throwable {
        Element element0 = new Element("th");
        List<Node> list0 = Parser.parseFragment("th", element0, "th");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test5357() throws Throwable {
        Element element0 = new Element("tbody");
        List<Node> list0 = Parser.parseFragment("tbody", element0, "menu");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test5458() throws Throwable {
        Element element0 = new Element("thead");
        List<Node> list0 = Parser.parseFragment("thead", element0, "thead");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test5559() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        Tag tag0 = Tag.valueOf("tfoot");
        Element element0 = new Element(tag0, "tfoot");
        List<Node> list0 = htmlTreeBuilder0.parseFragment("tfoot", element0, "nosquirks", parser0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test5660() throws Throwable {
        Element element0 = new Element("colgroup");
        List<Node> list0 = Parser.parseFragment("th", element0, "th");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test5761() throws Throwable {
        Element element0 = new Element("table");
        List<Node> list0 = Parser.parseFragment("table", element0, "h]ko");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test5862() throws Throwable {
        Element element0 = new Element("head");
        List<Node> list0 = Parser.parseFragment("head", element0, "head");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test5963() throws Throwable {
        Element element0 = new Element("html");
        List<Node> list0 = Parser.parseFragment("_rU", element0, "_rU");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test6064() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("DoG`xhU<izQ:$+>h", (Element) null, "DoG`xhU<izQ:$+>h", parser0);
        htmlTreeBuilder0.resetInsertionMode();
    }

    @Test(timeout = 4000)
    public void test6165() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("~P;ovM", (Element) null, "~P;ovM", parser0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test6166() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("~P;ovM", (Element) null, "~P;ovM", parser0);
        boolean boolean0 = htmlTreeBuilder0.inScope("~P;ovM");
    }

    @Test(timeout = 4000)
    public void test6267() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Document document0 = parser0.parseInput("h6", "h6");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test6268() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Document document0 = parser0.parseInput("h6", "h6");
        htmlTreeBuilder0.processStartTag("h6");
        String[] stringArray0 = new String[4];
        stringArray0[1] = "h6";
        boolean boolean0 = htmlTreeBuilder0.inScope("O[%", stringArray0);
    }

    @Test(timeout = 4000)
    public void test6369() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        parser0.parseInput("Should not be reachable", "Should not be reachable");
        htmlTreeBuilder0.popStackToBefore("Should not be reachable");
        htmlTreeBuilder0.inSelectScope("Should not be reachable");
    }

    @Test(timeout = 4000)
    public void test6470() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("`<*gZl$Gv_n", (Element) null, "th", parser0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test6471() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("`<*gZl$Gv_n", (Element) null, "th", parser0);
        boolean boolean0 = htmlTreeBuilder0.inSelectScope("template");
    }

    @Test(timeout = 4000)
    public void test6572() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Document document0 = parser0.parseInput("body", "body");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test6573() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        Document document0 = parser0.parseInput("body", "body");
        boolean boolean0 = htmlTreeBuilder0.inSelectScope("body");
    }

    @Test(timeout = 4000)
    public void test6674() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        parser0.parseInput("rp", "rp");
        Token.StartTag token_StartTag0 = new Token.StartTag();
        CDataNode cDataNode0 = new CDataNode((String) null);
        Attributes attributes0 = cDataNode0.attributes();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("rp", attributes0);
        htmlTreeBuilder0.insert(token_StartTag1);
        htmlTreeBuilder0.generateImpliedEndTags("");
    }

    @Test(timeout = 4000)
    public void test6775() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = new Parser(htmlTreeBuilder0);
        parser0.parseInput("z", "z");
        Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
    }

    @Test(timeout = 4000)
    public void test6876() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("area");
        Element element0 = new Element(tag0, "area");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("area", element0, "area", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        htmlTreeBuilder0.reconstructFormattingElements();
    }

    @Test(timeout = 4000)
    public void test6977() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("area");
        Element element0 = new Element(tag0, "area");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("area", element0, "area", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        htmlTreeBuilder0.reconstructFormattingElements();
    }

    @Test(timeout = 4000)
    public void test7078() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("{[#HsZj5%", "{[#HsZj5%");
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("{[#HsZj5%", document0, "{[#HsZj5%", parser0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test7079() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("{[#HsZj5%", "{[#HsZj5%");
        Parser parser0 = Parser.htmlParser();
        List<Node> list0 = htmlTreeBuilder0.parseFragment("{[#HsZj5%", document0, "{[#HsZj5%", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test7180() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("AfterHead");
        Element element0 = new Element(tag0, "afterhead");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("afterhead", element0, "O U", parser0);
        CDataNode cDataNode0 = new CDataNode("nosquirks");
        Attributes attributes0 = cDataNode0.attributes();
        FormElement formElement0 = new FormElement(tag0, "2?xlb;}YQc", attributes0);
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
        formElement0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test7281() throws Throwable {
        Document document0 = Parser.parseBodyFragmentRelaxed("P.<S<:e*y!rY=*hxh", "ylnT=[7H{aPFeq");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test7382() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("{[#HsZj5%", "{[#HsZj5%");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("{[#HsZj5%", document0, "{[#HsZj5%", parser0);
        CharacterReader characterReader0 = htmlTreeBuilder0.reader;
        ParseErrorList parseErrorList0 = ParseErrorList.tracking(405);
        Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
        CDataNode cDataNode0 = new CDataNode("{[#HsZj5%");
        Attributes attributes0 = cDataNode0.attributes();
        Token.StartTag token_StartTag0 = tokeniser0.startPending;
        token_StartTag0.nameAttr("{[#HsZj5%", attributes0);
        Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.reconstructFormattingElements();
    }

    @Test(timeout = 4000)
    public void test7483() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Tag tag0 = Tag.valueOf("caption");
        Element element0 = new Element(tag0, "caption");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("?ONYK", element0, "caption", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
    }

    @Test(timeout = 4000)
    public void test7584() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("caption", (Element) null, "<Mz4 'M", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
    }

    @Test(timeout = 4000)
    public void test7685() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = htmlTreeBuilder0.getDocument();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("~P;ovM", (Element) null, "~P;ovM", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
    }

    @Test(timeout = 4000)
    public void test7786() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("~P;ovM", (Element) null, "~P;ovM", parser0);
        CDataNode cDataNode0 = new CDataNode("~P;ovM");
        Attributes attributes0 = cDataNode0.attributes();
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("~P;ovM", attributes0);
        Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
    }

    @Test(timeout = 4000)
    public void test7887() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Document document0 = Parser.parseBodyFragmentRelaxed("{[#HsZj5%", "{[#HsZj5%");
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("{[#HsZj5%", document0, "{[#HsZj5%", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        Element element0 = htmlTreeBuilder0.getActiveFormattingElement("{[#HsZj5%");
    }

    @Test(timeout = 4000)
    public void test7988() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.xmlParser();
        htmlTreeBuilder0.parseFragment("V:Q!l(<z=mV", (Element) null, "V:Q!l(<z=mV", parser0);
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        Element element0 = htmlTreeBuilder0.getActiveFormattingElement("V:Q!l(<z=mV");
    }

    @Test(timeout = 4000)
    public void test8089() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("hgrup", (Element) null, "hgrup", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("hgrup", attributes0);
        Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        Element element1 = htmlTreeBuilder0.getActiveFormattingElement("hgrup");
    }

    @Test(timeout = 4000)
    public void test8090() throws Throwable {
        HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
        Parser parser0 = Parser.htmlParser();
        htmlTreeBuilder0.parseFragment("hgrup", (Element) null, "hgrup", parser0);
        Token.StartTag token_StartTag0 = new Token.StartTag();
        Attributes attributes0 = new Attributes();
        Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("hgrup", attributes0);
        Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        Element element1 = htmlTreeBuilder0.getActiveFormattingElement("hgrup");
        element1.siblingIndex();
    }
}
