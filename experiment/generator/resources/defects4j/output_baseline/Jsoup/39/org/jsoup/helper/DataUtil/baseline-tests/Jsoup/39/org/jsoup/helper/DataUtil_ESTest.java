/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 21:35:11 GMT 2023
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
        Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, "(?i)\bcharset=s*(?:\"|')?([^s,;\"']*)", parser0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
        Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, "(?i)\bcharset=s*(?:\"|')?([^s,;\"']*)", parser0);
        document0.location();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-67), (byte) (-67));
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0, 0);
        Parser parser0 = Parser.htmlParser();
        Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, "defer", parser0);
        document0.location();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        DataUtil.readToByteBuffer((InputStream) null, 52);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        DataUtil.readToByteBuffer(mockFileInputStream0, 1234);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        DataUtil.readToByteBuffer((InputStream) null);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte) 1);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        DataUtil.readToByteBuffer(sequenceInputStream0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
        DataUtil.readToByteBuffer(bufferedInputStream0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        ByteBuffer byteBuffer0 = charset0.encode("");
        Parser parser0 = Parser.xmlParser();
        DataUtil.parseByteData(byteBuffer0, "multiple", "g?om +#`", parser0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        DataUtil.parseByteData((ByteBuffer) null, "[\"']", "[\"']", parser0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Parser parser0 = Parser.htmlParser();
        DataUtil.parseByteData((ByteBuffer) null, (String) null, "VQ/qUbu<b", parser0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        ByteBuffer byteBuffer0 = charset0.encode("");
        DataUtil.parseByteData(byteBuffer0, "", "amp", (Parser) null);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.xmlParser();
        DataUtil.load((InputStream) byteArrayInputStream0, "big", "big", parser0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.htmlParser();
        DataUtil.load((InputStream) byteArrayInputStream0, "m]0\"#[1w^^+,k'", (String) null, parser0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        DataUtil.load((InputStream) null, "Sj`W[4f}", "57A=bIz*i\"|3<sq", parser0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataUtil.load((InputStream) sequenceInputStream0, "", (String) null, (Parser) null);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-73), 1468);
        Parser parser0 = Parser.htmlParser();
        DataUtil.load((InputStream) byteArrayInputStream0, ".oju3g&J;", ".oju3g&J;", parser0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DataUtil.load((InputStream) byteArrayInputStream0, "inert", "inert");
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, 0);
        DataUtil.load((InputStream) byteArrayInputStream0, "4XDE[>+9", "");
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 1, (byte) 0);
        DataUtil.load((InputStream) byteArrayInputStream0, "", "");
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
        DataUtil.load((InputStream) sequenceInputStream0, "U.me~2\"aj1Fo.0RWD", (String) null);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        MockFile mockFile0 = new MockFile("org.jsoup.select.Evaluator$Attribute");
        File file0 = MockFile.createTempFile("M_VtDs4uMx6", "M_VtDs4uMx6", (File) mockFile0);
        DataUtil.load(file0, "M_VtDs4uMx6", "M_VtDs4uMx6");
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        MockFile mockFile0 = new MockFile("Dw/HV&+u`s", "Dw/HV&+u`s");
        File file0 = MockFile.createTempFile("Dw/HV&+u`s", "Dw/HV&+u`s", (File) mockFile0);
        DataUtil.load(file0, "Dw/HV&+u`s", "Dw/HV&+u`s");
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        DataUtil.load((File) null, "U\"(.s>>e#=*>", "U\"(.s>>e#=*>");
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("charset=");
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType((String) null);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("value");
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(sequenceInputStream0, 4857);
        byteBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0);
        byteBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        DataUtil.readToByteBuffer((InputStream) null, (-721));
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        File file0 = MockFile.createTempFile("value", "value");
        Document document0 = DataUtil.load(file0, "UTF-8", "_Y|UT");
        document0.location();
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        File file0 = MockFile.createTempFile("H(w:[2zrBD3", "H(w:[2zrBD3");
        DataUtil.load(file0, "", "charset=");
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        MockFile mockFile0 = new MockFile("M_VtDs4uMx6");
        DataUtil.load((File) mockFile0, "M_VtDs4uMx6", "M_VtDs4uMx6");
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        DataUtil.load((InputStream) null, "charset", "charset");
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
        DataUtil.load((InputStream) pushbackInputStream0, "", "", parser0);
    }
}
