/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 23:22:19 GMT 2023
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 85;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.xmlParser();
        DataUtil.parseInputStream(byteArrayInputStream0, "maxSize must be 0 (unlimited) or larger", "maxSize must be 0 (unlimited) or larger", parser0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        File file0 = MockFile.createTempFile("| $X'qj.yZvVVId", "L_M9hC>(^kV`V(7PK", (File) null);
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
        ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(mockFileInputStream0, 2675);
        byteBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = DataUtil.parseInputStream((InputStream) null, "{s :nRKS", "{s :nRKS", parser0);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Parser parser0 = Parser.xmlParser();
        Document document0 = DataUtil.load((InputStream) null, "B1{8D6O+?{Yyd8MDK", "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML", parser0);
        document0.location();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
        DataUtil.parseInputStream(byteArrayInputStream0, (String) null, "th", (Parser) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
        Parser parser0 = Parser.htmlParser();
        DataUtil.parseInputStream(pushbackInputStream0, "", "", parser0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        Parser parser0 = Parser.xmlParser();
        DataUtil.parseInputStream(pipedInputStream0, (String) null, ";RzBx", parser0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) (-56));
        DataUtil.load((InputStream) byteArrayInputStream0, (String) null, "map", (Parser) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
        DataUtil.load((InputStream) pushbackInputStream0, "'{t@(KG04Kq_<$ctRsQ", "'{t@(KG04Kq_<$ctRsQ");
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DataUtil.load((InputStream) pipedInputStream0, "", "");
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        DataUtil.load((File) null, "U\"(.s>>e#=*>", "U\"(.s>>e#=*>");
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        File file0 = MockFile.createTempFile("UTF-16", "qrsU(UVwya%h");
        DataUtil.load(file0, "}ToZN/#\"Hzslw/Ey>g", "}ToZN/#\"Hzslw/Ey>g");
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        MockFile mockFile0 = new MockFile("N mU\r irs");
        DataUtil.load((File) mockFile0, "charset", "N mU\r irs");
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
        DataUtil.crossStreams((InputStream) null, byteArrayOutputStream0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        DataUtil.crossStreams(pipedInputStream0, byteArrayOutputStream0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        DataUtil.readToByteBuffer((InputStream) null, 0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[1] = (byte) (-29);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        Parser parser0 = Parser.htmlParser();
        DataUtil.load((InputStream) byteArrayInputStream0, (String) null, (String) null, parser0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[0] = (byte) (-72);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DataUtil.load((InputStream) byteArrayInputStream0, "", ".f K#;m1veQ?,K1+V3");
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        String string0 = DataUtil.mimeBoundary();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("PUBLIC");
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType((String) null);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        String string0 = DataUtil.getCharsetFromContentType("charset=");
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
        DataUtil.readToByteBuffer(sequenceInputStream0, (-30));
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        Document document0 = DataUtil.load((InputStream) dataInputStream0, "UTF-16", "--------------------------------");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        File file0 = MockFile.createTempFile("EAjjvqAW3`yfhFko ", (String) null);
        Document document0 = DataUtil.load(file0, (String) null, "9xl8cN~IO2 d");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Document document0 = DataUtil.load((InputStream) null, "limitedQuirks", "limitedQuirks");
        document0.location();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
        DataUtil.crossStreams(bufferedInputStream0, (OutputStream) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        pipedOutputStream0.close();
        DataUtil.load((InputStream) pipedInputStream0, "CONTINUE", "maxSize must be 0 (unlimited) or larger", (Parser) null);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        File file0 = MockFile.createTempFile("y7:", "y7:");
        DataUtil.load(file0, "", "[\"']");
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        ByteBuffer byteBuffer0 = DataUtil.emptyByteBuffer();
        byteBuffer0.remaining();
    }
}
