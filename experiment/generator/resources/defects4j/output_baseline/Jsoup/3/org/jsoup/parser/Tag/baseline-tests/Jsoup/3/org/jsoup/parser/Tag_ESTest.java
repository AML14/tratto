/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 05:24:49 GMT 2023
 */
package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Tag_ESTest extends Tag_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Tag tag0 = Tag.valueOf("DFtik7iwk");
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Tag tag0 = Tag.valueOf("DFtik7iwk");
        tag0.getName();
        tag0.isData();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Tag tag0 = Tag.valueOf("DFtik7iwk");
        tag0.getName();
        tag0.preserveWhitespace();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Tag tag0 = Tag.valueOf("DFtik7iwk");
        tag0.getName();
        tag0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Tag tag0 = Tag.valueOf("DFtik7iwk");
        tag0.getName();
        tag0.isInline();
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Tag tag0 = Tag.valueOf("DFtik7iwk");
        tag0.getName();
        tag0.canContainBlock();
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Tag tag0 = Tag.valueOf("0");
        boolean boolean0 = tag0.canContainBlock();
        tag0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Tag tag0 = Tag.valueOf("0");
        boolean boolean0 = tag0.canContainBlock();
        tag0.isData();
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Tag tag0 = Tag.valueOf("0");
        boolean boolean0 = tag0.canContainBlock();
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Tag tag0 = Tag.valueOf("0");
        boolean boolean0 = tag0.canContainBlock();
        tag0.preserveWhitespace();
    }

    @Test(timeout = 4000)
    public void test0110() throws Throwable {
        Tag tag0 = Tag.valueOf("0");
        boolean boolean0 = tag0.canContainBlock();
        tag0.isInline();
    }

    @Test(timeout = 4000)
    public void test0211() throws Throwable {
        Tag tag0 = Tag.valueOf("title");
        boolean boolean0 = tag0.isData();
    }

    @Test(timeout = 4000)
    public void test0312() throws Throwable {
        Tag tag0 = Tag.valueOf("object");
        boolean boolean0 = tag0.preserveWhitespace();
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        Tag tag0 = Tag.valueOf("MBc");
        tag0.toString();
        tag0.isInline();
    }

    @Test(timeout = 4000)
    public void test0414() throws Throwable {
        Tag tag0 = Tag.valueOf("MBc");
        tag0.toString();
        tag0.canContainBlock();
    }

    @Test(timeout = 4000)
    public void test0415() throws Throwable {
        Tag tag0 = Tag.valueOf("MBc");
        tag0.toString();
        tag0.preserveWhitespace();
    }

    @Test(timeout = 4000)
    public void test0416() throws Throwable {
        Tag tag0 = Tag.valueOf("MBc");
        tag0.toString();
        tag0.isData();
    }

    @Test(timeout = 4000)
    public void test0417() throws Throwable {
        Tag tag0 = Tag.valueOf("MBc");
        tag0.toString();
        tag0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test0518() throws Throwable {
        Tag tag0 = Tag.valueOf(" at index: ");
        boolean boolean0 = tag0.isBlock();
    }

    @Test(timeout = 4000)
    public void test0519() throws Throwable {
        Tag tag0 = Tag.valueOf(" at index: ");
        boolean boolean0 = tag0.isBlock();
        tag0.canContainBlock();
    }

    @Test(timeout = 4000)
    public void test0520() throws Throwable {
        Tag tag0 = Tag.valueOf(" at index: ");
        boolean boolean0 = tag0.isBlock();
        tag0.isData();
    }

    @Test(timeout = 4000)
    public void test0521() throws Throwable {
        Tag tag0 = Tag.valueOf(" at index: ");
        boolean boolean0 = tag0.isBlock();
        tag0.preserveWhitespace();
    }

    @Test(timeout = 4000)
    public void test0522() throws Throwable {
        Tag tag0 = Tag.valueOf(" at index: ");
        boolean boolean0 = tag0.isBlock();
        tag0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test0623() throws Throwable {
        Tag tag0 = Tag.valueOf("THEAD");
        boolean boolean0 = tag0.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test0724() throws Throwable {
        Tag tag0 = Tag.valueOf("link");
        boolean boolean0 = tag0.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test0825() throws Throwable {
        Tag tag0 = Tag.valueOf("base");
        boolean boolean0 = tag0.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test0926() throws Throwable {
        Tag tag0 = Tag.valueOf("style");
        Tag tag1 = tag0.getImplicitParent();
    }

    @Test(timeout = 4000)
    public void test0927() throws Throwable {
        Tag tag0 = Tag.valueOf("style");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test0928() throws Throwable {
        Tag tag0 = Tag.valueOf("style");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
        tag1.toString();
    }

    @Test(timeout = 4000)
    public void test1029() throws Throwable {
        Tag tag0 = Tag.valueOf("dd");
        Tag tag1 = Tag.valueOf("dt");
        tag0.canContain(tag1);
        tag1.equals((Object) tag0);
    }

    @Test(timeout = 4000)
    public void test1030() throws Throwable {
        Tag tag0 = Tag.valueOf("dd");
        Tag tag1 = Tag.valueOf("dt");
        tag0.canContain(tag1);
        tag1.isData();
    }

    @Test(timeout = 4000)
    public void test1131() throws Throwable {
        Tag tag0 = Tag.valueOf("base");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test1132() throws Throwable {
        Tag tag0 = Tag.valueOf("base");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
        tag1.getName();
    }

    @Test(timeout = 4000)
    public void test1233() throws Throwable {
        Tag tag0 = Tag.valueOf("script");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
        tag1.toString();
    }

    @Test(timeout = 4000)
    public void test1234() throws Throwable {
        Tag tag0 = Tag.valueOf("script");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test1335() throws Throwable {
        Tag tag0 = Tag.valueOf("noscript");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test1336() throws Throwable {
        Tag tag0 = Tag.valueOf("noscript");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
        tag1.toString();
    }

    @Test(timeout = 4000)
    public void test1437() throws Throwable {
        Tag tag0 = Tag.valueOf("link");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test1438() throws Throwable {
        Tag tag0 = Tag.valueOf("link");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
        tag1.getName();
    }

    @Test(timeout = 4000)
    public void test1539() throws Throwable {
        Tag tag0 = Tag.valueOf("meta");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test1540() throws Throwable {
        Tag tag0 = Tag.valueOf("meta");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
        tag1.toString();
    }

    @Test(timeout = 4000)
    public void test1641() throws Throwable {
        Tag tag0 = Tag.valueOf("title");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test1642() throws Throwable {
        Tag tag0 = Tag.valueOf("title");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
        tag1.toString();
    }

    @Test(timeout = 4000)
    public void test1743() throws Throwable {
        Tag tag0 = Tag.valueOf("HEAD");
        boolean boolean0 = tag0.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test1744() throws Throwable {
        Tag tag0 = Tag.valueOf("HEAD");
        boolean boolean0 = tag0.canContain(tag0);
        tag0.isData();
    }

    @Test(timeout = 4000)
    public void test1845() throws Throwable {
        Tag tag0 = Tag.valueOf("object");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test1846() throws Throwable {
        Tag tag0 = Tag.valueOf("object");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.canContain(tag0);
        tag1.getName();
    }

    @Test(timeout = 4000)
    public void test1947() throws Throwable {
        Tag tag0 = Tag.valueOf("dd");
        Tag tag1 = Tag.valueOf("dt");
        boolean boolean0 = tag1.canContain(tag0);
        tag1.isData();
    }

    @Test(timeout = 4000)
    public void test1948() throws Throwable {
        Tag tag0 = Tag.valueOf("dd");
        Tag tag1 = Tag.valueOf("dt");
        boolean boolean0 = tag1.canContain(tag0);
        tag1.equals((Object) tag0);
    }

    @Test(timeout = 4000)
    public void test1949() throws Throwable {
        Tag tag0 = Tag.valueOf("dd");
        Tag tag1 = Tag.valueOf("dt");
        boolean boolean0 = tag1.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test2050() throws Throwable {
        Tag tag0 = Tag.valueOf("lb");
        Tag tag1 = Tag.valueOf("dt");
        boolean boolean0 = tag1.canContain(tag0);
        tag0.canContainBlock();
    }

    @Test(timeout = 4000)
    public void test2051() throws Throwable {
        Tag tag0 = Tag.valueOf("lb");
        Tag tag1 = Tag.valueOf("dt");
        boolean boolean0 = tag1.canContain(tag0);
        tag0.preserveWhitespace();
    }

    @Test(timeout = 4000)
    public void test2052() throws Throwable {
        Tag tag0 = Tag.valueOf("lb");
        Tag tag1 = Tag.valueOf("dt");
        boolean boolean0 = tag1.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test2053() throws Throwable {
        Tag tag0 = Tag.valueOf("lb");
        Tag tag1 = Tag.valueOf("dt");
        boolean boolean0 = tag1.canContain(tag0);
        tag0.isData();
    }

    @Test(timeout = 4000)
    public void test2054() throws Throwable {
        Tag tag0 = Tag.valueOf("lb");
        Tag tag1 = Tag.valueOf("dt");
        boolean boolean0 = tag1.canContain(tag0);
        tag0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2155() throws Throwable {
        Tag tag0 = Tag.valueOf("object");
        Tag tag1 = Tag.valueOf("dd");
        boolean boolean0 = tag1.canContain(tag0);
    }

    @Test(timeout = 4000)
    public void test2256() throws Throwable {
        Tag tag0 = Tag.valueOf("DL");
        boolean boolean0 = tag0.isInline();
    }

    @Test(timeout = 4000)
    public void test2357() throws Throwable {
        Tag tag0 = Tag.valueOf("The validated collection contains an element not of type ");
        boolean boolean0 = tag0.isInline();
        tag0.preserveWhitespace();
    }

    @Test(timeout = 4000)
    public void test2358() throws Throwable {
        Tag tag0 = Tag.valueOf("The validated collection contains an element not of type ");
        boolean boolean0 = tag0.isInline();
        tag0.canContainBlock();
    }

    @Test(timeout = 4000)
    public void test2359() throws Throwable {
        Tag tag0 = Tag.valueOf("The validated collection contains an element not of type ");
        boolean boolean0 = tag0.isInline();
    }

    @Test(timeout = 4000)
    public void test2360() throws Throwable {
        Tag tag0 = Tag.valueOf("The validated collection contains an element not of type ");
        boolean boolean0 = tag0.isInline();
        tag0.isData();
    }

    @Test(timeout = 4000)
    public void test2361() throws Throwable {
        Tag tag0 = Tag.valueOf("The validated collection contains an element not of type ");
        boolean boolean0 = tag0.isInline();
        tag0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2462() throws Throwable {
        Tag tag0 = Tag.valueOf("base");
        boolean boolean0 = tag0.isData();
    }

    @Test(timeout = 4000)
    public void test2563() throws Throwable {
        Tag tag0 = Tag.valueOf("html");
        Tag tag1 = tag0.getImplicitParent();
    }

    @Test(timeout = 4000)
    public void test2664() throws Throwable {
        Tag tag0 = Tag.valueOf("PARAM");
        boolean boolean0 = tag0.isValidParent(tag0);
    }

    @Test(timeout = 4000)
    public void test2765() throws Throwable {
        Tag tag0 = Tag.valueOf("html");
        boolean boolean0 = tag0.isValidParent(tag0);
    }

    @Test(timeout = 4000)
    public void test2866() throws Throwable {
        Tag tag0 = Tag.valueOf("ECP`FJm5-&");
        Tag tag1 = tag0.getImplicitParent();
    }

    @Test(timeout = 4000)
    public void test2867() throws Throwable {
        Tag tag0 = Tag.valueOf("ECP`FJm5-&");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.isValidParent(tag0);
        tag1.equals((Object) tag0);
    }

    @Test(timeout = 4000)
    public void test2868() throws Throwable {
        Tag tag0 = Tag.valueOf("ECP`FJm5-&");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.isValidParent(tag0);
        tag0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2869() throws Throwable {
        Tag tag0 = Tag.valueOf("ECP`FJm5-&");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.isValidParent(tag0);
        tag0.isData();
    }

    @Test(timeout = 4000)
    public void test2870() throws Throwable {
        Tag tag0 = Tag.valueOf("ECP`FJm5-&");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.isValidParent(tag0);
    }

    @Test(timeout = 4000)
    public void test2871() throws Throwable {
        Tag tag0 = Tag.valueOf("ECP`FJm5-&");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.isValidParent(tag0);
        tag0.canContainBlock();
    }

    @Test(timeout = 4000)
    public void test2872() throws Throwable {
        Tag tag0 = Tag.valueOf("ECP`FJm5-&");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.isValidParent(tag0);
        tag0.preserveWhitespace();
    }

    @Test(timeout = 4000)
    public void test2873() throws Throwable {
        Tag tag0 = Tag.valueOf("ECP`FJm5-&");
        Tag tag1 = tag0.getImplicitParent();
        boolean boolean0 = tag1.isValidParent(tag0);
        tag0.isInline();
    }

    @Test(timeout = 4000)
    public void test2974() throws Throwable {
        Tag tag0 = Tag.valueOf("n]XK");
        boolean boolean0 = tag0.equals((Object) null);
        tag0.canContainBlock();
    }

    @Test(timeout = 4000)
    public void test2975() throws Throwable {
        Tag tag0 = Tag.valueOf("n]XK");
        boolean boolean0 = tag0.equals((Object) null);
        tag0.preserveWhitespace();
    }

    @Test(timeout = 4000)
    public void test2976() throws Throwable {
        Tag tag0 = Tag.valueOf("n]XK");
        boolean boolean0 = tag0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test2977() throws Throwable {
        Tag tag0 = Tag.valueOf("n]XK");
        boolean boolean0 = tag0.equals((Object) null);
        tag0.isBlock();
    }

    @Test(timeout = 4000)
    public void test2978() throws Throwable {
        Tag tag0 = Tag.valueOf("n]XK");
        boolean boolean0 = tag0.equals((Object) null);
        tag0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2979() throws Throwable {
        Tag tag0 = Tag.valueOf("n]XK");
        boolean boolean0 = tag0.equals((Object) null);
        tag0.isData();
    }

    @Test(timeout = 4000)
    public void test3080() throws Throwable {
        Tag tag0 = Tag.valueOf("]XK");
        boolean boolean0 = tag0.equals("]XK");
        tag0.isData();
    }

    @Test(timeout = 4000)
    public void test3081() throws Throwable {
        Tag tag0 = Tag.valueOf("]XK");
        boolean boolean0 = tag0.equals("]XK");
        tag0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test3082() throws Throwable {
        Tag tag0 = Tag.valueOf("]XK");
        boolean boolean0 = tag0.equals("]XK");
        tag0.isInline();
    }

    @Test(timeout = 4000)
    public void test3083() throws Throwable {
        Tag tag0 = Tag.valueOf("]XK");
        boolean boolean0 = tag0.equals("]XK");
        tag0.preserveWhitespace();
    }

    @Test(timeout = 4000)
    public void test3084() throws Throwable {
        Tag tag0 = Tag.valueOf("]XK");
        boolean boolean0 = tag0.equals("]XK");
    }

    @Test(timeout = 4000)
    public void test3085() throws Throwable {
        Tag tag0 = Tag.valueOf("]XK");
        boolean boolean0 = tag0.equals("]XK");
        tag0.canContainBlock();
    }

    @Test(timeout = 4000)
    public void test3186() throws Throwable {
        Tag tag0 = Tag.valueOf("BR");
        Tag tag1 = Tag.valueOf("script");
        boolean boolean0 = tag0.equals(tag1);
    }

    @Test(timeout = 4000)
    public void test3287() throws Throwable {
        Tag tag0 = Tag.valueOf("Te valQQhteN exreso isflse");
        boolean boolean0 = tag0.isValidParent(tag0);
        tag0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test3288() throws Throwable {
        Tag tag0 = Tag.valueOf("Te valQQhteN exreso isflse");
        boolean boolean0 = tag0.isValidParent(tag0);
    }

    @Test(timeout = 4000)
    public void test3289() throws Throwable {
        Tag tag0 = Tag.valueOf("Te valQQhteN exreso isflse");
        boolean boolean0 = tag0.isValidParent(tag0);
        tag0.preserveWhitespace();
    }

    @Test(timeout = 4000)
    public void test3290() throws Throwable {
        Tag tag0 = Tag.valueOf("Te valQQhteN exreso isflse");
        boolean boolean0 = tag0.isValidParent(tag0);
        tag0.canContainBlock();
    }

    @Test(timeout = 4000)
    public void test3291() throws Throwable {
        Tag tag0 = Tag.valueOf("Te valQQhteN exreso isflse");
        boolean boolean0 = tag0.isValidParent(tag0);
        tag0.isBlock();
    }

    @Test(timeout = 4000)
    public void test3292() throws Throwable {
        Tag tag0 = Tag.valueOf("Te valQQhteN exreso isflse");
        boolean boolean0 = tag0.isValidParent(tag0);
        tag0.isData();
    }

    @Test(timeout = 4000)
    public void test3393() throws Throwable {
        Tag tag0 = Tag.valueOf("The validated expression is false");
        Tag tag1 = Tag.valueOf("The validated expression is false");
        boolean boolean0 = tag1.equals(tag0);
        tag1.preserveWhitespace();
    }

    @Test(timeout = 4000)
    public void test3394() throws Throwable {
        Tag tag0 = Tag.valueOf("The validated expression is false");
        Tag tag1 = Tag.valueOf("The validated expression is false");
        boolean boolean0 = tag1.equals(tag0);
        tag1.isEmpty();
    }

    @Test(timeout = 4000)
    public void test3395() throws Throwable {
        Tag tag0 = Tag.valueOf("The validated expression is false");
        Tag tag1 = Tag.valueOf("The validated expression is false");
        boolean boolean0 = tag1.equals(tag0);
        tag1.isData();
    }

    @Test(timeout = 4000)
    public void test3396() throws Throwable {
        Tag tag0 = Tag.valueOf("The validated expression is false");
        Tag tag1 = Tag.valueOf("The validated expression is false");
        boolean boolean0 = tag1.equals(tag0);
        tag1.canContainBlock();
    }

    @Test(timeout = 4000)
    public void test3397() throws Throwable {
        Tag tag0 = Tag.valueOf("The validated expression is false");
        Tag tag1 = Tag.valueOf("The validated expression is false");
        boolean boolean0 = tag1.equals(tag0);
    }

    @Test(timeout = 4000)
    public void test3398() throws Throwable {
        Tag tag0 = Tag.valueOf("The validated expression is false");
        Tag tag1 = Tag.valueOf("The validated expression is false");
        boolean boolean0 = tag1.equals(tag0);
        tag1.isBlock();
    }

    @Test(timeout = 4000)
    public void test3499() throws Throwable {
        Tag tag0 = Tag.valueOf("link");
        tag0.hashCode();
    }

    @Test(timeout = 4000)
    public void test35100() throws Throwable {
        Tag tag0 = Tag.valueOf("r[zmHb.(TH");
        tag0.hashCode();
        tag0.preserveWhitespace();
    }

    @Test(timeout = 4000)
    public void test35101() throws Throwable {
        Tag tag0 = Tag.valueOf("r[zmHb.(TH");
        tag0.hashCode();
        tag0.isInline();
    }

    @Test(timeout = 4000)
    public void test35102() throws Throwable {
        Tag tag0 = Tag.valueOf("r[zmHb.(TH");
        tag0.hashCode();
        tag0.isData();
    }

    @Test(timeout = 4000)
    public void test36103() throws Throwable {
        Tag tag0 = Tag.valueOf("FORM");
        tag0.hashCode();
    }
}
