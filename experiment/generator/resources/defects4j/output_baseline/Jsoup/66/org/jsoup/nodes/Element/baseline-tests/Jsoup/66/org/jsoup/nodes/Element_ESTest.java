/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 22:46:42 GMT 2023
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Element_ESTest extends Element_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Document document0 = new Document("Mm`");
        document0.normalise();
        Node[] nodeArray0 = new Node[1];
        document0.insertChildren((-1), nodeArray0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Document document0 = Document.createShell("hL}");
        LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
        Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Document document0 = new Document("$mQCi.=");
        document0.nodelistChanged();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Document document0 = Document.createShell("option[selected]");
        document0.ensureChildNodes();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.htmlDefault;
        Tag tag0 = Tag.valueOf("textarea", parseSettings0);
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "textarea", attributes0);
        element0.doSetBaseUri(":K");
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.body();
        element0.html("html");
        element0.wrap("id");
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Document document0 = Document.createShell("");
        Element element0 = document0.val("[CDATA[");
        element0.nodeName();
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        Document document0 = Document.createShell("d2<)");
        Element element0 = document0.head();
        Element element1 = element0.toggleClass("d2<)");
        element1.baseUri();
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        Document document0 = Document.createShell("#");
        Element element0 = document0.createElement("#");
        Element element1 = element0.toggleClass("");
        element1.baseUri();
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        Document document0 = new Document("head");
        document0.toString();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        Document document0 = Document.createShell("head");
        document0.append("head");
        document0.text();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        Document document0 = Document.createShell("");
        Element element0 = document0.tagName("class");
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        Document document0 = Document.createShell("br");
        Element element0 = document0.head();
        element0.tag();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        Document document0 = Document.createShell("");
        Element element0 = document0.selectFirst("meta[charset]");
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        Document document0 = Document.createShell("`");
        document0.select("BeforeDoctypeSystemIdentifier");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        Document document0 = Document.createShell("R\"'!U|t>ly1&l");
        Element element0 = document0.body();
        Element element1 = element0.removeClass("missing semicolon");
        element1.baseUri();
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        Document document0 = Document.createShell("");
        Element element0 = document0.removeClass("");
        element0.tagName();
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        Document document0 = Document.createShell("}X");
        document0.siblingIndex = 32;
        Element element0 = document0.prependText("ScriptDataEscapeStartDash");
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        Document document0 = Document.createShell("pGlJ?V;Y>]b");
        Element element0 = document0.prependElement("3gKWnzqyt'RR~#dx.");
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        Document document0 = Document.createShell("ti{");
        document0.appendTo(document0);
        TextNode textNode0 = TextNode.createFromEncoded("B_zS");
        Element element0 = document0.prependChild(textNode0);
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        Document document0 = Document.createShell("Split offset must be not be negative");
        Element element0 = document0.head();
        Element element1 = element0.prependChild(document0);
        element1.baseUri();
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        Element element0 = new Element(" wjTv/A*$la5L>]M");
        XmlDeclaration xmlDeclaration0 = new XmlDeclaration(" wjTv/A*$la5L>]M", true);
        Element element1 = element0.prependChild(xmlDeclaration0);
        element1.nodeName();
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element");
        Element element0 = document0.body();
        element0.prepend("org.jsoup.nodes.Element");
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        Document document0 = Document.createShell(".");
        Element element0 = document0.body();
        Elements elements0 = element0.parents();
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test02324() throws Throwable {
        Document document0 = Document.createShell(".");
        Element element0 = document0.body();
        Elements elements0 = element0.parents();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test02425() throws Throwable {
        Document document0 = Document.createShell("ti{");
        document0.appendTo(document0);
        Element element0 = document0.lastElementSibling();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test02526() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.body();
        Element element1 = element0.wrap("id");
        element0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test02527() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.body();
        Element element1 = element0.wrap("id");
        Element element2 = element1.lastElementSibling();
    }

    @Test(timeout = 4000)
    public void test02628() throws Throwable {
        Document document0 = Document.createShell("%<)");
        Element element0 = document0.head();
        element0.isBlock();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test02629() throws Throwable {
        Document document0 = Document.createShell("%<)");
        Element element0 = document0.head();
        element0.isBlock();
        element0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test02730() throws Throwable {
        Document document0 = new Document("4S9!svdS");
        Document document1 = document0.normalise();
        Element element0 = document1.body();
        Element element1 = element0.tagName("4S9!svdS");
        Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
        boolean boolean0 = element1.is((Evaluator) evaluator_IsLastOfType0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test02731() throws Throwable {
        Document document0 = new Document("4S9!svdS");
        Document document1 = document0.normalise();
        Element element0 = document1.body();
        Element element1 = element0.tagName("4S9!svdS");
        Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
        boolean boolean0 = element1.is((Evaluator) evaluator_IsLastOfType0);
    }

    @Test(timeout = 4000)
    public void test02832() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.is("xmp");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test02833() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.is("xmp");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test02934() throws Throwable {
        Document document0 = new Document("Mm`");
        Node[] nodeArray0 = new Node[1];
        TextNode textNode0 = new TextNode("N03|+4fzcm~2`", ":#4]");
        nodeArray0[0] = (Node) textNode0;
        Element element0 = document0.insertChildren((-1), nodeArray0);
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test03035() throws Throwable {
        Element element0 = new Element("%z<=L)(/");
        Element element1 = element0.html("");
    }

    @Test(timeout = 4000)
    public void test03136() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.body();
        element0.html();
        element0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test03137() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.body();
        element0.html();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test03238() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element", parseSettings0);
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "org.jsoup.nodes.Element", attributes0);
        boolean boolean0 = element0.hasAttributes();
    }

    @Test(timeout = 4000)
    public void test03239() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element", parseSettings0);
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "org.jsoup.nodes.Element", attributes0);
        boolean boolean0 = element0.hasAttributes();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test03340() throws Throwable {
        Document document0 = new Document("head");
        document0.hasAttributes();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test03441() throws Throwable {
        Document document0 = Document.createShell(".");
        Pattern pattern0 = Pattern.compile(".", 4171);
        document0.getElementsMatchingText(pattern0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test03442() throws Throwable {
        Document document0 = Document.createShell(".");
        Pattern pattern0 = Pattern.compile(".", 4171);
        document0.getElementsMatchingText(pattern0);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test03543() throws Throwable {
        Document document0 = new Document("");
        Elements elements0 = document0.getElementsMatchingText("");
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test03644() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("0r>", parseSettings0);
        Element element0 = new Element(tag0, "0r>");
        Pattern pattern0 = Pattern.compile(":lt(%d)", 58);
        element0.getElementsMatchingOwnText(pattern0);
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test03745() throws Throwable {
        Pattern pattern0 = Pattern.compile("");
        Document document0 = Document.createShell("class");
        document0.getElementsMatchingOwnText(pattern0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test03746() throws Throwable {
        Pattern pattern0 = Pattern.compile("");
        Document document0 = Document.createShell("class");
        document0.getElementsMatchingOwnText(pattern0);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test03847() throws Throwable {
        Document document0 = new Document("I7dK|bYjqyiQg6*");
        Elements elements0 = document0.getElementsMatchingOwnText("head");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test03848() throws Throwable {
        Document document0 = new Document("I7dK|bYjqyiQg6*");
        Elements elements0 = document0.getElementsMatchingOwnText("head");
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test03949() throws Throwable {
        Document document0 = Document.createShell("d2<)");
        document0.getElementsContainingText("");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test03950() throws Throwable {
        Document document0 = Document.createShell("d2<)");
        document0.getElementsContainingText("");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test04051() throws Throwable {
        Document document0 = Document.createShell("");
        document0.getElementsContainingOwnText("");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test04152() throws Throwable {
        Document document0 = new Document(" ");
        document0.getElementsByIndexLessThan(0);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test04253() throws Throwable {
        Document document0 = Document.createShell("{z>@Ha{CVQ}");
        Elements elements0 = document0.getElementsByIndexGreaterThan((-42));
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test04254() throws Throwable {
        Document document0 = Document.createShell("{z>@Ha{CVQ}");
        Elements elements0 = document0.getElementsByIndexGreaterThan((-42));
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test04255() throws Throwable {
        Document document0 = Document.createShell("{z>@Ha{CVQ}");
        Elements elements0 = document0.getElementsByIndexGreaterThan((-42));
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test04356() throws Throwable {
        ParseSettings parseSettings0 = new ParseSettings(false, false);
        Tag tag0 = Tag.valueOf("checkbox", parseSettings0);
        Comment comment0 = new Comment("details", "Vyk~L~(LGcJ#7J4");
        Attributes attributes0 = comment0.attributes();
        FormElement formElement0 = new FormElement(tag0, "checkbox", attributes0);
        formElement0.getElementsByAttributeValueContaining("Vyk~L~(LGcJ#7J4", "checkbox");
        formElement0.baseUri();
    }

    @Test(timeout = 4000)
    public void test04457() throws Throwable {
        Document document0 = Document.createShell("}X");
        document0.getElementsByAttribute("#root");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test04458() throws Throwable {
        Document document0 = Document.createShell("}X");
        document0.getElementsByAttribute("#root");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test04559() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.htmlDefault;
        Tag tag0 = Tag.valueOf("th", parseSettings0);
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "th", attributes0);
        Element element0 = formElement0.empty();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test04660() throws Throwable {
        Document document0 = Document.createShell("head");
        Element element0 = document0.head();
        Element element1 = element0.doClone(document0);
        element1.baseUri();
    }

    @Test(timeout = 4000)
    public void test04661() throws Throwable {
        Document document0 = Document.createShell("head");
        Element element0 = document0.head();
        Element element1 = element0.doClone(document0);
        element1.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test04762() throws Throwable {
        Document document0 = Document.createShell("}X");
        Element element0 = document0.clone();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test04763() throws Throwable {
        Document document0 = Document.createShell("}X");
        Element element0 = document0.clone();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test04864() throws Throwable {
        Document document0 = Document.createShell("option[selected]");
        Element element0 = document0.doClone(document0);
        Set<String> set0 = document0.classNames();
        Element element1 = element0.classNames(set0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test04865() throws Throwable {
        Document document0 = Document.createShell("option[selected]");
        Element element0 = document0.doClone(document0);
        Set<String> set0 = document0.classNames();
        Element element1 = element0.classNames(set0);
        element1.baseUri();
    }

    @Test(timeout = 4000)
    public void test04966() throws Throwable {
        Element element0 = new Element("s+");
        Locale locale0 = Locale.FRENCH;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        Element element1 = element0.classNames(set0);
    }

    @Test(timeout = 4000)
    public void test05067() throws Throwable {
        Document document0 = new Document("vgv.`hU");
        document0.children();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test05168() throws Throwable {
        Document document0 = Document.createShell("body");
        Element element0 = document0.body();
        element0.childNodeSize();
        element0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test05169() throws Throwable {
        Document document0 = Document.createShell("body");
        Element element0 = document0.body();
        element0.childNodeSize();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test05270() throws Throwable {
        Document document0 = Document.createShell("1ic]jlJA=lE3QK2sB_");
        Element element0 = document0.body();
        element0.before((Node) document0);
        document0.hasParent();
    }

    @Test(timeout = 4000)
    public void test05271() throws Throwable {
        Document document0 = Document.createShell("1ic]jlJA=lE3QK2sB_");
        Element element0 = document0.body();
        element0.before((Node) document0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test05372() throws Throwable {
        Document document0 = new Document("option[selected]");
        Element element0 = document0.doClone(document0);
        Element element1 = element0.before((Node) document0);
        element1.baseUri();
    }

    @Test(timeout = 4000)
    public void test05473() throws Throwable {
        Document document0 = Document.createShell("option[selected]");
        Element element0 = document0.doClone(document0);
        element0.before((Node) document0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test05474() throws Throwable {
        Document document0 = Document.createShell("option[selected]");
        Element element0 = document0.doClone(document0);
        element0.before((Node) document0);
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test05575() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.body();
        element0.before("");
        element0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test05676() throws Throwable {
        Document document0 = new Document("H6yWYJaH8bHP={");
        document0.normalise();
        Element element0 = document0.body();
        element0.attr("html", false);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test05677() throws Throwable {
        Document document0 = new Document("H6yWYJaH8bHP={");
        document0.normalise();
        Element element0 = document0.body();
        element0.attr("html", false);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test05778() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.body();
        Element element1 = element0.attr("", "E{");
        element1.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test05779() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.body();
        Element element1 = element0.attr("", "E{");
        element1.baseUri();
    }

    @Test(timeout = 4000)
    public void test05880() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.body();
        Element element1 = element0.lastElementSibling();
        element1.appendText("E{");
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test05881() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.body();
        Element element1 = element0.lastElementSibling();
        element1.appendText("E{");
    }

    @Test(timeout = 4000)
    public void test05982() throws Throwable {
        Document document0 = new Document("zmHb.(TH<x,#XSO");
        Element element0 = document0.appendElement("zmHb.(TH<x,#XSO");
        element0.prependText("zmHb.(TH<x,#XSO");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test06083() throws Throwable {
        Document document0 = Document.createShell("Split offset must be not be negative");
        Element element0 = document0.head();
        Element element1 = element0.appendChild(document0);
        element1.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test06084() throws Throwable {
        Document document0 = Document.createShell("Split offset must be not be negative");
        Element element0 = document0.head();
        Element element1 = element0.appendChild(document0);
        element1.baseUri();
    }

    @Test(timeout = 4000)
    public void test06185() throws Throwable {
        Document document0 = Document.createShell("embed");
        Element element0 = document0.body();
        element0.append("-o?`SH&&a,F8$Wqb^l");
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test06286() throws Throwable {
        Element element0 = new Element("x<_}SSz)&g_9.80");
        Element element1 = element0.append("");
    }

    @Test(timeout = 4000)
    public void test06387() throws Throwable {
        Document document0 = Document.createShell("bk|?b3ZEQ Xe@tC}&N");
        Element element0 = document0.body();
        Element element1 = element0.after("bk|?b3ZEQ Xe@tC}&N");
        element1.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test06388() throws Throwable {
        Document document0 = Document.createShell("bk|?b3ZEQ Xe@tC}&N");
        Element element0 = document0.body();
        Element element1 = element0.after("bk|?b3ZEQ Xe@tC}&N");
        element1.baseUri();
    }

    @Test(timeout = 4000)
    public void test06489() throws Throwable {
        Document document0 = new Document("head");
        Element element0 = document0.addClass("head");
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test06590() throws Throwable {
        Document document0 = Document.createShell("6=qvYdFRavA:H2FY!");
        document0.wrap("");
    }

    @Test(timeout = 4000)
    public void test06691() throws Throwable {
        Document document0 = Document.createShell("Split offset must be not be negative");
        document0.appendChild(document0);
        // Undeclared exception!
        document0.toString();
    }

    @Test(timeout = 4000)
    public void test06792() throws Throwable {
        Document document0 = Document.createShell("hOs4xsE");
        document0.html("hOs4xsE");
        document0.text("hOs4xsE");
    }

    @Test(timeout = 4000)
    public void test06893() throws Throwable {
        Document document0 = Document.createShell("d2<)");
        document0.selectFirst("X@?#@6");
    }

    @Test(timeout = 4000)
    public void test06994() throws Throwable {
        Document document0 = new Document("&$!xy{_}");
        document0.select((String) null);
    }

    @Test(timeout = 4000)
    public void test07095() throws Throwable {
        Document document0 = Document.createShell("X-`4!O");
        document0.prependChild((Node) null);
    }

    @Test(timeout = 4000)
    public void test07196() throws Throwable {
        Document document0 = Document.createShell("Tag name must not be empty.");
        document0.prepend((String) null);
    }

    @Test(timeout = 4000)
    public void test07297() throws Throwable {
        Document document0 = new Document("");
        document0.outerHtmlTail((Appendable) null, 60, (Document.OutputSettings) null);
    }

    @Test(timeout = 4000)
    public void test07398() throws Throwable {
        Document document0 = Document.createShell(".");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        StringBuilder stringBuilder0 = new StringBuilder();
        document0.outerHtmlTail(stringBuilder0, (-2843), document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test07499() throws Throwable {
        PipedWriter pipedWriter0 = new PipedWriter();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document document0 = Document.createShell("K<]M?(}m<kiQx}^7");
        document0.outerHtmlTail(pipedWriter0, 1975, document_OutputSettings0);
    }

    @Test(timeout = 4000)
    public void test075100() throws Throwable {
        Document document0 = Document.createShell("");
        document0.lastElementSibling();
    }

    @Test(timeout = 4000)
    public void test076101() throws Throwable {
        Document document0 = Document.createShell(".");
        document0.is((Evaluator) null);
    }

    @Test(timeout = 4000)
    public void test077102() throws Throwable {
        Document document0 = Document.createShell("(.s>>e");
        Node[] nodeArray0 = new Node[9];
        nodeArray0[0] = (Node) document0;
        nodeArray0[1] = (Node) document0;
        nodeArray0[2] = (Node) document0;
        nodeArray0[3] = (Node) document0;
        nodeArray0[4] = (Node) document0;
        nodeArray0[5] = (Node) document0;
        nodeArray0[6] = (Node) document0;
        nodeArray0[7] = (Node) document0;
        nodeArray0[8] = (Node) document0;
        document0.insertChildren(0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test078103() throws Throwable {
        Document document0 = Document.createShell("#");
        document0.appendTo(document0);
        // Undeclared exception!
        document0.html("Dy[y;O}lr(mi,:i79o");
    }

    @Test(timeout = 4000)
    public void test079104() throws Throwable {
        Document document0 = Document.createShell("SY+-if^R7`1C{-*}+{");
        document0.html((String) null);
    }

    @Test(timeout = 4000)
    public void test080105() throws Throwable {
        Document document0 = Document.createShell("ti{");
        document0.appendTo(document0);
        PipedWriter pipedWriter0 = new PipedWriter();
        // Undeclared exception!
        document0.html(pipedWriter0);
    }

    @Test(timeout = 4000)
    public void test081106() throws Throwable {
        Tag tag0 = Tag.valueOf("wD#s79l%11w");
        Comment comment0 = new Comment("wD#s79l%11w");
        Attributes attributes0 = comment0.attributes();
        Element element0 = new Element(tag0, "", attributes0);
        element0.prependChild(element0);
        // Undeclared exception!
        element0.html();
    }

    @Test(timeout = 4000)
    public void test082107() throws Throwable {
        Document document0 = Document.createShell(" ");
        document0.hasClass((String) null);
    }

    @Test(timeout = 4000)
    public void test083108() throws Throwable {
        Document document0 = Document.createShell("ti{");
        document0.getElementsMatchingText("fI3?H~2wGr~\"[9VZ");
    }

    @Test(timeout = 4000)
    public void test084109() throws Throwable {
        Document document0 = new Document("]O'jtn[(,");
        document0.getElementsMatchingOwnText("]O'jtn[(,");
    }

    @Test(timeout = 4000)
    public void test085110() throws Throwable {
        Element element0 = new Element(">uzkf+qpgno/ R");
        TextNode textNode0 = new TextNode(">uzkf+qpgno/ R");
        element0.parentNode = (Node) textNode0;
        element0.getElementsByTag(">uzkf+qpgno/ R");
    }

    @Test(timeout = 4000)
    public void test086111() throws Throwable {
        Document document0 = Document.createShell("%<)");
        document0.getElementsByClass("");
    }

    @Test(timeout = 4000)
    public void test087112() throws Throwable {
        Document document0 = Document.createShell("");
        document0.getElementsByAttributeValueStarting("", "");
    }

    @Test(timeout = 4000)
    public void test088113() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element", parseSettings0);
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "org.jsoup.nodes.Element", attributes0);
        element0.getElementsByAttributeValueNot("),/#9M", "");
    }

    @Test(timeout = 4000)
    public void test089114() throws Throwable {
        Document document0 = Document.createShell("%<)");
        Element element0 = document0.head();
        element0.setSiblingIndex((-643));
        Pattern pattern0 = Pattern.compile(" w2NZ");
        document0.getElementsByAttributeValueMatching("n,`f@rErBc", pattern0);
    }

    @Test(timeout = 4000)
    public void test090115() throws Throwable {
        Document document0 = Document.createShell("#root");
        document0.getElementsByAttributeValueMatching((String) null, "3.JM[>[Y-Y,zRQ");
    }

    @Test(timeout = 4000)
    public void test091116() throws Throwable {
        Document document0 = new Document("");
        document0.getElementsByAttributeValueEnding("", "");
    }

    @Test(timeout = 4000)
    public void test092117() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("q,", parseSettings0);
        FormElement formElement0 = new FormElement(tag0, "q,", (Attributes) null);
        formElement0.getElementsByAttributeValue("bdi", (String) null);
    }

    @Test(timeout = 4000)
    public void test093118() throws Throwable {
        Document document0 = new Document("");
        document0.getElementsByAttributeStarting("");
    }

    @Test(timeout = 4000)
    public void test094119() throws Throwable {
        Document document0 = new Document("-P");
        document0.getElementById((String) null);
    }

    @Test(timeout = 4000)
    public void test095120() throws Throwable {
        Document document0 = Document.createShell("P <uG4Nu.p`D");
        document0.firstElementSibling();
    }

    @Test(timeout = 4000)
    public void test096121() throws Throwable {
        Document document0 = Document.createShell("br");
        document0.child(62);
    }

    @Test(timeout = 4000)
    public void test097122() throws Throwable {
        Document document0 = Document.createShell("");
        document0.attr((String) null, true);
    }

    @Test(timeout = 4000)
    public void test098123() throws Throwable {
        Document document0 = Document.createShell("}X");
        document0.attr((String) null, "1;GQkEF<1*Y*c1hH|");
    }

    @Test(timeout = 4000)
    public void test099124() throws Throwable {
        Tag tag0 = Tag.valueOf("i`,\"_g27o");
        FormElement formElement0 = new FormElement(tag0, "i`,\"_g27o", (Attributes) null);
        formElement0.appendTo((Element) null);
    }

    @Test(timeout = 4000)
    public void test100125() throws Throwable {
        Document document0 = new Document("6-apl%[&-sXh");
        document0.appendElement("");
    }

    @Test(timeout = 4000)
    public void test101126() throws Throwable {
        Document document0 = Document.createShell("ti{");
        document0.appendTo(document0);
        // Undeclared exception!
        document0.append("3.JM[>[Y-Y,zRQ");
    }

    @Test(timeout = 4000)
    public void test102127() throws Throwable {
        Document document0 = Document.createShell("L/ FL>gcC1q\"}");
        document0.addClass((String) null);
    }

    @Test(timeout = 4000)
    public void test103128() throws Throwable {
        Element element0 = null;
        element0 = new Element((Tag) null, "/D8k&k#p6sZ]");
    }

    @Test(timeout = 4000)
    public void test104129() throws Throwable {
        Element element0 = null;
        element0 = new Element("");
    }

    @Test(timeout = 4000)
    public void test105130() throws Throwable {
        Document document0 = Document.createShell("E{");
        String string0 = document0.html();
    }

    @Test(timeout = 4000)
    public void test105131() throws Throwable {
        Document document0 = Document.createShell("E{");
        String string0 = document0.html();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test106132() throws Throwable {
        Document document0 = Document.createShell(".");
        boolean boolean0 = document0.hasClass("");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test106133() throws Throwable {
        Document document0 = Document.createShell(".");
        boolean boolean0 = document0.hasClass("");
    }

    @Test(timeout = 4000)
    public void test106134() throws Throwable {
        Document document0 = Document.createShell(".");
        boolean boolean0 = document0.hasClass("");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test107135() throws Throwable {
        Document document0 = Document.createShell("bk|?b3ZEQ Xe@tC}&N");
        Element element0 = document0.body();
        int int0 = element0.elementSiblingIndex();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test107136() throws Throwable {
        Document document0 = Document.createShell("bk|?b3ZEQ Xe@tC}&N");
        Element element0 = document0.body();
        int int0 = element0.elementSiblingIndex();
    }

    @Test(timeout = 4000)
    public void test108137() throws Throwable {
        Document document0 = new Document("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
        int int0 = document0.elementSiblingIndex();
    }

    @Test(timeout = 4000)
    public void test108138() throws Throwable {
        Document document0 = new Document("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
        int int0 = document0.elementSiblingIndex();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test109139() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.body();
        element0.wrap("id");
        element0.before("");
        element0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test110140() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element");
        document0.attributes();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test110141() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element");
        document0.attributes();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test111142() throws Throwable {
        Document document0 = Document.createShell("");
        document0.attr("", "d*:QeJT.wQQ@)wJ3");
        Attributes attributes0 = document0.attributes();
        attributes0.size();
    }

    @Test(timeout = 4000)
    public void test111143() throws Throwable {
        Document document0 = Document.createShell("");
        document0.attr("", "d*:QeJT.wQQ@)wJ3");
        Attributes attributes0 = document0.attributes();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test112144() throws Throwable {
        Element element0 = new Element("Tag name must not be empty.");
        Elements elements0 = element0.getElementsByTag("org.jsoup.nodes.DataNode");
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test113145() throws Throwable {
        Document document0 = Document.createShell("d2<)");
        document0.classNames((Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test114146() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.htmlDefault;
        Tag tag0 = Tag.valueOf("textarea", parseSettings0);
        Attributes attributes0 = new Attributes();
        Element element0 = new Element(tag0, "textarea", attributes0);
        element0.className();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test115147() throws Throwable {
        Document document0 = Document.createShell("");
        document0.parent();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test116148() throws Throwable {
        Element element0 = new Element("br");
        element0.getElementsMatchingOwnText((Pattern) null);
    }

    @Test(timeout = 4000)
    public void test117149() throws Throwable {
        Document document0 = Document.createShell("%<)");
        document0.ownText();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test117150() throws Throwable {
        Document document0 = Document.createShell("%<)");
        document0.ownText();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test118151() throws Throwable {
        Document document0 = Document.createShell("}X");
        document0.parents();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test118152() throws Throwable {
        Document document0 = Document.createShell("}X");
        document0.parents();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test119153() throws Throwable {
        Document document0 = Document.createShell("E{");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test119154() throws Throwable {
        Document document0 = Document.createShell("E{");
        document0.empty();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test120155() throws Throwable {
        Document document0 = Document.createShell("");
        document0.prependElement("");
    }

    @Test(timeout = 4000)
    public void test121156() throws Throwable {
        Attributes attributes0 = new Attributes();
        Element element0 = null;
        element0 = new Element((Tag) null, "-pCbPee$@", attributes0);
    }

    @Test(timeout = 4000)
    public void test122157() throws Throwable {
        Document document0 = Document.createShell(",`c=WEV");
        XmlDeclaration xmlDeclaration0 = new XmlDeclaration(",`c=WEV", "org.jsoup.nodes.TextNode", false);
        document0.appendChild(xmlDeclaration0);
        xmlDeclaration0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test122158() throws Throwable {
        Document document0 = Document.createShell(",`c=WEV");
        XmlDeclaration xmlDeclaration0 = new XmlDeclaration(",`c=WEV", "org.jsoup.nodes.TextNode", false);
        document0.appendChild(xmlDeclaration0);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test123159() throws Throwable {
        Document document0 = Document.createShell("body");
        int int0 = document0.childNodeSize();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test123160() throws Throwable {
        Document document0 = Document.createShell("body");
        int int0 = document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test124161() throws Throwable {
        Document document0 = Document.createShell("3");
        String string0 = document0.baseUri();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test124162() throws Throwable {
        Document document0 = Document.createShell("3");
        String string0 = document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test125163() throws Throwable {
        Document document0 = Document.createShell("");
        document0.tagName();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test126164() throws Throwable {
        Document document0 = Document.createShell("");
        Pattern pattern0 = Pattern.compile("", 4171);
        document0.getElementsMatchingText(pattern0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test127165() throws Throwable {
        Tag tag0 = Tag.valueOf("eKJiRuHS");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "eKJiRuHS", attributes0);
        formElement0.nodeName();
        formElement0.baseUri();
    }

    @Test(timeout = 4000)
    public void test128166() throws Throwable {
        Document document0 = Document.createShell("");
        Pattern pattern0 = Pattern.compile("", 4171);
        document0.getElementsByAttributeValueMatching("body", pattern0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test129167() throws Throwable {
        Document document0 = Document.createShell(",`c=WEV");
        document0.append((String) null);
    }

    @Test(timeout = 4000)
    public void test130168() throws Throwable {
        Document document0 = Document.createShell("Vh|w2kb2{.\"W9");
        document0.appendElement("org.jsoup.select.Evaluator$AttributeWithValueNot");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test131169() throws Throwable {
        Document document0 = Document.createShell("{z>@Ha{CVQ}");
        document0.select("{z>@Ha{CVQ}");
    }

    @Test(timeout = 4000)
    public void test132170() throws Throwable {
        Document document0 = Document.createShell("");
        document0.tag();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test133171() throws Throwable {
        Document document0 = Document.createShell("head");
        Element element0 = document0.head();
        Element element1 = element0.clone();
        element1.baseUri();
    }

    @Test(timeout = 4000)
    public void test133172() throws Throwable {
        Document document0 = Document.createShell("head");
        Element element0 = document0.head();
        Element element1 = element0.clone();
        element1.hasParent();
    }

    @Test(timeout = 4000)
    public void test133173() throws Throwable {
        Document document0 = Document.createShell("head");
        Element element0 = document0.head();
        Element element1 = element0.clone();
        element0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test134174() throws Throwable {
        Document document0 = Document.createShell("option[selected]");
        document0.id();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test134175() throws Throwable {
        Document document0 = Document.createShell("option[selected]");
        document0.id();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test135176() throws Throwable {
        Document document0 = Document.createShell("}X");
        String string0 = document0.cssSelector();
    }

    @Test(timeout = 4000)
    public void test135177() throws Throwable {
        Document document0 = Document.createShell("}X");
        String string0 = document0.cssSelector();
        Element element0 = document0.doClone((Node) null);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test135178() throws Throwable {
        Document document0 = Document.createShell("}X");
        String string0 = document0.cssSelector();
        Element element0 = document0.doClone((Node) null);
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test135179() throws Throwable {
        Document document0 = Document.createShell("}X");
        String string0 = document0.cssSelector();
        Element element0 = document0.doClone((Node) null);
    }

    @Test(timeout = 4000)
    public void test136180() throws Throwable {
        Document document0 = Document.createShell(".");
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        StringBuilder stringBuilder0 = new StringBuilder();
        document0.outerHtmlHead(stringBuilder0, 0, document_OutputSettings0);
        stringBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test137181() throws Throwable {
        Document document0 = Document.createShell("3");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3\n<html>\n <head></head>\n <body></body>\n</html>");
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
        document0.html(bufferedWriter0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test137182() throws Throwable {
        Document document0 = Document.createShell("3");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3\n<html>\n <head></head>\n <body></body>\n</html>");
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
        document0.html(bufferedWriter0);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test138183() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.htmlDefault;
        Tag tag0 = Tag.valueOf("th", parseSettings0);
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "th", attributes0);
        String string0 = formElement0.toString();
    }

    @Test(timeout = 4000)
    public void test138184() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.htmlDefault;
        Tag tag0 = Tag.valueOf("th", parseSettings0);
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "th", attributes0);
        String string0 = formElement0.toString();
        formElement0.baseUri();
    }

    @Test(timeout = 4000)
    public void test139185() throws Throwable {
        Document document0 = new Document("head");
        Element element0 = document0.val("head");
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test140186() throws Throwable {
        Document document0 = Document.createShell("#");
        document0.val();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test140187() throws Throwable {
        Document document0 = Document.createShell("#");
        document0.val();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test141188() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.toggleClass("");
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test141189() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.toggleClass("");
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test142190() throws Throwable {
        Document document0 = Document.createShell("%<)");
        document0.data();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test142191() throws Throwable {
        Document document0 = Document.createShell("%<)");
        document0.data();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test143192() throws Throwable {
        Document document0 = Document.createShell("E{");
        document0.html("html");
        boolean boolean0 = document0.hasText();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test143193() throws Throwable {
        Document document0 = Document.createShell("E{");
        document0.html("html");
        boolean boolean0 = document0.hasText();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test143194() throws Throwable {
        Document document0 = Document.createShell("E{");
        document0.html("html");
        boolean boolean0 = document0.hasText();
    }

    @Test(timeout = 4000)
    public void test144195() throws Throwable {
        Document document0 = Document.createShell("head");
        boolean boolean0 = document0.hasText();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test144196() throws Throwable {
        Document document0 = Document.createShell("head");
        boolean boolean0 = document0.hasText();
    }

    @Test(timeout = 4000)
    public void test144197() throws Throwable {
        Document document0 = Document.createShell("head");
        boolean boolean0 = document0.hasText();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test145198() throws Throwable {
        TextNode textNode0 = new TextNode("hL}", "hL}");
        boolean boolean0 = Element.preserveWhitespace(textNode0);
    }

    @Test(timeout = 4000)
    public void test146199() throws Throwable {
        Tag tag0 = Tag.valueOf("[8fn`^J*Q$E}<");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "[8fn`^J*Q$E}<", attributes0);
        formElement0.text("");
        Elements elements0 = formElement0.getElementsContainingOwnText("Z0a");
        formElement0.baseUri();
    }

    @Test(timeout = 4000)
    public void test146200() throws Throwable {
        Tag tag0 = Tag.valueOf("[8fn`^J*Q$E}<");
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, "[8fn`^J*Q$E}<", attributes0);
        formElement0.text("");
        Elements elements0 = formElement0.getElementsContainingOwnText("Z0a");
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test147201() throws Throwable {
        Document document0 = Document.createShell(" ");
        Element element0 = document0.prependText(" ");
        element0.text();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test147202() throws Throwable {
        Document document0 = Document.createShell(" ");
        Element element0 = document0.prependText(" ");
        element0.text();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test148203() throws Throwable {
        Document document0 = Document.createShell("3");
        Element element0 = document0.getElementById("3");
    }

    @Test(timeout = 4000)
    public void test148204() throws Throwable {
        Document document0 = Document.createShell("3");
        Element element0 = document0.getElementById("3");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test148205() throws Throwable {
        Document document0 = Document.createShell("3");
        Element element0 = document0.getElementById("3");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test149206() throws Throwable {
        ParseSettings parseSettings0 = new ParseSettings(true, false);
        Tag tag0 = Tag.valueOf("`", parseSettings0);
        Element element0 = new Element(tag0, "`");
        Document document0 = Document.createShell("`");
        element0.appendTo(document0);
        element0.firstElementSibling();
        element0.siblingIndex();
    }

    @Test(timeout = 4000)
    public void test150207() throws Throwable {
        Document document0 = new Document("");
        Node[] nodeArray0 = new Node[5];
        nodeArray0[0] = (Node) document0;
        nodeArray0[1] = (Node) document0;
        nodeArray0[2] = (Node) document0;
        nodeArray0[3] = (Node) document0;
        nodeArray0[4] = (Node) document0;
        document0.addChildren(nodeArray0);
        Element element0 = document0.firstElementSibling();
    }

    @Test(timeout = 4000)
    public void test151208() throws Throwable {
        Document document0 = Document.createShell(".");
        document0.previousElementSibling();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test151209() throws Throwable {
        Document document0 = Document.createShell(".");
        document0.previousElementSibling();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test152210() throws Throwable {
        Document document0 = new Document("link");
        document0.nextElementSibling();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test153211() throws Throwable {
        Document document0 = new Document("-pCbPee$@");
        Document document1 = document0.normalise();
        Element element0 = document1.head();
        Element element1 = element0.nextElementSibling();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test153212() throws Throwable {
        Document document0 = new Document("-pCbPee$@");
        Document document1 = document0.normalise();
        Element element0 = document1.head();
        Element element1 = element0.nextElementSibling();
    }

    @Test(timeout = 4000)
    public void test154213() throws Throwable {
        Document document0 = Document.createShell("kD:[0gtHkC6OCW");
        Element element0 = document0.head();
        Elements elements0 = element0.siblingElements();
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test154214() throws Throwable {
        Document document0 = Document.createShell("kD:[0gtHkC6OCW");
        Element element0 = document0.head();
        Elements elements0 = element0.siblingElements();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test155215() throws Throwable {
        Document document0 = new Document("$mQCi.=");
        Element element0 = document0.appendTo(document0);
        String string0 = element0.cssSelector();
    }

    @Test(timeout = 4000)
    public void test155216() throws Throwable {
        Document document0 = new Document("$mQCi.=");
        Element element0 = document0.appendTo(document0);
        String string0 = element0.cssSelector();
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test156217() throws Throwable {
        Document document0 = Document.createShell("}X");
        Node[] nodeArray0 = new Node[4];
        document0.insertChildren((-1433506051), nodeArray0);
    }

    @Test(timeout = 4000)
    public void test157218() throws Throwable {
        Document document0 = Document.createShell("5NPZ_v");
        Node[] nodeArray0 = new Node[8];
        document0.insertChildren(26, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test158219() throws Throwable {
        Document document0 = Document.createShell("}X");
        Elements elements0 = document0.siblingElements();
        Element element0 = document0.insertChildren(1, (Collection<? extends Node>) elements0);
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test158220() throws Throwable {
        Document document0 = Document.createShell("}X");
        Elements elements0 = document0.siblingElements();
        Element element0 = document0.insertChildren(1, (Collection<? extends Node>) elements0);
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test159221() throws Throwable {
        Document document0 = Document.createShell("org.jsoup.nodes.Element");
        LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
        document0.insertChildren((-329), (Collection<? extends Node>) linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test160222() throws Throwable {
        Document document0 = Document.createShell("");
        LinkedList<Document> linkedList0 = new LinkedList<Document>();
        document0.insertChildren(1881, (Collection<? extends Node>) linkedList0);
    }

    @Test(timeout = 4000)
    public void test161223() throws Throwable {
        Document document0 = Document.createShell("E{");
        List<DataNode> list0 = document0.dataNodes();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test161224() throws Throwable {
        Document document0 = Document.createShell("E{");
        List<DataNode> list0 = document0.dataNodes();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test161225() throws Throwable {
        Document document0 = Document.createShell("E{");
        List<DataNode> list0 = document0.dataNodes();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test162226() throws Throwable {
        Document document0 = Document.createShell(".");
        List<TextNode> list0 = document0.textNodes();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test162227() throws Throwable {
        Document document0 = Document.createShell(".");
        List<TextNode> list0 = document0.textNodes();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test162228() throws Throwable {
        Document document0 = Document.createShell(".");
        List<TextNode> list0 = document0.textNodes();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test163229() throws Throwable {
        Document document0 = Document.createShell("}X");
        document0.prependText("ScriptDataEscapeStartDash");
        document0.getElementsByIndexLessThan(14);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test164230() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.body();
        Element element1 = element0.lastElementSibling();
        element1.html("html");
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test164231() throws Throwable {
        Document document0 = Document.createShell("E{");
        Element element0 = document0.body();
        Element element1 = element0.lastElementSibling();
        element1.html("html");
        document0.getElementsMatchingText("id");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test165232() throws Throwable {
        Document document0 = Document.createShell("");
        Elements elements0 = document0.getElementsByIndexGreaterThan(1510);
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test165233() throws Throwable {
        Document document0 = Document.createShell("");
        Elements elements0 = document0.getElementsByIndexGreaterThan(1510);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test166234() throws Throwable {
        Document document0 = Document.createShell("}X");
        document0.selectFirst((String) null);
    }

    @Test(timeout = 4000)
    public void test167235() throws Throwable {
        Document document0 = new Document("$mQCi.=");
        document0.is("$mQCi.=");
    }

    @Test(timeout = 4000)
    public void test168236() throws Throwable {
        Document document0 = Document.createShell(".");
        Elements elements0 = document0.getAllElements();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test168237() throws Throwable {
        Document document0 = Document.createShell(".");
        Elements elements0 = document0.getAllElements();
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test168238() throws Throwable {
        Document document0 = Document.createShell(".");
        Elements elements0 = document0.getAllElements();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test169239() throws Throwable {
        Document document0 = Document.createShell("");
        document0.before("");
    }

    @Test(timeout = 4000)
    public void test170240() throws Throwable {
        Document document0 = Document.createShell("");
        document0.getElementsByAttribute("");
    }

    @Test(timeout = 4000)
    public void test171241() throws Throwable {
        Document document0 = Document.createShell("Tag name must not be empty.");
        Elements elements0 = document0.getElementsByAttributeValueNot("AfterDoctypeSystemIdentifier", "AfterDoctypeSystemIdentifier");
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test171242() throws Throwable {
        Document document0 = Document.createShell("Tag name must not be empty.");
        Elements elements0 = document0.getElementsByAttributeValueNot("AfterDoctypeSystemIdentifier", "AfterDoctypeSystemIdentifier");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test171243() throws Throwable {
        Document document0 = Document.createShell("Tag name must not be empty.");
        Elements elements0 = document0.getElementsByAttributeValueNot("AfterDoctypeSystemIdentifier", "AfterDoctypeSystemIdentifier");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test172244() throws Throwable {
        Document document0 = new Document("40<[X;q6OiP(sh*2");
        Element element0 = document0.appendTo(document0);
        document0.after((Node) element0);
    }

    @Test(timeout = 4000)
    public void test173245() throws Throwable {
        Document document0 = new Document("40<[X;q6OiP(sh*2");
        document0.after((Node) document0);
    }

    @Test(timeout = 4000)
    public void test174246() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.htmlDefault;
        Tag tag0 = Tag.valueOf("-", parseSettings0);
        Attributes attributes0 = new Attributes();
        FormElement formElement0 = new FormElement(tag0, ">", attributes0);
        formElement0.getElementsByAttributeValueContaining("", "");
    }

    @Test(timeout = 4000)
    public void test175247() throws Throwable {
        Document document0 = new Document("html");
        Elements elements0 = document0.getElementsContainingText("8(cTKZ");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test175248() throws Throwable {
        Document document0 = new Document("html");
        Elements elements0 = document0.getElementsContainingText("8(cTKZ");
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test176249() throws Throwable {
        Document document0 = Document.createShell("E{");
        Elements elements0 = document0.getElementsByClass("E{");
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test176250() throws Throwable {
        Document document0 = Document.createShell("E{");
        Elements elements0 = document0.getElementsByClass("E{");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test176251() throws Throwable {
        Document document0 = Document.createShell("E{");
        Elements elements0 = document0.getElementsByClass("E{");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test177252() throws Throwable {
        Document document0 = Document.createShell(".");
        document0.getElementsByAttributeValueEnding("br", "org.jsoup.nodes.Element$1");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test177253() throws Throwable {
        Document document0 = Document.createShell(".");
        document0.getElementsByAttributeValueEnding("br", "org.jsoup.nodes.Element$1");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test178254() throws Throwable {
        Document document0 = Document.createShell("E{");
        Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("<Y]A!z5}=3u");
        document0.is((Evaluator) evaluator_AttributeStarting0);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test178255() throws Throwable {
        Document document0 = Document.createShell("E{");
        Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("<Y]A!z5}=3u");
        document0.is((Evaluator) evaluator_AttributeStarting0);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test179256() throws Throwable {
        Document document0 = Document.createShell("");
        document0.getElementsByAttributeValueMatching("", "Z<$2^*d");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test180257() throws Throwable {
        Document document0 = Document.createShell("E{");
        document0.wrap("id");
    }

    @Test(timeout = 4000)
    public void test181258() throws Throwable {
        Document document0 = Document.createShell(".");
        Elements elements0 = document0.getElementsByIndexEquals(1532);
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test181259() throws Throwable {
        Document document0 = Document.createShell(".");
        Elements elements0 = document0.getElementsByIndexEquals(1532);
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test181260() throws Throwable {
        Document document0 = Document.createShell(".");
        Elements elements0 = document0.getElementsByIndexEquals(1532);
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test182261() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("0r>", parseSettings0);
        Element element0 = new Element(tag0, "0r>");
        element0.getElementsByAttributeStarting("0r>");
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test183262() throws Throwable {
        Document document0 = Document.createShell("3");
        document0.after("org.jsoup.select.Evaluator$AttributeWithValueContaining");
    }

    @Test(timeout = 4000)
    public void test184263() throws Throwable {
        Document document0 = Document.createShell("}X");
        Elements elements0 = document0.getElementsMatchingOwnText("");
        elements0.size();
    }

    @Test(timeout = 4000)
    public void test184264() throws Throwable {
        Document document0 = Document.createShell("}X");
        Elements elements0 = document0.getElementsMatchingOwnText("");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test184265() throws Throwable {
        Document document0 = Document.createShell("}X");
        Elements elements0 = document0.getElementsMatchingOwnText("");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test185266() throws Throwable {
        Document document0 = Document.createShell("");
        document0.hasParent();
    }

    @Test(timeout = 4000)
    public void test185267() throws Throwable {
        Document document0 = Document.createShell("");
        Element element0 = document0.prepend("");
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test186268() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("0r>", parseSettings0);
        Element element0 = new Element(tag0, "0r>");
        element0.prependChild(element0);
        element0.cssSelector();
    }

    @Test(timeout = 4000)
    public void test187269() throws Throwable {
        Document document0 = Document.createShell("bk|?b3ZEQ Xe@tC}&N");
        document0.hasParent();
    }

    @Test(timeout = 4000)
    public void test187270() throws Throwable {
        Document document0 = Document.createShell("bk|?b3ZEQ Xe@tC}&N");
        document0.getElementsByAttributeValueStarting("DoctypeSystemIdentifier_singleQuoted", "L");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test187271() throws Throwable {
        Document document0 = Document.createShell("bk|?b3ZEQ Xe@tC}&N");
        document0.getElementsByAttributeValueStarting("DoctypeSystemIdentifier_singleQuoted", "L");
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test188272() throws Throwable {
        Element element0 = new Element("br");
        Elements elements0 = element0.getElementsByAttributeValue("br", "org.jsoup.UncheckedIOException");
        elements0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test189273() throws Throwable {
        Document document0 = Document.createShell("#");
        Element element0 = document0.attr("#", true);
        element0.hasParent();
    }

    @Test(timeout = 4000)
    public void test189274() throws Throwable {
        Document document0 = Document.createShell("#");
        Element element0 = document0.attr("#", true);
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test189275() throws Throwable {
        Document document0 = Document.createShell("#");
        Element element0 = document0.attr("#", true);
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test190276() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = Tag.valueOf("0r>", parseSettings0);
        Element element0 = new Element(tag0, "0r>");
        element0.before((Node) element0);
    }

    @Test(timeout = 4000)
    public void test191277() throws Throwable {
        Document document0 = Document.createShell("}X");
        Element element0 = document0.addClass("1/B");
        element0.hasParent();
    }

    @Test(timeout = 4000)
    public void test191278() throws Throwable {
        Document document0 = Document.createShell("}X");
        Element element0 = document0.addClass("1/B");
        element0.baseUri();
    }

    @Test(timeout = 4000)
    public void test191279() throws Throwable {
        Document document0 = Document.createShell("}X");
        Element element0 = document0.addClass("1/B");
        element0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test192280() throws Throwable {
        Document document0 = new Document("html");
        document0.dataset();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test193281() throws Throwable {
        Document document0 = Document.createShell("}X");
        document0.tagName((String) null);
    }

    @Test(timeout = 4000)
    public void test194282() throws Throwable {
        Element element0 = new Element("s+");
        element0.child((-3587));
    }

    @Test(timeout = 4000)
    public void test195283() throws Throwable {
        Document document0 = Document.createShell("%<)");
        document0.isBlock();
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test195284() throws Throwable {
        Document document0 = Document.createShell("%<)");
        document0.isBlock();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test195285() throws Throwable {
        Document document0 = Document.createShell("%<)");
        document0.isBlock();
        document0.hasParent();
    }

    @Test(timeout = 4000)
    public void test196286() throws Throwable {
        Document document0 = Document.createShell("");
        document0.appendText("ismap");
        document0.childNodeSize();
    }

    @Test(timeout = 4000)
    public void test197287() throws Throwable {
        Document document0 = Document.createShell("3");
        Elements elements0 = document0.children();
        document0.hasParent();
    }

    @Test(timeout = 4000)
    public void test197288() throws Throwable {
        Document document0 = Document.createShell("3");
        Elements elements0 = document0.children();
        document0.baseUri();
    }

    @Test(timeout = 4000)
    public void test197289() throws Throwable {
        Document document0 = Document.createShell("3");
        Elements elements0 = document0.children();
        elements0.size();
    }
}
