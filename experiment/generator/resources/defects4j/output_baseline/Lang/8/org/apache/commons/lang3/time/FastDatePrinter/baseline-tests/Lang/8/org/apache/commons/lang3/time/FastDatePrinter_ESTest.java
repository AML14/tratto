/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:59:41 GMT 2023
 */
package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.FieldPosition;
import java.text.Format;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDatePrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class FastDatePrinter_ESTest extends FastDatePrinter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("'U");
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("'U");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("'U");
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("'U");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("'U");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("'U");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("'U");
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("'U");
        FastDatePrinter.getTimeZoneDisplay((TimeZone) null, true, (-2775), locale0);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    }

    @Test(timeout = 4000)
    public void test0110() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0111() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
    }

    @Test(timeout = 4000)
    public void test0112() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0113() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0114() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0115() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0116() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0117() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0118() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test0119() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0120() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0121() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0122() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0123() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0124() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0125() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0126() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test0127() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test0132() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
    }

    @Test(timeout = 4000)
    public void test0133() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
    }

    @Test(timeout = 4000)
    public void test0134() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test0135() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    }

    @Test(timeout = 4000)
    public void test0136() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test0137() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test0138() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test0139() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test0142() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0143() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0144() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0145() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0146() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0147() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0148() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0149() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test0150() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test0151() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test0152() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test0153() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test0154() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test0155() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test0156() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test0157() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test0158() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test0159() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test0264() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
    }

    @Test(timeout = 4000)
    public void test0265() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0266() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test0267() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test0268() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test0269() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test0270() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
        Locale locale0 = Locale.UK;
    }

    @Test(timeout = 4000)
    public void test0271() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
        Locale locale0 = Locale.UK;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0272() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
        Locale locale0 = Locale.UK;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0273() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
        Locale locale0 = Locale.UK;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0274() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
        Locale locale0 = Locale.UK;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0275() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
        Locale locale0 = Locale.UK;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0276() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
        Locale locale0 = Locale.UK;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0277() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ewn|eBElUQ");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("^-zSS]J}30h", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test0378() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
    }

    @Test(timeout = 4000)
    public void test0379() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test0380() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test0381() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0382() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test0383() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test0384() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
    }

    @Test(timeout = 4000)
    public void test0385() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0386() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0387() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0388() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0389() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0390() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0391() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test0392() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test0393() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test0394() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0395() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test0396() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test0397() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0398() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0399() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test03100() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test03101() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test03102() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test03103() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test03104() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test03109() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
    }

    @Test(timeout = 4000)
    public void test03112() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test03113() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test03114() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test03115() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test03116() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test03117() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test03118() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test03119() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test03120() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test03121() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test03122() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test03123() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test03124() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        int[] intArray0 = new int[23];
        String string0 = fastDatePrinter0.parseToken("~AD(GMT+00:00)", intArray0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test04129() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    }

    @Test(timeout = 4000)
    public void test04130() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test04131() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test04132() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
    }

    @Test(timeout = 4000)
    public void test04133() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test04134() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test04135() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test04136() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test04137() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test04138() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test04139() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        String string0 = FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 1, locale0);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        String string0 = FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test04142() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        String string0 = FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test04143() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        String string0 = FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test04144() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        String string0 = FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test04145() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        String string0 = FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test04146() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        String string0 = FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.ITALIAN;
        String string0 = FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 1, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test05148() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
    }

    @Test(timeout = 4000)
    public void test05149() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test05150() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test05152() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test05153() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test05154() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
    }

    @Test(timeout = 4000)
    public void test05155() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test05156() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test05157() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test05158() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test05159() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test05160() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test05161() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test05162() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test05163() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test05164() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test05165() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test05166() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test05167() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test05168() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test05169() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test05170() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test05171() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test05172() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test05173() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test05174() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test05179() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test05182() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test05183() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test05184() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test05185() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test05186() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test05187() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test05188() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test05189() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test05190() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test05191() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test05192() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test05193() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test05194() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test05195() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test05196() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test05197() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test05198() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test05199() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, "");
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test06204() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
    }

    @Test(timeout = 4000)
    public void test06205() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test06206() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test06207() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test06208() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test06209() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test06210() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
    }

    @Test(timeout = 4000)
    public void test06211() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test06212() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test06213() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test06214() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test06215() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test06216() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test06217() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test06218() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test06219() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test06220() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test06221() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test06222() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test06223() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test06224() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test06225() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test06226() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test06227() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test06228() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test06229() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test06230() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test06235() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test06238() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test06239() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test06240() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test06241() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test06242() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test06243() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test06244() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test06245() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test06246() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test06247() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test06248() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test06249() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test06250() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test06251() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test06252() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test06253() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test06254() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test06255() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), "");
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test07260() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
    }

    @Test(timeout = 4000)
    public void test07261() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test07262() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test07263() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test07264() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test07265() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test07266() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
    }

    @Test(timeout = 4000)
    public void test07267() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test07268() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test07269() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test07270() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test07271() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test07273() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test07274() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test07275() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test07276() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test07277() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test07278() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test07279() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test07280() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test07281() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test07282() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test07283() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test07284() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test07285() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test07286() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test07291() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test07294() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test07295() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test07296() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test07297() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test07298() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test07299() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test07300() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test07301() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test07302() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test07303() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test07304() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test07305() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test07306() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test07307() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test07308() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test07309() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test07310() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test07311() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
        timeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test08316() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
    }

    @Test(timeout = 4000)
    public void test08317() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test08318() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
    }

    @Test(timeout = 4000)
    public void test08319() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test08320() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test08321() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test08322() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test08323() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test08324() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test08325() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test08326() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test08327() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test08328() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test08329() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test08330() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test08331() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test08332() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test08333() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test08334() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test08339() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test08341() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test08342() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test08343() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test08344() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test08345() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test08346() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test08347() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test08348() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test08349() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test09354() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
    }

    @Test(timeout = 4000)
    public void test09355() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test09356() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test09357() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test09358() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test09359() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test09360() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
    }

    @Test(timeout = 4000)
    public void test09361() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test09362() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test09363() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test09364() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test09365() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test09366() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test09367() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test09368() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test09369() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test09370() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test09371() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test09372() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test09373() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test09374() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test09375() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test09376() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test09377() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test09378() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test09379() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test09380() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test09385() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test09386() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test09387() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test09388() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test09389() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test09390() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test09391() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test09392() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test09394() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test09395() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test09396() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test09397() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test09398() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), "");
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test10403() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
    }

    @Test(timeout = 4000)
    public void test10404() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test10405() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
    }

    @Test(timeout = 4000)
    public void test10406() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test10407() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test10408() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test10409() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test10410() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test10411() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test10412() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test10413() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test10414() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test10415() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test10416() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test10417() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test10418() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test10419() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test10420() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test10421() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test10426() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
    }

    @Test(timeout = 4000)
    public void test10427() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
    }

    @Test(timeout = 4000)
    public void test10428() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test10429() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test10430() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test10431() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test10432() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test10433() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test10434() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test10435() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test10436() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test10437() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test11442() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
    }

    @Test(timeout = 4000)
    public void test11443() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test11444() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
    }

    @Test(timeout = 4000)
    public void test11445() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test11446() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test11447() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test11448() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test11449() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test11450() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test11451() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test11452() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test11453() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test11454() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test11455() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test11456() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test11457() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test11458() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test11463() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
    }

    @Test(timeout = 4000)
    public void test11464() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
    }

    @Test(timeout = 4000)
    public void test11465() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test11466() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test11467() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test11470() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test11471() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test11472() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test11473() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test11474() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test11475() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test11476() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test11477() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test11478() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test11479() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test11480() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test11481() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test11482() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("^N},{gz}");
        Locale locale0 = new Locale("", "^N},{gz}");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test12487() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
    }

    @Test(timeout = 4000)
    public void test12488() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test12489() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test12490() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test12491() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test12492() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test12493() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
    }

    @Test(timeout = 4000)
    public void test12494() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test12495() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test12496() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test12497() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test12498() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test12499() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test12500() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test12501() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test12502() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test12503() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test12504() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test12505() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test12506() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test12507() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test12508() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test12509() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test12510() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test12511() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test12512() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test12513() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test12518() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
    }

    @Test(timeout = 4000)
    public void test12519() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
    }

    @Test(timeout = 4000)
    public void test12520() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test12521() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
    }

    @Test(timeout = 4000)
    public void test12523() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test12524() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test12525() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test12526() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test12527() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test12528() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test12529() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test12530() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test12531() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test12532() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test12533() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test12534() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test12535() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test12536() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        String string0 = fastDatePrinter0.format(date0);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test13541() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
    }

    @Test(timeout = 4000)
    public void test13542() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test13543() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test13544() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test13545() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test13546() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test13547() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
    }

    @Test(timeout = 4000)
    public void test13548() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test13549() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test13550() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test13551() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test13552() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test13553() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test13554() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test13555() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test13556() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test13557() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test13558() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test13559() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test13560() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test13561() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test13562() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test13563() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test13564() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test13565() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test13566() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test13567() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test13572() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
    }

    @Test(timeout = 4000)
    public void test13573() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
    }

    @Test(timeout = 4000)
    public void test13574() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test13575() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test13576() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test13577() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test13578() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test13579() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test13580() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test13581() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test13582() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test13583() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test13584() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test13585() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test13586() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test13587() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test13588() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        mockGregorianCalendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test13589() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        mockGregorianCalendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test13590() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        mockGregorianCalendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test14626() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
    }

    @Test(timeout = 4000)
    public void test14627() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test14628() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test14629() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test14630() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test14631() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test14632() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test14633() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test14634() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test14635() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test14636() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test14637() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test14638() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test14639() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test14642() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test14643() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test14644() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test14645() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test14646() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test14647() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test14648() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test14649() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test14650() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test14651() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test14652() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test14653() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test14654() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test14655() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test14656() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test14657() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test14658() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test14659() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test14660() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test14661() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test14662() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test15667() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
    }

    @Test(timeout = 4000)
    public void test15668() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test15669() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
    }

    @Test(timeout = 4000)
    public void test15670() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test15671() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test15672() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test15673() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test15674() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test15675() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test15676() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test15677() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test15678() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test15679() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test15680() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test15681() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test15682() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test15683() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test15684() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test15685() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test15690() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    }

    @Test(timeout = 4000)
    public void test15691() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test15692() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test15693() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test15694() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test15695() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test15696() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
    }

    @Test(timeout = 4000)
    public void test15698() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test15699() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test15700() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test15701() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test15702() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test15703() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test15704() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test15705() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test15706() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test15707() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test15708() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test15709() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test15710() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("fuY*O`i4m^y4");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        String string0 = fastDatePrinter0.format(calendar0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test16749() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
    }

    @Test(timeout = 4000)
    public void test16750() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
    }

    @Test(timeout = 4000)
    public void test16751() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test16752() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
    }

    @Test(timeout = 4000)
    public void test16753() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test16754() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test16755() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        fieldPosition0.toString();
    }

    @Test(timeout = 4000)
    public void test16756() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test16757() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test16760() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test16761() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test16762() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test16763() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test16764() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test16765() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test16766() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test16767() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test16768() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test16769() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test16770() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test16771() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test16772() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test16773() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test16774() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test16775() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test16776() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test16777() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test16778() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        fieldPosition0.toString();
    }

    @Test(timeout = 4000)
    public void test16779() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test16780() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test16781() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        FieldPosition fieldPosition0 = new FieldPosition(0);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test17809() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
    }

    @Test(timeout = 4000)
    public void test17810() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test17811() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test17812() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test17813() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test17814() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test17815() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test17816() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test17817() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test17818() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test18857() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test18860() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test18861() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test18862() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test18863() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test18864() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test18865() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test18866() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test18867() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test18868() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test18869() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test18870() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test18871() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test18872() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test18873() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test18874() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test18875() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test18876() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test19912() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
    }

    @Test(timeout = 4000)
    public void test19914() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test19915() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test19916() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test19917() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test19918() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test19919() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test19920() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test19921() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test19922() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test19923() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test19924() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test19925() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test19926() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format((-510L));
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test20931() throws Throwable {
        Locale locale0 = Locale.FRANCE;
    }

    @Test(timeout = 4000)
    public void test20932() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test20933() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test20934() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test20935() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test20936() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test20937() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test20938() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test20939() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test20940() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test20941() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test20942() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test20943() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test20944() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test20945() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test20946() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test20951() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
    }

    @Test(timeout = 4000)
    public void test20952() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test20953() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test20954() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test20955() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test20956() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test20957() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test20958() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test20959() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test20960() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test20961() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test20962() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
    }

    @Test(timeout = 4000)
    public void test20963() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test20964() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test20965() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test20966() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test20967() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test20968() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test20969() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test20970() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test20971() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test20972() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test20973() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test20974() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test211023() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test211026() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test211027() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test211028() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test211029() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test211030() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test211031() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test211032() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test211033() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test211034() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test211035() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test211036() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test211037() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test211038() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test211039() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test211040() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test211041() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test211042() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test211043() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test211044() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test211045() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test211046() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", 4704, 0, 0, 0, 0, 0, 6, 0);
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test221051() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
    }

    @Test(timeout = 4000)
    public void test221052() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test221053() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test221054() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test221055() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test221056() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test221057() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test221058() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test221059() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test221060() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test221061() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test221062() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test221063() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test221064() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test221065() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test221066() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test221071() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        fastDatePrinter0.toString();
    }

    @Test(timeout = 4000)
    public void test231072() throws Throwable {
        Locale locale0 = new Locale("");
    }

    @Test(timeout = 4000)
    public void test231073() throws Throwable {
        Locale locale0 = new Locale("");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test231074() throws Throwable {
        Locale locale0 = new Locale("");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test231075() throws Throwable {
        Locale locale0 = new Locale("");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test231076() throws Throwable {
        Locale locale0 = new Locale("");
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test231077() throws Throwable {
        Locale locale0 = new Locale("");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test231078() throws Throwable {
        Locale locale0 = new Locale("");
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test231079() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test231080() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test231081() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test231082() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test231083() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test231084() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test231085() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test231086() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test231087() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test231092() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        int[] intArray0 = new int[8];
        fastDatePrinter0.parseToken("", intArray0);
    }

    @Test(timeout = 4000)
    public void test241093() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
    }

    @Test(timeout = 4000)
    public void test241094() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test241095() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test241096() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test241097() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test241098() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test241099() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
    }

    @Test(timeout = 4000)
    public void test241100() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test241101() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test241102() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test241103() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test241104() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test241105() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test241106() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test241107() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test241108() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test241109() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test241110() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test241111() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test241112() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test241113() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test241114() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test241115() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test241116() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test241117() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test241118() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test241119() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test241124() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
        Locale locale0 = new Locale("", "", "");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", simpleTimeZone0, locale0);
        fastDatePrinter0.parseToken("u^l c4;oYk=9XJG`wd", (int[]) null);
    }

    @Test(timeout = 4000)
    public void test251132() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test251133() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test251134() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test251135() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test251136() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test251137() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test251138() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test251139() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test251140() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test251145() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
    }

    @Test(timeout = 4000)
    public void test251146() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer("FastDatePrinter[");
    }

    @Test(timeout = 4000)
    public void test251147() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer("FastDatePrinter[");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test251148() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer("FastDatePrinter[");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test251149() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer("FastDatePrinter[");
        fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test261152() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
    }

    @Test(timeout = 4000)
    public void test261153() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test261154() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test261155() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test261156() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test261157() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test261158() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test261159() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test261160() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test261161() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test261162() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test261163() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test261164() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test261165() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test261166() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test261167() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test261168() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test261173() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.format((Date) null);
    }

    @Test(timeout = 4000)
    public void test271205() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test271206() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
    }

    @Test(timeout = 4000)
    public void test281207() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    }

    @Test(timeout = 4000)
    public void test281208() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test281209() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test281210() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
    }

    @Test(timeout = 4000)
    public void test281211() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test281212() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test281213() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test281214() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test281215() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test281216() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test281217() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test281218() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test281219() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test281220() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test281221() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test281222() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test281223() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test281224() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test281225() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test281226() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test281231() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        fastDatePrinter0.format(0L, (StringBuffer) null);
    }

    @Test(timeout = 4000)
    public void test291232() throws Throwable {
        Locale locale0 = Locale.JAPAN;
    }

    @Test(timeout = 4000)
    public void test291233() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test291234() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test291235() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test291236() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test291237() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test291238() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test291239() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test291240() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test291241() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test291242() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test291243() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test291244() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test291245() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test291246() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test291247() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test291252() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        fastDatePrinter0.format((long) 0);
    }

    @Test(timeout = 4000)
    public void test301277() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
    }

    @Test(timeout = 4000)
    public void test301278() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test301279() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test301280() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test301281() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test301282() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'U", timeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
    }

    @Test(timeout = 4000)
    public void test311283() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(289, "");
    }

    @Test(timeout = 4000)
    public void test311284() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(289, "");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test311285() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(289, "");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test311286() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(289, "");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test311287() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(289, "");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test311288() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(289, "");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test311289() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(289, "");
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test321303() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter.getTimeZoneDisplay(simpleTimeZone0, true, 84, locale0);
    }

    @Test(timeout = 4000)
    public void test331304() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
    }

    @Test(timeout = 4000)
    public void test331305() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test331306() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
    }

    @Test(timeout = 4000)
    public void test331307() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test331308() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test331309() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test331310() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test331311() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test331312() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test331313() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test331314() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test331315() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test331316() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test331317() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test331318() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test331319() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test331320() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test331321() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test331322() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test331327() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
    }

    @Test(timeout = 4000)
    public void test331328() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
    }

    @Test(timeout = 4000)
    public void test331329() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test331330() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test331331() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test331334() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test331335() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test331336() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test331337() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test331338() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test331339() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test331340() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test331341() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test331342() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test331343() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test331344() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test331345() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test331346() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test331347() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test331348() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test331349() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test331350() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test341378() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
    }

    @Test(timeout = 4000)
    public void test341379() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
    }

    @Test(timeout = 4000)
    public void test341380() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test341381() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test341382() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test341385() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test341386() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test341387() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test341388() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test341389() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test341390() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test341391() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test341392() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test341393() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test341394() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test341395() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test341396() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test341397() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test341398() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test351427() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(385, 836, 100);
    }

    @Test(timeout = 4000)
    public void test351428() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(385, 836, 100);
        String string0 = fastDatePrinter0.format((Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test351430() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(385, 836, 100);
        String string0 = fastDatePrinter0.format((Date) mockDate0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test351431() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(385, 836, 100);
        String string0 = fastDatePrinter0.format((Date) mockDate0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test351432() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(385, 836, 100);
        String string0 = fastDatePrinter0.format((Date) mockDate0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test351433() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(385, 836, 100);
        String string0 = fastDatePrinter0.format((Date) mockDate0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test351434() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(385, 836, 100);
        String string0 = fastDatePrinter0.format((Date) mockDate0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test351435() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(385, 836, 100);
        String string0 = fastDatePrinter0.format((Date) mockDate0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test351436() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(385, 836, 100);
        String string0 = fastDatePrinter0.format((Date) mockDate0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test351437() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(385, 836, 100);
        String string0 = fastDatePrinter0.format((Date) mockDate0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test351438() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(385, 836, 100);
        String string0 = fastDatePrinter0.format((Date) mockDate0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test351439() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(385, 836, 100);
        String string0 = fastDatePrinter0.format((Date) mockDate0);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test361464() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
    }

    @Test(timeout = 4000)
    public void test361465() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test361466() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test361467() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test361468() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test361469() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
    }

    @Test(timeout = 4000)
    public void test361471() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test361472() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test361473() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test361474() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test361475() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test361476() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test361477() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test361478() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test361479() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test361480() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test361481() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test361482() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("?S", (TimeZone) null, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test371507() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        fastDatePrinter1.equals((Object) fastDatePrinter0);
    }

    @Test(timeout = 4000)
    public void test371508() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test371509() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test371510() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test371511() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test371512() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test371513() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test371514() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test371515() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        fastDatePrinter1.getPattern();
    }

    @Test(timeout = 4000)
    public void test371516() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        fastDatePrinter1.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test371521() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
    }

    @Test(timeout = 4000)
    public void test371522() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        fastDatePrinter0.equals((Object) fastDatePrinter1);
    }

    @Test(timeout = 4000)
    public void test371523() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        fastDatePrinter1.equals((Object) fastDatePrinter0);
    }

    @Test(timeout = 4000)
    public void test371526() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test371527() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test371528() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test371529() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test371530() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test371531() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test371532() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test371533() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test371534() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        fastDatePrinter1.getPattern();
    }

    @Test(timeout = 4000)
    public void test371535() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        FastDatePrinter fastDatePrinter1 = new FastDatePrinter("'U", (TimeZone) null, locale0);
        boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
        fastDatePrinter1.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test381568() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test381569() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
        boolean boolean0 = fastDatePrinter0.equals(mockDate0);
    }

    @Test(timeout = 4000)
    public void test381570() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
        boolean boolean0 = fastDatePrinter0.equals(mockDate0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test381571() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
        boolean boolean0 = fastDatePrinter0.equals(mockDate0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test381572() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
        boolean boolean0 = fastDatePrinter0.equals(mockDate0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test381573() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
        boolean boolean0 = fastDatePrinter0.equals(mockDate0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test381574() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
        boolean boolean0 = fastDatePrinter0.equals(mockDate0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test381575() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
        boolean boolean0 = fastDatePrinter0.equals(mockDate0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test381576() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
        boolean boolean0 = fastDatePrinter0.equals(mockDate0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test381577() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
        boolean boolean0 = fastDatePrinter0.equals(mockDate0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test381578() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
        boolean boolean0 = fastDatePrinter0.equals(mockDate0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test381579() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
        boolean boolean0 = fastDatePrinter0.equals(mockDate0);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test391604() throws Throwable {
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3m", (TimeZone) null, locale0);
        fastDatePrinter0.equals(fastDatePrinter0);
    }

    @Test(timeout = 4000)
    public void test401607() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
    }

    @Test(timeout = 4000)
    public void test401608() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test401609() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test401610() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test401611() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test401612() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test401613() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test401614() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test401615() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test401616() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test401617() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test401618() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test401619() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test401620() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test401621() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test401622() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test401623() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test401628() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringWriter stringWriter0 = new StringWriter();
    }

    @Test(timeout = 4000)
    public void test401629() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringWriter stringWriter0 = new StringWriter();
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test401630() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    }

    @Test(timeout = 4000)
    public void test401631() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test401632() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test401633() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test401634() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ITALIAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        fastDatePrinter0.format((Object) null, stringBuffer0, (FieldPosition) null);
    }

    @Test(timeout = 4000)
    public void test411666() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
    }

    @Test(timeout = 4000)
    public void test411668() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
    }

    @Test(timeout = 4000)
    public void test411669() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test411670() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test411671() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
    }

    @Test(timeout = 4000)
    public void test411672() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test411673() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        fieldPosition0.toString();
    }

    @Test(timeout = 4000)
    public void test411674() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test411675() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test411676() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test411679() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test411680() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test411681() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test411682() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test411683() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test411684() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test411685() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test411686() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test411687() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test411688() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test411689() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test411690() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test411691() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test411692() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test411693() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test411694() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test411695() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        fieldPosition0.toString();
    }

    @Test(timeout = 4000)
    public void test411696() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test411697() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test411698() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test411699() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        Long long0 = new Long((-3878L));
        StringBuffer stringBuffer0 = new StringBuffer("^-zSS]=}30h");
        FieldPosition fieldPosition0 = new FieldPosition(22);
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test421736() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
    }

    @Test(timeout = 4000)
    public void test421737() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test421738() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        fieldPosition0.toString();
    }

    @Test(timeout = 4000)
    public void test421739() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test421740() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test421741() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test421742() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test421743() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test421744() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test421745() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test421746() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test421747() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test421748() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test421749() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test421750() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test421751() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test421752() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test421753() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test421754() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test421755() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test421756() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        mockGregorianCalendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test421757() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        mockGregorianCalendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test421758() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        mockGregorianCalendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test421759() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test421760() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        fieldPosition0.toString();
    }

    @Test(timeout = 4000)
    public void test421761() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test421762() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), "");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
        FieldPosition fieldPosition0 = new FieldPosition(707);
        StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test431767() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
    }

    @Test(timeout = 4000)
    public void test431768() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test431769() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test431770() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test431771() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test431772() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test431773() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test431774() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
    }

    @Test(timeout = 4000)
    public void test431775() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test431776() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test431777() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test431778() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test431779() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test431780() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test431781() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test431782() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test431783() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test431788() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ">");
    }

    @Test(timeout = 4000)
    public void test431789() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ">");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test431790() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ">");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test431791() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ">");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 3);
    }

    @Test(timeout = 4000)
    public void test431792() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ">");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 3);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test431793() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ">");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 3);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test431794() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ">");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 3);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test431795() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        MockDate mockDate0 = new MockDate();
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter(">", (TimeZone) null, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ">");
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 3);
        fastDatePrinter0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test441798() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
    }

    @Test(timeout = 4000)
    public void test441799() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test441800() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test441801() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test441802() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test441803() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test441804() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test441805() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test441806() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test441807() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test441808() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test441809() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test441810() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test441811() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test441812() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test441813() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test441814() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test441819() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer();
    }

    @Test(timeout = 4000)
    public void test441820() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test441821() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test441822() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer();
        FieldPosition fieldPosition0 = new FieldPosition(2);
    }

    @Test(timeout = 4000)
    public void test441823() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer();
        FieldPosition fieldPosition0 = new FieldPosition(2);
        fieldPosition0.toString();
    }

    @Test(timeout = 4000)
    public void test441824() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer();
        FieldPosition fieldPosition0 = new FieldPosition(2);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test441825() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer();
        FieldPosition fieldPosition0 = new FieldPosition(2);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test441826() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer();
        FieldPosition fieldPosition0 = new FieldPosition(2);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test441827() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer();
        FieldPosition fieldPosition0 = new FieldPosition(2);
        fastDatePrinter0.format((Object) "", stringBuffer0, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test451828() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|,%v0'?,S*mCuPzXj");
    }

    @Test(timeout = 4000)
    public void test451829() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|,%v0'?,S*mCuPzXj");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test451830() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|,%v0'?,S*mCuPzXj");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test451831() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|,%v0'?,S*mCuPzXj");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test451832() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|,%v0'?,S*mCuPzXj");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test451833() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|,%v0'?,S*mCuPzXj");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test451834() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|,%v0'?,S*mCuPzXj");
        Locale locale0 = new Locale("|,%v0'?,S*mCuPzXj", "-])=eJBK;9R%8J$");
    }

    @Test(timeout = 4000)
    public void test451835() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|,%v0'?,S*mCuPzXj");
        Locale locale0 = new Locale("|,%v0'?,S*mCuPzXj", "-])=eJBK;9R%8J$");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test451836() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|,%v0'?,S*mCuPzXj");
        Locale locale0 = new Locale("|,%v0'?,S*mCuPzXj", "-])=eJBK;9R%8J$");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test451837() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|,%v0'?,S*mCuPzXj");
        Locale locale0 = new Locale("|,%v0'?,S*mCuPzXj", "-])=eJBK;9R%8J$");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test451838() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|,%v0'?,S*mCuPzXj");
        Locale locale0 = new Locale("|,%v0'?,S*mCuPzXj", "-])=eJBK;9R%8J$");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test451839() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|,%v0'?,S*mCuPzXj");
        Locale locale0 = new Locale("|,%v0'?,S*mCuPzXj", "-])=eJBK;9R%8J$");
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("|,%v0'?,S*mCuPzXj", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test461840() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
    }

    @Test(timeout = 4000)
    public void test461841() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test461842() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test461843() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test461844() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test461845() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test461846() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
        Locale locale0 = Locale.US;
    }

    @Test(timeout = 4000)
    public void test461847() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
        Locale locale0 = Locale.US;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test461848() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
        Locale locale0 = Locale.US;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test461849() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
        Locale locale0 = Locale.US;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test461850() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
        Locale locale0 = Locale.US;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test461851() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
        Locale locale0 = Locale.US;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test461852() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
        Locale locale0 = Locale.US;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test461853() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), "b' 2Vm5!<!YmV<eU,.K");
        Locale locale0 = Locale.US;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("1dt4", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test471854() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
    }

    @Test(timeout = 4000)
    public void test471855() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test471856() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test471857() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test471858() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test471859() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test471860() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
        Locale locale0 = Locale.GERMANY;
    }

    @Test(timeout = 4000)
    public void test471861() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
        Locale locale0 = Locale.GERMANY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test471862() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test471863() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
        Locale locale0 = Locale.GERMANY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test471864() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
        Locale locale0 = Locale.GERMANY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test471865() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
        Locale locale0 = Locale.GERMANY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test471866() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test471867() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), "+rANQitww");
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("+rANQitww", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test481870() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ROOT;
    }

    @Test(timeout = 4000)
    public void test481871() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ROOT;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test481872() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ROOT;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test481873() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ROOT;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test481874() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ROOT;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test481875() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ROOT;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test481876() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ROOT;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test481877() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter(")q%ebV,\"h?2k)_kk0", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test491878() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
    }

    @Test(timeout = 4000)
    public void test491879() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test491880() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test491881() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test491882() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test491883() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test491884() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
        Locale locale0 = Locale.FRANCE;
    }

    @Test(timeout = 4000)
    public void test491885() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
        Locale locale0 = Locale.FRANCE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test491886() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
        Locale locale0 = Locale.FRANCE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test491887() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
        Locale locale0 = Locale.FRANCE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test491888() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test491889() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
        Locale locale0 = Locale.FRANCE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test491890() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test491891() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField");
        Locale locale0 = Locale.FRANCE;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("pb[xb", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test501892() throws Throwable {
        Locale locale0 = Locale.CANADA;
    }

    @Test(timeout = 4000)
    public void test501893() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test501894() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test501895() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test501896() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test501897() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test501898() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test501899() throws Throwable {
        Locale locale0 = Locale.CANADA;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(416, "org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField");
    }

    @Test(timeout = 4000)
    public void test501900() throws Throwable {
        Locale locale0 = Locale.CANADA;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(416, "org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test501901() throws Throwable {
        Locale locale0 = Locale.CANADA;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(416, "org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test501902() throws Throwable {
        Locale locale0 = Locale.CANADA;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(416, "org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test501903() throws Throwable {
        Locale locale0 = Locale.CANADA;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(416, "org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test501904() throws Throwable {
        Locale locale0 = Locale.CANADA;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(416, "org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test501905() throws Throwable {
        Locale locale0 = Locale.CANADA;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(416, "org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField");
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test511908() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("`yEj]PggJm<c[*}8F", "`yEj]PggJm<c[*}8F", "|1!k+GRQ");
    }

    @Test(timeout = 4000)
    public void test511909() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("`yEj]PggJm<c[*}8F", "`yEj]PggJm<c[*}8F", "|1!k+GRQ");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test511910() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("`yEj]PggJm<c[*}8F", "`yEj]PggJm<c[*}8F", "|1!k+GRQ");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test511911() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("`yEj]PggJm<c[*}8F", "`yEj]PggJm<c[*}8F", "|1!k+GRQ");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test511912() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("`yEj]PggJm<c[*}8F", "`yEj]PggJm<c[*}8F", "|1!k+GRQ");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test511913() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("`yEj]PggJm<c[*}8F", "`yEj]PggJm<c[*}8F", "|1!k+GRQ");
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("Dnk2p#XqaR2<{+", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test521916() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
    }

    @Test(timeout = 4000)
    public void test521917() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test521918() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test521919() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test521920() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test521921() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test521922() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test521923() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("luK", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test531924() throws Throwable {
        Locale locale0 = Locale.GERMANY;
    }

    @Test(timeout = 4000)
    public void test531925() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test531926() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test531927() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test531928() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test531929() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test531930() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test531931() throws Throwable {
        Locale locale0 = Locale.GERMANY;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("89#1\"^hDjC", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test541934() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREA;
    }

    @Test(timeout = 4000)
    public void test541935() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test541936() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test541937() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test541938() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test541939() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test541940() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test541941() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREA;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("*d}ih>c", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test551949() throws Throwable {
        Locale locale0 = new Locale("");
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("178gYChd)1NS)Tf?<%T", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test561952() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    }

    @Test(timeout = 4000)
    public void test561953() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test561954() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test561955() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test561956() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test561957() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test561958() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test561959() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("@&^Zk<f$48Dq1", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test571960() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
    }

    @Test(timeout = 4000)
    public void test571961() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test571962() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test571963() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test571964() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test571965() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test571966() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
        Locale locale0 = Locale.PRC;
    }

    @Test(timeout = 4000)
    public void test571967() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
        Locale locale0 = Locale.PRC;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test571968() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
        Locale locale0 = Locale.PRC;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test571969() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
        Locale locale0 = Locale.PRC;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test571970() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
        Locale locale0 = Locale.PRC;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test571971() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
        Locale locale0 = Locale.PRC;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test571972() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
        Locale locale0 = Locale.PRC;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test571973() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, "");
        Locale locale0 = Locale.PRC;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("cS$R9L.W2Kf.}vrHeBh", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test581974() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
    }

    @Test(timeout = 4000)
    public void test581975() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test581976() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test581977() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test581978() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test581979() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test581980() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
        Locale locale0 = Locale.FRENCH;
    }

    @Test(timeout = 4000)
    public void test581981() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
        Locale locale0 = Locale.FRENCH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test581982() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
        Locale locale0 = Locale.FRENCH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test581983() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test581984() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
        Locale locale0 = Locale.FRENCH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test581985() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test581986() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
        Locale locale0 = Locale.FRENCH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test581987() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "b=dBc");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("b=dBc", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test591990() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
    }

    @Test(timeout = 4000)
    public void test591991() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test591992() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test591993() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test591994() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test591995() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test591996() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test591997() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter(":Mak~{1XvUuYRt-0)%", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test601998() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("YfB{@C0i5");
    }

    @Test(timeout = 4000)
    public void test601999() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("YfB{@C0i5");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test602000() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("YfB{@C0i5");
        Locale locale0 = Locale.FRENCH;
    }

    @Test(timeout = 4000)
    public void test602001() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("YfB{@C0i5");
        Locale locale0 = Locale.FRENCH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test602002() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("YfB{@C0i5");
        Locale locale0 = Locale.FRENCH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test602003() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("YfB{@C0i5");
        Locale locale0 = Locale.FRENCH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test602004() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("YfB{@C0i5");
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test602005() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("YfB{@C0i5");
        Locale locale0 = Locale.FRENCH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test602006() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("YfB{@C0i5");
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test602007() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("YfB{@C0i5");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("YfB{@C0i5", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test612008() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("[K8VyOd*8<}eh");
    }

    @Test(timeout = 4000)
    public void test612009() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("[K8VyOd*8<}eh");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test612010() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("[K8VyOd*8<}eh");
        Locale locale0 = Locale.CHINESE;
    }

    @Test(timeout = 4000)
    public void test612011() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("[K8VyOd*8<}eh");
        Locale locale0 = Locale.CHINESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test612012() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("[K8VyOd*8<}eh");
        Locale locale0 = Locale.CHINESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test612013() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("[K8VyOd*8<}eh");
        Locale locale0 = Locale.CHINESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test612014() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("[K8VyOd*8<}eh");
        Locale locale0 = Locale.CHINESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test612015() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("[K8VyOd*8<}eh");
        Locale locale0 = Locale.CHINESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test612016() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("[K8VyOd*8<}eh");
        Locale locale0 = Locale.CHINESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test612017() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("[K8VyOd*8<}eh");
        Locale locale0 = Locale.CHINESE;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("[K8VyOd*8<}eh", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test622020() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.JAPAN;
    }

    @Test(timeout = 4000)
    public void test622021() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.JAPAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test622022() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.JAPAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test622023() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.JAPAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test622024() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.JAPAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test622025() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.JAPAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test622026() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.JAPAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test622027() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("|UsJ^|", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test632028() throws Throwable {
        Locale locale0 = new Locale("sG`W$T mqh5?y>", "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNumberRule");
    }

    @Test(timeout = 4000)
    public void test632029() throws Throwable {
        Locale locale0 = new Locale("sG`W$T mqh5?y>", "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNumberRule");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test632030() throws Throwable {
        Locale locale0 = new Locale("sG`W$T mqh5?y>", "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNumberRule");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test632031() throws Throwable {
        Locale locale0 = new Locale("sG`W$T mqh5?y>", "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNumberRule");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test632032() throws Throwable {
        Locale locale0 = new Locale("sG`W$T mqh5?y>", "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNumberRule");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test632033() throws Throwable {
        Locale locale0 = new Locale("sG`W$T mqh5?y>", "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNumberRule");
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("sG`W$T mqh5?y>", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test642043() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREA;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("h$0[~>RQv}cn4&@*", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test652046() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("yQgo$_\"/0q;z[");
    }

    @Test(timeout = 4000)
    public void test652047() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("yQgo$_\"/0q;z[");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test652048() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("yQgo$_\"/0q;z[");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test652049() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("yQgo$_\"/0q;z[");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test652050() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("yQgo$_\"/0q;z[");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test652051() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("yQgo$_\"/0q;z[");
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test652052() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = new Locale("yQgo$_\"/0q;z[");
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("yQgo$_\"/0q;z[", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test662055() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
    }

    @Test(timeout = 4000)
    public void test662056() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test662057() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test662058() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test662059() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test662060() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test662061() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test662062() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("#%&PZyV ", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test672063() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("{;");
    }

    @Test(timeout = 4000)
    public void test672064() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("{;");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test672065() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("{;");
        Locale locale0 = Locale.PRC;
    }

    @Test(timeout = 4000)
    public void test672066() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("{;");
        Locale locale0 = Locale.PRC;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test672067() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("{;");
        Locale locale0 = Locale.PRC;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test672068() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("{;");
        Locale locale0 = Locale.PRC;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test672069() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("{;");
        Locale locale0 = Locale.PRC;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test672070() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("{;");
        Locale locale0 = Locale.PRC;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test672071() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("{;");
        Locale locale0 = Locale.PRC;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test672072() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("{;");
        Locale locale0 = Locale.PRC;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("HO%A^\"K8ddqa", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test682073() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
    }

    @Test(timeout = 4000)
    public void test682074() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test682075() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test682076() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test682077() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test682078() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test682079() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
        Locale locale0 = Locale.UK;
    }

    @Test(timeout = 4000)
    public void test682080() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
        Locale locale0 = Locale.UK;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test682081() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
        Locale locale0 = Locale.UK;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test682082() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
        Locale locale0 = Locale.UK;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test682083() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
        Locale locale0 = Locale.UK;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test682084() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
        Locale locale0 = Locale.UK;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test682085() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
        Locale locale0 = Locale.UK;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test682086() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), "61[htC{kh/CZ&x+");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("0)7d@9 2zNlqO{F", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test692096() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("L\"7", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test702097() throws Throwable {
        Locale locale0 = Locale.GERMAN;
    }

    @Test(timeout = 4000)
    public void test702098() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test702099() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test702100() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test702101() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test702102() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test702103() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test702104() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("ZwDI2A", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test712111() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.FRENCH;
    }

    @Test(timeout = 4000)
    public void test712112() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test712113() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.FRENCH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test712114() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.FRENCH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test712115() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.FRENCH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test712116() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test712117() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.FRENCH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test712118() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("HuO_dA7_y", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test722119() throws Throwable {
        Locale locale0 = Locale.UK;
    }

    @Test(timeout = 4000)
    public void test722120() throws Throwable {
        Locale locale0 = Locale.UK;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test722121() throws Throwable {
        Locale locale0 = Locale.UK;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test722122() throws Throwable {
        Locale locale0 = Locale.UK;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test722123() throws Throwable {
        Locale locale0 = Locale.UK;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test722124() throws Throwable {
        Locale locale0 = Locale.UK;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test722125() throws Throwable {
        Locale locale0 = Locale.UK;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test722126() throws Throwable {
        Locale locale0 = Locale.UK;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "29EF:eOm_{2('e3;");
    }

    @Test(timeout = 4000)
    public void test722127() throws Throwable {
        Locale locale0 = Locale.UK;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "29EF:eOm_{2('e3;");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test722128() throws Throwable {
        Locale locale0 = Locale.UK;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "29EF:eOm_{2('e3;");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test722129() throws Throwable {
        Locale locale0 = Locale.UK;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "29EF:eOm_{2('e3;");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test722130() throws Throwable {
        Locale locale0 = Locale.UK;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "29EF:eOm_{2('e3;");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test722131() throws Throwable {
        Locale locale0 = Locale.UK;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "29EF:eOm_{2('e3;");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test722132() throws Throwable {
        Locale locale0 = Locale.UK;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "29EF:eOm_{2('e3;");
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("29EF:eOm_{2('e3;", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test732133() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("}Dx1HW;");
    }

    @Test(timeout = 4000)
    public void test732134() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("}Dx1HW;");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test732135() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("}Dx1HW;");
        Locale locale0 = Locale.ITALY;
    }

    @Test(timeout = 4000)
    public void test732136() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("}Dx1HW;");
        Locale locale0 = Locale.ITALY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test732137() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("}Dx1HW;");
        Locale locale0 = Locale.ITALY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test732138() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("}Dx1HW;");
        Locale locale0 = Locale.ITALY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test732139() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("}Dx1HW;");
        Locale locale0 = Locale.ITALY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test732140() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("}Dx1HW;");
        Locale locale0 = Locale.ITALY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test732141() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("}Dx1HW;");
        Locale locale0 = Locale.ITALY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test732142() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("}Dx1HW;");
        Locale locale0 = Locale.ITALY;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("}Dx1HW;", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test742152() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.JAPAN;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("4C$rsL!{B,pZZ,DVZ", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test752160() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("}B'4Q=Hc.", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test762161() throws Throwable {
        Locale locale0 = Locale.FRENCH;
    }

    @Test(timeout = 4000)
    public void test762162() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test762163() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test762164() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test762165() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test762166() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test762167() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test762168() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        TimeZone timeZone0 = TimeZone.getDefault();
    }

    @Test(timeout = 4000)
    public void test762169() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        TimeZone timeZone0 = TimeZone.getDefault();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test762170() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDatePrinter fastDatePrinter0 = null;
        fastDatePrinter0 = new FastDatePrinter("-AR", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test772171() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
    }

    @Test(timeout = 4000)
    public void test772172() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test772173() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
    }

    @Test(timeout = 4000)
    public void test772174() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test772175() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test772176() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test772177() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test772178() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test772179() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test772180() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test772181() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test772182() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test772183() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test772184() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test772185() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test772186() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test772187() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test772188() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test772189() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test772194() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
    }

    @Test(timeout = 4000)
    public void test772195() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test772196() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test772197() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test772200() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test772201() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test772202() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test772203() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test772204() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test772205() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test772206() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test772207() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test772208() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test772209() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test772210() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test772211() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test772212() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("'U");
        Locale locale0 = Locale.TAIWAN;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "'U");
        StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test782240() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
    }

    @Test(timeout = 4000)
    public void test782241() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
    }

    @Test(timeout = 4000)
    public void test782242() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test782243() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test782244() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test782247() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test782248() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test782249() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test782250() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test782251() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test782252() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test782253() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test782254() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test782255() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test782256() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test782257() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test782258() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test782259() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test782260() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test782261() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test782262() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test782263() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("z{Ky");
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z{Ky", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
        StringBuffer stringBuffer0 = new StringBuffer(3);
        StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test792292() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
    }

    @Test(timeout = 4000)
    public void test792293() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
    }

    @Test(timeout = 4000)
    public void test792294() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test792295() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    }

    @Test(timeout = 4000)
    public void test792296() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test792297() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test792298() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test792299() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test792302() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test792303() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test792304() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test792305() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test792306() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test792307() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test792308() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test792309() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test792310() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test792311() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test792312() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test792313() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test792314() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test792315() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test792316() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test792317() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test792318() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test792319() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
        StringWriter stringWriter0 = new StringWriter(2);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test802324() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
    }

    @Test(timeout = 4000)
    public void test802325() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test802326() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test802327() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test802328() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test802329() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test802330() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
    }

    @Test(timeout = 4000)
    public void test802331() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test802332() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test802333() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test802334() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test802335() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test802336() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test802337() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test802338() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test802339() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test802340() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test802341() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test802342() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test802343() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test802344() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test802345() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test802346() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test802347() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test802348() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test802349() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test802350() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test802355() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test802357() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test802358() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test802359() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test802360() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test802361() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test802362() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test802363() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test802364() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test802365() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test802366() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test802367() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test802368() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test802369() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.getPattern();
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test812405() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
    }

    @Test(timeout = 4000)
    public void test812406() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test812407() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test812408() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test812411() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test812412() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test812413() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test812414() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test812415() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test812416() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test812417() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test812418() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test812419() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test812420() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test812421() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test812422() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test812423() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test812424() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test812425() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test812426() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test812427() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer("^-GMT+00:00322]=}308");
        StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test822463() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
    }

    @Test(timeout = 4000)
    public void test822465() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test822466() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test822467() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test822468() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test822469() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test822470() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test822471() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test822472() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test822473() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test822474() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test822475() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test822476() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test822477() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        String string0 = fastDatePrinter0.format(1080L);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test832505() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.hashCode();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test832506() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.hashCode();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test832507() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.hashCode();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test832508() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.hashCode();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test832509() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.hashCode();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test832510() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.hashCode();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test832511() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.hashCode();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test832512() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.hashCode();
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test832513() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.hashCode();
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test832514() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CANADA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        fastDatePrinter0.hashCode();
    }

    @Test(timeout = 4000)
    public void test842541() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
    }

    @Test(timeout = 4000)
    public void test842544() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test842545() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test842546() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test842547() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test842548() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test842549() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test842550() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test842551() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test842552() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test842553() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        locale1.getCountry();
    }

    @Test(timeout = 4000)
    public void test842554() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        locale1.getLanguage();
    }

    @Test(timeout = 4000)
    public void test842555() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        locale1.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test842556() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        locale1.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test842557() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        locale1.getVariant();
    }

    @Test(timeout = 4000)
    public void test842558() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.CHINA;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
        Locale locale1 = fastDatePrinter0.getLocale();
        locale1.toString();
    }

    @Test(timeout = 4000)
    public void test852587() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        String string0 = fastDatePrinter0.toString();
    }

    @Test(timeout = 4000)
    public void test852589() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        String string0 = fastDatePrinter0.toString();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test852590() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        String string0 = fastDatePrinter0.toString();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test852591() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        String string0 = fastDatePrinter0.toString();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test852592() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        String string0 = fastDatePrinter0.toString();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test852593() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        String string0 = fastDatePrinter0.toString();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test852594() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        String string0 = fastDatePrinter0.toString();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test852595() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        String string0 = fastDatePrinter0.toString();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test852596() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        String string0 = fastDatePrinter0.toString();
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test852597() throws Throwable {
        ZoneId zoneId0 = ZoneId.systemDefault();
        TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
        Locale locale0 = Locale.FRENCH;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%-<", timeZone0, locale0);
        String string0 = fastDatePrinter0.toString();
        fastDatePrinter0.getPattern();
    }

    @Test(timeout = 4000)
    public void test862602() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "^-zSS]=}30h");
        Locale locale0 = Locale.UK;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^-zSS]=}30h", simpleTimeZone0, locale0);
        int int0 = fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test872603() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
        fastDatePrinter0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test872604() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, "~G(z)");
        Locale locale0 = Locale.ROOT;
        FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~G(z)", simpleTimeZone0, locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        String string0 = fastDatePrinter0.format(calendar0);
    }
}
