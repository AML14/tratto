/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:26:24 GMT 2023
 */
package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-13), locale0);
    }

    @Test(timeout = 4000)
    public void test0119() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
    }

    @Test(timeout = 4000)
    public void test0120() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0121() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0122() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0123() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0124() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0125() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0126() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("a3i%lC&UrL#\"u8FX");
        Locale locale0 = Locale.ENGLISH;
        String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, true, 0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0228() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test0229() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test0230() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test0231() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test0232() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0233() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
    }

    @Test(timeout = 4000)
    public void test0234() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0235() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0236() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0237() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0238() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0239() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0240() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
    }

    @Test(timeout = 4000)
    public void test0241() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test0242() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test0243() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test0244() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test0245() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0246() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0247() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0248() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0249() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0250() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0251() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0252() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test0253() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test0254() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-237), "}63CIv2");
        Locale locale0 = Locale.CANADA;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (TimeZone) simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test0359() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("H,'-ra^I)", (TimeZone) null);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test0360() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("H,'-ra^I)", (TimeZone) null);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test0361() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("H,'-ra^I)", (TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test0466() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0467() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0468() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0469() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0470() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0471() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0472() throws Throwable {
        Locale locale0 = Locale.KOREAN;
    }

    @Test(timeout = 4000)
    public void test0473() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("|", locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0474() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("|", locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0475() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("|", locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0476() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("|", locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0477() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("|", locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0478() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("|", locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0479() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("|", locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test0480() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("|", locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test0481() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("|", locale0);
    }

    @Test(timeout = 4000)
    public void test0586() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("h:mm a");
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test0587() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("h:mm a");
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test0588() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("h:mm a");
    }

    @Test(timeout = 4000)
    public void test0693() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "z@9R#W8%Q&dA}l\"");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test0694() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "z@9R#W8%Q&dA}l\"");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test0695() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "z@9R#W8%Q&dA}l\"");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test0696() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "z@9R#W8%Q&dA}l\"");
    }

    @Test(timeout = 4000)
    public void test0697() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "z@9R#W8%Q&dA}l\"");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test0698() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "z@9R#W8%Q&dA}l\"");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test0699() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "z@9R#W8%Q&dA}l\"");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test06100() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "z@9R#W8%Q&dA}l\"");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test06101() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "z@9R#W8%Q&dA}l\"");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test06102() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "z@9R#W8%Q&dA}l\"");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test07107() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test07108() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test07109() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    }

    @Test(timeout = 4000)
    public void test07114() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test07115() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test07116() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer();
    }

    @Test(timeout = 4000)
    public void test07117() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer();
        MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
    }

    @Test(timeout = 4000)
    public void test07118() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer();
        MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test07120() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer();
        MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test07121() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer();
        MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test07122() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer();
        MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test07123() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer();
        MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test07124() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer();
        MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test07125() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer();
        MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test07126() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer();
        MockDate mockDate0 = new MockDate(2, 90, 3, 58, 1, 2623);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test08132() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test08133() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test08134() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
    }

    @Test(timeout = 4000)
    public void test08139() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
    }

    @Test(timeout = 4000)
    public void test08140() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
        String string0 = fastDateFormat0.format((Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test08141() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test08142() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test08143() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-845), 1, 2605, 2605, 13, 1);
        String string0 = fastDateFormat0.format((Date) mockDate0);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test09149() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test09150() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
    }

    @Test(timeout = 4000)
    public void test09151() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test09152() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test09153() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test09154() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
    }

    @Test(timeout = 4000)
    public void test09159() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        String string0 = fastDateFormat0.format((Calendar) null);
    }

    @Test(timeout = 4000)
    public void test09160() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        String string0 = fastDateFormat0.format((Calendar) null);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test09161() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        String string0 = fastDateFormat0.format((Calendar) null);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test09162() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", timeZone0);
        String string0 = fastDateFormat0.format((Calendar) null);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test10175() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test10176() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test10177() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
    }

    @Test(timeout = 4000)
    public void test10178() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test10179() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test10180() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test10181() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test10182() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test10183() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test10184() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
    }

    @Test(timeout = 4000)
    public void test10185() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    }

    @Test(timeout = 4000)
    public void test10186() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test10187() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test10188() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test10189() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    }

    @Test(timeout = 4000)
    public void test10190() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test10192() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test10193() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test10194() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test10195() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test10196() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test10197() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test10198() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test10199() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test10200() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test10201() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test10202() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test10203() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        mockGregorianCalendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test10204() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        mockGregorianCalendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test10205() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        mockGregorianCalendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test10206() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test10207() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test10208() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test10209() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test10210() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TAIWAN;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test11226() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test11228() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test11229() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test11230() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test11231() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test11232() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test11233() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format(0L, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test12239() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test12240() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test12241() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test12242() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test12243() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test12244() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test12245() throws Throwable {
        Locale locale0 = Locale.FRANCE;
    }

    @Test(timeout = 4000)
    public void test12246() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test12247() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test12248() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test12249() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test12250() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test12251() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test12252() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test12253() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test12254() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
    }

    @Test(timeout = 4000)
    public void test12259() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(1L);
    }

    @Test(timeout = 4000)
    public void test12260() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(1L);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test12261() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(1L);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test12262() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(1L);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test12263() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(1L);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test12264() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(1L);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test12265() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(1L);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test12266() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(1L);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test12267() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        String string0 = fastDateFormat0.format(1L);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test13273() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test13274() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test13275() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test13276() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test13277() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test13278() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test13279() throws Throwable {
        Locale locale0 = Locale.GERMAN;
    }

    @Test(timeout = 4000)
    public void test13280() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test13281() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test13282() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test13283() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test13284() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test13285() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test13286() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test13287() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test13288() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
    }

    @Test(timeout = 4000)
    public void test13293() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test13294() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test13295() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test13296() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test13297() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
    }

    @Test(timeout = 4000)
    public void test13298() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test13299() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
    }

    @Test(timeout = 4000)
    public void test13300() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test13301() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test13302() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test13303() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    }

    @Test(timeout = 4000)
    public void test13304() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test13306() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test13307() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test13308() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test13309() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test13310() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test13311() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test13312() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test13313() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test13314() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test13315() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test13316() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test13317() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test13318() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test13319() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test13320() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test13321() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test13322() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Calendar calendar0 = MockCalendar.getInstance();
        StringWriter stringWriter0 = new StringWriter(87);
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test14328() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test14329() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test14330() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    }

    @Test(timeout = 4000)
    public void test14335() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        int[] intArray0 = new int[4];
        fastDateFormat0.parseToken("", intArray0);
    }

    @Test(timeout = 4000)
    public void test15336() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test15337() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test15338() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test15339() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test15340() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test15341() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test15342() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
    }

    @Test(timeout = 4000)
    public void test15343() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test15344() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test15345() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test15346() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test15347() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test15348() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test15349() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test15350() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test15351() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    }

    @Test(timeout = 4000)
    public void test15356() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        int[] intArray0 = new int[2];
        fastDateFormat0.parseToken((String) null, intArray0);
    }

    @Test(timeout = 4000)
    public void test16364() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test16365() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test16366() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test16367() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test16368() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test16369() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test16370() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test16371() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test16372() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    }

    @Test(timeout = 4000)
    public void test16377() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        int[] intArray0 = new int[0];
        fastDateFormat0.parseToken("", intArray0);
    }

    @Test(timeout = 4000)
    public void test17385() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 0, locale0);
    }

    @Test(timeout = 4000)
    public void test18388() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.forLanguageTag("");
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test18389() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.forLanguageTag("");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test18390() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.forLanguageTag("");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test18391() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.forLanguageTag("");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test18392() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.forLanguageTag("");
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test18393() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.forLanguageTag("");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test18394() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.forLanguageTag("");
    }

    @Test(timeout = 4000)
    public void test18395() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.forLanguageTag("");
        FastDateFormat.getTimeInstance(1342, timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test19396() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2598, "pl$GK}pCq!vdu)CCY]");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test19397() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2598, "pl$GK}pCq!vdu)CCY]");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test19398() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2598, "pl$GK}pCq!vdu)CCY]");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test19399() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2598, "pl$GK}pCq!vdu)CCY]");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test19400() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2598, "pl$GK}pCq!vdu)CCY]");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test19401() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2598, "pl$GK}pCq!vdu)CCY]");
    }

    @Test(timeout = 4000)
    public void test19402() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2598, "pl$GK}pCq!vdu)CCY]");
        FastDateFormat.getTimeInstance(15, (TimeZone) simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test20403() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test20404() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test20405() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test20406() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test20407() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test20408() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test20409() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
    }

    @Test(timeout = 4000)
    public void test20410() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat.getTimeInstance(137, locale0);
    }

    @Test(timeout = 4000)
    public void test21411() throws Throwable {
        FastDateFormat.getTimeInstance(1437);
    }

    @Test(timeout = 4000)
    public void test22412() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("xc)7)F1UEw)DV[lb");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test22413() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("xc)7)F1UEw)DV[lb");
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test22414() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("xc)7)F1UEw)DV[lb");
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test22415() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("xc)7)F1UEw)DV[lb");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test22416() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("xc)7)F1UEw)DV[lb");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test22417() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("xc)7)F1UEw)DV[lb");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test22418() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("xc)7)F1UEw)DV[lb");
    }

    @Test(timeout = 4000)
    public void test22419() throws Throwable {
        Locale locale0 = Locale.forLanguageTag("xc)7)F1UEw)DV[lb");
        FastDateFormat.getInstance((String) null, (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test23420() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "dy{;4>3.*");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test23421() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "dy{;4>3.*");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test23422() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "dy{;4>3.*");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test23423() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "dy{;4>3.*");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test23424() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "dy{;4>3.*");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test23425() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "dy{;4>3.*");
    }

    @Test(timeout = 4000)
    public void test23426() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "dy{;4>3.*");
        FastDateFormat.getInstance((String) null, (TimeZone) simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test24427() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test24428() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test24429() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test24430() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test24431() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test24432() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test24433() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
    }

    @Test(timeout = 4000)
    public void test24434() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat.getInstance((String) null, locale0);
    }

    @Test(timeout = 4000)
    public void test25435() throws Throwable {
        FastDateFormat.getInstance((String) null);
    }

    @Test(timeout = 4000)
    public void test26436() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test26437() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test26438() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test26439() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test26440() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test26441() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
    }

    @Test(timeout = 4000)
    public void test26442() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
        Locale locale0 = Locale.KOREAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test26443() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
        Locale locale0 = Locale.KOREAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test26444() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
        Locale locale0 = Locale.KOREAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test26445() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
        Locale locale0 = Locale.KOREAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test26446() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
        Locale locale0 = Locale.KOREAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test26447() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
        Locale locale0 = Locale.KOREAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test26448() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
        Locale locale0 = Locale.KOREAN;
    }

    @Test(timeout = 4000)
    public void test26449() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1314, "No date time pattern for locale: ");
        Locale locale0 = Locale.KOREAN;
        FastDateFormat.getDateTimeInstance(3, 830, (TimeZone) simpleTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test27457() throws Throwable {
        Locale locale0 = Locale.ITALIAN;
        FastDateFormat.getDateTimeInstance(6, 6, locale0);
    }

    @Test(timeout = 4000)
    public void test28458() throws Throwable {
        FastDateFormat.getDateTimeInstance((-761), (-761));
    }

    @Test(timeout = 4000)
    public void test29466() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        TimeZone timeZone0 = TimeZone.getTimeZone("pattern must not be null");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test29467() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        TimeZone timeZone0 = TimeZone.getTimeZone("pattern must not be null");
    }

    @Test(timeout = 4000)
    public void test29468() throws Throwable {
        Locale locale0 = Locale.FRANCE;
        TimeZone timeZone0 = TimeZone.getTimeZone("pattern must not be null");
        FastDateFormat.getDateInstance(1270, timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test30469() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test30470() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test30471() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test30472() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test30473() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test30474() throws Throwable {
        Locale locale0 = Locale.CANADA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test30475() throws Throwable {
        Locale locale0 = Locale.CANADA;
    }

    @Test(timeout = 4000)
    public void test30476() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat.getDateInstance(92, locale0);
    }

    @Test(timeout = 4000)
    public void test31477() throws Throwable {
        FastDateFormat.getDateInstance(3153);
    }

    @Test(timeout = 4000)
    public void test32485() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test32486() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test32487() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test32488() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test32489() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test32490() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test32491() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test32492() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test32493() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    }

    @Test(timeout = 4000)
    public void test32498() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        MockDate mockDate0 = new MockDate(0, 0, (-892), (-1777), 0);
    }

    @Test(timeout = 4000)
    public void test32499() throws Throwable {
        Locale locale0 = Locale.ENGLISH;
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
        MockDate mockDate0 = new MockDate(0, 0, (-892), (-1777), 0);
        fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    }

    @Test(timeout = 4000)
    public void test33520() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        fastDateFormat0.format((Date) null);
    }

    @Test(timeout = 4000)
    public void test34528() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "G(XT");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test34529() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "G(XT");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test34530() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "G(XT");
    }

    @Test(timeout = 4000)
    public void test34531() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "G(XT");
        fastDateFormat0.format((Calendar) null, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test35539() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.format((long) 43, (StringBuffer) null);
    }

    @Test(timeout = 4000)
    public void test36550() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        StringBuffer stringBuffer0 = new StringBuffer();
        fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test37553() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat0 = null;
        fastDateFormat0 = new FastDateFormat("kzU*z", timeZone0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test38561() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-2233), 2, 0);
    }

    @Test(timeout = 4000)
    public void test38562() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-2233), 2, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test38563() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-2233), 2, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test38564() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-2233), 2, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
    }

    @Test(timeout = 4000)
    public void test38565() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-2233), 2, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    }

    @Test(timeout = 4000)
    public void test38567() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-2233), 2, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test38568() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-2233), 2, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test38569() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-2233), 2, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test38570() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-2233), 2, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test38571() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-2233), 2, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test38572() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-2233), 2, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test38573() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("");
        MockDate mockDate0 = new MockDate((-2233), 2, 0);
        StringBuffer stringBuffer0 = new StringBuffer();
        StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test39586() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test39587() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
    }

    @Test(timeout = 4000)
    public void test39588() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
    }

    @Test(timeout = 4000)
    public void test39589() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test39590() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
        fastDateFormat1.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test39591() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
        fastDateFormat1.getPattern();
    }

    @Test(timeout = 4000)
    public void test39596() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
        fastDateFormat1.equals((Object) fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test39598() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
        boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test39601() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
        boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test39602() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
        boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test39603() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
        boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test39604() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
        boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
        fastDateFormat1.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test39605() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
        boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
        fastDateFormat1.getPattern();
    }

    @Test(timeout = 4000)
    public void test39614() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
        boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
        fastDateFormat0.equals((Object) fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test39615() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        TimeZone timeZone0 = TimeZone.getDefault();
        FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(3, timeZone0);
        boolean boolean0 = fastDateFormat1.equals(fastDateFormat0);
        fastDateFormat1.equals((Object) fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test40623() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test40624() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test40625() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test41637() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test41638() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test41639() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
    }

    @Test(timeout = 4000)
    public void test41640() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        FieldPosition fieldPosition0 = new FieldPosition(3);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test41641() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        FieldPosition fieldPosition0 = new FieldPosition(3);
        fieldPosition0.toString();
    }

    @Test(timeout = 4000)
    public void test41642() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        FieldPosition fieldPosition0 = new FieldPosition(3);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test41643() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        FieldPosition fieldPosition0 = new FieldPosition(3);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test41644() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        FieldPosition fieldPosition0 = new FieldPosition(3);
    }

    @Test(timeout = 4000)
    public void test41645() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        FieldPosition fieldPosition0 = new FieldPosition(3);
        fastDateFormat0.format((Object) null, stringBuffer0, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test42653() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
    }

    @Test(timeout = 4000)
    public void test42655() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test42656() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test42657() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
    }

    @Test(timeout = 4000)
    public void test42658() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test42659() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test42660() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test42661() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
    }

    @Test(timeout = 4000)
    public void test42662() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test42664() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test42665() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test42666() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test42667() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test42668() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test42669() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test42670() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test42671() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test42672() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        Long long0 = new Long(0);
        StringBuffer stringBuffer0 = new StringBuffer();
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1084);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test43685() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition(3);
        parsePosition0.getErrorIndex();
    }

    @Test(timeout = 4000)
    public void test43686() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition(3);
        parsePosition0.toString();
    }

    @Test(timeout = 4000)
    public void test43687() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition(3);
        parsePosition0.getIndex();
    }

    @Test(timeout = 4000)
    public void test43688() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition(3);
    }

    @Test(timeout = 4000)
    public void test43689() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition(3);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "WoF");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test43690() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition(3);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "WoF");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test43691() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition(3);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "WoF");
    }

    @Test(timeout = 4000)
    public void test43692() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition(3);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "WoF");
        FieldPosition fieldPosition0 = new FieldPosition(0);
        fieldPosition0.toString();
    }

    @Test(timeout = 4000)
    public void test43693() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition(3);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "WoF");
        FieldPosition fieldPosition0 = new FieldPosition(0);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test43694() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition(3);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "WoF");
        FieldPosition fieldPosition0 = new FieldPosition(0);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test43695() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition(3);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "WoF");
        FieldPosition fieldPosition0 = new FieldPosition(0);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test43696() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition(3);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "WoF");
        FieldPosition fieldPosition0 = new FieldPosition(0);
    }

    @Test(timeout = 4000)
    public void test43697() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition(3);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "WoF");
        FieldPosition fieldPosition0 = new FieldPosition(0);
        fastDateFormat0.format((Object) parsePosition0, stringBuffer0, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test44705() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
    }

    @Test(timeout = 4000)
    public void test44706() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test44707() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test44708() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
    }

    @Test(timeout = 4000)
    public void test44709() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test44710() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test44711() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test44712() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    }

    @Test(timeout = 4000)
    public void test44713() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
    }

    @Test(timeout = 4000)
    public void test44715() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test44716() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test44717() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test44718() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test44719() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test44720() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
        fieldPosition0.getField();
    }

    @Test(timeout = 4000)
    public void test44721() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
        fieldPosition0.getEndIndex();
    }

    @Test(timeout = 4000)
    public void test44722() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
        fieldPosition0.getBeginIndex();
    }

    @Test(timeout = 4000)
    public void test44723() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
        stringBuffer1.toString();
    }

    @Test(timeout = 4000)
    public void test44724() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        MockDate mockDate0 = new MockDate();
        StringBuffer stringBuffer0 = new StringBuffer(97);
        Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
        FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
        stringBuffer1.length();
    }

    @Test(timeout = 4000)
    public void test45737() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[9];
        String string0 = fastDateFormat0.parseToken("United Kingdom", intArray0);
    }

    @Test(timeout = 4000)
    public void test45740() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[9];
        String string0 = fastDateFormat0.parseToken("United Kingdom", intArray0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test45741() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int[] intArray0 = new int[9];
        String string0 = fastDateFormat0.parseToken("United Kingdom", intArray0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test46749() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test46750() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test46751() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test46752() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test46753() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test46754() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test46755() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
    }

    @Test(timeout = 4000)
    public void test46756() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
    }

    @Test(timeout = 4000)
    public void test46757() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test46758() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test46759() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test46760() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test46761() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test46762() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test46764() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test46765() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test46766() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test46767() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test46768() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test46769() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test46770() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test46771() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test46772() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test46773() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test46778() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    }

    @Test(timeout = 4000)
    public void test46780() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test46781() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test46782() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test46783() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test46784() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test46785() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test46786() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test46787() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test46788() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test46789() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        fastDateFormat1.getPattern();
    }

    @Test(timeout = 4000)
    public void test46790() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        fastDateFormat1.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test46799() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        fastDateFormat1.equals((Object) fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test46801() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
    }

    @Test(timeout = 4000)
    public void test46803() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test46804() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test46805() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test46806() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test46807() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test46808() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test46809() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        fastDateFormat2.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test46810() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        fastDateFormat2.getPattern();
    }

    @Test(timeout = 4000)
    public void test46815() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        fastDateFormat2.equals((Object) fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test46816() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        fastDateFormat2.equals((Object) fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test46818() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
    }

    @Test(timeout = 4000)
    public void test46821() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
        fastDateFormat3.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test46822() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
        fastDateFormat3.getPattern();
    }

    @Test(timeout = 4000)
    public void test46827() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
        fastDateFormat3.equals((Object) fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test46828() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
        fastDateFormat3.equals((Object) fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test46829() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        String string0 = locale0.getScript();
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0, timeZone0, locale0);
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(2, locale0);
        FastDateFormat fastDateFormat3 = FastDateFormat.getInstance();
        fastDateFormat3.equals((Object) fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test47840() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test47841() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test47842() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test47843() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test47844() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test47845() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test47846() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test47847() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test47848() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test47849() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test47854() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
    }

    @Test(timeout = 4000)
    public void test47855() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test47856() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test47857() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test47858() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test47859() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test47860() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test47862() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
    }

    @Test(timeout = 4000)
    public void test47863() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test47864() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test47865() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test47866() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test47867() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test47868() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test47869() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test47870() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test47871() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test47876() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        string1.equals((Object) string0);
    }

    @Test(timeout = 4000)
    public void test47878() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test47879() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test47880() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test47881() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test47882() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test47883() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test47884() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test47885() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test47886() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test47887() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test47892() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test47894() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test47895() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test47896() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test47897() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test47898() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test47899() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test47900() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test47901() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test47902() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test47903() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        timeZone1.getID();
    }

    @Test(timeout = 4000)
    public void test47909() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
    }

    @Test(timeout = 4000)
    public void test47912() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test47913() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test47914() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test47915() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test47916() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test47917() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test47918() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test47919() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test47920() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test47921() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        fastDateFormat1.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test47922() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        fastDateFormat1.getPattern();
    }

    @Test(timeout = 4000)
    public void test47931() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        fastDateFormat1.equals((Object) fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test47933() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
    }

    @Test(timeout = 4000)
    public void test47939() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test47940() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test47941() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test47942() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test47943() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test47944() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test47945() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test47946() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test47947() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test47948() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        timeZone1.getID();
    }

    @Test(timeout = 4000)
    public void test47949() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        fastDateFormat2.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test47950() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        fastDateFormat2.getPattern();
    }

    @Test(timeout = 4000)
    public void test47959() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        fastDateFormat0.equals((Object) fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test47960() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        fastDateFormat2.equals((Object) fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test47961() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        fastDateFormat2.equals((Object) fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test47963() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
    }

    @Test(timeout = 4000)
    public void test47966() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test47967() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test47968() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test47969() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test47970() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test47971() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test47972() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
        fastDateFormat3.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test47973() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
        fastDateFormat3.getPattern();
    }

    @Test(timeout = 4000)
    public void test47978() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
        fastDateFormat3.equals((Object) fastDateFormat2);
    }

    @Test(timeout = 4000)
    public void test47979() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
        fastDateFormat3.equals((Object) fastDateFormat1);
    }

    @Test(timeout = 4000)
    public void test47980() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
        fastDateFormat3.equals((Object) fastDateFormat0);
    }

    @Test(timeout = 4000)
    public void test47982() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        FastDateFormat fastDateFormat0 = new FastDateFormat("", timeZone0, locale0);
        String string0 = locale0.getScript();
        String string1 = fastDateFormat0.toString();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
        TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        FastDateFormat fastDateFormat1 = (FastDateFormat) fastDateFormat0.clone();
        FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(1, 0, timeZone1);
        FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(2, locale0);
        FastDateFormat.getDateTimeInstance((-5153), 0, timeZone1);
    }

    @Test(timeout = 4000)
    public void test48983() throws Throwable {
        FastDateFormat.getInstance("2vUxJS?<+8SQ/ZS");
    }

    @Test(timeout = 4000)
    public void test49984() throws Throwable {
        Locale locale0 = new Locale("rbcKCO;btHtobV3tIOd");
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test49985() throws Throwable {
        Locale locale0 = new Locale("rbcKCO;btHtobV3tIOd");
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test49986() throws Throwable {
        Locale locale0 = new Locale("rbcKCO;btHtobV3tIOd");
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test49987() throws Throwable {
        Locale locale0 = new Locale("rbcKCO;btHtobV3tIOd");
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test49988() throws Throwable {
        Locale locale0 = new Locale("rbcKCO;btHtobV3tIOd");
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test49989() throws Throwable {
        Locale locale0 = new Locale("rbcKCO;btHtobV3tIOd");
    }

    @Test(timeout = 4000)
    public void test49990() throws Throwable {
        Locale locale0 = new Locale("rbcKCO;btHtobV3tIOd");
        FastDateFormat.getInstance("rbcKCO;btHtobV3tIOd", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test50991() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test50992() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test50993() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test50994() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test50995() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test50996() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test50997() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
    }

    @Test(timeout = 4000)
    public void test50998() throws Throwable {
        Locale locale0 = Locale.CANADA_FRENCH;
        FastDateFormat.getInstance("3zq", locale0);
    }

    @Test(timeout = 4000)
    public void test51999() throws Throwable {
        FastDateFormat.getInstance("(mplnD");
    }

    @Test(timeout = 4000)
    public void test521007() throws Throwable {
        Locale locale0 = Locale.CANADA;
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule", locale0);
    }

    @Test(timeout = 4000)
    public void test531008() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test531009() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test531010() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test531011() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test531012() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test531013() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test531014() throws Throwable {
        Locale locale0 = Locale.FRENCH;
    }

    @Test(timeout = 4000)
    public void test531015() throws Throwable {
        Locale locale0 = Locale.FRENCH;
        FastDateFormat.getInstance(";Ml6wz", locale0);
    }

    @Test(timeout = 4000)
    public void test541016() throws Throwable {
        FastDateFormat.getInstance("giapponese");
    }

    @Test(timeout = 4000)
    public void test551017() throws Throwable {
        Locale locale0 = Locale.US;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test551018() throws Throwable {
        Locale locale0 = Locale.US;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test551019() throws Throwable {
        Locale locale0 = Locale.US;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test551020() throws Throwable {
        Locale locale0 = Locale.US;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test551021() throws Throwable {
        Locale locale0 = Locale.US;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test551022() throws Throwable {
        Locale locale0 = Locale.US;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test551023() throws Throwable {
        Locale locale0 = Locale.US;
    }

    @Test(timeout = 4000)
    public void test551024() throws Throwable {
        Locale locale0 = Locale.US;
        FastDateFormat.getInstance(">fSxx", (TimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test561025() throws Throwable {
        FastDateFormat.getInstance("c{Di8!]]p>|");
    }

    @Test(timeout = 4000)
    public void test571026() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "HbP.1v0?>bzM", 1, 1, 0, 1, 0, 0, 0, 956);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test571027() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "HbP.1v0?>bzM", 1, 1, 0, 1, 0, 0, 0, 956);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test571028() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "HbP.1v0?>bzM", 1, 1, 0, 1, 0, 0, 0, 956);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test571029() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "HbP.1v0?>bzM", 1, 1, 0, 1, 0, 0, 0, 956);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test571030() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "HbP.1v0?>bzM", 1, 1, 0, 1, 0, 0, 0, 956);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test571031() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "HbP.1v0?>bzM", 1, 1, 0, 1, 0, 0, 0, 956);
    }

    @Test(timeout = 4000)
    public void test571032() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "HbP.1v0?>bzM", 1, 1, 0, 1, 0, 0, 0, 956);
        FastDateFormat.getInstance("HbP.1v0?>bzM", (TimeZone) simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test581033() throws Throwable {
        FastDateFormat.getInstance("Wednesday, April 16, 0346 4:01:00 PM");
    }

    @Test(timeout = 4000)
    public void test591036() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test591037() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test591038() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test591039() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test591040() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test591041() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test591042() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
    }

    @Test(timeout = 4000)
    public void test591043() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = null;
        fastDateFormat0 = new FastDateFormat(".H)`V", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test601044() throws Throwable {
        FastDateFormat.getInstance("U Pf@n!++9`AT0]l?");
    }

    @Test(timeout = 4000)
    public void test611045() throws Throwable {
        Locale locale0 = Locale.UK;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test611046() throws Throwable {
        Locale locale0 = Locale.UK;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test611047() throws Throwable {
        Locale locale0 = Locale.UK;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test611048() throws Throwable {
        Locale locale0 = Locale.UK;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test611049() throws Throwable {
        Locale locale0 = Locale.UK;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test611050() throws Throwable {
        Locale locale0 = Locale.UK;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test611051() throws Throwable {
        Locale locale0 = Locale.UK;
    }

    @Test(timeout = 4000)
    public void test611052() throws Throwable {
        Locale locale0 = Locale.UK;
        FastDateFormat.getInstance("%TKcuHDi?gj>n", locale0);
    }

    @Test(timeout = 4000)
    public void test621053() throws Throwable {
        FastDateFormat.getInstance("s:dSe.[_");
    }

    @Test(timeout = 4000)
    public void test631054() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test631055() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test631056() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test631057() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test631058() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test631059() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test631060() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
    }

    @Test(timeout = 4000)
    public void test631061() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        FastDateFormat.getInstance("Run?r}#/T=HiSX/:5", locale0);
    }

    @Test(timeout = 4000)
    public void test641062() throws Throwable {
        FastDateFormat.getInstance("11:59:59 PM");
    }

    @Test(timeout = 4000)
    public void test651063() throws Throwable {
        FastDateFormat.getInstance("Ohs", (Locale) null);
    }

    @Test(timeout = 4000)
    public void test661064() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    }

    @Test(timeout = 4000)
    public void test661065() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test661066() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    }

    @Test(timeout = 4000)
    public void test661067() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        FastDateFormat.getInstance("No date time pattern for locale: ", timeZone0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test671075() throws Throwable {
        Locale locale0 = Locale.GERMAN;
        FastDateFormat.getInstance("LNFm7E%BIjN", locale0);
    }

    @Test(timeout = 4000)
    public void test681083() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat.getInstance("4Ki^Y$-|AR[0?\"0", locale0);
    }

    @Test(timeout = 4000)
    public void test691084() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("No date time pattern for locale: ");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test691085() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("No date time pattern for locale: ");
    }

    @Test(timeout = 4000)
    public void test691086() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("No date time pattern for locale: ");
        FastDateFormat.getInstance("JS@oDv3U,B ", timeZone0);
    }

    @Test(timeout = 4000)
    public void test701087() throws Throwable {
        FastDateFormat.getInstance("I");
    }

    @Test(timeout = 4000)
    public void test711088() throws Throwable {
        FastDateFormat.getInstance("G(XT");
    }

    @Test(timeout = 4000)
    public void test721089() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[h:mm a]");
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test721090() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[h:mm a]");
    }

    @Test(timeout = 4000)
    public void test721091() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[h:mm a]");
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test721092() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[h:mm a]");
        Locale locale0 = Locale.FRANCE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test721093() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[h:mm a]");
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test721094() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[h:mm a]");
        Locale locale0 = Locale.FRANCE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test721095() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[h:mm a]");
        Locale locale0 = Locale.FRANCE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test721096() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[h:mm a]");
        Locale locale0 = Locale.FRANCE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test721097() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[h:mm a]");
        Locale locale0 = Locale.FRANCE;
    }

    @Test(timeout = 4000)
    public void test721098() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("FastDateFormat[h:mm a]");
        Locale locale0 = Locale.FRANCE;
        FastDateFormat.getInstance("FastDateFormat[h:mm a]", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test731099() throws Throwable {
        FastDateFormat.getInstance("`yEj]PggJm<c[*}8F");
    }

    @Test(timeout = 4000)
    public void test741100() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = null;
        fastDateFormat0 = new FastDateFormat("M|BT^1J4O~QX", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test751101() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        String string0 = fastDateFormat0.format((long) 42);
    }

    @Test(timeout = 4000)
    public void test761102() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "#,]@?B>:d+4", 1, 0, 2, 0, 3, 2, 3, 2, 2);
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, (TimeZone) simpleTimeZone0, locale0);
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test771103() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test781104() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 3536, 42);
        String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test791105() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        TimeZone timeZone0 = TimeZone.getTimeZone("2014\uB144 2\uC6D4 14\uC77C \uAE08\uC694\uC77C");
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test801106() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-900), "");
        FastDateFormat.getDateInstance(1745, (TimeZone) simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test811107() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", locale0);
        Long long0 = new Long(1333L);
        boolean boolean0 = fastDateFormat0.equals(long0);
    }

    @Test(timeout = 4000)
    public void test821108() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        fastDateFormat0.hashCode();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test831109() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 0, 0, 3600000);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "2014\uB144 2\uC6D4 14\uC77C \uAE08\uC694\uC77C");
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test831110() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 0, 0, 3600000);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "2014\uB144 2\uC6D4 14\uC77C \uAE08\uC694\uC77C");
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test841111() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        int int0 = fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test851112() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "2014\uB144 2\uC6D4 14\uC77C \uAE08\uC694\uC77C");
        fastDateFormat0.format((long) 0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test851113() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "2014\uB144 2\uC6D4 14\uC77C \uAE08\uC694\uC77C");
        fastDateFormat0.format((long) 0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test861114() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(2);
        Locale locale0 = Locale.CANADA;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test871115() throws Throwable {
        Locale locale0 = Locale.JAPANESE;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
        fastDateFormat0.getLocale();
        fastDateFormat0.getMaxLengthEstimate();
    }

    @Test(timeout = 4000)
    public void test881116() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition((-503));
        fastDateFormat0.parseObject("1/1/70 12:00 AM", parsePosition0);
        parsePosition0.getErrorIndex();
    }

    @Test(timeout = 4000)
    public void test881117() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        ParsePosition parsePosition0 = new ParsePosition((-503));
        fastDateFormat0.parseObject("1/1/70 12:00 AM", parsePosition0);
        fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test891118() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
        String string0 = fastDateFormat0.getPattern();
    }

    @Test(timeout = 4000)
    public void test901119() throws Throwable {
        Locale locale0 = Locale.KOREAN;
        TimeZone timeZone0 = TimeZone.getTimeZone("2014\uB144 2\uC6D4 14\uC77C \uAE08\uC694\uC77C");
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("2014\uB144 2\uC6D4 14\uC77C \uAE08\uC694\uC77C", timeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test911120() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("1/1/70 12:00 AM");
        Locale locale0 = Locale.ITALY;
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 1, timeZone0, locale0);
        MockDate mockDate0 = new MockDate();
        String string0 = fastDateFormat0.format((Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test921121() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 0, 0, 0, 2);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test921122() throws Throwable {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 0, 0, 0, 2);
        StringBuffer stringBuffer0 = new StringBuffer(2);
        fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
        stringBuffer0.toString();
    }
}
