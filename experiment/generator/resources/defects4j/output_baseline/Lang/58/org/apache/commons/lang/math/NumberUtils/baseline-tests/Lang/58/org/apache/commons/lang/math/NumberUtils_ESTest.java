/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 04:07:53 GMT 2023
 */
package org.apache.commons.lang.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("org.apache.commons.lang.math.NumberUtils");
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        byte byte0 = NumberUtils.max((byte) (-57), (byte) 114, (byte) 0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        byte byte0 = NumberUtils.max((byte) 76, (byte) 76, (byte) 76);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        long long0 = NumberUtils.max(1361L, (-1691L), 855L);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 0, (byte) 12, (byte) 12);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        int int0 = NumberUtils.min(48, 48, (-2114));
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        long long0 = NumberUtils.min((-4091L), 0L, 0L);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[1] = 4595.92841572;
        double double0 = NumberUtils.max(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        int[] intArray0 = new int[4];
        intArray0[0] = (int) (short) 1283;
        int int0 = NumberUtils.max(intArray0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) (-63);
        byte byte0 = NumberUtils.min(byteArray0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        double[] doubleArray0 = new double[7];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        float[] floatArray0 = new float[2];
        float[] floatArray1 = new float[7];
        boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        long[] longArray0 = new long[6];
        long[] longArray1 = new long[1];
        boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        int[] intArray0 = new int[14];
        int[] intArray1 = new int[9];
        boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        short[] shortArray0 = new short[2];
        short[] shortArray1 = new short[2];
        shortArray1[0] = (short) (-2494);
        boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        short[] shortArray0 = new short[8];
        short[] shortArray1 = new short[2];
        boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = new byte[0];
        boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        NumberUtils.createNumber("MEA*+9/");
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        long long0 = NumberUtils.toLong("", 0L);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        long long0 = NumberUtils.toLong((String) null, (long) (short) 1098);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        int int0 = NumberUtils.toInt("", 0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        int int0 = NumberUtils.toInt("Array cannot be empty.", (-2080));
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        float float0 = NumberUtils.toFloat("", 0.0F);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        float float0 = NumberUtils.toFloat("", 198.0F);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        float float0 = NumberUtils.toFloat("4F");
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        double double0 = NumberUtils.toDouble("", (-1.0));
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        int int0 = NumberUtils.stringToInt("4|M", 0);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        int int0 = NumberUtils.stringToInt("", 2485);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        short[] shortArray0 = new short[4];
        shortArray0[0] = (short) 3726;
        shortArray0[1] = (short) 3726;
        shortArray0[2] = (short) 3726;
        shortArray0[3] = (short) 3726;
        short short0 = NumberUtils.min(shortArray0);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        long[] longArray0 = new long[2];
        longArray0[0] = 1L;
        longArray0[1] = 1L;
        long long0 = NumberUtils.min(longArray0);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        long[] longArray0 = new long[3];
        longArray0[1] = (long) (short) (-1);
        long long0 = NumberUtils.min(longArray0);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        int[] intArray0 = new int[1];
        intArray0[0] = 4427;
        int int0 = NumberUtils.min(intArray0);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        float[] floatArray0 = new float[1];
        floatArray0[0] = (float) (byte) 100;
        float float0 = NumberUtils.min(floatArray0);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) (byte) 64;
        doubleArray0[1] = (double) (byte) 64;
        doubleArray0[2] = (double) (byte) 7;
        double double0 = NumberUtils.min(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) (float) numberUtils0.FLOAT_MINUS_ONE;
        double double0 = NumberUtils.min(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
        byte byte0 = NumberUtils.min(byteArray0);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        short short0 = NumberUtils.min((short) 0, (short) 0, (short) 0);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        long long0 = NumberUtils.min(395L, 395L, 1L);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        int int0 = NumberUtils.min(1, 2802, 1);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        float float0 = NumberUtils.min(0.0F, 0.0F, (float) numberUtils0.SHORT_ZERO);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        float float0 = NumberUtils.min(831.4773F, 831.4773F, 831.4773F);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        double double0 = NumberUtils.min(0.0, 0.0, 0.0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        double double0 = NumberUtils.min(1226.7274182748, 2134.6329, (double) 773.0F);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 30, (byte) 30, (byte) 30);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        short[] shortArray0 = new short[6];
        shortArray0[0] = (short) (-3883);
        shortArray0[1] = (short) (-3141);
        shortArray0[2] = (short) (-2326);
        shortArray0[3] = (short) (-257);
        shortArray0[4] = (short) (-1978);
        shortArray0[5] = (short) (-2011);
        short short0 = NumberUtils.max(shortArray0);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        long[] longArray0 = new long[6];
        longArray0[0] = (long) (short) (-1978);
        longArray0[1] = (long) (short) (-2011);
        longArray0[2] = (long) (short) (-3883);
        longArray0[3] = (long) (short) (-257);
        longArray0[4] = (long) (short) (-3883);
        longArray0[5] = (long) (short) (-257);
        long long0 = NumberUtils.max(longArray0);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        int[] intArray0 = new int[1];
        intArray0[0] = (-12);
        int int0 = NumberUtils.max(intArray0);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        float[] floatArray0 = new float[3];
        floatArray0[1] = (float) 1;
        float float0 = NumberUtils.max(floatArray0);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        float[] floatArray0 = new float[1];
        floatArray0[0] = (float) (byte) (-80);
        float float0 = NumberUtils.max(floatArray0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) (-3471);
        double double0 = NumberUtils.max(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) (-50);
        byte byte0 = NumberUtils.max(byteArray0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        short short0 = NumberUtils.max((short) (-2774), (short) (-2774), (short) (-2774));
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        long long0 = NumberUtils.max((-4008L), 0L, (-1180L));
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        int int0 = NumberUtils.max((-3556), (-3556), (-3556));
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        float float0 = NumberUtils.max((-1.0F), 0.0F, (float) 0L);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        float float0 = NumberUtils.max((-1682.44F), (-1682.44F), (-1729.969F));
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        double double0 = NumberUtils.max(0.0, 1.0, (double) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        double double0 = NumberUtils.max((-529.2504864833994), (-529.2504864833994), (-529.2504864833994));
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        byte byte0 = NumberUtils.max((byte) (-61), (byte) 0, (byte) 0);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        NumberUtils.createFloat(" is not a valid number.");
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        NumberUtils.createBigDecimal("-0x#!E/s");
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        NumberUtils.createBigInteger("");
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        NumberUtils.createLong(".lmr7[.");
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        NumberUtils.createInteger("A+zgl$t`R' ls4dh");
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        NumberUtils.createDouble("");
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        Float float0 = NumberUtils.createFloat("+4d");
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        double double0 = NumberUtils.toDouble((String) null, (double) 975);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        double double0 = NumberUtils.toDouble("qq/|,I(O`@", (double) 0);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        float float0 = NumberUtils.toFloat("", (-1.0F));
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        float float0 = NumberUtils.toFloat((String) null, (-1.0F));
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        long long0 = NumberUtils.toLong((String) null, (-1044L));
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        int int0 = NumberUtils.toInt((String) null, 1);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        int int0 = NumberUtils.toInt((String) null);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber(" ");
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("--ZZt{hQ=!9La{>?^%");
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("...");
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0xCannot pad a negative amount: ");
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0x4MJ+93");
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0Ix...");
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("Z");
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("+d");
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber((String) null);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0xe*Hy$w=. (/a8'Bi)");
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        boolean boolean0 = NumberUtils.isDigits("4^Fa,j1x");
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        boolean boolean0 = NumberUtils.isDigits("");
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        int int0 = NumberUtils.compare((float) 1L, (float) 1L);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        int int0 = NumberUtils.compare((-1.0F), 0.0F);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        int int0 = NumberUtils.compare(2189.0F, (-3505.066F));
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        int int0 = NumberUtils.compare(2384.6, (-1.0));
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        int int0 = NumberUtils.compare((double) 0.0F, (double) 2485);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        int int0 = NumberUtils.compare((-1.0), (-1.0));
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        byte byte0 = NumberUtils.max((byte) (-56), (byte) 0, (byte) 70);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        byte byte0 = NumberUtils.max((byte) (-1), (byte) (-100), (byte) (-1));
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        short short0 = NumberUtils.max((short) (byte) 47, (short) (byte) 47, (short) 347);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        short short0 = NumberUtils.max((short) (byte) (-100), (short) 0, (short) (-4501));
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        short short0 = NumberUtils.max((short) 2033, (short) 0, (short) (-4501));
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        int int0 = NumberUtils.max((-63), (-798), 1);
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        int int0 = NumberUtils.max((int) (byte) (-1), 1732, (int) (byte) (-100));
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        int int0 = NumberUtils.max(0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        long long0 = NumberUtils.max((-2602L), 968L, 968L);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        long long0 = NumberUtils.max((-3319L), (-3319L), (-987L));
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 0, (byte) 0, (byte) (-30));
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 115, (byte) 0, (byte) 0);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        short short0 = NumberUtils.min((short) 57, (short) 3187, (short) 1);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        short short0 = NumberUtils.min((short) 100, (short) (-127), (short) 119);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        int int0 = NumberUtils.min(261, (-1377), (-3085));
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        int int0 = NumberUtils.min(2485, 0, 2485);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        long long0 = NumberUtils.min(3013L, 0L, (long) 0);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        float[] floatArray0 = new float[5];
        floatArray0[0] = (-2799.361F);
        float float0 = NumberUtils.max(floatArray0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        float[] floatArray0 = new float[0];
        NumberUtils.max(floatArray0);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        NumberUtils.max((float[]) null);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = (-284.2640756396245);
        double double0 = NumberUtils.max(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        double[] doubleArray0 = new double[0];
        NumberUtils.max(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        NumberUtils.max((double[]) null);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[1] = (byte) 108;
        byte byte0 = NumberUtils.max(byteArray0);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        byte[] byteArray0 = new byte[0];
        NumberUtils.max(byteArray0);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        NumberUtils.max((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byte byte0 = NumberUtils.max(byteArray0);
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        short[] shortArray0 = new short[9];
        shortArray0[1] = (short) 1052;
        short short0 = NumberUtils.max(shortArray0);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        short[] shortArray0 = new short[0];
        NumberUtils.max(shortArray0);
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        NumberUtils.max((short[]) null);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        short[] shortArray0 = new short[4];
        short short0 = NumberUtils.max(shortArray0);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        int[] intArray0 = new int[4];
        intArray0[3] = (int) (short) 3726;
        int int0 = NumberUtils.max(intArray0);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        int[] intArray0 = new int[0];
        NumberUtils.max(intArray0);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        NumberUtils.max((int[]) null);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        int[] intArray0 = new int[6];
        int int0 = NumberUtils.max(intArray0);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        long[] longArray0 = new long[2];
        longArray0[1] = (long) (short) 3726;
        long long0 = NumberUtils.max(longArray0);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        long[] longArray0 = new long[0];
        NumberUtils.max(longArray0);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        NumberUtils.max((long[]) null);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        long[] longArray0 = new long[2];
        long long0 = NumberUtils.max(longArray0);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        float[] floatArray0 = new float[8];
        floatArray0[1] = (float) (short) (-1133);
        float float0 = NumberUtils.min(floatArray0);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        float[] floatArray0 = new float[0];
        NumberUtils.min(floatArray0);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        NumberUtils.min((float[]) null);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        float[] floatArray0 = new float[8];
        float float0 = NumberUtils.min(floatArray0);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = (double) (byte) 64;
        double double0 = NumberUtils.min(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        double[] doubleArray0 = new double[0];
        NumberUtils.min(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        NumberUtils.min((double[]) null);
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[4] = (byte) (-99);
        byte byte0 = NumberUtils.min(byteArray0);
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        byte[] byteArray0 = new byte[0];
        NumberUtils.min(byteArray0);
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        NumberUtils.min((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        byte[] byteArray0 = new byte[6];
        byte byte0 = NumberUtils.min(byteArray0);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        short[] shortArray0 = new short[7];
        shortArray0[4] = (short) (byte) (-100);
        short short0 = NumberUtils.min(shortArray0);
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        short[] shortArray0 = new short[0];
        NumberUtils.min(shortArray0);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        NumberUtils.min((short[]) null);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        short[] shortArray0 = new short[2];
        short short0 = NumberUtils.min(shortArray0);
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        int[] intArray0 = new int[8];
        intArray0[1] = (-2258);
        int int0 = NumberUtils.min(intArray0);
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        int[] intArray0 = new int[0];
        NumberUtils.min(intArray0);
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        NumberUtils.min((int[]) null);
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        int[] intArray0 = new int[6];
        int int0 = NumberUtils.min(intArray0);
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        long[] longArray0 = new long[3];
        longArray0[0] = 382L;
        long long0 = NumberUtils.min(longArray0);
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        long[] longArray0 = new long[0];
        NumberUtils.min(longArray0);
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        NumberUtils.min((long[]) null);
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        double[] doubleArray0 = new double[6];
        boolean boolean0 = NumberUtils.equals(doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test153153() throws Throwable {
        double[] doubleArray0 = new double[3];
        boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test154154() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[3];
        boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test155155() throws Throwable {
        float[] floatArray0 = new float[0];
        boolean boolean0 = NumberUtils.equals(floatArray0, (float[]) null);
    }

    @Test(timeout = 4000)
    public void test156156() throws Throwable {
        float[] floatArray0 = new float[3];
        boolean boolean0 = NumberUtils.equals((float[]) null, floatArray0);
    }

    @Test(timeout = 4000)
    public void test157157() throws Throwable {
        float[] floatArray0 = new float[0];
        boolean boolean0 = NumberUtils.equals(floatArray0, floatArray0);
    }

    @Test(timeout = 4000)
    public void test158158() throws Throwable {
        float[] floatArray0 = new float[6];
        float[] floatArray1 = new float[4];
        boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
    }

    @Test(timeout = 4000)
    public void test159159() throws Throwable {
        long[] longArray0 = new long[1];
        long[] longArray1 = new long[1];
        longArray1[0] = 577L;
        boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
    }

    @Test(timeout = 4000)
    public void test160160() throws Throwable {
        long[] longArray0 = new long[0];
        long[] longArray1 = new long[1];
        boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
    }

    @Test(timeout = 4000)
    public void test161161() throws Throwable {
        long[] longArray0 = new long[4];
        boolean boolean0 = NumberUtils.equals(longArray0, (long[]) null);
    }

    @Test(timeout = 4000)
    public void test162162() throws Throwable {
        long[] longArray0 = new long[1];
        boolean boolean0 = NumberUtils.equals((long[]) null, longArray0);
    }

    @Test(timeout = 4000)
    public void test163163() throws Throwable {
        long[] longArray0 = new long[0];
        boolean boolean0 = NumberUtils.equals(longArray0, longArray0);
    }

    @Test(timeout = 4000)
    public void test164164() throws Throwable {
        long[] longArray0 = new long[1];
        long[] longArray1 = new long[1];
        boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
    }

    @Test(timeout = 4000)
    public void test165165() throws Throwable {
        int[] intArray0 = new int[6];
        boolean boolean0 = NumberUtils.equals((int[]) null, intArray0);
    }

    @Test(timeout = 4000)
    public void test166166() throws Throwable {
        int[] intArray0 = new int[0];
        boolean boolean0 = NumberUtils.equals(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test167167() throws Throwable {
        int[] intArray0 = new int[1];
        int[] intArray1 = new int[9];
        boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test168168() throws Throwable {
        short[] shortArray0 = new short[2];
        shortArray0[0] = (short) (-1422);
        short[] shortArray1 = new short[2];
        boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test169169() throws Throwable {
        short[] shortArray0 = new short[1];
        short[] shortArray1 = new short[2];
        boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test170170() throws Throwable {
        short[] shortArray0 = new short[4];
        boolean boolean0 = NumberUtils.equals(shortArray0, shortArray0);
    }

    @Test(timeout = 4000)
    public void test171171() throws Throwable {
        short[] shortArray0 = new short[2];
        short[] shortArray1 = new short[2];
        boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
    }

    @Test(timeout = 4000)
    public void test172172() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byte[] byteArray1 = new byte[4];
        boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
    }

    @Test(timeout = 4000)
    public void test173173() throws Throwable {
        byte[] byteArray0 = new byte[1];
        boolean boolean0 = NumberUtils.equals((byte[]) null, byteArray0);
    }

    @Test(timeout = 4000)
    public void test174174() throws Throwable {
        byte[] byteArray0 = new byte[6];
        boolean boolean0 = NumberUtils.equals(byteArray0, byteArray0);
    }

    @Test(timeout = 4000)
    public void test175175() throws Throwable {
        byte[] byteArray0 = new byte[0];
        boolean boolean0 = NumberUtils.equals(byteArray0, (byte[]) null);
    }

    @Test(timeout = 4000)
    public void test176176() throws Throwable {
        NumberUtils.createBigDecimal("");
    }

    @Test(timeout = 4000)
    public void test177177() throws Throwable {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
    }

    @Test(timeout = 4000)
    public void test178178() throws Throwable {
        BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
    }

    @Test(timeout = 4000)
    public void test179179() throws Throwable {
        Long long0 = NumberUtils.createLong((String) null);
    }

    @Test(timeout = 4000)
    public void test180180() throws Throwable {
        Integer integer0 = NumberUtils.createInteger((String) null);
    }

    @Test(timeout = 4000)
    public void test181181() throws Throwable {
        Double double0 = NumberUtils.createDouble((String) null);
    }

    @Test(timeout = 4000)
    public void test182182() throws Throwable {
        Float float0 = NumberUtils.createFloat((String) null);
    }

    @Test(timeout = 4000)
    public void test183183() throws Throwable {
        NumberUtils.createNumber("Mj+93");
    }

    @Test(timeout = 4000)
    public void test184184() throws Throwable {
        NumberUtils.createNumber("The Array must not be null");
    }

    @Test(timeout = 4000)
    public void test185185() throws Throwable {
        NumberUtils.createNumber("*V0t]wvkVd");
    }

    @Test(timeout = 4000)
    public void test186186() throws Throwable {
        NumberUtils.createNumber("9pA.)p?p+9F");
    }

    @Test(timeout = 4000)
    public void test187187() throws Throwable {
        NumberUtils.createNumber("{RQD");
    }

    @Test(timeout = 4000)
    public void test188188() throws Throwable {
        NumberUtils.createNumber("if!=ck%xy[ZeQwm6");
    }

    @Test(timeout = 4000)
    public void test189189() throws Throwable {
        NumberUtils.createNumber("#!E/s");
    }

    @Test(timeout = 4000)
    public void test190190() throws Throwable {
        NumberUtils.createNumber("...");
    }

    @Test(timeout = 4000)
    public void test191191() throws Throwable {
        NumberUtils.createNumber("e*Hy$w=. (/a8'Bi)");
    }

    @Test(timeout = 4000)
    public void test192192() throws Throwable {
        NumberUtils.createNumber("-0x...");
    }

    @Test(timeout = 4000)
    public void test193193() throws Throwable {
        NumberUtils.createNumber("0xfL8t2\"|YP[c%Sx;|]");
    }

    @Test(timeout = 4000)
    public void test194194() throws Throwable {
        Number number0 = NumberUtils.createNumber("--{D5s`pD");
    }

    @Test(timeout = 4000)
    public void test195195() throws Throwable {
        NumberUtils.createNumber("");
    }

    @Test(timeout = 4000)
    public void test196196() throws Throwable {
        Number number0 = NumberUtils.createNumber((String) null);
    }

    @Test(timeout = 4000)
    public void test197197() throws Throwable {
        double double0 = NumberUtils.toDouble((String) null);
    }

    @Test(timeout = 4000)
    public void test198198() throws Throwable {
        float float0 = NumberUtils.toFloat((String) null);
    }

    @Test(timeout = 4000)
    public void test199199() throws Throwable {
        long long0 = NumberUtils.toLong((String) null);
    }

    @Test(timeout = 4000)
    public void test200200() throws Throwable {
        float float0 = NumberUtils.max(0.0F, 2918.4F, (float) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test201201() throws Throwable {
        double double0 = NumberUtils.max(0.0, 0.0, 0.0);
    }

    @Test(timeout = 4000)
    public void test202202() throws Throwable {
        double double0 = NumberUtils.min((-69.8402412), 0.0, (double) 0.0F);
    }

    @Test(timeout = 4000)
    public void test203203() throws Throwable {
        float float0 = NumberUtils.min((-2799.361F), (float) 0L, (float) 0);
    }

    @Test(timeout = 4000)
    public void test204204() throws Throwable {
        int int0 = NumberUtils.stringToInt("[/\"OXmo\"", (-63));
    }

    @Test(timeout = 4000)
    public void test205205() throws Throwable {
        int int0 = NumberUtils.stringToInt((String) null);
    }
}
