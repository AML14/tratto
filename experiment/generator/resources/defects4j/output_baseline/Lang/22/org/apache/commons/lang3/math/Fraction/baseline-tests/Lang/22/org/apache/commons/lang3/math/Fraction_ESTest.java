/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:36:27 GMT 2023
 */
package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        Fraction fraction1 = Fraction.ONE_HALF;
        int int0 = fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        Fraction fraction1 = Fraction.ZERO;
        int int0 = fraction1.compareTo(fraction0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-3579.9143379));
        fraction0.hashCode();
        fraction0.hashCode();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-3579.9143379));
        fraction0.hashCode();
        fraction0.hashCode();
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-3579.9143379));
        fraction0.hashCode();
        fraction0.hashCode();
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = Fraction.ONE_HALF;
        boolean boolean0 = fraction0.equals(fraction1);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test0036() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = Fraction.ONE_HALF;
        boolean boolean0 = fraction0.equals(fraction1);
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fraction0.ONE_QUARTER.subtract(fraction0);
    }

    @Test(timeout = 4000)
    public void test0058() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(25, 25);
        Fraction fraction1 = fraction0.reduce();
        fraction1.getProperNumerator();
    }

    @Test(timeout = 4000)
    public void test0059() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(25, 25);
        Fraction fraction1 = fraction0.reduce();
        fraction0.getProperWhole();
    }

    @Test(timeout = 4000)
    public void test00510() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(25, 25);
        Fraction fraction1 = fraction0.reduce();
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test00611() throws Throwable {
        Fraction.getFraction(" Hwz3~N");
    }

    @Test(timeout = 4000)
    public void test00712() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(0.0);
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test00813() throws Throwable {
        Fraction fraction0 = Fraction.THREE_FIFTHS;
        Fraction fraction1 = fraction0.subtract(fraction0);
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test00914() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = Fraction.getFraction(4188.5);
        Fraction fraction2 = fraction1.subtract(fraction0);
        fraction2.floatValue();
    }

    @Test(timeout = 4000)
    public void test01015() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.reduce();
    }

    @Test(timeout = 4000)
    public void test01116() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-870.279420099903));
        Fraction fraction1 = fraction0.reduce();
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test01117() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-870.279420099903));
        Fraction fraction1 = fraction0.reduce();
    }

    @Test(timeout = 4000)
    public void test01218() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        Fraction fraction1 = fraction0.ZERO.pow(4);
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test01319() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((double) (-1));
        Fraction fraction1 = fraction0.pow(3);
    }

    @Test(timeout = 4000)
    public void test01320() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((double) (-1));
        Fraction fraction1 = fraction0.pow(3);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test01321() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((double) (-1));
        Fraction fraction1 = fraction0.pow(3);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test01422() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(1218, 3);
        Fraction fraction1 = fraction0.pow(3);
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test01423() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(1218, 3);
        Fraction fraction1 = fraction0.pow(3);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test01524() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = fraction0.negate();
        fraction1.equals((Object) fraction0);
    }

    @Test(timeout = 4000)
    public void test01625() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.negate();
        fraction1.negate();
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test01726() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.getFraction((-811.22));
        Fraction fraction2 = fraction1.multiplyBy(fraction0);
        fraction2.doubleValue();
    }

    @Test(timeout = 4000)
    public void test01727() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.getFraction((-811.22));
        Fraction fraction2 = fraction1.multiplyBy(fraction0);
        fraction1.intValue();
    }

    @Test(timeout = 4000)
    public void test01828() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        long long0 = fraction0.longValue();
    }

    @Test(timeout = 4000)
    public void test01929() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-4909), 0, 286);
        long long0 = fraction0.longValue();
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test01930() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-4909), 0, 286);
        long long0 = fraction0.longValue();
    }

    @Test(timeout = 4000)
    public void test02031() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = fraction0.add(fraction0);
        Fraction fraction2 = fraction1.invert();
        fraction2.getNumerator();
    }

    @Test(timeout = 4000)
    public void test02032() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = fraction0.add(fraction0);
        Fraction fraction2 = fraction1.invert();
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test02133() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        int int0 = fraction0.intValue();
    }

    @Test(timeout = 4000)
    public void test02234() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-472.68686588506665));
        int int0 = fraction0.intValue();
    }

    @Test(timeout = 4000)
    public void test02235() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-472.68686588506665));
        int int0 = fraction0.intValue();
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test02236() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-472.68686588506665));
        int int0 = fraction0.intValue();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test02337() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        int int0 = fraction0.getProperWhole();
    }

    @Test(timeout = 4000)
    public void test02438() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(718, 718);
        int int0 = fraction0.getProperWhole();
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test02439() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(718, 718);
        int int0 = fraction0.getProperWhole();
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test02440() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(718, 718);
        int int0 = fraction0.getProperWhole();
    }

    @Test(timeout = 4000)
    public void test02541() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        Fraction fraction1 = fraction0.invert();
        int int0 = fraction1.getProperNumerator();
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test02542() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        Fraction fraction1 = fraction0.invert();
        int int0 = fraction1.getProperNumerator();
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test02543() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        Fraction fraction1 = fraction0.invert();
        int int0 = fraction1.getProperNumerator();
    }

    @Test(timeout = 4000)
    public void test02644() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        int int0 = fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test02745() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = fraction0.negate();
        int int0 = fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test02746() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = fraction0.negate();
        int int0 = fraction1.getNumerator();
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test02847() throws Throwable {
        Fraction fraction0 = Fraction.getFraction("0");
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test02848() throws Throwable {
        Fraction fraction0 = Fraction.getFraction("0");
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test02949() throws Throwable {
        Fraction fraction0 = Fraction.getFraction("-1");
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test02950() throws Throwable {
        Fraction fraction0 = Fraction.getFraction("-1");
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test03051() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(0, 0, 10000);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test03052() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(0, 0, 10000);
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test03153() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(0, 1);
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test03154() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(0, 1);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test03255() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, 2456);
        float float0 = fraction0.floatValue();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test03256() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, 2456);
        float float0 = fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test03357() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = fraction0.negate();
        float float0 = fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test03458() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, (-249));
        double double0 = fraction0.doubleValue();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test03459() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, (-249));
        double double0 = fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test03560() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = fraction0.THREE_QUARTERS.negate();
        double double0 = fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test03661() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
        Fraction fraction2 = fraction1.divideBy(fraction0);
        fraction2.doubleValue();
    }

    @Test(timeout = 4000)
    public void test03762() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = fraction0.ZERO.abs();
        fraction1.longValue();
    }

    @Test(timeout = 4000)
    public void test03863() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(2.147483647E9);
        Fraction fraction1 = fraction0.abs();
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test03864() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(2.147483647E9);
        Fraction fraction1 = fraction0.abs();
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test03965() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        fraction0.FOUR_FIFTHS.subtract((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test04066() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-3579.914338));
        Fraction fraction1 = Fraction.getFraction((-1140), (-2147483593));
        fraction0.subtract(fraction1);
    }

    @Test(timeout = 4000)
    public void test04167() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(2.147483647E9);
        fraction0.multiplyBy(fraction0);
    }

    @Test(timeout = 4000)
    public void test04268() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1081), 2152, 2152);
        fraction0.compareTo((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test04369() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.getFraction(2144467519, 277);
        fraction0.add(fraction1);
    }

    @Test(timeout = 4000)
    public void test04470() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.getFraction("1/5");
        boolean boolean0 = fraction0.equals(fraction1);
        fraction1.equals((Object) fraction0);
    }

    @Test(timeout = 4000)
    public void test04471() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.getFraction("1/5");
        boolean boolean0 = fraction0.equals(fraction1);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test04472() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.getFraction("1/5");
        boolean boolean0 = fraction0.equals(fraction1);
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test04473() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.getFraction("1/5");
        boolean boolean0 = fraction0.equals(fraction1);
    }

    @Test(timeout = 4000)
    public void test04474() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = Fraction.getFraction("1/5");
        boolean boolean0 = fraction0.equals(fraction1);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test04575() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = fraction0.ZERO.multiplyBy(fraction0);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test04676() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = Fraction.getFraction(1094, 1094, 1094);
        Fraction fraction2 = fraction0.TWO_FIFTHS.multiplyBy(fraction1);
        Fraction fraction3 = fraction2.subtract(fraction0);
        fraction3.getNumerator();
    }

    @Test(timeout = 4000)
    public void test04777() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        Fraction fraction1 = fraction0.TWO_THIRDS.divideBy(fraction0);
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test04778() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        Fraction fraction1 = fraction0.TWO_THIRDS.divideBy(fraction0);
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test04879() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.pow(3878);
    }

    @Test(timeout = 4000)
    public void test04880() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.pow(3878);
        fraction1.intValue();
    }

    @Test(timeout = 4000)
    public void test04981() throws Throwable {
        Fraction fraction0 = Fraction.ONE_HALF;
        Fraction fraction1 = fraction0.pow(1);
    }

    @Test(timeout = 4000)
    public void test05082() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(718, 718);
        int int0 = fraction0.getNumerator();
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test05083() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(718, 718);
        int int0 = fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test05184() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-77), 4);
        int int0 = fraction0.getProperWhole();
    }

    @Test(timeout = 4000)
    public void test05185() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-77), 4);
        int int0 = fraction0.getProperWhole();
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test05186() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-77), 4);
        int int0 = fraction0.getProperWhole();
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test05287() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        Fraction fraction1 = fraction0.invert();
        String string0 = fraction1.toProperString();
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test05288() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        Fraction fraction1 = fraction0.invert();
        String string0 = fraction1.toProperString();
        fraction0.getProperNumerator();
    }

    @Test(timeout = 4000)
    public void test05289() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        Fraction fraction1 = fraction0.invert();
        String string0 = fraction1.toProperString();
        fraction0.getProperWhole();
    }

    @Test(timeout = 4000)
    public void test05290() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        Fraction fraction1 = fraction0.invert();
        String string0 = fraction1.toProperString();
    }

    @Test(timeout = 4000)
    public void test05392() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        String string0 = fraction0.toProperString();
    }

    @Test(timeout = 4000)
    public void test05493() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-77), 4);
        String string0 = fraction0.toProperString();
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test05494() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-77), 4);
        String string0 = fraction0.toProperString();
    }

    @Test(timeout = 4000)
    public void test05595() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, 664);
        fraction0.toProperString();
        Fraction.getFraction(664, 0, 0);
    }

    @Test(timeout = 4000)
    public void test05696() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        Fraction fraction1 = Fraction.getReducedFraction(0, 664);
        String string0 = fraction1.toProperString();
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test05697() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        Fraction fraction1 = Fraction.getReducedFraction(0, 664);
        String string0 = fraction1.toProperString();
    }

    @Test(timeout = 4000)
    public void test05798() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1.0));
        Fraction fraction1 = Fraction.getFraction(2, 2);
        Fraction fraction2 = fraction1.invert();
        Fraction fraction3 = fraction2.ONE.negate();
        Fraction fraction4 = Fraction.FOUR_FIFTHS;
        Fraction fraction5 = fraction2.ONE.multiplyBy(fraction0);
        Fraction fraction6 = fraction3.ONE_FIFTH.divideBy(fraction2);
        Fraction.getReducedFraction(2, 2);
        fraction3.TWO_THIRDS.toString();
        fraction3.TWO_THIRDS.subtract(fraction1);
        fraction1.equals(fraction2);
        fraction1.multiplyBy(fraction0);
        Fraction fraction7 = Fraction.getFraction(2, 2);
        Fraction fraction8 = Fraction.getFraction("2/3");
        fraction8.ONE_HALF.abs();
        fraction1.toProperString();
        Fraction fraction9 = Fraction.ONE;
        fraction7.ONE_HALF.abs();
        fraction0.subtract(fraction1);
        Fraction fraction10 = fraction3.add(fraction7);
        fraction5.getDenominator();
        fraction10.toString();
        fraction6.getDenominator();
        Fraction.getFraction((-2544), (-2544), 2153);
    }

    @Test(timeout = 4000)
    public void test05899() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = Fraction.ONE_HALF;
        int int0 = fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test059100() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = Fraction.getFraction("1/1");
        int int0 = fraction0.compareTo(fraction1);
        fraction1.equals((Object) fraction0);
    }

    @Test(timeout = 4000)
    public void test059101() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = Fraction.getFraction("1/1");
        int int0 = fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test060102() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = Fraction.ONE_QUARTER;
        int int0 = fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test061103() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        int int0 = fraction0.compareTo(fraction0);
    }

    @Test(timeout = 4000)
    public void test062104() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        fraction0.FOUR_FIFTHS.hashCode();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test062105() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        fraction0.FOUR_FIFTHS.hashCode();
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test063106() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        Fraction fraction1 = fraction0.TWO_THIRDS.reduce();
        fraction0.equals(fraction1);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test063107() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        Fraction fraction1 = fraction0.TWO_THIRDS.reduce();
        fraction0.equals(fraction1);
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test064108() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, 2506);
        Object object0 = new Object();
        boolean boolean0 = fraction0.equals(object0);
    }

    @Test(timeout = 4000)
    public void test064109() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, 2506);
        Object object0 = new Object();
        boolean boolean0 = fraction0.equals(object0);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test064110() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, 2506);
        Object object0 = new Object();
        boolean boolean0 = fraction0.equals(object0);
        fraction0.shortValue();
    }

    @Test(timeout = 4000)
    public void test065111() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, 2506);
        fraction0.divideBy(fraction0);
    }

    @Test(timeout = 4000)
    public void test066112() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        fraction0.THREE_FIFTHS.divideBy((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test067113() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-77), 4);
        Fraction fraction1 = fraction0.ZERO.divideBy(fraction0);
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test067114() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-77), 4);
        Fraction fraction1 = fraction0.ZERO.divideBy(fraction0);
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test067115() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-77), 4);
        Fraction fraction1 = fraction0.ZERO.divideBy(fraction0);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test068116() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        fraction0.multiplyBy((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test069117() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-3579.9143379));
        Fraction fraction1 = Fraction.getFraction((-1727.3956));
        Fraction fraction2 = fraction0.ONE_HALF.subtract(fraction1);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test069118() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-3579.9143379));
        Fraction fraction1 = Fraction.getFraction((-1727.3956));
        Fraction fraction2 = fraction0.ONE_HALF.subtract(fraction1);
        fraction2.getNumerator();
    }

    @Test(timeout = 4000)
    public void test069119() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-3579.9143379));
        Fraction fraction1 = Fraction.getFraction((-1727.3956));
        Fraction fraction2 = fraction0.ONE_HALF.subtract(fraction1);
        fraction2.byteValue();
    }

    @Test(timeout = 4000)
    public void test070120() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        Fraction fraction1 = Fraction.ZERO;
        Fraction fraction2 = fraction0.subtract(fraction1);
    }

    @Test(timeout = 4000)
    public void test071121() throws Throwable {
        Fraction fraction0 = Fraction.THREE_QUARTERS;
        Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test072122() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-77), 4);
        Fraction fraction1 = fraction0.ZERO.add(fraction0);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test072123() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-77), 4);
        Fraction fraction1 = fraction0.ZERO.add(fraction0);
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test073124() throws Throwable {
        Fraction fraction0 = Fraction.ONE_THIRD;
        fraction0.add((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test074125() throws Throwable {
        Fraction fraction0 = Fraction.ONE_QUARTER;
        fraction0.THREE_FIFTHS.pow(103);
    }

    @Test(timeout = 4000)
    public void test075126() throws Throwable {
        Fraction fraction0 = Fraction.THREE_FIFTHS;
        Fraction fraction1 = Fraction.getReducedFraction(586, Integer.MIN_VALUE);
        fraction0.divideBy(fraction1);
    }

    @Test(timeout = 4000)
    public void test076127() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-3579.91434));
        fraction0.THREE_FIFTHS.pow(Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test077128() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.pow((-13));
        fraction1.longValue();
    }

    @Test(timeout = 4000)
    public void test078129() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-77), 4);
        Fraction fraction1 = fraction0.abs();
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test078130() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-77), 4);
        Fraction fraction1 = fraction0.abs();
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test079131() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        fraction0.invert();
    }

    @Test(timeout = 4000)
    public void test080132() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1.0));
        Fraction fraction1 = fraction0.invert();
        boolean boolean0 = fraction0.equals(fraction1);
    }

    @Test(timeout = 4000)
    public void test080133() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1.0));
        Fraction fraction1 = fraction0.invert();
        boolean boolean0 = fraction0.equals(fraction1);
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test080134() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1.0));
        Fraction fraction1 = fraction0.invert();
        boolean boolean0 = fraction0.equals(fraction1);
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test081135() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = Fraction.getFraction((-1), 0, 3);
        Fraction fraction2 = fraction0.pow(0);
        Fraction fraction3 = fraction2.add(fraction1);
        Fraction fraction4 = fraction3.reduce();
        fraction3.getDenominator();
    }

    @Test(timeout = 4000)
    public void test081136() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = Fraction.getFraction((-1), 0, 3);
        Fraction fraction2 = fraction0.pow(0);
        Fraction fraction3 = fraction2.add(fraction1);
        Fraction fraction4 = fraction3.reduce();
        fraction4.equals((Object) fraction2);
    }

    @Test(timeout = 4000)
    public void test081137() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = Fraction.getFraction((-1), 0, 3);
        Fraction fraction2 = fraction0.pow(0);
        Fraction fraction3 = fraction2.add(fraction1);
        Fraction fraction4 = fraction3.reduce();
        fraction4.getDenominator();
    }

    @Test(timeout = 4000)
    public void test081138() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = Fraction.getFraction((-1), 0, 3);
        Fraction fraction2 = fraction0.pow(0);
        Fraction fraction3 = fraction2.add(fraction1);
        Fraction fraction4 = fraction3.reduce();
        fraction4.floatValue();
    }

    @Test(timeout = 4000)
    public void test081139() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = Fraction.getFraction((-1), 0, 3);
        Fraction fraction2 = fraction0.pow(0);
        Fraction fraction3 = fraction2.add(fraction1);
        Fraction fraction4 = fraction3.reduce();
        fraction0.equals((Object) fraction1);
    }

    @Test(timeout = 4000)
    public void test081140() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        Fraction fraction1 = Fraction.getFraction((-1), 0, 3);
        Fraction fraction2 = fraction0.pow(0);
        Fraction fraction3 = fraction2.add(fraction1);
        Fraction fraction4 = fraction3.reduce();
        fraction4.equals((Object) fraction3);
    }

    @Test(timeout = 4000)
    public void test082141() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = fraction0.reduce();
        fraction1.byteValue();
    }

    @Test(timeout = 4000)
    public void test083142() throws Throwable {
        Fraction fraction0 = Fraction.getFraction("1 2/13");
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test084143() throws Throwable {
        Fraction.getFraction(">NLE6w.");
    }

    @Test(timeout = 4000)
    public void test085144() throws Throwable {
        Fraction.getFraction((String) null);
    }

    @Test(timeout = 4000)
    public void test086145() throws Throwable {
        Fraction.getFraction(1.7976931348623157E308);
    }

    @Test(timeout = 4000)
    public void test087146() throws Throwable {
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1698));
    }

    @Test(timeout = 4000)
    public void test088147() throws Throwable {
        Fraction.getReducedFraction((-3399), Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test089148() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, 2506);
        Fraction fraction1 = fraction0.ONE_THIRD.invert();
        Fraction fraction2 = fraction1.multiplyBy(fraction0);
    }

    @Test(timeout = 4000)
    public void test089149() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, 2506);
        Fraction fraction1 = fraction0.ONE_THIRD.invert();
        Fraction fraction2 = fraction1.multiplyBy(fraction0);
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test089150() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, 2506);
        Fraction fraction1 = fraction0.ONE_THIRD.invert();
        Fraction fraction2 = fraction1.multiplyBy(fraction0);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test090151() throws Throwable {
        Fraction.getReducedFraction(0, 0);
    }

    @Test(timeout = 4000)
    public void test091152() throws Throwable {
        Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
    }

    @Test(timeout = 4000)
    public void test092153() throws Throwable {
        Fraction.getFraction(Integer.MIN_VALUE, 47, 47);
    }

    @Test(timeout = 4000)
    public void test093154() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(0, 105, 2506);
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test094155() throws Throwable {
        Fraction.getFraction(25, (-4144), (-4));
    }

    @Test(timeout = 4000)
    public void test095156() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1), 0, 3);
        String string0 = fraction0.toProperString();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test095157() throws Throwable {
        Fraction fraction0 = Fraction.getFraction((-1), 0, 3);
        String string0 = fraction0.toProperString();
    }

    @Test(timeout = 4000)
    public void test096159() throws Throwable {
        Fraction.getFraction(9440, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test097160() throws Throwable {
        Fraction.getFraction(Integer.MIN_VALUE, (-1140));
    }

    @Test(timeout = 4000)
    public void test098161() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(1, (-165));
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test098162() throws Throwable {
        Fraction fraction0 = Fraction.getFraction(1, (-165));
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test099163() throws Throwable {
        Fraction.getFraction(0, 0);
    }

    @Test(timeout = 4000)
    public void test100164() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        double double0 = fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test101165() throws Throwable {
        Fraction fraction0 = Fraction.TWO_THIRDS;
        long long0 = fraction0.longValue();
    }

    @Test(timeout = 4000)
    public void test102166() throws Throwable {
        Fraction fraction0 = Fraction.TWO_QUARTERS;
        float float0 = fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test103167() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = Fraction.TWO_THIRDS;
        Fraction fraction2 = Fraction.THREE_QUARTERS;
        Fraction fraction3 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        int int0 = fraction1.compareTo(fraction3);
        fraction3.getNumerator();
    }

    @Test(timeout = 4000)
    public void test103168() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = Fraction.TWO_THIRDS;
        Fraction fraction2 = Fraction.THREE_QUARTERS;
        Fraction fraction3 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        int int0 = fraction1.compareTo(fraction3);
    }

    @Test(timeout = 4000)
    public void test103169() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = Fraction.TWO_THIRDS;
        Fraction fraction2 = Fraction.THREE_QUARTERS;
        Fraction fraction3 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        int int0 = fraction1.compareTo(fraction3);
        Fraction fraction4 = Fraction.getFraction((-2145), 34);
        Fraction fraction5 = fraction0.ONE_FIFTH.multiplyBy(fraction1);
        fraction5.doubleValue();
    }

    @Test(timeout = 4000)
    public void test103170() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = Fraction.TWO_THIRDS;
        Fraction fraction2 = Fraction.THREE_QUARTERS;
        Fraction fraction3 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        int int0 = fraction1.compareTo(fraction3);
        Fraction fraction4 = Fraction.getFraction((-2145), 34);
        Fraction fraction5 = fraction0.ONE_FIFTH.multiplyBy(fraction1);
        Fraction fraction6 = Fraction.TWO_THIRDS;
        fraction0.ONE_THIRD.hashCode();
        Fraction fraction7 = fraction1.TWO_THIRDS.add(fraction0);
        Fraction fraction8 = Fraction.getFraction((-199.6492926809913));
        fraction8.doubleValue();
    }

    @Test(timeout = 4000)
    public void test103171() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = Fraction.TWO_THIRDS;
        Fraction fraction2 = Fraction.THREE_QUARTERS;
        Fraction fraction3 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        int int0 = fraction1.compareTo(fraction3);
        Fraction fraction4 = Fraction.getFraction((-2145), 34);
        Fraction fraction5 = fraction0.ONE_FIFTH.multiplyBy(fraction1);
        Fraction fraction6 = Fraction.TWO_THIRDS;
        fraction0.ONE_THIRD.hashCode();
        Fraction fraction7 = fraction1.TWO_THIRDS.add(fraction0);
        Fraction fraction8 = Fraction.getFraction((-199.6492926809913));
        Fraction fraction9 = fraction7.TWO_QUARTERS.subtract(fraction1);
        fraction9.floatValue();
    }

    @Test(timeout = 4000)
    public void test103172() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = Fraction.TWO_THIRDS;
        Fraction fraction2 = Fraction.THREE_QUARTERS;
        Fraction fraction3 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        int int0 = fraction1.compareTo(fraction3);
        Fraction fraction4 = Fraction.getFraction((-2145), 34);
        Fraction fraction5 = fraction0.ONE_FIFTH.multiplyBy(fraction1);
        Fraction fraction6 = Fraction.TWO_THIRDS;
        fraction0.ONE_THIRD.hashCode();
        Fraction fraction7 = fraction1.TWO_THIRDS.add(fraction0);
        Fraction fraction8 = Fraction.getFraction((-199.6492926809913));
        Fraction fraction9 = fraction7.TWO_QUARTERS.subtract(fraction1);
        fraction7.doubleValue();
    }

    @Test(timeout = 4000)
    public void test103173() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = Fraction.TWO_THIRDS;
        Fraction fraction2 = Fraction.THREE_QUARTERS;
        Fraction fraction3 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        int int0 = fraction1.compareTo(fraction3);
        Fraction fraction4 = Fraction.getFraction((-2145), 34);
        Fraction fraction5 = fraction0.ONE_FIFTH.multiplyBy(fraction1);
        Fraction fraction6 = Fraction.TWO_THIRDS;
        fraction0.ONE_THIRD.hashCode();
        Fraction fraction7 = fraction1.TWO_THIRDS.add(fraction0);
        Fraction fraction8 = Fraction.getFraction((-199.6492926809913));
        Fraction fraction9 = fraction7.TWO_QUARTERS.subtract(fraction1);
        int int1 = fraction4.getProperNumerator();
        fraction4.byteValue();
    }

    @Test(timeout = 4000)
    public void test103174() throws Throwable {
        Fraction fraction0 = Fraction.FOUR_FIFTHS;
        Fraction fraction1 = Fraction.TWO_THIRDS;
        Fraction fraction2 = Fraction.THREE_QUARTERS;
        Fraction fraction3 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        int int0 = fraction1.compareTo(fraction3);
        Fraction fraction4 = Fraction.getFraction((-2145), 34);
        Fraction fraction5 = fraction0.ONE_FIFTH.multiplyBy(fraction1);
        Fraction fraction6 = Fraction.TWO_THIRDS;
        fraction0.ONE_THIRD.hashCode();
        Fraction fraction7 = fraction1.TWO_THIRDS.add(fraction0);
        Fraction fraction8 = Fraction.getFraction((-199.6492926809913));
        Fraction fraction9 = fraction7.TWO_QUARTERS.subtract(fraction1);
        int int1 = fraction4.getProperNumerator();
    }

    @Test(timeout = 4000)
    public void test104175() throws Throwable {
        Fraction fraction0 = Fraction.ONE_FIFTH;
        int int0 = fraction0.intValue();
    }
}
