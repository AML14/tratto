--- org.apache.commons.lang3.math.Fraction_ESTest::test096159
org.evosuite.runtime.mock.java.lang.MockArithmeticException: overflow: can't negate
	at org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:153)
	at org.apache.commons.lang3.math.Fraction_ESTest.test096159(Fraction_ESTest.java:1133)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test074125
org.evosuite.runtime.mock.java.lang.MockArithmeticException: overflow: mulPos
	at org.apache.commons.lang3.math.Fraction.mulPosAndCheck(Fraction.java:660)
	at org.apache.commons.lang3.math.Fraction.multiplyBy(Fraction.java:806)
	at org.apache.commons.lang3.math.Fraction.pow(Fraction.java:562)
	at org.apache.commons.lang3.math.Fraction.pow(Fraction.java:566)
	at org.apache.commons.lang3.math.Fraction.pow(Fraction.java:566)
	at org.apache.commons.lang3.math.Fraction.pow(Fraction.java:566)
	at org.apache.commons.lang3.math.Fraction_ESTest.test074125(Fraction_ESTest.java:905)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test079131
org.evosuite.runtime.mock.java.lang.MockArithmeticException: Unable to invert zero.
	at org.apache.commons.lang3.math.Fraction.invert(Fraction.java:496)
	at org.apache.commons.lang3.math.Fraction_ESTest.test079131(Fraction_ESTest.java:945)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test05798
org.evosuite.runtime.mock.java.lang.MockArithmeticException: The numerator must not be negative
	at org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:185)
	at org.apache.commons.lang3.math.Fraction_ESTest.test05798(Fraction_ESTest.java:714)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test04066
org.evosuite.runtime.mock.java.lang.MockArithmeticException: overflow: mul
	at org.apache.commons.lang3.math.Fraction.mulAndCheck(Fraction.java:642)
	at org.apache.commons.lang3.math.Fraction.addSub(Fraction.java:755)
	at org.apache.commons.lang3.math.Fraction.subtract(Fraction.java:726)
	at org.apache.commons.lang3.math.Fraction_ESTest.test04066(Fraction_ESTest.java:474)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test085144
org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: The string must not be null
	at org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:326)
	at org.apache.commons.lang3.math.Fraction_ESTest.test085144(Fraction_ESTest.java:1051)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test094155
org.evosuite.runtime.mock.java.lang.MockArithmeticException: The denominator must not be negative
	at org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:182)
	at org.apache.commons.lang3.math.Fraction_ESTest.test094155(Fraction_ESTest.java:1115)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test099163
org.evosuite.runtime.mock.java.lang.MockArithmeticException: The denominator must not be zero
	at org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:148)
	at org.apache.commons.lang3.math.Fraction_ESTest.test099163(Fraction_ESTest.java:1155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test04369
org.evosuite.runtime.mock.java.lang.MockArithmeticException: overflow: mul
	at org.apache.commons.lang3.math.Fraction.mulAndCheck(Fraction.java:642)
	at org.apache.commons.lang3.math.Fraction.addSub(Fraction.java:756)
	at org.apache.commons.lang3.math.Fraction.add(Fraction.java:712)
	at org.apache.commons.lang3.math.Fraction_ESTest.test04369(Fraction_ESTest.java:493)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test066112
org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: The fraction must not be null
	at org.apache.commons.lang3.math.Fraction.divideBy(Fraction.java:823)
	at org.apache.commons.lang3.math.Fraction_ESTest.test066112(Fraction_ESTest.java:814)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test088147
org.evosuite.runtime.mock.java.lang.MockArithmeticException: overflow: can't negate
	at org.apache.commons.lang3.math.Fraction.getReducedFraction(Fraction.java:228)
	at org.apache.commons.lang3.math.Fraction_ESTest.test088147(Fraction_ESTest.java:1066)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test0047
org.evosuite.runtime.mock.java.lang.MockArithmeticException: overflow: mul
	at org.apache.commons.lang3.math.Fraction.mulAndCheck(Fraction.java:642)
	at org.apache.commons.lang3.math.Fraction.addSub(Fraction.java:756)
	at org.apache.commons.lang3.math.Fraction.subtract(Fraction.java:726)
	at org.apache.commons.lang3.math.Fraction_ESTest.test0047(Fraction_ESTest.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test091152
org.evosuite.runtime.mock.java.lang.MockArithmeticException: Numerator too large to represent as an Integer.
	at org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:195)
	at org.apache.commons.lang3.math.Fraction_ESTest.test091152(Fraction_ESTest.java:1099)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test075126
org.evosuite.runtime.mock.java.lang.MockArithmeticException: overflow: mul
	at org.apache.commons.lang3.math.Fraction.mulAndCheck(Fraction.java:642)
	at org.apache.commons.lang3.math.Fraction.multiplyBy(Fraction.java:806)
	at org.apache.commons.lang3.math.Fraction.divideBy(Fraction.java:828)
	at org.apache.commons.lang3.math.Fraction_ESTest.test075126(Fraction_ESTest.java:912)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test092153
org.evosuite.runtime.mock.java.lang.MockArithmeticException: Numerator too large to represent as an Integer.
	at org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:195)
	at org.apache.commons.lang3.math.Fraction_ESTest.test092153(Fraction_ESTest.java:1104)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test068116
org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: The fraction must not be null
	at org.apache.commons.lang3.math.Fraction.multiplyBy(Fraction.java:797)
	at org.apache.commons.lang3.math.Fraction_ESTest.test068116(Fraction_ESTest.java:841)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test097160
org.evosuite.runtime.mock.java.lang.MockArithmeticException: overflow: can't negate
	at org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:153)
	at org.apache.commons.lang3.math.Fraction_ESTest.test097160(Fraction_ESTest.java:1138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test086145
org.evosuite.runtime.mock.java.lang.MockArithmeticException: The value must not be greater than Integer.MAX_VALUE or NaN
	at org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:258)
	at org.apache.commons.lang3.math.Fraction_ESTest.test086145(Fraction_ESTest.java:1056)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test073124
org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: The fraction must not be null
	at org.apache.commons.lang3.math.Fraction.addSub(Fraction.java:741)
	at org.apache.commons.lang3.math.Fraction.add(Fraction.java:712)
	at org.apache.commons.lang3.math.Fraction_ESTest.test073124(Fraction_ESTest.java:899)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test00611
java.lang.NumberFormatException: For input string: " Hwz3~N"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:569)
	at java.lang.Integer.parseInt(Integer.java:615)
	at org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:353)
	at org.apache.commons.lang3.math.Fraction_ESTest.test00611(Fraction_ESTest.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test03965
org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: The fraction must not be null
	at org.apache.commons.lang3.math.Fraction.addSub(Fraction.java:741)
	at org.apache.commons.lang3.math.Fraction.subtract(Fraction.java:726)
	at org.apache.commons.lang3.math.Fraction_ESTest.test03965(Fraction_ESTest.java:467)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test04268
java.lang.NullPointerException
	at org.apache.commons.lang3.math.Fraction.compareTo(Fraction.java:885)
	at org.apache.commons.lang3.math.Fraction_ESTest.test04268(Fraction_ESTest.java:486)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test05595
org.evosuite.runtime.mock.java.lang.MockArithmeticException: The denominator must not be zero
	at org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:179)
	at org.apache.commons.lang3.math.Fraction_ESTest.test05595(Fraction_ESTest.java:671)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test065111
org.evosuite.runtime.mock.java.lang.MockArithmeticException: The fraction to divide by must not be zero
	at org.apache.commons.lang3.math.Fraction.divideBy(Fraction.java:826)
	at org.apache.commons.lang3.math.Fraction_ESTest.test065111(Fraction_ESTest.java:808)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test090151
org.evosuite.runtime.mock.java.lang.MockArithmeticException: The denominator must not be zero
	at org.apache.commons.lang3.math.Fraction.getReducedFraction(Fraction.java:216)
	at org.apache.commons.lang3.math.Fraction_ESTest.test090151(Fraction_ESTest.java:1094)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test076127
org.evosuite.runtime.mock.java.lang.MockArithmeticException: overflow: mul
	at org.apache.commons.lang3.math.Fraction.mulAndCheck(Fraction.java:642)
	at org.apache.commons.lang3.math.Fraction.multiplyBy(Fraction.java:806)
	at org.apache.commons.lang3.math.Fraction.pow(Fraction.java:562)
	at org.apache.commons.lang3.math.Fraction.pow(Fraction.java:564)
	at org.apache.commons.lang3.math.Fraction.pow(Fraction.java:564)
	at org.apache.commons.lang3.math.Fraction.pow(Fraction.java:558)
	at org.apache.commons.lang3.math.Fraction_ESTest.test076127(Fraction_ESTest.java:918)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test084143
java.lang.NumberFormatException: For input string: ">NLE6w."
	at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043)
	at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)
	at java.lang.Double.parseDouble(Double.java:538)
	at org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:331)
	at org.apache.commons.lang3.math.Fraction_ESTest.test084143(Fraction_ESTest.java:1046)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test04167
org.evosuite.runtime.mock.java.lang.MockArithmeticException: overflow: mul
	at org.apache.commons.lang3.math.Fraction.mulAndCheck(Fraction.java:642)
	at org.apache.commons.lang3.math.Fraction.multiplyBy(Fraction.java:806)
	at org.apache.commons.lang3.math.Fraction_ESTest.test04167(Fraction_ESTest.java:480)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
--- org.apache.commons.lang3.math.Fraction_ESTest::test087146
org.evosuite.runtime.mock.java.lang.MockArithmeticException: overflow: can't negate
	at org.apache.commons.lang3.math.Fraction.getReducedFraction(Fraction.java:228)
	at org.apache.commons.lang3.math.Fraction_ESTest.test087146(Fraction_ESTest.java:1061)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
