/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:21:27 GMT 2023
 */
package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0~U0@mxt");
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber(" [.L+LrZZh");
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        byte byte0 = NumberUtils.max((byte) 0, (byte) (-14), (byte) (-14));
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        int int0 = NumberUtils.max(1388, (int) (byte) 39, 100);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 0, (byte) 36, (byte) 28);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        short short0 = NumberUtils.min((short) 0, (short) 86, (short) 86);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        short[] shortArray0 = new short[9];
        shortArray0[1] = (short) 4112;
        short short0 = NumberUtils.max(shortArray0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        long[] longArray0 = new long[8];
        longArray0[1] = (-1534L);
        long long0 = NumberUtils.max(longArray0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        NumberUtils.createNumber("%.J^M#DI@yl\"o^");
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        NumberUtils.createNumber("b");
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        short short0 = NumberUtils.toShort("%.J^M#DI@yl\"o^", (short) 0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        long long0 = NumberUtils.toLong("kxuF%msTz5kUs", 0L);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        long long0 = NumberUtils.toLong("5");
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        int int0 = NumberUtils.toInt("-s?Nb;k=", (int) numberUtils0.SHORT_MINUS_ONE);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        int int0 = NumberUtils.toInt("7");
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        float float0 = NumberUtils.toFloat(">^(D`^eJPu@", (-3172.517F));
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        float float0 = NumberUtils.toFloat("1");
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        double double0 = NumberUtils.toDouble("ks{,-}\"jpGIED/", 0.0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        double double0 = NumberUtils.toDouble(":/C}", (-2437.57933038));
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        double double0 = NumberUtils.toDouble("7");
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        byte byte0 = NumberUtils.toByte("w[I", (byte) 64);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        byte byte0 = NumberUtils.toByte("3");
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        short[] shortArray0 = new short[8];
        shortArray0[0] = (short) 5;
        shortArray0[1] = (short) 5;
        shortArray0[2] = (short) 5;
        shortArray0[3] = (short) 5;
        shortArray0[4] = (short) 5;
        shortArray0[5] = (short) 5;
        shortArray0[6] = (short) 5;
        shortArray0[7] = (short) 5;
        short short0 = NumberUtils.min(shortArray0);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        short[] shortArray0 = new short[4];
        shortArray0[0] = (short) (byte) numberUtils0.BYTE_MINUS_ONE;
        short short0 = NumberUtils.min(shortArray0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        long[] longArray0 = new long[3];
        longArray0[0] = (long) (byte) 39;
        longArray0[1] = (long) 39;
        longArray0[2] = (long) (byte) 39;
        long long0 = NumberUtils.min(longArray0);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        int[] intArray0 = new int[9];
        intArray0[0] = 10;
        intArray0[1] = 70;
        intArray0[2] = 2;
        intArray0[3] = 2531;
        intArray0[4] = 3;
        intArray0[5] = 100;
        intArray0[6] = 1593;
        intArray0[7] = 13;
        intArray0[8] = 5;
        int int0 = NumberUtils.min(intArray0);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        int[] intArray0 = new int[7];
        intArray0[0] = (int) (byte) (-79);
        int int0 = NumberUtils.min(intArray0);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        float[] floatArray0 = new float[2];
        floatArray0[0] = 2178.5F;
        floatArray0[1] = 1.0F;
        float float0 = NumberUtils.min(floatArray0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        float[] floatArray0 = new float[8];
        floatArray0[4] = (-722.978F);
        float float0 = NumberUtils.min(floatArray0);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (double) 969L;
        double double0 = NumberUtils.min(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 69;
        byte byte0 = NumberUtils.min(byteArray0);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[3] = (byte) (-55);
        byte byte0 = NumberUtils.min(byteArray0);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        short short0 = NumberUtils.min((short) (byte) 0, (short) (byte) 0, (short) 563);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        long long0 = NumberUtils.min(1204L, 1204L, 1204L);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        long long0 = NumberUtils.min(0L, 42L, (-5670L));
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        int int0 = NumberUtils.min(0, 0, 1191);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        int int0 = NumberUtils.min(830, 1951, 1951);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        float float0 = NumberUtils.min(1349.4127F, 1349.4127F, 1349.4127F);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        float float0 = NumberUtils.min((-1827.8975F), (-1827.8975F), (-2771.039F));
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        double double0 = NumberUtils.min((double) 1.0F, (double) 1.0F, (double) 1.0F);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        double double0 = NumberUtils.min(1831.9964283, (-234.46364), 1831.9964283);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 0, (byte) 36, (byte) 0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 39, (byte) 39, (byte) 39);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        short[] shortArray0 = new short[1];
        shortArray0[0] = (short) (-635);
        short short0 = NumberUtils.max(shortArray0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        long[] longArray0 = new long[1];
        longArray0[0] = (long) (short) 120;
        long long0 = NumberUtils.max(longArray0);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        long[] longArray0 = new long[2];
        longArray0[0] = (long) (short) (-560);
        longArray0[1] = (long) (short) (-1);
        long long0 = NumberUtils.max(longArray0);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        int[] intArray0 = new int[3];
        intArray0[0] = (int) (byte) (-82);
        intArray0[1] = (int) (byte) (-82);
        intArray0[2] = (int) (byte) (-82);
        int int0 = NumberUtils.max(intArray0);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        float[] floatArray0 = new float[2];
        floatArray0[0] = (-1.0F);
        floatArray0[1] = (-1.0F);
        float float0 = NumberUtils.max(floatArray0);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = (double) (short) (-925);
        doubleArray0[1] = (-1.0);
        double double0 = NumberUtils.max(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-93);
        byteArray0[1] = (byte) (-93);
        byteArray0[2] = (byte) (-93);
        byteArray0[3] = (byte) (-93);
        byteArray0[4] = (byte) (-93);
        byteArray0[5] = (byte) (-93);
        byteArray0[6] = (byte) (-56);
        byteArray0[7] = (byte) (-93);
        byteArray0[8] = (byte) (-93);
        byte byte0 = NumberUtils.max(byteArray0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        short short0 = NumberUtils.max((short) 0, (short) 0, (short) 0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        short short0 = NumberUtils.max((short) (-1235), (short) (-1235), (short) (-1235));
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        long long0 = NumberUtils.max((-193L), (-193L), 0L);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        long long0 = NumberUtils.max((-1718L), (-1023L), (-1718L));
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        int int0 = NumberUtils.max(0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        float float0 = NumberUtils.max(0.0F, 0.0F, (-3004.806F));
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        float float0 = NumberUtils.max((-1.0F), (-1.0F), (-1.0F));
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        double double0 = NumberUtils.max((-84.9169040138), (double) (byte) 0, (double) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        double double0 = NumberUtils.max((double) (-1483L), (-5807.7), (-5807.7));
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        byte byte0 = NumberUtils.max((byte) (-90), (byte) (-90), (byte) (-93));
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        Number number0 = NumberUtils.createNumber("9");
    }

    @Test(timeout = 4000)
    public void test06162() throws Throwable {
        Long long0 = NumberUtils.createLong("3");
    }

    @Test(timeout = 4000)
    public void test06263() throws Throwable {
        Long long0 = NumberUtils.createLong("-8");
    }

    @Test(timeout = 4000)
    public void test06364() throws Throwable {
        Integer integer0 = NumberUtils.createInteger("7");
    }

    @Test(timeout = 4000)
    public void test06465() throws Throwable {
        Float float0 = NumberUtils.createFloat("8");
    }

    @Test(timeout = 4000)
    public void test06566() throws Throwable {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-0");
        bigDecimal0.byteValue();
    }

    @Test(timeout = 4000)
    public void test06667() throws Throwable {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("7");
        bigDecimal0.byteValue();
    }

    @Test(timeout = 4000)
    public void test06768() throws Throwable {
        NumberUtils.createDouble(";21W$eQ>{");
    }

    @Test(timeout = 4000)
    public void test06869() throws Throwable {
        NumberUtils.createBigDecimal("1m`JpWR");
    }

    @Test(timeout = 4000)
    public void test06970() throws Throwable {
        NumberUtils.createBigInteger("Dg`1U");
    }

    @Test(timeout = 4000)
    public void test07071() throws Throwable {
        NumberUtils.createLong("&}j>4?g+\"<");
    }

    @Test(timeout = 4000)
    public void test07172() throws Throwable {
        NumberUtils.createInteger("]DK6");
    }

    @Test(timeout = 4000)
    public void test07273() throws Throwable {
        Double double0 = NumberUtils.createDouble("7");
    }

    @Test(timeout = 4000)
    public void test07374() throws Throwable {
        NumberUtils.createFloat("org.apache.commons.lang3.math.NumberUtils");
    }

    @Test(timeout = 4000)
    public void test07475() throws Throwable {
        short short0 = NumberUtils.toShort("aW+na=fT}2ru86SS1", (short) (byte) (-114));
    }

    @Test(timeout = 4000)
    public void test07576() throws Throwable {
        byte byte0 = NumberUtils.toByte("sun.text.Normalizer is not available", (byte) 0);
    }

    @Test(timeout = 4000)
    public void test07677() throws Throwable {
        byte byte0 = NumberUtils.toByte((String) null, (byte) (-79));
    }

    @Test(timeout = 4000)
    public void test07778() throws Throwable {
        double double0 = NumberUtils.toDouble((String) null, (double) (short) 32);
    }

    @Test(timeout = 4000)
    public void test07879() throws Throwable {
        float float0 = NumberUtils.toFloat((String) null, 354.7F);
    }

    @Test(timeout = 4000)
    public void test07980() throws Throwable {
        float float0 = NumberUtils.toFloat("Strings must not be null", (float) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test08081() throws Throwable {
        long long0 = NumberUtils.toLong("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", (-617L));
    }

    @Test(timeout = 4000)
    public void test08182() throws Throwable {
        int int0 = NumberUtils.toInt("decmose", (int) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test08283() throws Throwable {
        int int0 = NumberUtils.toInt((String) null, 714);
    }

    @Test(timeout = 4000)
    public void test08384() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("F");
    }

    @Test(timeout = 4000)
    public void test08485() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber(".");
    }

    @Test(timeout = 4000)
    public void test08586() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("3");
    }

    @Test(timeout = 4000)
    public void test08687() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("--ylQ=9");
    }

    @Test(timeout = 4000)
    public void test08788() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0xlh#f>4#vhZfZxN");
    }

    @Test(timeout = 4000)
    public void test08889() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0xb");
    }

    @Test(timeout = 4000)
    public void test08990() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0x");
    }

    @Test(timeout = 4000)
    public void test09091() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("-0=");
    }

    @Test(timeout = 4000)
    public void test09192() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("Threshold must not be negative");
    }

    @Test(timeout = 4000)
    public void test09293() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("");
    }

    @Test(timeout = 4000)
    public void test09394() throws Throwable {
        boolean boolean0 = NumberUtils.isNumber("0x-0xThe Array must not be null");
    }

    @Test(timeout = 4000)
    public void test09495() throws Throwable {
        boolean boolean0 = NumberUtils.isDigits("0xStrings must not be null");
    }

    @Test(timeout = 4000)
    public void test09596() throws Throwable {
        boolean boolean0 = NumberUtils.isDigits((String) null);
    }

    @Test(timeout = 4000)
    public void test09697() throws Throwable {
        byte byte0 = NumberUtils.max((byte) 0, (byte) 0, (byte) 4);
    }

    @Test(timeout = 4000)
    public void test09798() throws Throwable {
        byte byte0 = NumberUtils.max((byte) 0, (byte) 23, (byte) 23);
    }

    @Test(timeout = 4000)
    public void test09899() throws Throwable {
        short short0 = NumberUtils.max((short) 45, (short) 0, (short) 102);
    }

    @Test(timeout = 4000)
    public void test099100() throws Throwable {
        short short0 = NumberUtils.max((short) 120, (short) 2022, (short) 0);
    }

    @Test(timeout = 4000)
    public void test100101() throws Throwable {
        int int0 = NumberUtils.max((int) (byte) (-32), 0, 920);
    }

    @Test(timeout = 4000)
    public void test101102() throws Throwable {
        int int0 = NumberUtils.max((-3045), (-3045), (-3045));
    }

    @Test(timeout = 4000)
    public void test102103() throws Throwable {
        long long0 = NumberUtils.max((-2083L), (long) 0, 14L);
    }

    @Test(timeout = 4000)
    public void test103104() throws Throwable {
        NumberUtils numberUtils0 = new NumberUtils();
        long long0 = NumberUtils.max((long) numberUtils0.SHORT_ONE, 0L, (long) numberUtils0.BYTE_ONE);
    }

    @Test(timeout = 4000)
    public void test104105() throws Throwable {
        byte byte0 = NumberUtils.min((byte) 86, (byte) 46, (byte) (-107));
    }

    @Test(timeout = 4000)
    public void test105106() throws Throwable {
        short short0 = NumberUtils.min((short) 5543, (short) 5543, (short) (-3091));
    }

    @Test(timeout = 4000)
    public void test106107() throws Throwable {
        short short0 = NumberUtils.min((short) 977, (short) (-925), (short) 977);
    }

    @Test(timeout = 4000)
    public void test107108() throws Throwable {
        short short0 = NumberUtils.min((short) 5, (short) 5, (short) 5);
    }

    @Test(timeout = 4000)
    public void test108109() throws Throwable {
        int int0 = NumberUtils.min(0, (-2303), (-2303));
    }

    @Test(timeout = 4000)
    public void test109110() throws Throwable {
        int int0 = NumberUtils.min(224, 224, (-3045));
    }

    @Test(timeout = 4000)
    public void test110111() throws Throwable {
        long long0 = NumberUtils.min(969L, 969L, 0L);
    }

    @Test(timeout = 4000)
    public void test111112() throws Throwable {
        long long0 = NumberUtils.min((long) (byte) 36, (long) (byte) 0, (long) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test112113() throws Throwable {
        long long0 = NumberUtils.min(0L, 1L, (long) (short) 2022);
    }

    @Test(timeout = 4000)
    public void test113114() throws Throwable {
        float[] floatArray0 = new float[9];
        floatArray0[3] = (float) 224;
        float float0 = NumberUtils.max(floatArray0);
    }

    @Test(timeout = 4000)
    public void test114115() throws Throwable {
        float[] floatArray0 = new float[5];
        floatArray0[2] = Float.NaN;
        float float0 = NumberUtils.max(floatArray0);
    }

    @Test(timeout = 4000)
    public void test115116() throws Throwable {
        float[] floatArray0 = new float[0];
        NumberUtils.max(floatArray0);
    }

    @Test(timeout = 4000)
    public void test116117() throws Throwable {
        NumberUtils.max((float[]) null);
    }

    @Test(timeout = 4000)
    public void test117118() throws Throwable {
        float[] floatArray0 = new float[5];
        float float0 = NumberUtils.max(floatArray0);
    }

    @Test(timeout = 4000)
    public void test118119() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[3] = 1213.0;
        double double0 = NumberUtils.max(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test119120() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[1] = Double.NaN;
        double double0 = NumberUtils.max(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test120121() throws Throwable {
        double[] doubleArray0 = new double[0];
        NumberUtils.max(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test121122() throws Throwable {
        NumberUtils.max((double[]) null);
    }

    @Test(timeout = 4000)
    public void test122123() throws Throwable {
        double[] doubleArray0 = new double[3];
        double double0 = NumberUtils.max(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test123124() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[4] = (byte) 118;
        byte byte0 = NumberUtils.max(byteArray0);
    }

    @Test(timeout = 4000)
    public void test124125() throws Throwable {
        byte[] byteArray0 = new byte[0];
        NumberUtils.max(byteArray0);
    }

    @Test(timeout = 4000)
    public void test125126() throws Throwable {
        NumberUtils.max((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test126127() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byte byte0 = NumberUtils.max(byteArray0);
    }

    @Test(timeout = 4000)
    public void test127128() throws Throwable {
        short[] shortArray0 = new short[3];
        shortArray0[2] = (short) (byte) 118;
        short short0 = NumberUtils.max(shortArray0);
    }

    @Test(timeout = 4000)
    public void test128129() throws Throwable {
        short[] shortArray0 = new short[3];
        short short0 = NumberUtils.max(shortArray0);
    }

    @Test(timeout = 4000)
    public void test129130() throws Throwable {
        short[] shortArray0 = new short[0];
        NumberUtils.max(shortArray0);
    }

    @Test(timeout = 4000)
    public void test130131() throws Throwable {
        NumberUtils.max((short[]) null);
    }

    @Test(timeout = 4000)
    public void test131132() throws Throwable {
        int[] intArray0 = new int[8];
        intArray0[3] = 1488;
        int int0 = NumberUtils.max(intArray0);
    }

    @Test(timeout = 4000)
    public void test132133() throws Throwable {
        int[] intArray0 = new int[0];
        NumberUtils.max(intArray0);
    }

    @Test(timeout = 4000)
    public void test133134() throws Throwable {
        NumberUtils.max((int[]) null);
    }

    @Test(timeout = 4000)
    public void test134135() throws Throwable {
        int[] intArray0 = new int[8];
        int int0 = NumberUtils.max(intArray0);
    }

    @Test(timeout = 4000)
    public void test135136() throws Throwable {
        long[] longArray0 = new long[0];
        NumberUtils.max(longArray0);
    }

    @Test(timeout = 4000)
    public void test136137() throws Throwable {
        NumberUtils.max((long[]) null);
    }

    @Test(timeout = 4000)
    public void test137138() throws Throwable {
        float[] floatArray0 = new float[2];
        floatArray0[1] = Float.NaN;
        float float0 = NumberUtils.min(floatArray0);
    }

    @Test(timeout = 4000)
    public void test138139() throws Throwable {
        float[] floatArray0 = new float[0];
        NumberUtils.min(floatArray0);
    }

    @Test(timeout = 4000)
    public void test139140() throws Throwable {
        NumberUtils.min((float[]) null);
    }

    @Test(timeout = 4000)
    public void test140141() throws Throwable {
        float[] floatArray0 = new float[5];
        float float0 = NumberUtils.min(floatArray0);
    }

    @Test(timeout = 4000)
    public void test141142() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[2] = (-230.3166676145615);
        double double0 = NumberUtils.min(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test142143() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[2] = Double.NaN;
        double double0 = NumberUtils.min(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test143144() throws Throwable {
        double[] doubleArray0 = new double[7];
        double double0 = NumberUtils.min(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test144145() throws Throwable {
        double[] doubleArray0 = new double[0];
        NumberUtils.min(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test145146() throws Throwable {
        NumberUtils.min((double[]) null);
    }

    @Test(timeout = 4000)
    public void test146147() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) 102;
        byte byte0 = NumberUtils.min(byteArray0);
    }

    @Test(timeout = 4000)
    public void test147148() throws Throwable {
        byte[] byteArray0 = new byte[0];
        NumberUtils.min(byteArray0);
    }

    @Test(timeout = 4000)
    public void test148149() throws Throwable {
        NumberUtils.min((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test149150() throws Throwable {
        short[] shortArray0 = new short[4];
        shortArray0[0] = (short) 119;
        short short0 = NumberUtils.min(shortArray0);
    }

    @Test(timeout = 4000)
    public void test150151() throws Throwable {
        short[] shortArray0 = new short[0];
        NumberUtils.min(shortArray0);
    }

    @Test(timeout = 4000)
    public void test151152() throws Throwable {
        NumberUtils.min((short[]) null);
    }

    @Test(timeout = 4000)
    public void test152153() throws Throwable {
        int[] intArray0 = new int[8];
        intArray0[0] = 64;
        int int0 = NumberUtils.min(intArray0);
    }

    @Test(timeout = 4000)
    public void test153154() throws Throwable {
        int[] intArray0 = new int[0];
        NumberUtils.min(intArray0);
    }

    @Test(timeout = 4000)
    public void test154155() throws Throwable {
        NumberUtils.min((int[]) null);
    }

    @Test(timeout = 4000)
    public void test155156() throws Throwable {
        long[] longArray0 = new long[4];
        longArray0[2] = (-365L);
        long long0 = NumberUtils.min(longArray0);
    }

    @Test(timeout = 4000)
    public void test156157() throws Throwable {
        long[] longArray0 = new long[0];
        NumberUtils.min(longArray0);
    }

    @Test(timeout = 4000)
    public void test157158() throws Throwable {
        NumberUtils.min((long[]) null);
    }

    @Test(timeout = 4000)
    public void test158159() throws Throwable {
        long[] longArray0 = new long[4];
        long long0 = NumberUtils.min(longArray0);
    }

    @Test(timeout = 4000)
    public void test159160() throws Throwable {
        NumberUtils.createBigDecimal("");
    }

    @Test(timeout = 4000)
    public void test160161() throws Throwable {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
    }

    @Test(timeout = 4000)
    public void test161162() throws Throwable {
        BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
    }

    @Test(timeout = 4000)
    public void test162163() throws Throwable {
        Long long0 = NumberUtils.createLong((String) null);
    }

    @Test(timeout = 4000)
    public void test163164() throws Throwable {
        Integer integer0 = NumberUtils.createInteger((String) null);
    }

    @Test(timeout = 4000)
    public void test164165() throws Throwable {
        Double double0 = NumberUtils.createDouble((String) null);
    }

    @Test(timeout = 4000)
    public void test165166() throws Throwable {
        Float float0 = NumberUtils.createFloat((String) null);
    }

    @Test(timeout = 4000)
    public void test166167() throws Throwable {
        NumberUtils.createNumber("Minimum abbreviation width with offset is 7");
    }

    @Test(timeout = 4000)
    public void test167168() throws Throwable {
        NumberUtils.createNumber("The Array must not be null");
    }

    @Test(timeout = 4000)
    public void test168169() throws Throwable {
        NumberUtils.createNumber("aF`URqvf");
    }

    @Test(timeout = 4000)
    public void test169170() throws Throwable {
        NumberUtils.createNumber(".,NH[{~R}rt|d");
    }

    @Test(timeout = 4000)
    public void test170171() throws Throwable {
        NumberUtils.createNumber("NFD");
    }

    @Test(timeout = 4000)
    public void test171172() throws Throwable {
        NumberUtils.createNumber("The");
    }

    @Test(timeout = 4000)
    public void test172173() throws Throwable {
        NumberUtils.createNumber("[0");
    }

    @Test(timeout = 4000)
    public void test173174() throws Throwable {
        NumberUtils.createNumber("sE^G%G<e");
    }

    @Test(timeout = 4000)
    public void test174175() throws Throwable {
        NumberUtils.createNumber("Array cannot be empty.");
    }

    @Test(timeout = 4000)
    public void test175176() throws Throwable {
        NumberUtils.createNumber("sun.text.Normalizer is not available");
    }

    @Test(timeout = 4000)
    public void test176177() throws Throwable {
        NumberUtils.createNumber(".");
    }

    @Test(timeout = 4000)
    public void test177178() throws Throwable {
        NumberUtils.createNumber("-0x-0xC0cbIrmFf9*<)@5pL");
    }

    @Test(timeout = 4000)
    public void test178179() throws Throwable {
        NumberUtils.createNumber("0xw[I");
    }

    @Test(timeout = 4000)
    public void test179180() throws Throwable {
        Number number0 = NumberUtils.createNumber("--Strings must not be null");
    }

    @Test(timeout = 4000)
    public void test180181() throws Throwable {
        NumberUtils.createNumber("");
    }

    @Test(timeout = 4000)
    public void test181182() throws Throwable {
        Number number0 = NumberUtils.createNumber((String) null);
    }

    @Test(timeout = 4000)
    public void test182183() throws Throwable {
        NumberUtils.createNumber("C0cbIrmFf9*<)@5pL");
    }

    @Test(timeout = 4000)
    public void test183184() throws Throwable {
        short short0 = NumberUtils.toShort((String) null, (short) 2022);
    }

    @Test(timeout = 4000)
    public void test184185() throws Throwable {
        byte byte0 = NumberUtils.toByte((String) null);
    }

    @Test(timeout = 4000)
    public void test185186() throws Throwable {
        double double0 = NumberUtils.toDouble((String) null);
    }

    @Test(timeout = 4000)
    public void test186187() throws Throwable {
        float float0 = NumberUtils.toFloat("8uE");
    }

    @Test(timeout = 4000)
    public void test187188() throws Throwable {
        long long0 = NumberUtils.toLong((String) null, 138L);
    }

    @Test(timeout = 4000)
    public void test188189() throws Throwable {
        int int0 = NumberUtils.toInt((String) null);
    }

    @Test(timeout = 4000)
    public void test189190() throws Throwable {
        short short0 = NumberUtils.toShort("");
    }

    @Test(timeout = 4000)
    public void test190191() throws Throwable {
        long long0 = NumberUtils.toLong("");
    }

    @Test(timeout = 4000)
    public void test191192() throws Throwable {
        double double0 = NumberUtils.max((-84.9169040138), (double) (byte) 28, (double) (byte) 28);
    }

    @Test(timeout = 4000)
    public void test192193() throws Throwable {
        double double0 = NumberUtils.min((double) 2022, 0.0, 1378.49288319921);
    }

    @Test(timeout = 4000)
    public void test193194() throws Throwable {
        float float0 = NumberUtils.min((float) 0, 350.17447F, (float) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test194195() throws Throwable {
        float float0 = NumberUtils.max((-1478.0F), 27.7482F, (float) (byte) 1);
    }
}
