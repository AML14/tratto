/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 05 00:52:59 GMT 2023
 */
package org.mockito.internal.invocation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hamcrest.Matcher;
import org.junit.runner.RunWith;
import org.mockito.internal.invocation.InvocationMatcher;
import org.mockito.invocation.Invocation;
import org.mockito.invocation.Location;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class InvocationMatcher_ESTest extends InvocationMatcher_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Object[] objectArray0 = new Object[8];
        Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
        doReturn((Object[]) null).when(invocation0).getArguments();
        InvocationMatcher invocationMatcher0 = null;
        invocationMatcher0 = new InvocationMatcher(invocation0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Object[] objectArray0 = new Object[1];
        Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(invocation0).toString();
        doReturn(objectArray0).when(invocation0).getArguments();
        InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
        Invocation invocation1 = invocationMatcher0.getInvocation();
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Object[] objectArray0 = new Object[1];
        Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
        doReturn((Location) null).when(invocation0).getLocation();
        doReturn(objectArray0).when(invocation0).getArguments();
        InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
        Location location0 = invocationMatcher0.getLocation();
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Object[] objectArray0 = new Object[11];
        Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
        doReturn(objectArray0).when(invocation0).getArguments();
        doReturn((Object) null).when(invocation0).getMock();
        InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
        invocationMatcher0.toString();
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Object[] objectArray0 = new Object[3];
        Object object0 = new Object();
        Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
        doReturn(objectArray0).when(invocation0).getArguments();
        doReturn(object0, (Object) null).when(invocation0).getMock();
        InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
        boolean boolean0 = invocationMatcher0.matches(invocation0);
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        Object[] objectArray0 = new Object[4];
        Object object0 = new Object();
        Invocation invocation0 = mock(Invocation.class, new ViolatedAssumptionAnswer());
        doReturn(objectArray0).when(invocation0).getArguments();
        doReturn((Method) null, (Method) null).when(invocation0).getMethod();
        doReturn(object0, object0).when(invocation0).getMock();
        InvocationMatcher invocationMatcher0 = new InvocationMatcher(invocation0);
        invocationMatcher0.matches(invocation0);
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        LinkedList<Invocation> linkedList0 = new LinkedList<Invocation>();
        List<InvocationMatcher> list0 = InvocationMatcher.createFrom(linkedList0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        Stack<Invocation> stack0 = new Stack<Invocation>();
        stack0.add((Invocation) null);
        InvocationMatcher.createFrom(stack0);
    }
}
