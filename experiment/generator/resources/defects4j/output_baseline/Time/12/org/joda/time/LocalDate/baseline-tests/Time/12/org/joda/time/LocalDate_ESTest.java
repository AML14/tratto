/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 01:52:36 GMT 2023
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class LocalDate_ESTest extends LocalDate_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2973));
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
        localDate0.minusDays((-2973));
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        localDate0.minusMonths((-1946));
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        localDate0.plusDays((-2082));
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        localDate0.plusWeeks((-368));
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        MockDate mockDate0 = new MockDate((-27), (-1320), 1900);
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        localDate0.plusMonths((-21));
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime(21600000L, (Chronology) buddhistChronology0);
        LocalDate localDate0 = new LocalDate(localDateTime0, (DateTimeZone) null);
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        localDate0.withFieldAdded(durationFieldType0, 1);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
        Locale locale0 = Locale.ITALIAN;
        localDate_Property0.setCopy("]Mg,V)?}0", locale0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-4071));
        LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
        localDate_Property0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
        LocalDate.Property localDate_Property0 = new LocalDate.Property(localDate0, dateTimeField0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        localDate0.withField(dateTimeFieldType0, 2);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        localDate0.withDayOfWeek(1);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-87), 1);
        MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
        LocalDate localDate0 = monthDay0.toLocalDate(1);
        LocalDate localDate1 = localDate0.minusYears((-2331));
        localDate1.toInterval(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
        localDate0.toInterval((DateTimeZone) fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Days days0 = Days.MAX_VALUE;
        LocalDate localDate1 = localDate0.minus(days0);
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        localDate1.toInterval((DateTimeZone) fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        LocalDate localDate1 = localDate0.withYear((-28800000));
        localDate1.toInterval();
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withLocalMillis(21600000L);
        localDate1.toDateTimeAtStartOfDay((DateTimeZone) fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime(21600000L, (Chronology) buddhistChronology0);
        LocalDate localDate0 = new LocalDate(localDateTime0, (DateTimeZone) null);
        LocalDate localDate1 = localDate0.minusMonths(1840);
        localDate1.toDateTimeAtStartOfDay();
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
        LocalDate localDate0 = new LocalDate(0L, chronology0);
        localDate0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
        localDate0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
        LocalDate localDate0 = new LocalDate(0L, chronology0);
        localDate0.toDateTimeAtMidnight();
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        MockDate mockDate0 = new MockDate(0, (-1320), 1900);
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withYear(40);
        localDate1.toDateTimeAtCurrentTime();
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        LocalDate localDate0 = new LocalDate(1L);
        LocalTime localTime0 = new LocalTime(2, 41);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
        localDate0.toDateTime(localTime0, dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
        LocalDate localDate1 = localDate0.withLocalMillis(0L);
        LocalDate localDate2 = localDate1.withDayOfMonth(1);
        LocalTime localTime0 = new LocalTime(3600000L, (Chronology) copticChronology0);
        localDate2.toDateTime(localTime0);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        Chronology chronology0 = iSOChronology0.withUTC();
        LocalDate localDate0 = new LocalDate(0L, chronology0);
        localDate0.toDateMidnight(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        LocalDate localDate0 = new LocalDate(1L);
        localDate0.toDateMidnight();
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        LocalDate.parse("2014-02-14");
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        LocalDate localDate1 = localDate0.plusYears((-3969));
        localDate1.getYear();
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        LocalDate localDate1 = localDate0.withYear((-28800000));
        localDate1.getWeekyear();
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Chronology chronology0 = ethiopicChronology0.withZone(fixedDateTimeZone0);
        LocalDate localDate0 = new LocalDate(0L, chronology0);
        localDate0.getLocalMillis();
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        localDate0.getLocalMillis();
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = new LocalDate((-24L), (Chronology) ethiopicChronology0);
        localDate0.getLocalMillis();
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
        localDate0.getField(1, (Chronology) copticChronology0);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Days days0 = Days.MAX_VALUE;
        LocalDate localDate1 = localDate0.minus(days0);
        localDate1.getEra();
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-87), 1);
        MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
        LocalDate localDate0 = monthDay0.toLocalDate(1);
        localDate0.getCenturyOfEra();
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate localDate1 = localDate0.withYearOfCentury(0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        localDate1.get(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4001), 44, 44, 40, (-4001), 2);
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        localDate0.withYearOfEra((-4001));
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        localDate0.withYearOfCentury(1687);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDate localDate0 = new LocalDate(0L, (Chronology) gJChronology0);
        localDate0.withYear(0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
        DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
        doReturn(87).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology0);
        LocalDate localDate0 = LocalDate.parse("org.joda.time.field.PreciseDurationField", dateTimeFormatter1);
        localDate0.withWeekyear((-1320));
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        localDate0.withWeekOfWeekyear(0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        JulianChronology julianChronology0 = JulianChronology.getInstance();
        Period period0 = new Period(0L, (Chronology) julianChronology0);
        Period period1 = period0.withMillis((-782));
        localDate0.withPeriodAdded(period1, 10209375);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        localDate0.withMonthOfYear(20);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
        DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
        doReturn(1761).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
        LocalDate localDate0 = LocalDate.parse("WB]X}Vjj", dateTimeFormatter0);
        localDate0.withEra(2090);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        localDate0.withDayOfYear(951);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(37);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        localDate0.withDayOfMonth((-108));
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        MockDate mockDate0 = new MockDate(0, (-1320), 1900);
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        localDate0.withCenturyOfEra((-2));
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2973));
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
        localDate0.plusYears((-2973));
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Years years0 = Years.MAX_VALUE;
        localDate0.plus(years0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
        DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
        doReturn((-2147483646)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
        LocalDate.parse("org.joda.time.field.PreciseDurationField", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        LocalDate.parse(">PN:7W}S(^", (DateTimeFormatter) null);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
        DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
        LocalDate.parse("WB]X}Vjj", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        LocalDate.parse((String) null);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        MockDate mockDate0 = new MockDate((-3620), 2587, 623191204, (-1688), 2477, 2587);
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        localDate0.minusYears(2147483639);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        localDate0.minusYears((-2147483646));
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = new LocalDate((Chronology) ethiopicChronology0);
        LocalDate localDate1 = localDate0.withWeekyear(1);
        localDate1.minusWeeks(1900);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Days days0 = Days.MIN_VALUE;
        localDate0.minus(days0);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        Partial partial0 = new Partial();
        LocalDate localDate0 = null;
        localDate0 = new LocalDate(partial0, (DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        LocalDate localDate0 = null;
        localDate0 = new LocalDate("eg1/`gL<X|%");
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDate localDate0 = null;
        localDate0 = new LocalDate((-9223372036854775808L), (Chronology) buddhistChronology0);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        LocalDate localDate0 = null;
        localDate0 = new LocalDate(943, (-3028), (-1566), (Chronology) null);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        LocalDate localDate0 = null;
        localDate0 = new LocalDate(0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime((long) (-2174), (Chronology) buddhistChronology0);
        LocalDate localDate0 = new LocalDate(localDateTime0, buddhistChronology0);
        localDate0.plusDays(3304);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        JulianChronology julianChronology0 = JulianChronology.getInstance();
        Period period0 = new Period(0L, (Chronology) julianChronology0);
        localDate0.withPeriodAdded(period0, 10209375);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-87), 1);
        MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
        LocalDate localDate0 = monthDay0.toLocalDate(1);
        localDate0.withPeriodAdded((ReadablePeriod) null, 247);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-288));
        LocalTime localTime0 = new LocalTime((long) 1, dateTimeZone0);
        localDate0.toDateTime(localTime0, dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDate localDate0 = new LocalDate();
        LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
        Date date0 = localDateTime0.toDate();
        LocalTime localTime0 = LocalTime.fromDateFields(date0);
        localDate0.toDateTime(localTime0, (DateTimeZone) fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        LocalDate localDate1 = localDate0.minusWeeks((-3165));
        localDate1.compareTo((ReadablePartial) localDate0);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        MockDate mockDate0 = new MockDate((-27), (-1320), 1900);
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        LocalDate localDate1 = localDate0.plusMonths(3);
        LocalDate localDate2 = localDate0.plusMonths(3);
        localDate2.compareTo((ReadablePartial) localDate1);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalTime localTime0 = new LocalTime((-2271L));
        localDate0.compareTo((ReadablePartial) localTime0);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        LocalDate localDate1 = localDate0.minusWeeks((-3165));
        localDate0.compareTo((ReadablePartial) localDate1);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        MockDate mockDate0 = new MockDate((-27), (-1320), 1900);
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        localDate0.compareTo((ReadablePartial) localDate0);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
        LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
        LocalDate localDate1 = localDate_Property0.roundFloorCopy();
        localDate1.equals(localDate0);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
        localDate0.isSupported(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        localDate0.isSupported(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime((long) (-2174), (Chronology) buddhistChronology0);
        LocalDate localDate0 = new LocalDate(localDateTime0, buddhistChronology0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        localDate0.isSupported(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        localDate0.get(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
        DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
        doReturn(1761).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
        LocalDate localDate0 = LocalDate.parse("WB]X}Vjj", dateTimeFormatter0);
        localDate0.getValue(2);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        localDate0.getValue(1);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        localDate0.getDayOfMonth();
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
        LocalDate localDate0 = new LocalDate((long) (-1701), (Chronology) strictChronology0);
        localDate0.toDateTimeAtStartOfDay((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDate localDate0 = new LocalDate((-24L), (Chronology) ethiopicChronology0);
        localDate0.toInterval((DateTimeZone) fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
        Date date0 = localDateTime0.toDate();
        LocalDate localDate0 = LocalDate.fromDateFields(date0);
        localDate0.toDateMidnight((DateTimeZone) fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
        LocalDate localDate0 = new LocalDate(2, 2, 2, strictChronology0);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        localDate0.getChronology();
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
        localDate0.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
        LocalDate.parse("d4?", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        LocalDate localDate0 = new LocalDate((DateTimeZone) null);
        localDate0.size();
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
        localDate0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        LocalDate localDate0 = new LocalDate(21, 8, 21);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDate localDate0 = null;
        localDate0 = new LocalDate(gJChronology0, gJChronology0);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        LocalDate localDate0 = new LocalDate(1L);
        Locale locale0 = Locale.ROOT;
        localDate0.toString((String) null, locale0);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
        Locale locale0 = Locale.FRENCH;
        localDate0.toString("4", locale0);
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        LocalDate localDate0 = new LocalDate((-1269L), dateTimeZone0);
        localDate0.toString((String) null);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        MockDate mockDate0 = new MockDate((-27), (-1320), 1900);
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        localDate0.toString("org.joda.time.field.PreciseDurationField");
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        localDate0.property(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(58, 58, (-2699));
        LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
        localDate0.property((DateTimeFieldType) null);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);
        LocalDate localDate0 = dateTime0.toLocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        localDate0.property(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        LocalDate localDate0 = new LocalDate((Chronology) buddhistChronology0);
        localDate0.minusDays(0);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        localDate0.minusDays(14);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        localDate0.minusWeeks(0);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        localDate0.minusMonths(0);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        localDate0.minusYears(0);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
        localDate0.plusDays(0);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        localDate0.plusWeeks(0);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        LocalDate localDate0 = new LocalDate(1L);
        localDate0.plusWeeks(51);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
        localDate0.plusMonths(0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
        localDate0.plusYears(0);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        LocalDate localDate0 = new LocalDate(1L);
        localDate0.plusYears(2);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
        DateTime dateTime0 = DateTime.now((Chronology) copticChronology0);
        Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
        localDate0.withPeriodAdded(hours0, 0);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
        localDate0.withFieldAdded(durationFieldType0, 0);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-2803));
        localDate1.toDateMidnight((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        LocalDate localDate0 = new LocalDate(0L);
        localDate0.withFieldAdded((DurationFieldType) null, 2);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
        localDate0.withFieldAdded(durationFieldType0, 1900);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);
        LocalDate localDate0 = dateTime0.toLocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        localDate0.withField(dateTimeFieldType0, (-1978));
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        LocalDate localDate0 = new LocalDate(1L);
        localDate0.withField((DateTimeFieldType) null, (-2857));
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);
        LocalDate localDate0 = dateTime0.toLocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        localDate0.withField(dateTimeFieldType0, (-1978));
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        LocalDate localDate0 = new LocalDate(1L);
        localDate0.withFields(localDate0);
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
        LocalTime localTime0 = new LocalTime(3600L, (Chronology) gregorianChronology0);
        localDate0.toDateTime(localTime0);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(37);
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        localDate0.toDateTime((LocalTime) null, dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) copticChronology0);
        LocalTime localTime0 = new LocalTime(localDateTime0);
        localDate0.toLocalDateTime(localTime0);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        LocalDate localDate0 = new LocalDate(100000000000000000L, (Chronology) islamicChronology0);
        localDate0.toLocalDateTime((LocalTime) null);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
        LocalTime localTime0 = new LocalTime(3600000L, (Chronology) copticChronology0);
        localDate0.toLocalDateTime(localTime0);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        localDate0.hashCode();
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Days days0 = Days.MAX_VALUE;
        LocalDate localDate1 = localDate0.minus(days0);
        localDate1.toDate();
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        Integer integer0 = new Integer(5);
        localDate0.equals(integer0);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        localDate0.toDate();
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
        Date date0 = localDate0.toDate();
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
        DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
        boolean boolean0 = localDate0.isSupported(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
        boolean boolean0 = localDate0.isSupported((DurationFieldType) null);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
        DateTime dateTime0 = DateTime.now((Chronology) copticChronology0);
        Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
        LocalDate localDate1 = localDate0.plus(hours0);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        LocalDate localDate0 = new LocalDate((Chronology) islamicChronology0);
        boolean boolean0 = localDate0.isSupported((DateTimeFieldType) null);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        localDate0.get(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
        localDate0.get((DateTimeFieldType) null);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        localDate0.getValue(3);
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
        localDate0.getField(62, (Chronology) ethiopicChronology0);
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        LocalDate.fromDateFields((Date) null);
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        LocalDate.fromCalendarFields((Calendar) null);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        LocalDate.now((Chronology) null);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        LocalDate.now((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
        LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
        LocalDate localDate1 = localDate_Property0.addToCopy(256);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
        Chronology chronology0 = localDate_Property0.getChronology();
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
        LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
        LocalDate localDate1 = localDate_Property0.withMinimumValue();
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.year();
        LocalDate localDate1 = localDate_Property0.getLocalDate();
        localDate1.size();
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        LocalDate localDate0 = new LocalDate((DateTimeZone) null);
        LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
        LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
        localDate_Property0.setCopy("L");
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        LocalDate localDate0 = new LocalDate(0L);
        LocalDate.Property localDate_Property0 = localDate0.year();
        LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy((-915));
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        MockDate mockDate0 = new MockDate((-27), (-1320), 1900);
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
        LocalDate localDate1 = localDate_Property0.roundHalfCeilingCopy();
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime(21600000L, (Chronology) buddhistChronology0);
        LocalDate localDate0 = new LocalDate(localDateTime0, (DateTimeZone) null);
        Locale locale0 = Locale.CANADA_FRENCH;
        localDate0.toString("14G/mB\"Y^M9;~k2RFk", locale0);
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        int int0 = localDate0.getEra();
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        LocalDate localDate0 = new LocalDate((Object) null);
        DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
        dateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test153153() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        int int0 = localDate0.getWeekOfWeekyear();
    }

    @Test(timeout = 4000)
    public void test154154() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        localDate0.withDayOfWeek((-28800000));
    }

    @Test(timeout = 4000)
    public void test155155() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
        LocalTime localTime0 = new LocalTime(3600000L, (Chronology) copticChronology0);
        DateTime dateTime0 = localDate0.toDateTime(localTime0);
        dateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test156156() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        int int0 = localDate0.getYearOfEra();
    }

    @Test(timeout = 4000)
    public void test157157() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
        LocalDate.Property localDate_Property0 = localDate0.era();
    }

    @Test(timeout = 4000)
    public void test158158() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        int int0 = localDate0.getWeekyear();
    }

    @Test(timeout = 4000)
    public void test159159() throws Throwable {
        LocalDate localDate0 = new LocalDate((Object) null);
        LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
    }

    @Test(timeout = 4000)
    public void test160160() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
        int int0 = localDate0.getDayOfYear();
    }

    @Test(timeout = 4000)
    public void test161161() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
        LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
    }

    @Test(timeout = 4000)
    public void test162162() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
        LocalDate localDate1 = localDate_Property0.withMaximumValue();
    }

    @Test(timeout = 4000)
    public void test163163() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.weekyear();
    }

    @Test(timeout = 4000)
    public void test164164() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
    }

    @Test(timeout = 4000)
    public void test165165() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
        int int0 = localDate0.getYearOfCentury();
    }

    @Test(timeout = 4000)
    public void test166166() throws Throwable {
        LocalDate.parse("k+4%tE`lkM32");
    }

    @Test(timeout = 4000)
    public void test167167() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        int int0 = localDate0.getCenturyOfEra();
    }

    @Test(timeout = 4000)
    public void test168168() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
    }

    @Test(timeout = 4000)
    public void test169169() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        int int0 = localDate0.getDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test170170() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withWeekOfWeekyear(1);
    }

    @Test(timeout = 4000)
    public void test171171() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
        DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
        dateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test172172() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        LocalDate localDate1 = localDate0.withCenturyOfEra(14);
    }

    @Test(timeout = 4000)
    public void test173173() throws Throwable {
        MockDate mockDate0 = new MockDate((-27), (-1320), 1900);
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        LocalDate localDate1 = localDate0.withYearOfEra(5);
    }

    @Test(timeout = 4000)
    public void test174174() throws Throwable {
        LocalDate localDate0 = new LocalDate();
        DateMidnight dateMidnight0 = localDate0.toDateMidnight();
        dateMidnight0.getMillis();
    }

    @Test(timeout = 4000)
    public void test175175() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        int int0 = localDate0.getYear();
    }

    @Test(timeout = 4000)
    public void test176176() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
        LocalDate localDate1 = localDate0.withMonthOfYear(1);
    }

    @Test(timeout = 4000)
    public void test177177() throws Throwable {
        LocalDate localDate0 = new LocalDate(1L);
        LocalDate localDate1 = localDate0.withDayOfYear(2);
    }

    @Test(timeout = 4000)
    public void test178178() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
        DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
        localDate0.size();
    }

    @Test(timeout = 4000)
    public void test178179() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
        DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
        dateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test179180() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        Interval interval0 = localDate0.toInterval();
        interval0.getEndMillis();
    }

    @Test(timeout = 4000)
    public void test179181() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        Interval interval0 = localDate0.toInterval();
        interval0.getStartMillis();
    }

    @Test(timeout = 4000)
    public void test180182() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
        LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
    }

    @Test(timeout = 4000)
    public void test181183() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        String string0 = localDate0.toString();
    }

    @Test(timeout = 4000)
    public void test182184() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDate localDate0 = new LocalDate(dateTimeZone0);
        LocalDate localDate1 = localDate0.withEra(0);
    }
}
