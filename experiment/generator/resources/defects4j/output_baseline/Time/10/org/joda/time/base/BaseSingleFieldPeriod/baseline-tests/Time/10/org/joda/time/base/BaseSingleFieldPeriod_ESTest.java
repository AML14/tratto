/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 01:47:58 GMT 2023
 */
package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Years years0 = Years.MIN_VALUE;
        Years years1 = Years.TWO;
        boolean boolean0 = years0.equals(years1);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Years years0 = Years.MIN_VALUE;
        Years years1 = Years.TWO;
        boolean boolean0 = years0.equals(years1);
        years1.equals((Object) years0);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Years years0 = Years.MIN_VALUE;
        Years years1 = Years.TWO;
        boolean boolean0 = years0.equals(years1);
        years1.getYears();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Minutes minutes0 = Minutes.ONE;
        minutes0.getValue((-2693));
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Days days0 = Days.standardDaysIn((ReadablePeriod) null);
        days0.getFieldType((-225));
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        LocalTime localTime0 = new LocalTime(240L, (Chronology) islamicChronology0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
        LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 1);
        Days days0 = Days.daysBetween((ReadablePartial) localTime1, (ReadablePartial) localTime0);
        days0.getDays();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        YearMonth yearMonth0 = YearMonth.now();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) strictChronology0);
        Hours.hoursBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDateTime0);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Years years0 = Years.MAX_VALUE;
        boolean boolean0 = years0.equals(years0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Interval interval0 = new Interval(2224L, 2224L, ethiopicChronology0);
        Duration duration0 = interval0.toDuration();
        Hours hours0 = duration0.toStandardHours();
        Minutes minutes0 = hours0.toStandardMinutes();
        int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 1);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Minutes minutes0 = Minutes.TWO;
        int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 10L);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Period period0 = new Period();
        Weeks weeks0 = period0.toStandardWeeks();
        int int0 = weeks0.getValue(0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Years years0 = Years.THREE;
        int int0 = years0.getValue(0);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
        Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
        PeriodType periodType0 = years0.getPeriodType();
        periodType0.getName();
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        Minutes minutes0 = Minutes.THREE;
        DurationFieldType durationFieldType0 = minutes0.getFieldType();
        durationFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        Months months0 = Months.MIN_VALUE;
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        int int0 = months0.get(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DateMidnight dateMidnight0 = localDate0.toDateMidnight((DateTimeZone) null);
        Instant instant0 = dateMidnight0.toInstant();
        Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) instant0, (ReadableInstant) dateMidnight0);
        DurationFieldType durationFieldType0 = weeks0.getFieldType();
        int int0 = BaseSingleFieldPeriod.between(dateMidnight0, instant0, durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        DateTime dateTime0 = DateTime.now(dateTimeZone0);
        DateTime dateTime1 = dateTime0.withYear(1);
        DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
        int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        DateMidnight dateMidnight0 = localDate0.toDateMidnight((DateTimeZone) null);
        Instant instant0 = dateMidnight0.toInstant();
        DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(27);
        DurationFieldType durationFieldType0 = DurationFieldType.days();
        int int0 = BaseSingleFieldPeriod.between(instant0, dateMidnight1, durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        Hours hours0 = Hours.FIVE;
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0L);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        Hours hours0 = Hours.MIN_VALUE;
        BaseSingleFieldPeriod.standardPeriodIn(hours0, (-1));
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        Weeks weeks0 = Weeks.weeks(0);
        weeks0.compareTo((BaseSingleFieldPeriod) null);
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        Months months0 = Months.MIN_VALUE;
        int int0 = months0.getValue(0);
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        Months months0 = Months.TWELVE;
        int int0 = months0.size();
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        Hours hours0 = Hours.FIVE;
        Hours hours1 = Hours.MIN_VALUE;
        int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);
        hours0.getHours();
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        Hours hours0 = Hours.FIVE;
        Hours hours1 = Hours.MIN_VALUE;
        int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        Months months0 = Months.TWELVE;
        Months months1 = months0.dividedBy(667);
        int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);
        months1.getMonths();
    }

    @Test(timeout = 4000)
    public void test2226() throws Throwable {
        Months months0 = Months.TWELVE;
        Months months1 = months0.dividedBy(667);
        int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        Weeks weeks0 = Weeks.weeks(0);
        Hours hours0 = Hours.SIX;
        weeks0.compareTo((BaseSingleFieldPeriod) hours0);
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        LocalTime localTime0 = LocalTime.MIDNIGHT;
        Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
        int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);
        days0.getDays();
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        LocalTime localTime0 = LocalTime.MIDNIGHT;
        Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
        int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        LocalTime localTime0 = LocalTime.MIDNIGHT;
        Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
        Seconds seconds0 = Seconds.MAX_VALUE;
        boolean boolean0 = days0.equals(seconds0);
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        Years years0 = Years.ONE;
        boolean boolean0 = years0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test2732() throws Throwable {
        Period period0 = Period.hours(0);
        Weeks weeks0 = period0.toStandardWeeks();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
        Period period1 = new Period(weeks0, zonedChronology0);
        boolean boolean0 = weeks0.equals(period1);
        weeks0.getWeeks();
    }

    @Test(timeout = 4000)
    public void test2733() throws Throwable {
        Period period0 = Period.hours(0);
        Weeks weeks0 = period0.toStandardWeeks();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
        Period period1 = new Period(weeks0, zonedChronology0);
        boolean boolean0 = weeks0.equals(period1);
    }

    @Test(timeout = 4000)
    public void test2834() throws Throwable {
        Years years0 = Years.THREE;
        Years years1 = Years.TWO;
        boolean boolean0 = years0.equals(years1);
        years1.equals((Object) years0);
    }

    @Test(timeout = 4000)
    public void test2835() throws Throwable {
        Years years0 = Years.THREE;
        Years years1 = Years.TWO;
        boolean boolean0 = years0.equals(years1);
        years1.getYears();
    }

    @Test(timeout = 4000)
    public void test2836() throws Throwable {
        Years years0 = Years.THREE;
        Years years1 = Years.TWO;
        boolean boolean0 = years0.equals(years1);
    }

    @Test(timeout = 4000)
    public void test2937() throws Throwable {
        Months months0 = Months.TWELVE;
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        boolean boolean0 = months0.isSupported(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test3038() throws Throwable {
        Days days0 = Days.FOUR;
        Seconds seconds0 = days0.toStandardSeconds();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        boolean boolean0 = seconds0.isSupported(durationFieldType0);
        seconds0.getSeconds();
    }

    @Test(timeout = 4000)
    public void test3039() throws Throwable {
        Days days0 = Days.FOUR;
        Seconds seconds0 = days0.toStandardSeconds();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        boolean boolean0 = seconds0.isSupported(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test3040() throws Throwable {
        Days days0 = Days.FOUR;
        Seconds seconds0 = days0.toStandardSeconds();
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        boolean boolean0 = seconds0.isSupported(durationFieldType0);
        days0.getDays();
    }

    @Test(timeout = 4000)
    public void test3141() throws Throwable {
        Months months0 = Months.TWO;
        DurationFieldType durationFieldType0 = DurationFieldType.months();
        int int0 = months0.get(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test3242() throws Throwable {
        Minutes minutes0 = Minutes.parseMinutes("PT0S");
        Hours hours0 = Hours.SIX;
        DurationFieldType durationFieldType0 = hours0.getFieldType(0);
        int int0 = minutes0.get(durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test3343() throws Throwable {
        Months months0 = Months.ONE;
        months0.getValue(599);
    }

    @Test(timeout = 4000)
    public void test3444() throws Throwable {
        Years years0 = Years.years(4);
        BaseSingleFieldPeriod.standardPeriodIn(years0, 4);
    }

    @Test(timeout = 4000)
    public void test3545() throws Throwable {
        LocalTime localTime0 = new LocalTime(0, 0, 0);
        LocalDateTime localDateTime0 = new LocalDateTime((long) 0, (Chronology) null);
        Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
    }

    @Test(timeout = 4000)
    public void test3646() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        LocalTime localTime0 = new LocalTime((-880L), dateTimeZone0);
        MonthDay monthDay0 = MonthDay.now();
        Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) monthDay0);
    }

    @Test(timeout = 4000)
    public void test3747() throws Throwable {
        Seconds seconds0 = Seconds.ZERO;
        LocalTime localTime0 = new LocalTime(0, 0, 0);
        BaseSingleFieldPeriod.between(localTime0, (ReadablePartial) null, seconds0);
    }

    @Test(timeout = 4000)
    public void test3848() throws Throwable {
        Seconds seconds0 = Seconds.ZERO;
        LocalTime localTime0 = new LocalTime(0, 0, 0);
        int int0 = BaseSingleFieldPeriod.between(localTime0, localTime0, seconds0);
    }

    @Test(timeout = 4000)
    public void test3949() throws Throwable {
        Seconds.secondsBetween((ReadablePartial) null, (ReadablePartial) null);
    }

    @Test(timeout = 4000)
    public void test4050() throws Throwable {
        Duration duration0 = Duration.ZERO;
        DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
        DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
        doReturn(10080).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
        DateTime dateTime0 = dateTimeFormatter0.parseDateTime("ReadablePartial objects must be contiguous");
        Interval interval0 = duration0.toIntervalTo(dateTime0);
        Weeks weeks0 = Weeks.weeksIn(interval0);
        weeks0.getFieldType(10080);
    }

    @Test(timeout = 4000)
    public void test4151() throws Throwable {
        DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
        Instant instant0 = dateMidnight0.toInstant();
        Seconds.secondsBetween((ReadableInstant) instant0, (ReadableInstant) null);
    }

    @Test(timeout = 4000)
    public void test4252() throws Throwable {
        DurationFieldType durationFieldType0 = DurationFieldType.centuries();
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
    }

    @Test(timeout = 4000)
    public void test4353() throws Throwable {
        Years years0 = Years.ONE;
        years0.toMutablePeriod();
        years0.getYears();
    }

    @Test(timeout = 4000)
    public void test4354() throws Throwable {
        Years years0 = Years.ONE;
        years0.toMutablePeriod();
        years0.size();
    }

    @Test(timeout = 4000)
    public void test4455() throws Throwable {
        Years years0 = Years.ONE;
        years0.toPeriod();
        years0.size();
    }

    @Test(timeout = 4000)
    public void test4456() throws Throwable {
        Years years0 = Years.ONE;
        years0.toPeriod();
        years0.getYears();
    }

    @Test(timeout = 4000)
    public void test4557() throws Throwable {
        Hours hours0 = Hours.FIVE;
        int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, (-1));
    }

    @Test(timeout = 4000)
    public void test4658() throws Throwable {
        Months months0 = Months.TWO;
        months0.hashCode();
        months0.getMonths();
    }
}
