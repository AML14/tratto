/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 02:30:10 GMT 2023
 */
package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("_CV-qOcIV1>'8E9", "_CV-qOcIV1>'8E9");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, (-933), (-25), false, (-933), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("_CV-qOcIV1>'8E9", "", (String[]) null, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
        Minutes minutes0 = Minutes.ZERO;
        Days days0 = minutes0.toStandardDays();
        Hours hours0 = days0.toStandardHours();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        int int0 = periodFormatterBuilder_Separator0.countFieldsToPrint(hours0, (-933), locale0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("%ts&%<", "%ts&%<");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        int int0 = periodFormatterBuilder_CompositeAffix0.scan("%ts&%<", 6);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("The addition exceeded the boundaries of LocalTime", "The addition exceeded the boundaries of LocalTime");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        int int0 = periodFormatterBuilder_CompositeAffix0.scan("p%tu", (-3010));
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "*^xz(+2cnB\"NmOV{8");
        int int0 = periodFormatterBuilder_PluralAffix0.scan("", (-1000));
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "fI3?H~2wGr~\"[9VZ");
        int int0 = periodFormatterBuilder_PluralAffix0.parse("*M1$@lipc24T~l", (-253033683));
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendDays();
        periodFormatterBuilder2.appendYears();
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSuffix("");
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("yi`g%R6{", "");
        MockFileWriter mockFileWriter0 = new MockFileWriter("P|7&-q");
        periodFormatterBuilder_PluralAffix0.printTo((Writer) mockFileWriter0, (-468));
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("Invalid style specification: ");
        CharArrayWriter charArrayWriter0 = new CharArrayWriter(90);
        BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
        MutablePeriod mutablePeriod0 = new MutablePeriod((-1433), 796, 90, (-1433), 2964, (-1433), 90, 1);
        Locale locale0 = Locale.GERMAN;
        periodFormatterBuilder_Literal0.printTo((Writer) bufferedWriter0, (ReadablePeriod) mutablePeriod0, locale0);
        mutablePeriod0.size();
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("m{gSQ>h' *d>-wRj");
        periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, 1);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("(a!$m0");
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        periodFormatterBuilder_SimpleAffix0.printTo((Writer) charArrayWriter0, (-2728));
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
        int int0 = periodFormatterBuilder_SimpleAffix0.calculatePrintedLength(1583);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix((String) null);
        StringBuffer stringBuffer0 = new StringBuffer();
        periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, 0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("yearOfEra", "-");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DateTimeZone must not be null");
        periodFormatterBuilder_PluralAffix0.printTo((Writer) mockPrintWriter0, (-236));
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
        int int0 = periodFormatterBuilder_SimpleAffix0.parse("", 1583);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(" field is unsupported");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
        int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(273);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal((String) null);
        StringBuffer stringBuffer0 = new StringBuffer(23118750);
        DateMidnight dateMidnight0 = new DateMidnight((long) 23118750);
        MutablePeriod mutablePeriod0 = new MutablePeriod(dateMidnight0, dateMidnight0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        periodFormatterBuilder_Literal0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("Cannot have two adjacent separators");
        MutablePeriod mutablePeriod0 = new MutablePeriod((-2677), (-2677), (-2677), 22, 43, (-2147473666), (-2677), 22);
        Locale locale0 = new Locale("Cannot have two adjacent separators", "Cannot have two adjacent separators", "Cannot have two adjacent separators");
        int int0 = periodFormatterBuilder_Literal0.parseInto(mutablePeriod0, "Cannot have two adjacent separators", 22, locale0);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("P");
        LocalDateTime localDateTime0 = new LocalDateTime(0L, (DateTimeZone) null);
        Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
        Locale locale0 = Locale.US;
        int int0 = periodFormatterBuilder_Literal0.countFieldsToPrint(period0, 721, locale0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        Seconds seconds0 = Seconds.ZERO;
        int int0 = periodFormatterBuilder_Literal0.calculatePrintedLength(seconds0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "R:'");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(811, 811, (-2745), false, (-2745), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
        Period period0 = Period.ZERO;
        boolean boolean0 = periodFormatterBuilder_FieldFormatter0.isZero(period0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.periodformatterbuilder$p.v^g%1ffix");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-315), (-315), (-315), true, (-17), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
        Months months0 = Months.FOUR;
        long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(months0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("No printer or parser supplied", "No printer or parser supplied");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1494, 1494, 1494, false, 3600, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        int int0 = periodFormatterBuilder_FieldFormatter0.getFieldType();
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "R:'");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(811, 811, (-2745), false, (-2745), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
        Weeks weeks0 = Weeks.ONE;
        Locale locale0 = Locale.JAPAN;
        int int0 = periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(weeks0, locale0);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No formatter supplied");
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(2964, 0, 563, false, 31, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
        periodFormatterBuilder_FieldFormatter1.equals((Object) periodFormatterBuilder_FieldFormatter0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("*V", "-m '");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        File file0 = MockFile.createTempFile("hd !U-p", "*V");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
        periodFormatterBuilder_CompositeAffix0.printTo((Writer) mockPrintWriter0, 4);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("*V", "-m '");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(3039);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        Locale locale0 = Locale.TAIWAN;
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        Period period0 = Period.seconds((-60));
        periodFormatterBuilder_Composite0.printTo((StringBuffer) null, (ReadablePeriod) period0, locale0);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        Period period0 = new Period();
        Locale locale0 = new Locale("The DateTimeField must not be null", "^Qr,|}#+8", "^Qr,|}#+8");
        periodFormatterBuilder_Composite0.printTo((Writer) null, (ReadablePeriod) period0, locale0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        LinkedList<Object> linkedList0 = new LinkedList<Object>(linkedHashSet0);
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        Days days0 = Days.SEVEN;
        Locale locale0 = Locale.FRENCH;
        periodFormatterBuilder_Composite0.countFieldsToPrint(days0, 4, locale0);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        DateMidnight dateMidnight0 = new DateMidnight();
        Days days0 = Days.daysBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
        Weeks weeks0 = Weeks.standardWeeksIn(days0);
        Locale locale0 = new Locale("The scalar must not be 0 or 1");
        periodFormatterBuilder_Composite0.calculatePrintedLength(weeks0, locale0);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter("F");
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore("F");
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("");
        periodFormatterBuilder1.appendSeparatorIfFieldsAfter("");
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparatorIfFieldsAfter((String) null);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("4q", "4q");
        String[] stringArray0 = new String[6];
        periodFormatterBuilder1.appendSeparator("4q", "", stringArray0);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparator("utvuVq7c!VhQ _", (String) null);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparator((String) null);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("V.(\u0006}-BeBAV&OK%lO");
        periodFormatterBuilder1.appendLiteral("V.(\u0006}-BeBAV&OK%lO");
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("org.joda.time.format.PeriodFormatterBuilder$CompositeAffix");
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
        periodFormatterBuilder1.append(periodFormatter0);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore("*^xz(+2cnB\"NmOV{8");
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroIfSupported();
        periodFormatterBuilder1.appendYears();
        PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
        PeriodType periodType0 = PeriodType.hours();
        MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-1254), periodType0);
        Duration duration0 = mutablePeriod0.toDurationTo((ReadableInstant) null);
        Duration duration1 = duration0.withDurationAdded((-1589L), (-1254));
        Period period0 = duration1.toPeriodTo((ReadableInstant) null);
        Locale locale0 = Locale.CANADA_FRENCH;
        int int0 = periodPrinter0.calculatePrintedLength(period0, locale0);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        Locale locale0 = Locale.TAIWAN;
        periodFormatterBuilder_Composite0.parseInto(mutablePeriod0, "", (-60), locale0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        Minutes.parseMinutes("ytim");
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "";
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("E%q0vhw[}g", "");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-4769), 0, 4, false, (-960), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
        StringBuffer stringBuffer0 = new StringBuffer("");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
        Weeks weeks0 = Weeks.ONE;
        Locale locale0 = Locale.ITALIAN;
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) weeks0, locale0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(":0r5{?");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(":0r5{?", ":0r5{?", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
        Days days0 = Days.MIN_VALUE;
        Weeks weeks0 = days0.toStandardWeeks();
        Locale locale0 = Locale.JAPANESE;
        int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(weeks0, locale0);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        PeriodType periodType0 = PeriodType.seconds();
        MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
        Locale locale0 = Locale.CANADA;
        String[] stringArray0 = new String[4];
        stringArray0[0] = "no formatter supplied";
        stringArray0[1] = "eQtd)+";
        stringArray0[2] = "^KzgXB7De1OL]uz-";
        stringArray0[3] = "eQtd)+";
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("no formatter supplied", "no formatter supplied", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
        periodFormatterBuilder_Separator0.countFieldsToPrint(mutablePeriod0, 44, locale0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal((String) null);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator((String) null, (String) null, (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
        periodFormatter0.parseMutablePeriod("No formatter supplied");
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendMinutes();
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore("*^xz(+2cnB\"NmOV{8");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator) periodFormatterBuilder0.toPrinter();
        Minutes minutes0 = Minutes.ONE;
        PeriodType periodType0 = minutes0.getPeriodType();
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        MutablePeriod mutablePeriod0 = new MutablePeriod((-1000), 999, periodType0, gregorianChronology0);
        Locale locale0 = Locale.US;
        int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "", 116, locale0);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(",-T59|}~l+", "&59|to");
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1409), (-1409), 17, false, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        PeriodType periodType0 = PeriodType.years();
        boolean boolean0 = periodFormatterBuilder_FieldFormatter0.isSupported(periodType0, (-1));
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        periodFormatterBuilder1.printZeroRarelyFirst();
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("*^xz(+2cnB\"NmOV{8");
        periodFormatterBuilder2.appendWeeks();
        PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
    }

    @Test(timeout = 4000)
    public void test04849() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        periodFormatterBuilder1.printZeroRarelyFirst();
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("*^xz(+2cnB\"NmOV{8");
        periodFormatterBuilder2.appendWeeks();
        PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
        PeriodType periodType0 = PeriodType.hours();
        MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-1254), periodType0);
        Duration duration0 = mutablePeriod0.toDurationTo((ReadableInstant) null);
        Duration duration1 = duration0.withDurationAdded((-1589L), (-1254));
        Period period0 = duration1.toPeriodTo((ReadableInstant) null);
        Locale locale0 = Locale.CANADA_FRENCH;
        int int0 = periodPrinter0.calculatePrintedLength(period0, locale0);
    }

    @Test(timeout = 4000)
    public void test04950() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore("*^xz(+2cnB\"NmOV{8");
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroIfSupported();
        periodFormatterBuilder1.appendYears();
        PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
        PeriodType periodType0 = PeriodType.hours();
        MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-1254), periodType0);
        Duration duration0 = mutablePeriod0.toDurationTo((ReadableInstant) null);
        Period period0 = duration0.toPeriodTo((ReadableInstant) null);
        Locale locale0 = Locale.CANADA_FRENCH;
        int int0 = periodPrinter0.calculatePrintedLength(period0, locale0);
    }

    @Test(timeout = 4000)
    public void test05051() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSecondsWithMillis();
        PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
        periodFormatter0.parseMutablePeriod("No formatter supplied");
    }

    @Test(timeout = 4000)
    public void test05152() throws Throwable {
        MutablePeriod mutablePeriod0 = new MutablePeriod();
        String string0 = mutablePeriod0.toString((PeriodFormatter) null);
    }

    @Test(timeout = 4000)
    public void test05253() throws Throwable {
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix((String) null, (String) null);
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(0, 46, 0, true, (-1147), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        Period period0 = new Period(46, 0, 46, 46);
        Locale locale0 = Locale.KOREA;
        int int0 = periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(period0, 0, locale0);
    }

    @Test(timeout = 4000)
    public void test05354() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("KI+| >S2,w");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
        int int0 = periodFormatterBuilder_CompositeAffix0.scan("", 0);
    }

    @Test(timeout = 4000)
    public void test05455() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("wfaK;lLH");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
        int int0 = periodFormatterBuilder_CompositeAffix0.parse("wfaK;lLH", 1);
    }

    @Test(timeout = 4000)
    public void test05556() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.DateTimeFormat$StyleFormatter", "43;u0L.#$5*]Za");
        int int0 = periodFormatterBuilder_PluralAffix0.scan("43;u0L.#$5*]Za", (-4709));
    }

    @Test(timeout = 4000)
    public void test05657() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("_+!~I'ac\"H!T", "[_oDO");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        int int0 = periodFormatterBuilder_CompositeAffix0.scan("_+!~I'ac\"H!T", (-482));
    }

    @Test(timeout = 4000)
    public void test05758() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("builder has created neither a p_+!~i'ac\"h!tparser", "builder has created neither a print_+!~i'ac\"h!ter");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        int int0 = periodFormatterBuilder_CompositeAffix0.parse("builder has created neither a p_+!~i'ac\"h!tparser", (-1));
    }

    @Test(timeout = 4000)
    public void test05859() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("GfkzU*zwG", "GfkzU*zwG");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        int int0 = periodFormatterBuilder_CompositeAffix0.parse("GfkzU*zwG", 0);
    }

    @Test(timeout = 4000)
    public void test05960() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(",-T59|}~l+", "&59|to");
        PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
        PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-1409), (-1409), 17, false, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutablePeriod mutablePeriod0 = new MutablePeriod((-1409), 21260793600000L, islamicChronology0);
        Locale locale0 = Locale.CHINESE;
        int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "G_.qyBRmO", (-1), locale0);
    }

    @Test(timeout = 4000)
    public void test06061() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("s", "]");
        int int0 = periodFormatterBuilder_PluralAffix0.parse("pF(/S^bim", (-520));
    }

    @Test(timeout = 4000)
    public void test06162() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("\" ClassLoader: ", "m{gSQ>h' *d>-wRj");
        StringBuffer stringBuffer0 = new StringBuffer();
        periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test06163() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("\" ClassLoader: ", "m{gSQ>h' *d>-wRj");
        StringBuffer stringBuffer0 = new StringBuffer();
        periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test06264() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
        periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-2147483647));
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test06365() throws Throwable {
        PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Buddhist", "P|7&-q");
        int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(1);
    }

    @Test(timeout = 4000)
    public void test06466() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("org.joda.time.format.PeriodFormatterBuilder$PluralAffix");
        int int0 = periodFormatterBuilder_SimpleAffix0.scan("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", 0);
    }

    @Test(timeout = 4000)
    public void test06567() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No formatter supplied");
        int int0 = periodFormatterBuilder_SimpleAffix0.scan("kV`W[OXq24FM", 0);
    }

    @Test(timeout = 4000)
    public void test06668() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("No formatter supplied");
        int int0 = periodFormatterBuilder_SimpleAffix0.scan("ego]V^4?cg'r[S.j", 2964);
    }

    @Test(timeout = 4000)
    public void test06769() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("E1h <e");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
        int int0 = periodFormatterBuilder_CompositeAffix0.parse("E1h <e", 0);
    }

    @Test(timeout = 4000)
    public void test06870() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("*^xz(+2cnB\"NmOV{8");
        int int0 = periodFormatterBuilder_SimpleAffix0.parse("*^xz(+2cnB\"NmOV{8", 999);
    }

    @Test(timeout = 4000)
    public void test06971() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Composite0);
        PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
        periodFormatter0.isPrinter();
    }

    @Test(timeout = 4000)
    public void test07072() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("{]X`");
    }

    @Test(timeout = 4000)
    public void test07173() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("'bdmY)A%N:MfW");
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
        periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
    }

    @Test(timeout = 4000)
    public void test07274() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("*^xz(+2cnB\"NmOV{8");
        periodFormatterBuilder2.appendWeeks();
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSeparator("DateTimeZone must not be null", "");
    }

    @Test(timeout = 4000)
    public void test07375() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        periodFormatterBuilder1.appendSeparatorIfFieldsBefore("*^xz(+2cnB\"NmOV{8");
        periodFormatterBuilder0.appendSeparator("DateTimeZone must not be null", "");
    }

    @Test(timeout = 4000)
    public void test07476() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("No formatter supplied");
    }

    @Test(timeout = 4000)
    public void test07577() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        String[] stringArray0 = new String[2];
        periodFormatterBuilder0.appendSeparator("O7WvU", (String) null, stringArray0);
    }

    @Test(timeout = 4000)
    public void test07678() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore((String) null);
    }

    @Test(timeout = 4000)
    public void test07779() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
        periodFormatterBuilder1.appendSuffix("Builder has created neither a printer nor a parser");
    }

    @Test(timeout = 4000)
    public void test07880() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSuffix("", "a-w:_'P#fU2u2;R");
    }

    @Test(timeout = 4000)
    public void test07981() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSuffix("*dl2m[", (String) null);
    }

    @Test(timeout = 4000)
    public void test08082() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSuffix((String) null);
    }

    @Test(timeout = 4000)
    public void test08183() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendPrefix("org.joda.time.format.DateTimeFormatterBuilder$TextField");
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("org.joda.time.format.DateTimeFormatterBuilder$TextField");
    }

    @Test(timeout = 4000)
    public void test08284() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendPrefix(",5wk!J[l`", (String) null);
    }

    @Test(timeout = 4000)
    public void test08385() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendPrefix((String) null, "Cannot have two adjacent separators");
    }

    @Test(timeout = 4000)
    public void test08486() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendPrefix((String) null);
    }

    @Test(timeout = 4000)
    public void test08587() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("zaa$Qq10T{]s{(\"1K");
        periodFormatterBuilder1.appendMillis();
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator("zaa$Qq10T{]s{(\"1K");
        PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Period period0 = new Period(1790L, (Chronology) islamicChronology0);
        Locale locale0 = Locale.KOREA;
        periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test08588() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("zaa$Qq10T{]s{(\"1K");
        periodFormatterBuilder1.appendMillis();
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator("zaa$Qq10T{]s{(\"1K");
        PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Period period0 = new Period(1790L, (Chronology) islamicChronology0);
        Locale locale0 = Locale.KOREA;
        periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test08689() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendLiteral((String) null);
    }

    @Test(timeout = 4000)
    public void test08790() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) null);
    }

    @Test(timeout = 4000)
    public void test08891() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
        PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
        periodFormatter0.isPrinter();
    }

    @Test(timeout = 4000)
    public void test08892() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
        PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
        periodFormatter0.isParser();
    }

    @Test(timeout = 4000)
    public void test08993() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.append((PeriodFormatter) null);
    }

    @Test(timeout = 4000)
    public void test09094() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        String[] stringArray0 = new String[0];
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("ytim", "ytim", stringArray0, (PeriodPrinter) null, periodFormatterBuilder_Composite0, true, true);
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Composite0);
        periodFormatterBuilder0.append(periodFormatter0);
        periodFormatterBuilder0.appendSuffix("LLh!f3 \u0005>2Z1F/L_>", "ytim");
    }

    @Test(timeout = 4000)
    public void test09195() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.clear();
    }

    @Test(timeout = 4000)
    public void test09296() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodParser periodParser0 = periodFormatterBuilder0.toParser();
    }

    @Test(timeout = 4000)
    public void test09397() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Composite0);
        PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
    }

    @Test(timeout = 4000)
    public void test09498() throws Throwable {
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        String[] stringArray0 = new String[4];
        stringArray0[0] = "poudbz&e lv:\"w";
        stringArray0[1] = "poudbz&e lv:\"w";
        stringArray0[2] = "poudbz&e lv:\"w";
        stringArray0[3] = "poudbz&e lv:\"w";
        PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("s6)>fSxxyb");
        PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("poudbz&e lv:\"w", "poudbz&e lv:\"w", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        MutablePeriod mutablePeriod0 = new MutablePeriod(8, (-59066L), gregorianChronology0);
        Locale locale0 = Locale.ITALY;
        periodFormatterBuilder_Separator0.printTo((Writer) charArrayWriter0, (ReadablePeriod) mutablePeriod0, locale0);
    }

    @Test(timeout = 4000)
    public void test09599() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("");
    }

    @Test(timeout = 4000)
    public void test096100() throws Throwable {
        JulianChronology julianChronology0 = JulianChronology.getInstance();
        MutablePeriod mutablePeriod0 = new MutablePeriod(30617280288L, 1230L, julianChronology0);
        String string0 = mutablePeriod0.toString((PeriodFormatter) null);
    }

    @Test(timeout = 4000)
    public void test097101() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
    }

    @Test(timeout = 4000)
    public void test098102() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        String[] stringArray0 = new String[1];
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("No formatter supplied", "No formatter supplied", stringArray0);
    }

    @Test(timeout = 4000)
    public void test099103() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        String[] stringArray0 = new String[9];
        periodFormatterBuilder1.appendSeparator(":< gl#+/t~.Lg", "", stringArray0);
    }

    @Test(timeout = 4000)
    public void test100104() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(76);
    }

    @Test(timeout = 4000)
    public void test101105() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMonths();
    }

    @Test(timeout = 4000)
    public void test102106() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
        periodFormatterBuilder1.appendSeparator("zaa$Qq10T{]s{(\"1K");
        PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
    }

    @Test(timeout = 4000)
    public void test102107() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
        periodFormatterBuilder1.appendSeparator("zaa$Qq10T{]s{(\"1K");
        PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
        Locale locale0 = Locale.CANADA_FRENCH;
        StringBuffer stringBuffer0 = new StringBuffer();
        Minutes minutes0 = Minutes.MIN_VALUE;
        periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) minutes0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test102108() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
        periodFormatterBuilder1.appendSeparator("zaa$Qq10T{]s{(\"1K");
        PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
        Locale locale0 = Locale.CANADA_FRENCH;
        StringBuffer stringBuffer0 = new StringBuffer();
        Minutes minutes0 = Minutes.MIN_VALUE;
        periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) minutes0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test103109() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
    }

    @Test(timeout = 4000)
    public void test104110() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(623191204);
    }

    @Test(timeout = 4000)
    public void test105111() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSecondsWithMillis();
        PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
        periodFormatter0.isParser();
    }

    @Test(timeout = 4000)
    public void test105112() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendSecondsWithMillis();
        PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
        periodFormatter0.parseMutablePeriod("");
        periodFormatter0.isPrinter();
    }

    @Test(timeout = 4000)
    public void test106113() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
    }

    @Test(timeout = 4000)
    public void test107114() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(false);
    }

    @Test(timeout = 4000)
    public void test108115() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.printZeroAlways();
        periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
        periodFormatter0.parseMutablePeriod("");
    }

    @Test(timeout = 4000)
    public void test109116() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
    }

    @Test(timeout = 4000)
    public void test110117() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
        periodFormatterBuilder1.appendSeparator("org.joda.time.format.PeriodFormatterBuilder$Separator", "org.joda.time.format.PeriodFormatterBuilder$Separator");
        periodFormatterBuilder0.appendSeparator("");
    }

    @Test(timeout = 4000)
    public void test111118() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        periodFormatterBuilder0.appendMinutes();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("*^xz(+2cnB\"NmOV{8");
        periodFormatterBuilder1.appendWeeks();
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSuffix("*^xz(+2cnB\"NmOV{8", "No resource path provided");
        periodFormatterBuilder2.appendSuffix("No resource path provided");
        PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
        PeriodType periodType0 = PeriodType.dayTime();
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Period period0 = new Period((-2147483647), 999, periodType0, copticChronology0);
        Days days0 = period0.toStandardDays();
        Locale locale0 = Locale.forLanguageTag("DateTimeZone must not be null");
        Weeks weeks0 = days0.toStandardWeeks();
        periodPrinter0.printTo((Writer) stringWriter0, (ReadablePeriod) weeks0, locale0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test112119() throws Throwable {
        PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("[P1*NJNF)'FNu3v>]zV");
        PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
        StringBuffer stringBuffer0 = new StringBuffer(2993);
        periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 2993);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test113120() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        periodFormatterBuilder1.printZeroRarelyFirst();
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("*^xz(+2cnB\"NmOV{8");
        periodFormatterBuilder2.appendWeeks();
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSuffix("*^xz(+2cnB\"NmOV{8", "No resource path provided");
        PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("No resource path provided");
        PeriodPrinter periodPrinter0 = periodFormatterBuilder4.toPrinter();
    }

    @Test(timeout = 4000)
    public void test113121() throws Throwable {
        PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        periodFormatterBuilder1.printZeroRarelyFirst();
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("*^xz(+2cnB\"NmOV{8");
        periodFormatterBuilder2.appendWeeks();
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSuffix("*^xz(+2cnB\"NmOV{8", "No resource path provided");
        PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("No resource path provided");
        PeriodPrinter periodPrinter0 = periodFormatterBuilder4.toPrinter();
        PeriodType periodType0 = PeriodType.hours();
        MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-1254), periodType0);
        Duration duration0 = mutablePeriod0.toDurationTo((ReadableInstant) null);
        Period period0 = duration0.toPeriodTo((ReadableInstant) null);
        Locale locale0 = Locale.CANADA_FRENCH;
        int int0 = periodPrinter0.calculatePrintedLength(period0, locale0);
    }
}
