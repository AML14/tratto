/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 02:13:05 GMT 2023
 */
package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Calendar;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DateTimeFormatterBuilder_ESTest extends DateTimeFormatterBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        hashMap0.size();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        hashMap0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
    }

    @Test(timeout = 4000)
    public void test0004() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        hashMap0.size();
    }

    @Test(timeout = 4000)
    public void test0005() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        hashMap0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test0006() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test0007() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test0008() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
    }

    @Test(timeout = 4000)
    public void test0009() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test00010() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test00011() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test00012() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
    }

    @Test(timeout = 4000)
    public void test00013() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test00014() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test00015() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test00016() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test00017() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test00018() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test00019() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 2224, (Chronology) gregorianChronology0, 2224, (DateTimeZone) null, locale0);
        hashMap0.size();
    }

    @Test(timeout = 4000)
    public void test00020() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 2224, (Chronology) gregorianChronology0, 2224, (DateTimeZone) null, locale0);
        hashMap0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test00021() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 2224, (Chronology) gregorianChronology0, 2224, (DateTimeZone) null, locale0);
        dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test00022() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 2224, (Chronology) gregorianChronology0, 2224, (DateTimeZone) null, locale0);
        dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test00023() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 2224, (Chronology) gregorianChronology0, 2224, (DateTimeZone) null, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test00024() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 2224, (Chronology) gregorianChronology0, 2224, (DateTimeZone) null, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test00025() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 2224, (Chronology) gregorianChronology0, 2224, (DateTimeZone) null, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test00026() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 2224, (Chronology) gregorianChronology0, 2224, (DateTimeZone) null, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test00027() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 2224, (Chronology) gregorianChronology0, 2224, (DateTimeZone) null, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test00028() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 2224, (Chronology) gregorianChronology0, 2224, (DateTimeZone) null, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test00029() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 2224, (Chronology) gregorianChronology0, 2224, (DateTimeZone) null, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test00030() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2224, hashMap0);
        StringBuffer stringBuffer0 = new StringBuffer(2224);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 2224, (Chronology) gregorianChronology0, 2224, (DateTimeZone) null, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test00131() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    }

    @Test(timeout = 4000)
    public void test00132() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
    }

    @Test(timeout = 4000)
    public void test00135() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
        DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset("vRAX$:X}6FxLJ", true, 1862, 1862);
    }

    @Test(timeout = 4000)
    public void test00140() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1862, 10);
        DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset("vRAX$:X}6FxLJ", true, 1862, 1862);
        boolean boolean0 = dateTimeFormatterBuilder1.canBuildPrinter();
    }

    @Test(timeout = 4000)
    public void test00246() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
    }

    @Test(timeout = 4000)
    public void test00249() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
    }

    @Test(timeout = 4000)
    public void test00252() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test00253() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test00254() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    }

    @Test(timeout = 4000)
    public void test00255() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test00256() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test00257() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test00258() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test00259() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test00260() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test00261() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test00262() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
    }

    @Test(timeout = 4000)
    public void test00264() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test00265() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test00266() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test00267() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
        dateTimeFormatter0.isParser();
    }

    @Test(timeout = 4000)
    public void test00268() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
        dateTimeFormatter0.isPrinter();
    }

    @Test(timeout = 4000)
    public void test00269() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test00270() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
        dateTimeFormatter0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test00271() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
        dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0[1]);
        Instant.parse("coIRk'*JYu", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test00372() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
    }

    @Test(timeout = 4000)
    public void test00373() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
    }

    @Test(timeout = 4000)
    public void test00374() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test00375() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test00376() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test00377() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test00378() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test00379() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test00380() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    }

    @Test(timeout = 4000)
    public void test00381() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test00382() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test00383() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
    }

    @Test(timeout = 4000)
    public void test00385() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
    }

    @Test(timeout = 4000)
    public void test00386() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test00387() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test00388() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test00389() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test00390() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test00391() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test00392() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test00393() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test00394() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test00395() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    }

    @Test(timeout = 4000)
    public void test00396() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test00397() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test00398() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test00399() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test003100() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
    }

    @Test(timeout = 4000)
    public void test003101() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test003102() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test003103() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test003104() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test003105() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test003106() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test003107() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test003108() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test003109() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test003110() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test003111() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test003112() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test003113() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        Integer integer0 = new Integer((-1027));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(100, gJChronology0, locale0, integer0, 1440);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        int int0 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "org.joda.time.format.DateTimeFormatterBuilder", 1440);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test004114() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
    }

    @Test(timeout = 4000)
    public void test004115() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test004116() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test004117() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    }

    @Test(timeout = 4000)
    public void test004118() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test004119() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test004120() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
    }

    @Test(timeout = 4000)
    public void test004121() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test004122() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test004123() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test004124() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test004125() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test004126() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test004127() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    }

    @Test(timeout = 4000)
    public void test004128() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test004129() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test004130() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
    }

    @Test(timeout = 4000)
    public void test004131() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test004132() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test004133() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test004134() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test004135() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    }

    @Test(timeout = 4000)
    public void test004137() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test004138() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test004139() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test004140() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test004141() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test004142() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test004143() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test004144() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test004145() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test004146() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test004147() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test004148() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test004149() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test004150() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test004151() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.FRANCE;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 60, false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, 1757L, (Chronology) buddhistChronology0, 60, dateTimeZone0, locale0);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test005152() throws Throwable {
        Instant instant0 = null;
        instant0 = new Instant("DFdI~^pqIY$sv");
    }

    @Test(timeout = 4000)
    public void test006153() throws Throwable {
        Instant instant0 = null;
        instant0 = new Instant("");
    }

    @Test(timeout = 4000)
    public void test007154() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
    }

    @Test(timeout = 4000)
    public void test007155() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test007156() throws Throwable {
        StringWriter stringWriter0 = new StringWriter();
        DateTimeFormatterBuilder.printUnknownString(stringWriter0, 889);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test008158() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    }

    @Test(timeout = 4000)
    public void test008159() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test008160() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test008161() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, (-2537));
    }

    @Test(timeout = 4000)
    public void test009163() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    }

    @Test(timeout = 4000)
    public void test009164() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test009165() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test009166() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 0);
    }

    @Test(timeout = 4000)
    public void test010167() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
    }

    @Test(timeout = 4000)
    public void test010168() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test010169() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test010170() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    }

    @Test(timeout = 4000)
    public void test010171() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test010172() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test010173() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test010174() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test010175() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test010176() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test010177() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test010178() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test010179() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test011180() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
    }

    @Test(timeout = 4000)
    public void test011181() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test011182() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test011183() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
    }

    @Test(timeout = 4000)
    public void test011184() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test011185() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test011186() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test011187() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test011188() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test011189() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test011190() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test011191() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test011192() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test012193() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("`\"Mxiv?X8|=rS#", "wlq8hR*hLL`$^%O", true, 59, 59);
    }

    @Test(timeout = 4000)
    public void test012194() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("`\"Mxiv?X8|=rS#", "wlq8hR*hLL`$^%O", true, 59, 59);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test012195() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("`\"Mxiv?X8|=rS#", "wlq8hR*hLL`$^%O", true, 59, 59);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test012196() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("`\"Mxiv?X8|=rS#", "wlq8hR*hLL`$^%O", true, 59, 59);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test012197() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("`\"Mxiv?X8|=rS#", "wlq8hR*hLL`$^%O", true, 59, 59);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test012198() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("`\"Mxiv?X8|=rS#", "wlq8hR*hLL`$^%O", true, 59, 59);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test013199() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1461, (Map<String, DateTimeZone>) null);
    }

    @Test(timeout = 4000)
    public void test013200() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1461, (Map<String, DateTimeZone>) null);
        dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test013201() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1461, (Map<String, DateTimeZone>) null);
        dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test013202() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1461, (Map<String, DateTimeZone>) null);
        int int0 = dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test013203() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1461, (Map<String, DateTimeZone>) null);
        int int0 = dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
        dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test013204() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1461, (Map<String, DateTimeZone>) null);
        int int0 = dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
        dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test014205() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
    }

    @Test(timeout = 4000)
    public void test014206() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test014207() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test014208() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    }

    @Test(timeout = 4000)
    public void test014209() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test014210() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test014211() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test014212() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test014213() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        int int0 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test014214() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        int int0 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test014215() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        int int0 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test014216() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        int int0 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test014217() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        int int0 = dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test015218() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
    }

    @Test(timeout = 4000)
    public void test015219() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test015220() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test015221() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
    }

    @Test(timeout = 4000)
    public void test015222() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
    }

    @Test(timeout = 4000)
    public void test015223() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
    }

    @Test(timeout = 4000)
    public void test015224() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test015225() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test015226() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test015227() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test015228() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test015229() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test015230() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
    }

    @Test(timeout = 4000)
    public void test015232() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
    }

    @Test(timeout = 4000)
    public void test015233() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test015234() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test015235() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test015236() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test015237() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test015238() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test015239() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test015240() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test015241() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test015242() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "9LwO4!^S6wB", (-1054));
    }

    @Test(timeout = 4000)
    public void test015243() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "9LwO4!^S6wB", (-1054));
        dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test015244() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "9LwO4!^S6wB", (-1054));
        dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test015245() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "9LwO4!^S6wB", (-1054));
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test015246() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "9LwO4!^S6wB", (-1054));
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test015247() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "9LwO4!^S6wB", (-1054));
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test015248() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "9LwO4!^S6wB", (-1054));
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test015249() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "9LwO4!^S6wB", (-1054));
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test015250() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "9LwO4!^S6wB", (-1054));
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test015251() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "9LwO4!^S6wB", (-1054));
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test015252() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "9LwO4!^S6wB", (-1054));
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test015253() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("&ac/");
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Locale locale0 = Locale.GERMAN;
        Integer integer0 = new Integer(0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, lenientChronology0, locale0, integer0, 16);
        int int0 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "9LwO4!^S6wB", (-1054));
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test016254() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("B0atZ,a_>CG5T");
    }

    @Test(timeout = 4000)
    public void test016255() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("B0atZ,a_>CG5T");
        dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test016256() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("B0atZ,a_>CG5T");
        dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test016257() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("B0atZ,a_>CG5T");
        int int0 = dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test016258() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("B0atZ,a_>CG5T");
        int int0 = dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength();
        dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test016259() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("B0atZ,a_>CG5T");
        int int0 = dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength();
        dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test017260() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Ti>9'kUpyCu");
    }

    @Test(timeout = 4000)
    public void test017261() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Ti>9'kUpyCu");
        dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test017262() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Ti>9'kUpyCu");
        dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test017263() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Ti>9'kUpyCu");
        int int0 = dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test017264() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Ti>9'kUpyCu");
        int int0 = dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength();
        dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test017265() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Ti>9'kUpyCu");
        int int0 = dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength();
        dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test018266() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    }

    @Test(timeout = 4000)
    public void test018267() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test018268() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test018269() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
    }

    @Test(timeout = 4000)
    public void test018270() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test018271() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test018272() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
        dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test018273() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
        dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test018274() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
        int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test018275() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
        int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test018276() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
        int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test018277() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
        int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
        dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test018278() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 57, true, 1);
        int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
        dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test019279() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    }

    @Test(timeout = 4000)
    public void test019280() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test019281() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test019282() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
    }

    @Test(timeout = 4000)
    public void test019283() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test019284() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test019285() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
        dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test019286() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
        dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test019287() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
        int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test019288() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
        int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test019289() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
        int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test019290() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
        int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
        dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test019291() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 45, true, 0);
        int int0 = dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
        dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test020292() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
    }

    @Test(timeout = 4000)
    public void test020293() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test020294() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test020295() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test020296() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test020297() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test020298() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test020299() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
    }

    @Test(timeout = 4000)
    public void test020301() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test020302() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test020304() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
    }

    @Test(timeout = 4000)
    public void test020306() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
    }

    @Test(timeout = 4000)
    public void test020308() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test020309() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test020310() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test020311() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test020312() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test020313() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test020314() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test020315() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test020316() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test020317() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 23);
    }

    @Test(timeout = 4000)
    public void test020320() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 23);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test020321() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 23);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test020322() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 23);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test020323() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 23);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test020324() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 23);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test020325() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 23);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test020326() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 23);
        dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test020327() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 23);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test020328() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 23);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test020329() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[3];
        DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1043L, lenientChronology0, locale0, (Integer) 1, 155);
        int int0 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 23);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test021333() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
    }

    @Test(timeout = 4000)
    public void test021334() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test021335() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test021336() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test021337() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test021338() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        int int0 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test021339() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        int int0 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test021340() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        int int0 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test021341() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        int int0 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test021342() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        int int0 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
        dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test022343() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
    }

    @Test(timeout = 4000)
    public void test022344() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test022345() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    }

    @Test(timeout = 4000)
    public void test022346() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test022347() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test022348() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test022349() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        boolean boolean0 = dateTimeFormatterBuilder_Composite0.isPrinter();
    }

    @Test(timeout = 4000)
    public void test022350() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        boolean boolean0 = dateTimeFormatterBuilder_Composite0.isPrinter();
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test022351() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        boolean boolean0 = dateTimeFormatterBuilder_Composite0.isPrinter();
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test022352() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        boolean boolean0 = dateTimeFormatterBuilder_Composite0.isPrinter();
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test023359() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        boolean boolean0 = dateTimeFormatterBuilder_Composite0.isParser();
    }

    @Test(timeout = 4000)
    public void test023360() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        boolean boolean0 = dateTimeFormatterBuilder_Composite0.isParser();
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test023361() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        boolean boolean0 = dateTimeFormatterBuilder_Composite0.isParser();
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test023362() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        boolean boolean0 = dateTimeFormatterBuilder_Composite0.isParser();
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test024369() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        int int0 = dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test024370() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        int int0 = dateTimeFormatterBuilder_Composite0.estimateParsedLength();
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test024371() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        int int0 = dateTimeFormatterBuilder_Composite0.estimateParsedLength();
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test024372() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        int int0 = dateTimeFormatterBuilder_Composite0.estimateParsedLength();
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test025373() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(')');
    }

    @Test(timeout = 4000)
    public void test025374() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(')');
        dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test025375() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(')');
        dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test025376() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(')');
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test025377() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(')');
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
        dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test025378() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(')');
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
        dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test026379() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('L');
    }

    @Test(timeout = 4000)
    public void test026380() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('L');
        dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test026381() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('L');
        dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test026382() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('L');
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test026383() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('L');
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
        dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test026384() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('L');
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
        dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test027385() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
    }

    @Test(timeout = 4000)
    public void test027386() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test027387() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test027388() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
    }

    @Test(timeout = 4000)
    public void test027389() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test027390() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test027391() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test027392() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test027393() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
    }

    @Test(timeout = 4000)
    public void test027394() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test027395() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test027396() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test027397() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        localTime0.size();
    }

    @Test(timeout = 4000)
    public void test027398() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
    }

    @Test(timeout = 4000)
    public void test027399() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test027400() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test027401() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test027402() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test027403() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test027404() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test027405() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test027406() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test027407() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test027408() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test027409() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test027410() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test027411() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        localTime0.size();
    }

    @Test(timeout = 4000)
    public void test027412() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test027413() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test027414() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test027415() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test027416() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test027417() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
        StringBuffer stringBuffer0 = new StringBuffer(58);
        LocalTime localTime0 = new LocalTime((long) 84, (DateTimeZone) null);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test028418() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
    }

    @Test(timeout = 4000)
    public void test028419() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test028420() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test028421() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    }

    @Test(timeout = 4000)
    public void test028422() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test028423() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test028424() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
    }

    @Test(timeout = 4000)
    public void test028425() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test028426() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test028427() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
    }

    @Test(timeout = 4000)
    public void test028428() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test028429() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test028430() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
    }

    @Test(timeout = 4000)
    public void test028431() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        charset0.name();
    }

    @Test(timeout = 4000)
    public void test028432() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        charset0.toString();
    }

    @Test(timeout = 4000)
    public void test028433() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        charset0.canEncode();
    }

    @Test(timeout = 4000)
    public void test028434() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        charset0.isRegistered();
    }

    @Test(timeout = 4000)
    public void test028435() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        charset0.displayName();
    }

    @Test(timeout = 4000)
    public void test028436() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    }

    @Test(timeout = 4000)
    public void test028437() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        charset0.name();
    }

    @Test(timeout = 4000)
    public void test028438() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        charset0.toString();
    }

    @Test(timeout = 4000)
    public void test028439() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        charset0.canEncode();
    }

    @Test(timeout = 4000)
    public void test028440() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        charset0.isRegistered();
    }

    @Test(timeout = 4000)
    public void test028441() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        charset0.displayName();
    }

    @Test(timeout = 4000)
    public void test028442() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        charsetEncoder0.averageBytesPerChar();
    }

    @Test(timeout = 4000)
    public void test028443() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        charsetEncoder0.maxBytesPerChar();
    }

    @Test(timeout = 4000)
    public void test028444() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
    }

    @Test(timeout = 4000)
    public void test028445() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test028446() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test028447() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        charset0.name();
    }

    @Test(timeout = 4000)
    public void test028448() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        charset0.toString();
    }

    @Test(timeout = 4000)
    public void test028449() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        charset0.canEncode();
    }

    @Test(timeout = 4000)
    public void test028450() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        charset0.isRegistered();
    }

    @Test(timeout = 4000)
    public void test028451() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        charset0.displayName();
    }

    @Test(timeout = 4000)
    public void test028452() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        charsetEncoder0.averageBytesPerChar();
    }

    @Test(timeout = 4000)
    public void test028453() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        charsetEncoder0.maxBytesPerChar();
    }

    @Test(timeout = 4000)
    public void test028454() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
    }

    @Test(timeout = 4000)
    public void test028455() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
    }

    @Test(timeout = 4000)
    public void test028456() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test028457() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test028458() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test028459() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test028460() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test028461() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test028462() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
    }

    @Test(timeout = 4000)
    public void test028464() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
    }

    @Test(timeout = 4000)
    public void test028465() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test028466() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test028467() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test028468() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test028469() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test028470() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test028471() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test028472() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test028473() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test028474() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
    }

    @Test(timeout = 4000)
    public void test028475() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test028476() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test028477() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test028478() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test028479() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test028480() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test028481() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test028482() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test028483() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test028484() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test028485() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test028486() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test028487() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test028488() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test028489() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test028490() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        charset0.name();
    }

    @Test(timeout = 4000)
    public void test028491() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        charset0.toString();
    }

    @Test(timeout = 4000)
    public void test028492() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        charset0.canEncode();
    }

    @Test(timeout = 4000)
    public void test028493() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        charset0.isRegistered();
    }

    @Test(timeout = 4000)
    public void test028494() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        charset0.displayName();
    }

    @Test(timeout = 4000)
    public void test028495() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        charsetEncoder0.averageBytesPerChar();
    }

    @Test(timeout = 4000)
    public void test028496() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        charsetEncoder0.maxBytesPerChar();
    }

    @Test(timeout = 4000)
    public void test028497() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test028498() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test028499() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test028500() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test028501() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test028502() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test028503() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test028504() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test028505() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test028506() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test028507() throws Throwable {
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charsetEncoder0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Locale locale0 = Locale.ITALY;
        Integer integer0 = new Integer((-1816));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, gregorianChronology0, locale0, integer0, 0);
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) outputStreamWriter0, (long) 0, (Chronology) gregorianChronology0, 0, dateTimeZone0, locale0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test029508() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
    }

    @Test(timeout = 4000)
    public void test029509() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test029510() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test029511() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
    }

    @Test(timeout = 4000)
    public void test029512() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test029513() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test029514() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    }

    @Test(timeout = 4000)
    public void test029516() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    }

    @Test(timeout = 4000)
    public void test029517() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test029518() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test029519() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test029520() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
    }

    @Test(timeout = 4000)
    public void test029521() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test029522() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test029523() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test029524() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test029525() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test029526() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test029527() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
    }

    @Test(timeout = 4000)
    public void test029528() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test029529() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test029530() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test029531() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test029532() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test029533() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test029534() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test029535() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test029536() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test029537() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test029538() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test029539() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test029540() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test029541() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test029542() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test029543() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test029544() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test029545() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test029546() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test029547() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65, true);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (-5336536147L), (Chronology) ethiopicChronology0, 2526, dateTimeZone0, locale0);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test030551() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
    }

    @Test(timeout = 4000)
    public void test030552() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        hashMap0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test030553() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        hashMap0.size();
    }

    @Test(timeout = 4000)
    public void test030554() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test030555() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test030556() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
    }

    @Test(timeout = 4000)
    public void test030558() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
    }

    @Test(timeout = 4000)
    public void test030559() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test030560() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test030561() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test030562() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test030563() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test030564() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test030565() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
    }

    @Test(timeout = 4000)
    public void test030567() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test030568() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test030569() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test030570() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test030571() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test030572() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test030573() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test030574() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test030575() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test030576() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-403), hashMap0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        Locale locale0 = Locale.FRENCH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(48L, ethiopicChronology0, locale0, (Integer) null, (-403));
        dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "Years", (-448));
    }

    @Test(timeout = 4000)
    public void test031580() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    }

    @Test(timeout = 4000)
    public void test031581() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test031582() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test031583() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test031584() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test031585() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
    }

    @Test(timeout = 4000)
    public void test031586() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test031587() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test031588() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
    }

    @Test(timeout = 4000)
    public void test031589() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test031590() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test031591() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test031592() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test031595() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test031596() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test031597() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test031598() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        yearMonth0.getYear();
    }

    @Test(timeout = 4000)
    public void test031599() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        yearMonth0.size();
    }

    @Test(timeout = 4000)
    public void test031600() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        yearMonth0.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test031601() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
    }

    @Test(timeout = 4000)
    public void test031602() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test031603() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test031604() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test031605() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test031606() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test031607() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test031608() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
    }

    @Test(timeout = 4000)
    public void test031610() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test031611() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test031612() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test031613() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test031614() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test031615() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test031616() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test031617() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test031618() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test031619() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        yearMonth0.getYear();
    }

    @Test(timeout = 4000)
    public void test031620() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        yearMonth0.size();
    }

    @Test(timeout = 4000)
    public void test031621() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        yearMonth0.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test031622() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test031623() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test031624() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test031625() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test031626() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test031627() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        StringBuffer stringBuffer0 = new StringBuffer("56YZ0]vD<'tk9?n0L");
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
        Locale locale0 = Locale.TAIWAN;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test032631() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
    }

    @Test(timeout = 4000)
    public void test032632() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test032633() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test032634() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test032635() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test032636() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    }

    @Test(timeout = 4000)
    public void test032639() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        charBuffer0.isReadOnly();
    }

    @Test(timeout = 4000)
    public void test032640() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        charBuffer0.arrayOffset();
    }

    @Test(timeout = 4000)
    public void test032641() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        charBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test032642() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        charBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test032643() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        charBuffer0.hasArray();
    }

    @Test(timeout = 4000)
    public void test032644() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        charBuffer0.capacity();
    }

    @Test(timeout = 4000)
    public void test032645() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        charBuffer0.hasRemaining();
    }

    @Test(timeout = 4000)
    public void test032646() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        charBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test032647() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        charBuffer0.isDirect();
    }

    @Test(timeout = 4000)
    public void test032648() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        charBuffer0.position();
    }

    @Test(timeout = 4000)
    public void test032649() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        charBuffer0.remaining();
    }

    @Test(timeout = 4000)
    public void test032650() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    }

    @Test(timeout = 4000)
    public void test032653() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.isReadOnly();
    }

    @Test(timeout = 4000)
    public void test032654() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.arrayOffset();
    }

    @Test(timeout = 4000)
    public void test032655() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test032656() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test032657() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.hasArray();
    }

    @Test(timeout = 4000)
    public void test032658() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.capacity();
    }

    @Test(timeout = 4000)
    public void test032659() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.hasRemaining();
    }

    @Test(timeout = 4000)
    public void test032660() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test032661() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.isDirect();
    }

    @Test(timeout = 4000)
    public void test032662() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.position();
    }

    @Test(timeout = 4000)
    public void test032663() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.remaining();
    }

    @Test(timeout = 4000)
    public void test032664() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test032665() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test032666() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    }

    @Test(timeout = 4000)
    public void test032668() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
    }

    @Test(timeout = 4000)
    public void test032669() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test032670() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test032671() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test032672() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
    }

    @Test(timeout = 4000)
    public void test032673() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test032674() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test032675() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test032676() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test032677() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test032678() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test032679() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test032682() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test032683() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test032684() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test032685() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test032686() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        charBuffer0.isReadOnly();
    }

    @Test(timeout = 4000)
    public void test032687() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        charBuffer0.arrayOffset();
    }

    @Test(timeout = 4000)
    public void test032688() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        charBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test032689() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        charBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test032690() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        charBuffer0.hasArray();
    }

    @Test(timeout = 4000)
    public void test032691() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        charBuffer0.capacity();
    }

    @Test(timeout = 4000)
    public void test032692() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        charBuffer0.hasRemaining();
    }

    @Test(timeout = 4000)
    public void test032693() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        charBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test032694() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        charBuffer0.isDirect();
    }

    @Test(timeout = 4000)
    public void test032695() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        charBuffer0.position();
    }

    @Test(timeout = 4000)
    public void test032696() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        charBuffer0.remaining();
    }

    @Test(timeout = 4000)
    public void test032697() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test032698() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test032699() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test032700() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test032701() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test032702() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test032703() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test032704() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test032705() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test032706() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test032707() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        char[] charArray0 = new char[7];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, 2814L, (Chronology) buddhistChronology0, (-1858), dateTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test033711() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
    }

    @Test(timeout = 4000)
    public void test033712() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test033713() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test033714() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test033715() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test033716() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
    }

    @Test(timeout = 4000)
    public void test033717() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test033718() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test033719() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    }

    @Test(timeout = 4000)
    public void test033721() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
    }

    @Test(timeout = 4000)
    public void test033722() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test033723() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test033724() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test033725() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
    }

    @Test(timeout = 4000)
    public void test033726() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test033727() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test033728() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test033729() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test033730() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test033731() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test033732() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test033733() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test033734() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test033735() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test033736() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test033737() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test033738() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test033739() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test033740() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test033741() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test033742() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test033743() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test033744() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test033745() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test033746() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test033747() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 2300, false, 85);
        StringBuffer stringBuffer0 = new StringBuffer(85);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        Locale locale0 = Locale.CHINESE;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) 2300, (Chronology) ethiopicChronology0, (-1611), dateTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test034749() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(34);
    }

    @Test(timeout = 4000)
    public void test035753() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(6);
    }

    @Test(timeout = 4000)
    public void test036757() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern("");
    }

    @Test(timeout = 4000)
    public void test037761() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(329);
    }

    @Test(timeout = 4000)
    public void test038765() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfMinute(2224, 2);
    }

    @Test(timeout = 4000)
    public void test039769() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfHour(5, (-309));
    }

    @Test(timeout = 4000)
    public void test040773() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(366, 366);
    }

    @Test(timeout = 4000)
    public void test041777() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(0);
    }

    @Test(timeout = 4000)
    public void test042781() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeek(2139);
    }

    @Test(timeout = 4000)
    public void test043785() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(65533);
    }

    @Test(timeout = 4000)
    public void test044789() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(366, 15356250);
    }

    @Test(timeout = 4000)
    public void test045793() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendYearOfCentury((-2450), 2986);
    }

    @Test(timeout = 4000)
    public void test046795() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendYear(0, 0);
    }

    @Test(timeout = 4000)
    public void test047797() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendWeekyear(0, 0);
    }

    @Test(timeout = 4000)
    public void test048799() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendWeekOfWeekyear((-758));
    }

    @Test(timeout = 4000)
    public void test049801() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendTimeZoneOffset((String) null, true, (-1293), 913);
    }

    @Test(timeout = 4000)
    public void test050803() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendPattern((String) null);
    }

    @Test(timeout = 4000)
    public void test051805() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendOptional((DateTimeParser) null);
    }

    @Test(timeout = 4000)
    public void test052807() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendMonthOfYear((-2155));
    }

    @Test(timeout = 4000)
    public void test053809() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendMinuteOfHour((-204));
    }

    @Test(timeout = 4000)
    public void test054811() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendMinuteOfDay((-2801));
    }

    @Test(timeout = 4000)
    public void test055813() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendMillisOfSecond((-504));
    }

    @Test(timeout = 4000)
    public void test056815() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendHourOfHalfday((-674));
    }

    @Test(timeout = 4000)
    public void test057817() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendHourOfDay((-215));
    }

    @Test(timeout = 4000)
    public void test058819() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendFractionOfSecond(0, (-1861));
    }

    @Test(timeout = 4000)
    public void test059821() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendDayOfMonth((-632));
    }

    @Test(timeout = 4000)
    public void test060823() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendClockhourOfHalfday((-3258));
    }

    @Test(timeout = 4000)
    public void test061832() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    }

    @Test(timeout = 4000)
    public void test061833() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-754), true);
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, dateTimeParserArray0);
    }

    @Test(timeout = 4000)
    public void test062835() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.append((DateTimePrinter) null);
    }

    @Test(timeout = 4000)
    public void test063837() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    }

    @Test(timeout = 4000)
    public void test063838() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test063839() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test063840() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test064842() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
    }

    @Test(timeout = 4000)
    public void test064843() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test064844() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test064845() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, (-594), (-594));
    }

    @Test(timeout = 4000)
    public void test065847() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    }

    @Test(timeout = 4000)
    public void test065848() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test065849() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test065850() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 1000, 100);
    }

    @Test(timeout = 4000)
    public void test065853() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 1000, 100);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test065854() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 1000, 100);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test066856() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    }

    @Test(timeout = 4000)
    public void test066857() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test066858() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test066859() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test066862() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test066863() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test067867() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
    }

    @Test(timeout = 4000)
    public void test067868() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test067871() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test067872() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test068877() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, (-3430), 0);
    }

    @Test(timeout = 4000)
    public void test069879() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
    }

    @Test(timeout = 4000)
    public void test069880() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test069881() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test069882() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 3600000, 1492);
    }

    @Test(timeout = 4000)
    public void test069885() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 3600000, 1492);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test069886() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 3600000, 1492);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test070888() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
    }

    @Test(timeout = 4000)
    public void test070889() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test070890() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test070891() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 13);
    }

    @Test(timeout = 4000)
    public void test070894() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 13);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test070895() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 13);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test071900() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, (-513), 65533);
    }

    @Test(timeout = 4000)
    public void test072905() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 1660, 0);
    }

    @Test(timeout = 4000)
    public void test072908() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 1660, 0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test072909() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 1660, 0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test073911() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
    }

    @Test(timeout = 4000)
    public void test073912() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test073913() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test073914() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
        dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test074916() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("org.joda.time.DateTime");
    }

    @Test(timeout = 4000)
    public void test075920() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[8];
        dateTimeFormatterBuilder0.append((DateTimePrinter) null, dateTimeParserArray0);
    }

    @Test(timeout = 4000)
    public void test076922() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
    }

    @Test(timeout = 4000)
    public void test076923() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test076924() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test076925() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test076926() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test076927() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
    }

    @Test(timeout = 4000)
    public void test076928() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test076929() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test076930() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test076931() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test076932() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        localDateTime0.size();
    }

    @Test(timeout = 4000)
    public void test076933() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
    }

    @Test(timeout = 4000)
    public void test076934() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test076935() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test076936() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test076937() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test076938() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        localDateTime0.size();
    }

    @Test(timeout = 4000)
    public void test076939() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        partial0.size();
    }

    @Test(timeout = 4000)
    public void test076940() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    }

    @Test(timeout = 4000)
    public void test076941() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test076942() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test076943() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test076944() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test076945() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        localDateTime0.size();
    }

    @Test(timeout = 4000)
    public void test076946() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        partial0.size();
    }

    @Test(timeout = 4000)
    public void test076947() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test076948() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        dateTimeFormatter0.isPrinter();
    }

    @Test(timeout = 4000)
    public void test076949() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test076950() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        dateTimeFormatter0.isParser();
    }

    @Test(timeout = 4000)
    public void test076951() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        dateTimeFormatter0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test076952() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test076955() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
        calendar0.getMinimalDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test076956() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
        calendar0.toString();
    }

    @Test(timeout = 4000)
    public void test076957() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
        calendar0.isLenient();
    }

    @Test(timeout = 4000)
    public void test076958() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
        calendar0.getFirstDayOfWeek();
    }

    @Test(timeout = 4000)
    public void test076959() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
        localDateTime0.size();
    }

    @Test(timeout = 4000)
    public void test076960() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
        partial0.size();
    }

    @Test(timeout = 4000)
    public void test076961() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test076962() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
        dateTimeFormatter0.isPrinter();
    }

    @Test(timeout = 4000)
    public void test076963() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test076964() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
        dateTimeFormatter0.isParser();
    }

    @Test(timeout = 4000)
    public void test076965() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        Calendar calendar0 = MockCalendar.getInstance();
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        Partial partial0 = new Partial(localDateTime0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
        dateTimeFormatter0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test077967() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
    }

    @Test(timeout = 4000)
    public void test077968() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
        dateTimeFormat_StyleFormatter0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test077969() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
        dateTimeFormat_StyleFormatter0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test077970() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
    }

    @Test(timeout = 4000)
    public void test077973() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
        dateTimeFormat_StyleFormatter0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test077974() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
        dateTimeFormat_StyleFormatter0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test077975() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
        DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
    }

    @Test(timeout = 4000)
    public void test077977() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
        DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
        dateTimeFormatter0.isPrinter();
    }

    @Test(timeout = 4000)
    public void test077978() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
        DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test077979() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
        DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
        dateTimeFormatter0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test077980() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
        DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test077981() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter(3600000, 1584, 3600000);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimeParser) dateTimeFormat_StyleFormatter0);
        DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
        dateTimeFormatter0.isParser();
    }

    @Test(timeout = 4000)
    public void test078983() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekOfWeekyear(122);
    }

    @Test(timeout = 4000)
    public void test079987() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfDay(10209375);
    }

    @Test(timeout = 4000)
    public void test080991() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendSecondOfMinute((-1310));
    }

    @Test(timeout = 4000)
    public void test081993() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfMonth(10209375);
    }

    @Test(timeout = 4000)
    public void test082997() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYear(59);
    }

    @Test(timeout = 4000)
    public void test0831001() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
    }

    @Test(timeout = 4000)
    public void test0841005() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendDayOfWeek((-1000));
    }

    @Test(timeout = 4000)
    public void test0851007() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(11, true);
    }

    @Test(timeout = 4000)
    public void test0861011() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendFractionOfHour((-1156), (-2589));
    }

    @Test(timeout = 4000)
    public void test0871013() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(0);
    }

    @Test(timeout = 4000)
    public void test0881017() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendDayOfYear((-2001));
    }

    @Test(timeout = 4000)
    public void test0891019() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(';');
    }

    @Test(timeout = 4000)
    public void test0901023() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
    }

    @Test(timeout = 4000)
    public void test0901026() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
    }

    @Test(timeout = 4000)
    public void test0901027() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0901028() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    }

    @Test(timeout = 4000)
    public void test0901029() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0901030() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test0901031() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test0901032() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
    }

    @Test(timeout = 4000)
    public void test0901039() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0901040() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test0901041() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test0901042() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0);
        boolean boolean0 = dateTimeFormatterBuilder1.canBuildParser();
    }

    @Test(timeout = 4000)
    public void test0911048() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
    }

    @Test(timeout = 4000)
    public void test0911051() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
        DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
    }

    @Test(timeout = 4000)
    public void test0911058() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(1847, 10);
        DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
        boolean boolean0 = dateTimeFormatterBuilder1.canBuildFormatter();
    }

    @Test(timeout = 4000)
    public void test0921069() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
    }

    @Test(timeout = 4000)
    public void test0921071() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
    }

    @Test(timeout = 4000)
    public void test0921072() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0921073() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0921074() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0921075() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0921076() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0921077() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0921078() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
    }

    @Test(timeout = 4000)
    public void test0921080() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0921081() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0921082() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0921083() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0921084() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0921085() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0921086() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test0921087() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test0921088() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test0921089() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Locale locale0 = Locale.PRC;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1393L, copticChronology0, locale0, (Integer) 1, (-4498));
        dateTimeFormatterBuilder_Composite0.parseInto(dateTimeParserBucket0, "-F=!,[uP2", 1);
    }

    @Test(timeout = 4000)
    public void test0931096() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", false);
    }

    @Test(timeout = 4000)
    public void test0931097() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", false);
        MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));
    }

    @Test(timeout = 4000)
    public void test0931098() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", false);
        MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
    }

    @Test(timeout = 4000)
    public void test0931099() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", false);
        MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        mockDate0.toString();
    }

    @Test(timeout = 4000)
    public void test0931100() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", false);
        MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        localDate0.size();
    }

    @Test(timeout = 4000)
    public void test0931101() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", false);
        MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        Locale locale0 = Locale.GERMANY;
    }

    @Test(timeout = 4000)
    public void test0931102() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", false);
        MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        Locale locale0 = Locale.GERMANY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0931103() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", false);
        MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        Locale locale0 = Locale.GERMANY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0931104() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", false);
        MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        Locale locale0 = Locale.GERMANY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0931105() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", false);
        MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0931106() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", false);
        MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0931107() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", false);
        MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        Locale locale0 = Locale.GERMANY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0931108() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", false);
        MockDate mockDate0 = new MockDate(26, 2, (-131), 1440, 26, (-131));
        LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_Composite0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDate0, locale0);
    }

    @Test(timeout = 4000)
    public void test0941115() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeFormatterBuilder_Composite0.printTo((StringBuffer) null, (ReadablePartial) null, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test0951117() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
    }

    @Test(timeout = 4000)
    public void test0951118() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0951119() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    }

    @Test(timeout = 4000)
    public void test0951120() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0951121() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test0951122() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test0951123() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
    }

    @Test(timeout = 4000)
    public void test0951124() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0951125() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test0951126() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test0951127() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
        Locale locale0 = Locale.JAPAN;
    }

    @Test(timeout = 4000)
    public void test0951128() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
        Locale locale0 = Locale.JAPAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0951129() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
        Locale locale0 = Locale.JAPAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0951130() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
        Locale locale0 = Locale.JAPAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0951131() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
        Locale locale0 = Locale.JAPAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0951132() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
        Locale locale0 = Locale.JAPAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0951133() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
        Locale locale0 = Locale.JAPAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0951134() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-511));
        Locale locale0 = Locale.JAPAN;
        dateTimeFormatterBuilder_Composite0.printTo((Writer) null, (long) 65533, (Chronology) gJChronology0, 756, dateTimeZone0, locale0);
    }

    @Test(timeout = 4000)
    public void test0961135() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
    }

    @Test(timeout = 4000)
    public void test0961137() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
    }

    @Test(timeout = 4000)
    public void test0961138() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0961139() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    }

    @Test(timeout = 4000)
    public void test0961140() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test0961141() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test0961142() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test0961143() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        StringBuffer stringBuffer0 = new StringBuffer(1);
    }

    @Test(timeout = 4000)
    public void test0961144() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        StringBuffer stringBuffer0 = new StringBuffer(1);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test0961145() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        StringBuffer stringBuffer0 = new StringBuffer(1);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test0961146() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        StringBuffer stringBuffer0 = new StringBuffer(1);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
    }

    @Test(timeout = 4000)
    public void test0961147() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        StringBuffer stringBuffer0 = new StringBuffer(1);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
    }

    @Test(timeout = 4000)
    public void test0961148() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        StringBuffer stringBuffer0 = new StringBuffer(1);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0961149() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        StringBuffer stringBuffer0 = new StringBuffer(1);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test0961150() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        StringBuffer stringBuffer0 = new StringBuffer(1);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test0961151() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        StringBuffer stringBuffer0 = new StringBuffer(1);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, 4823L, (Chronology) copticChronology0, (-605), dateTimeZone0, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test0971159() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    }

    @Test(timeout = 4000)
    public void test0971160() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test0971161() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test0971162() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
    }

    @Test(timeout = 4000)
    public void test0971164() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
    }

    @Test(timeout = 4000)
    public void test0971165() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0971166() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0971167() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0971168() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0971169() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0971170() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0971171() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test0971172() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test0971173() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test0971174() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 0);
    }

    @Test(timeout = 4000)
    public void test0971175() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0971176() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0971177() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0971178() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0971179() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0971180() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0971181() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 0);
        dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test0971182() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 0);
        dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test0971183() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 0);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test0971184() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 0);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test0971185() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        Integer integer0 = new Integer(9);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 9);
        int int0 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "vRA@$:X}66xJ", 0);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test0981186() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test0981187() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test0981188() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
    }

    @Test(timeout = 4000)
    public void test0981189() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test0981190() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    }

    @Test(timeout = 4000)
    public void test0981191() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test0981192() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test0981193() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test0981194() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    }

    @Test(timeout = 4000)
    public void test0981195() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    }

    @Test(timeout = 4000)
    public void test0981196() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test0981197() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0981198() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
    }

    @Test(timeout = 4000)
    public void test0981199() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0981200() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0981201() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0981202() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0981203() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0981204() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0981205() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
        dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test0981206() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
        dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test0981207() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test0981208() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test0981209() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test0981210() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test0981211() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test0981212() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test0981213() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test0981214() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test0981215() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test0981216() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test0981217() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1539L), (Chronology) iSOChronology0, (-2245), dateTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test0991227() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (long) (-2245), (Chronology) iSOChronology0, (-2245), (DateTimeZone) null, (Locale) null);
        dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test0991228() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (long) (-2245), (Chronology) iSOChronology0, (-2245), (DateTimeZone) null, (Locale) null);
        dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test0991229() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (long) (-2245), (Chronology) iSOChronology0, (-2245), (DateTimeZone) null, (Locale) null);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test0991230() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (long) (-2245), (Chronology) iSOChronology0, (-2245), (DateTimeZone) null, (Locale) null);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test0991231() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        StringWriter stringWriter0 = new StringWriter();
        StringBuffer stringBuffer0 = stringWriter0.getBuffer();
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (long) (-2245), (Chronology) iSOChronology0, (-2245), (DateTimeZone) null, (Locale) null);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1001233() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
    }

    @Test(timeout = 4000)
    public void test1001236() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
        DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
    }

    @Test(timeout = 4000)
    public void test1001243() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
        DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder2.toParser();
    }

    @Test(timeout = 4000)
    public void test1001250() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
        DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder2.toParser();
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1001251() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
        DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) null);
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder2.toParser();
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1011255() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
    }

    @Test(timeout = 4000)
    public void test1011256() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        hashMap0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1011257() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        hashMap0.size();
    }

    @Test(timeout = 4000)
    public void test1011258() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1011259() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1011260() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        int int0 = dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1011261() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        int int0 = dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
        hashMap0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1011262() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        int int0 = dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
        hashMap0.size();
    }

    @Test(timeout = 4000)
    public void test1011263() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        int int0 = dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
        dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1011264() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
        int int0 = dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
        dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1021265() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
    }

    @Test(timeout = 4000)
    public void test1021266() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1021267() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1021268() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
    }

    @Test(timeout = 4000)
    public void test1021269() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
    }

    @Test(timeout = 4000)
    public void test1021270() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1021271() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1021272() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1021273() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1021274() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1021275() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1021276() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
    }

    @Test(timeout = 4000)
    public void test1021278() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
    }

    @Test(timeout = 4000)
    public void test1021279() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1021280() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1021281() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1021282() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1021283() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1021284() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1021285() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1021286() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1021287() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1021288() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "UTC(-`)=,c{y", 60000);
    }

    @Test(timeout = 4000)
    public void test1021289() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "UTC(-`)=,c{y", 60000);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1021290() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "UTC(-`)=,c{y", 60000);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1021291() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "UTC(-`)=,c{y", 60000);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1021292() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "UTC(-`)=,c{y", 60000);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1021293() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "UTC(-`)=,c{y", 60000);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1021294() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "UTC(-`)=,c{y", 60000);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1021295() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "UTC(-`)=,c{y", 60000);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1021296() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "UTC(-`)=,c{y", 60000);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1021297() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "UTC(-`)=,c{y", 60000);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1021298() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "UTC(-`)=,c{y", 60000);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1021299() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREA;
        Integer integer0 = new Integer((-463));
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-874L), julianChronology0, locale0, integer0, 256);
        int int0 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "UTC(-`)=,c{y", 60000);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1031300() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
    }

    @Test(timeout = 4000)
    public void test1031301() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1031302() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1031303() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    }

    @Test(timeout = 4000)
    public void test1031304() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1031305() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1031306() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    }

    @Test(timeout = 4000)
    public void test1031307() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1031308() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1031309() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1031310() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test1031311() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1031312() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1031313() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1031314() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 4110, dateTimeZone0, (Locale) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1031315() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 4110, dateTimeZone0, (Locale) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1031316() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 4110, dateTimeZone0, (Locale) null);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1031317() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 4110, dateTimeZone0, (Locale) null);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1031318() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 4110, dateTimeZone0, (Locale) null);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1031319() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 4110, dateTimeZone0, (Locale) null);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1031320() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", false, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 4110, dateTimeZone0, (Locale) null);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1041324() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    }

    @Test(timeout = 4000)
    public void test1041325() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1041326() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1041327() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    }

    @Test(timeout = 4000)
    public void test1041328() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1041329() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1041330() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1041331() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test1041332() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1041333() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1041334() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1041335() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, (-463), dateTimeZone0, (Locale) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1041336() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, (-463), dateTimeZone0, (Locale) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1041337() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, (-463), dateTimeZone0, (Locale) null);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1041338() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, (-463), dateTimeZone0, (Locale) null);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1041339() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, (-463), dateTimeZone0, (Locale) null);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1041340() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, (-463), dateTimeZone0, (Locale) null);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1041341() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, (-463), dateTimeZone0, (Locale) null);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1051348() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test1051349() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-12219292800000L), (Chronology) gJChronology0, 4110, (DateTimeZone) null, (Locale) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1051350() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-12219292800000L), (Chronology) gJChronology0, 4110, (DateTimeZone) null, (Locale) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1051351() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-12219292800000L), (Chronology) gJChronology0, 4110, (DateTimeZone) null, (Locale) null);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1051352() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-12219292800000L), (Chronology) gJChronology0, 4110, (DateTimeZone) null, (Locale) null);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1061367() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 12825000, dateTimeZone0, (Locale) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1061368() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 12825000, dateTimeZone0, (Locale) null);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1061369() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 12825000, dateTimeZone0, (Locale) null);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1061370() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 12825000, dateTimeZone0, (Locale) null);
        charArrayWriter0.size();
    }

    @Test(timeout = 4000)
    public void test1061371() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 12825000, dateTimeZone0, (Locale) null);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1061372() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 12825000, dateTimeZone0, (Locale) null);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1061373() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (-1291L), (Chronology) gJChronology0, 12825000, dateTimeZone0, (Locale) null);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1071377() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
    }

    @Test(timeout = 4000)
    public void test1071378() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1071379() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1071380() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1071381() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1071382() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1071383() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1071384() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    }

    @Test(timeout = 4000)
    public void test1071385() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S ~uo|", "vRA@$:X}66xJ", true, 10, 169);
    }

    @Test(timeout = 4000)
    public void test1071386() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S ~uo|", "vRA@$:X}66xJ", true, 10, 169);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1071387() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S ~uo|", "vRA@$:X}66xJ", true, 10, 169);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1071388() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S ~uo|", "vRA@$:X}66xJ", true, 10, 169);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-2342L), (Chronology) iSOChronology0, 449, (DateTimeZone) null, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1071389() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S ~uo|", "vRA@$:X}66xJ", true, 10, 169);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-2342L), (Chronology) iSOChronology0, 449, (DateTimeZone) null, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1071390() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S ~uo|", "vRA@$:X}66xJ", true, 10, 169);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-2342L), (Chronology) iSOChronology0, 449, (DateTimeZone) null, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1071391() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S ~uo|", "vRA@$:X}66xJ", true, 10, 169);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-2342L), (Chronology) iSOChronology0, 449, (DateTimeZone) null, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1071392() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S ~uo|", "vRA@$:X}66xJ", true, 10, 169);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-2342L), (Chronology) iSOChronology0, 449, (DateTimeZone) null, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1071393() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S ~uo|", "vRA@$:X}66xJ", true, 10, 169);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-2342L), (Chronology) iSOChronology0, 449, (DateTimeZone) null, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1071394() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S ~uo|", "vRA@$:X}66xJ", true, 10, 169);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-2342L), (Chronology) iSOChronology0, 449, (DateTimeZone) null, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1071395() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S ~uo|", "vRA@$:X}66xJ", true, 10, 169);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-2342L), (Chronology) iSOChronology0, 449, (DateTimeZone) null, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1071396() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S ~uo|", "vRA@$:X}66xJ", true, 10, 169);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-2342L), (Chronology) iSOChronology0, 449, (DateTimeZone) null, locale0);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1071397() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("S ~uo|", "vRA@$:X}66xJ", true, 10, 169);
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-2342L), (Chronology) iSOChronology0, 449, (DateTimeZone) null, locale0);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1081401() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
    }

    @Test(timeout = 4000)
    public void test1081402() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1081403() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1081404() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
    }

    @Test(timeout = 4000)
    public void test1081405() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1081406() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1081407() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1081408() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test1081409() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1081410() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1081411() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1081412() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
    }

    @Test(timeout = 4000)
    public void test1081413() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1081414() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1081415() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1081416() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1081417() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1081418() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1081419() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1081420() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1081421() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1081422() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1081423() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1081424() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1081425() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1081426() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1081427() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1081428() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1081429() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1081430() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1081431() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("UTC(-`)=,c{y", "--ct(=6mk5'v", true, 60000, 60000);
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(60000);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-1051L), (Chronology) gJChronology0, 7678125, dateTimeZone0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1091432() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("V@W>g>^(D`^", (String) null, false, 0, 0);
    }

    @Test(timeout = 4000)
    public void test1101433() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
    }

    @Test(timeout = 4000)
    public void test1101434() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1101435() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1101436() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
    }

    @Test(timeout = 4000)
    public void test1101437() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1101438() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1101439() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1101440() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1101441() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
    }

    @Test(timeout = 4000)
    public void test1101442() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1101443() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1101444() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1101445() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test1101447() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1101448() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1101449() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1101450() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
    }

    @Test(timeout = 4000)
    public void test1101452() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1101453() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1101454() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1101455() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1101456() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1101457() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1101458() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 20);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(20);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(20, buddhistChronology0, (Locale) null, (Integer) buddhistChronology0.BE, 0);
        dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "", (-3994));
    }

    @Test(timeout = 4000)
    public void test1111467() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
    }

    @Test(timeout = 4000)
    public void test1111469() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
    }

    @Test(timeout = 4000)
    public void test1111470() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1111471() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1111472() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1111473() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1111474() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1111475() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1111476() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
    }

    @Test(timeout = 4000)
    public void test1111478() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1111479() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1111480() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1111481() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1111482() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1111483() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1111484() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1111485() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1111486() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1111487() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
    }

    @Test(timeout = 4000)
    public void test1111489() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1111490() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1111491() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1111492() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
        dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1111493() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1111494() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1111495() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1111496() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1111497() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1111498() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1111499() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1111500() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1111501() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-480), copticChronology0, locale0, (Integer) 1, (-1250));
        int int0 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "];", 99);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1121502() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
    }

    @Test(timeout = 4000)
    public void test1121503() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1121504() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1121505() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
    }

    @Test(timeout = 4000)
    public void test1121506() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1121507() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1121508() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1121509() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1121510() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
    }

    @Test(timeout = 4000)
    public void test1121511() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1121512() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1121513() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
    }

    @Test(timeout = 4000)
    public void test1121514() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    }

    @Test(timeout = 4000)
    public void test1121515() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1121516() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1121517() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test1121519() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1121520() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1121521() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);
    }

    @Test(timeout = 4000)
    public void test1121522() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1121523() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1121524() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);
        dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1121525() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1121526() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1121527() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1121528() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1121529() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 50);
        StringBuffer stringBuffer0 = new StringBuffer();
        PipedWriter pipedWriter0 = new PipedWriter();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) pipedWriter0, (long) 0, (Chronology) buddhistChronology0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1131533() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    }

    @Test(timeout = 4000)
    public void test1131534() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1131535() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1131536() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1131537() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1131538() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
    }

    @Test(timeout = 4000)
    public void test1131539() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1131540() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1131541() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1131542() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1131543() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        dateTimeFormatter0.getDefaultYear();
    }

    @Test(timeout = 4000)
    public void test1131544() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        dateTimeFormatter0.isParser();
    }

    @Test(timeout = 4000)
    public void test1131545() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        dateTimeFormatter0.isOffsetParsed();
    }

    @Test(timeout = 4000)
    public void test1131546() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        dateTimeFormatter0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1131547() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        dateTimeFormatter0.isPrinter();
    }

    @Test(timeout = 4000)
    public void test1131548() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        LocalDate.parse("EET", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test1141550() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
    }

    @Test(timeout = 4000)
    public void test1141551() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1141552() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1141553() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
    }

    @Test(timeout = 4000)
    public void test1141554() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1141555() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1141556() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1141557() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1141558() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TextField0);
    }

    @Test(timeout = 4000)
    public void test1141561() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TextField0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1141562() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TextField0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1141563() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TextField0);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1141564() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_TextField0);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1151566() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
    }

    @Test(timeout = 4000)
    public void test1151567() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        localDateTime0.size();
    }

    @Test(timeout = 4000)
    public void test1151568() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
    }

    @Test(timeout = 4000)
    public void test1151569() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1151570() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1151571() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1151572() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1151573() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1151574() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1151575() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
    }

    @Test(timeout = 4000)
    public void test1151576() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1151577() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1151578() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
    }

    @Test(timeout = 4000)
    public void test1151579() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1151580() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1151581() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1151582() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1151583() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("|54j#IjT\u0006c;:M", false);
    }

    @Test(timeout = 4000)
    public void test1151584() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("|54j#IjT\u0006c;:M", false);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
        localDateTime0.size();
    }

    @Test(timeout = 4000)
    public void test1151585() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("|54j#IjT\u0006c;:M", false);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1151586() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("|54j#IjT\u0006c;:M", false);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1151587() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("|54j#IjT\u0006c;:M", false);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1151588() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("|54j#IjT\u0006c;:M", false);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1151589() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("|54j#IjT\u0006c;:M", false);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1151590() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("|54j#IjT\u0006c;:M", false);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1151591() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("|54j#IjT\u0006c;:M", false);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1151592() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("|54j#IjT\u0006c;:M", false);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1151593() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("|54j#IjT\u0006c;:M", false);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1151594() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("|54j#IjT\u0006c;:M", false);
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1161595() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    }

    @Test(timeout = 4000)
    public void test1161596() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1161597() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1161598() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
    }

    @Test(timeout = 4000)
    public void test1161599() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1161600() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1161601() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1161602() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1161603() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
    }

    @Test(timeout = 4000)
    public void test1161604() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1161605() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1161606() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    }

    @Test(timeout = 4000)
    public void test1161608() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
    }

    @Test(timeout = 4000)
    public void test1161610() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1161611() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1161612() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        partial0.size();
    }

    @Test(timeout = 4000)
    public void test1161613() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
    }

    @Test(timeout = 4000)
    public void test1161614() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1161615() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1161616() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1161617() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1161618() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1161619() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1161620() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
    }

    @Test(timeout = 4000)
    public void test1161621() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1161622() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1161623() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1161624() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1161625() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1161626() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1161627() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
        partial0.size();
    }

    @Test(timeout = 4000)
    public void test1161628() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1161629() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1161630() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1161631() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1161632() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1161633() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2552, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        Partial partial0 = new Partial(dateTimeFieldType0, 2552, islamicChronology0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1171634() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
    }

    @Test(timeout = 4000)
    public void test1171635() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1171636() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1171637() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
    }

    @Test(timeout = 4000)
    public void test1171639() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
    }

    @Test(timeout = 4000)
    public void test1171640() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1171641() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1171642() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1171643() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1171644() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1171645() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1171646() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
    }

    @Test(timeout = 4000)
    public void test1171647() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1171648() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1171649() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1171650() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1171651() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    }

    @Test(timeout = 4000)
    public void test1171653() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1171654() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1171655() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1171656() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1171657() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1171658() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1171659() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1171660() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1171661() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1171662() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
    }

    @Test(timeout = 4000)
    public void test1171664() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1171665() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1171666() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1171667() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1171668() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1171669() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1171670() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1171671() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1171672() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1171673() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1171674() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1171675() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1171676() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), true);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1181677() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
    }

    @Test(timeout = 4000)
    public void test1181678() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1181679() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1181680() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
    }

    @Test(timeout = 4000)
    public void test1181681() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1181682() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1181683() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1181684() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1181685() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1181686() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1181687() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
    }

    @Test(timeout = 4000)
    public void test1181688() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
    }

    @Test(timeout = 4000)
    public void test1181689() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1181690() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1181691() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1181692() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1181693() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        Integer integer0 = new Integer(275);
    }

    @Test(timeout = 4000)
    public void test1181695() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
    }

    @Test(timeout = 4000)
    public void test1181696() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1181697() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1181698() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1181699() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1181700() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1181701() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1181702() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1181703() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1181704() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1181705() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, false);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "S ~uo|", (-834));
    }

    @Test(timeout = 4000)
    public void test1191718() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
    }

    @Test(timeout = 4000)
    public void test1191719() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1191720() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1191721() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1191722() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1191723() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
    }

    @Test(timeout = 4000)
    public void test1191725() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1191726() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1191727() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1191728() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1191729() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1191730() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1191731() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1191732() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1191733() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1191734() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
    }

    @Test(timeout = 4000)
    public void test1191736() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1191737() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1191738() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1191739() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1191740() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1191741() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1191742() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1191743() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1191744() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1191745() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1191746() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1191747() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1191748() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-745), false);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2889L), ethiopicChronology0, locale0, (Integer) 1, (-745));
        int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/Central", 214);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1201760() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
    }

    @Test(timeout = 4000)
    public void test1201761() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1201762() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1201763() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1201764() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1201765() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        Integer integer0 = new Integer(275);
    }

    @Test(timeout = 4000)
    public void test1201767() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
    }

    @Test(timeout = 4000)
    public void test1201768() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1201769() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1201770() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1201771() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1201772() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1201773() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1201774() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1201775() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1201776() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1201777() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 275, true);
        Integer integer0 = new Integer(275);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(10, iSOChronology0, locale0, integer0, 1847);
        dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "S ~uo|", (-834));
    }

    @Test(timeout = 4000)
    public void test1211781() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
    }

    @Test(timeout = 4000)
    public void test1211782() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1211783() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1211784() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1211785() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1211786() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
    }

    @Test(timeout = 4000)
    public void test1211787() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
    }

    @Test(timeout = 4000)
    public void test1211788() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1211789() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1211790() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1211791() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1211792() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1211793() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1211794() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
    }

    @Test(timeout = 4000)
    public void test1211795() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1211796() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1211797() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1211798() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1211799() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1211800() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1211801() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1211802() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1211803() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1211804() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
    }

    @Test(timeout = 4000)
    public void test1211805() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1211806() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1211807() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
        dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1211808() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
        dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1211809() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1211810() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1211811() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1211812() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1211813() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1211814() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1211815() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1211816() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1211817() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 2300, false);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, iSOChronology0, locale0, (Integer) 1, 1);
        int int0 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "kFdI~^pqIY}sv", 1);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1221818() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
    }

    @Test(timeout = 4000)
    public void test1221819() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1221820() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1221821() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
    }

    @Test(timeout = 4000)
    public void test1221822() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1221823() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1221824() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1221825() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1221826() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
    }

    @Test(timeout = 4000)
    public void test1221827() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    }

    @Test(timeout = 4000)
    public void test1221828() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
    }

    @Test(timeout = 4000)
    public void test1221830() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
    }

    @Test(timeout = 4000)
    public void test1221832() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
    }

    @Test(timeout = 4000)
    public void test1221836() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        yearMonth0.getYear();
    }

    @Test(timeout = 4000)
    public void test1221837() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        yearMonth0.size();
    }

    @Test(timeout = 4000)
    public void test1221838() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        yearMonth0.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test1221839() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
    }

    @Test(timeout = 4000)
    public void test1221840() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1221841() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1221842() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1221843() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1221844() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1221845() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1221846() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
    }

    @Test(timeout = 4000)
    public void test1221849() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1221850() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1221851() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1221852() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1221853() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.getUsableSpace();
    }

    @Test(timeout = 4000)
    public void test1221854() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.canWrite();
    }

    @Test(timeout = 4000)
    public void test1221855() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.isHidden();
    }

    @Test(timeout = 4000)
    public void test1221856() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.getName();
    }

    @Test(timeout = 4000)
    public void test1221857() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.canRead();
    }

    @Test(timeout = 4000)
    public void test1221858() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.isFile();
    }

    @Test(timeout = 4000)
    public void test1221859() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.lastModified();
    }

    @Test(timeout = 4000)
    public void test1221860() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.getTotalSpace();
    }

    @Test(timeout = 4000)
    public void test1221861() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.toString();
    }

    @Test(timeout = 4000)
    public void test1221862() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.getFreeSpace();
    }

    @Test(timeout = 4000)
    public void test1221863() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.getParent();
    }

    @Test(timeout = 4000)
    public void test1221864() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.exists();
    }

    @Test(timeout = 4000)
    public void test1221865() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.canExecute();
    }

    @Test(timeout = 4000)
    public void test1221866() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.isAbsolute();
    }

    @Test(timeout = 4000)
    public void test1221867() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test1221868() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test1221869() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        yearMonth0.getYear();
    }

    @Test(timeout = 4000)
    public void test1221870() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        yearMonth0.size();
    }

    @Test(timeout = 4000)
    public void test1221871() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        yearMonth0.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test1221872() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1221873() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1221874() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1221875() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1221876() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1221877() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        MockFile mockFile0 = new MockFile("US/MountainvRA@$:X}66xJ", "B@\"*wvnr^%9/");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) lenientChronology0);
        Locale locale0 = Locale.KOREA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) yearMonth0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1231886() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
    }

    @Test(timeout = 4000)
    public void test1231887() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1231888() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test1231889() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1231890() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test1231891() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test1231892() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
    }

    @Test(timeout = 4000)
    public void test1231893() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1231894() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test1231895() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1231896() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test1231897() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test1231898() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1231899() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1231900() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1231901() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test1231903() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1231904() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test1231905() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1231906() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test1231907() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test1231908() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1231909() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1231910() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1231911() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
    }

    @Test(timeout = 4000)
    public void test1231913() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        simpleTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1231914() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        simpleTimeZone0.useDaylightTime();
    }

    @Test(timeout = 4000)
    public void test1231915() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        simpleTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1231916() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        simpleTimeZone0.getRawOffset();
    }

    @Test(timeout = 4000)
    public void test1231917() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        simpleTimeZone0.getDSTSavings();
    }

    @Test(timeout = 4000)
    public void test1231918() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1231919() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1231920() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1231921() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        localDate0.size();
    }

    @Test(timeout = 4000)
    public void test1231922() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        Locale locale0 = Locale.CHINA;
    }

    @Test(timeout = 4000)
    public void test1231923() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1231924() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        Locale locale0 = Locale.CHINA;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1231925() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        Locale locale0 = Locale.CHINA;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1231926() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        Locale locale0 = Locale.CHINA;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1231927() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        Locale locale0 = Locale.CHINA;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1231928() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        Locale locale0 = Locale.CHINA;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1231929() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, true);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=(+MHG_'zofC_^5@|", 10, 10, 0, 85, 10, 0, 10, 85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
        LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((StringBuffer) null, (ReadablePartial) localDate0, locale0);
    }

    @Test(timeout = 4000)
    public void test1241930() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
    }

    @Test(timeout = 4000)
    public void test1241931() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1241932() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1241933() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
    }

    @Test(timeout = 4000)
    public void test1241934() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1241935() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1241936() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1241937() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1241938() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
    }

    @Test(timeout = 4000)
    public void test1241939() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        charBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test1241940() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        charBuffer0.remaining();
    }

    @Test(timeout = 4000)
    public void test1241941() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        charBuffer0.hasArray();
    }

    @Test(timeout = 4000)
    public void test1241942() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        charBuffer0.arrayOffset();
    }

    @Test(timeout = 4000)
    public void test1241943() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        charBuffer0.isReadOnly();
    }

    @Test(timeout = 4000)
    public void test1241944() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        charBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1241945() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        charBuffer0.hasRemaining();
    }

    @Test(timeout = 4000)
    public void test1241946() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        charBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1241947() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        charBuffer0.capacity();
    }

    @Test(timeout = 4000)
    public void test1241948() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        charBuffer0.position();
    }

    @Test(timeout = 4000)
    public void test1241949() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        charBuffer0.isDirect();
    }

    @Test(timeout = 4000)
    public void test1241950() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    }

    @Test(timeout = 4000)
    public void test1241951() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test1241952() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.remaining();
    }

    @Test(timeout = 4000)
    public void test1241953() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.hasArray();
    }

    @Test(timeout = 4000)
    public void test1241954() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.arrayOffset();
    }

    @Test(timeout = 4000)
    public void test1241955() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.isReadOnly();
    }

    @Test(timeout = 4000)
    public void test1241956() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1241957() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.hasRemaining();
    }

    @Test(timeout = 4000)
    public void test1241958() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1241959() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.capacity();
    }

    @Test(timeout = 4000)
    public void test1241960() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.position();
    }

    @Test(timeout = 4000)
    public void test1241961() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        charBuffer0.isDirect();
    }

    @Test(timeout = 4000)
    public void test1241962() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1241963() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1241964() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
    }

    @Test(timeout = 4000)
    public void test1241967() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        monthDay0.getDayOfMonth();
    }

    @Test(timeout = 4000)
    public void test1241968() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        monthDay0.size();
    }

    @Test(timeout = 4000)
    public void test1241969() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        monthDay0.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test1241970() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
    }

    @Test(timeout = 4000)
    public void test1241971() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1241972() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1241973() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1241974() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1241975() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1241976() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1241977() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
    }

    @Test(timeout = 4000)
    public void test1241979() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1241980() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1241981() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1241982() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1241983() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        charBuffer0.limit();
    }

    @Test(timeout = 4000)
    public void test1241984() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        charBuffer0.remaining();
    }

    @Test(timeout = 4000)
    public void test1241985() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        charBuffer0.hasArray();
    }

    @Test(timeout = 4000)
    public void test1241986() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        charBuffer0.arrayOffset();
    }

    @Test(timeout = 4000)
    public void test1241987() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        charBuffer0.isReadOnly();
    }

    @Test(timeout = 4000)
    public void test1241988() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        charBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1241989() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        charBuffer0.hasRemaining();
    }

    @Test(timeout = 4000)
    public void test1241990() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        charBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1241991() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        charBuffer0.capacity();
    }

    @Test(timeout = 4000)
    public void test1241992() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        charBuffer0.position();
    }

    @Test(timeout = 4000)
    public void test1241993() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        charBuffer0.isDirect();
    }

    @Test(timeout = 4000)
    public void test1241994() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1241995() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1241996() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        monthDay0.getDayOfMonth();
    }

    @Test(timeout = 4000)
    public void test1241997() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        monthDay0.size();
    }

    @Test(timeout = 4000)
    public void test1241998() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        monthDay0.getMonthOfYear();
    }

    @Test(timeout = 4000)
    public void test1241999() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1242000() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1242001() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1242002() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1242003() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1242004() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        CharBuffer charBuffer0 = CharBuffer.allocate(0);
        StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
        MonthDay monthDay0 = new MonthDay();
        Locale locale0 = Locale.GERMANY;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1252008() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
    }

    @Test(timeout = 4000)
    public void test1252009() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1252010() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1252011() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1252012() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1252013() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
    }

    @Test(timeout = 4000)
    public void test1252014() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
    }

    @Test(timeout = 4000)
    public void test1252015() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1252016() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1252017() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1252018() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1252019() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1252020() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1252021() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
    }

    @Test(timeout = 4000)
    public void test1252023() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
    }

    @Test(timeout = 4000)
    public void test1252024() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1252025() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1252026() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1252027() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1252028() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1252029() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1252030() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1252031() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1252032() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1252033() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
    }

    @Test(timeout = 4000)
    public void test1252034() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1252035() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1252036() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1252037() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1252038() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1252039() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1252040() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1252041() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1252042() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1252043() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1252044() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1252045() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1252046() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 11, true);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        Integer integer0 = new Integer(11);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(11, gJChronology0, locale0, integer0, 1103);
        int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, "--ct(=6mk5'v", 1103);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1262047() throws Throwable {
        MonthDay.parse("fVct(=6MK5'V");
    }

    @Test(timeout = 4000)
    public void test1272048() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
    }

    @Test(timeout = 4000)
    public void test1272049() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1272050() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1272051() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
    }

    @Test(timeout = 4000)
    public void test1272052() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
    }

    @Test(timeout = 4000)
    public void test1272053() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1272054() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1272055() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1272056() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1272057() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1272058() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1272059() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
    }

    @Test(timeout = 4000)
    public void test1272061() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
    }

    @Test(timeout = 4000)
    public void test1272062() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1272063() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1272064() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1272065() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1272066() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1272067() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1272068() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1272069() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1272070() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1272071() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, " 3.(:", 116);
    }

    @Test(timeout = 4000)
    public void test1272072() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, " 3.(:", 116);
        dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1272073() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, " 3.(:", 116);
        dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1272074() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, " 3.(:", 116);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1272075() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, " 3.(:", 116);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1272076() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, " 3.(:", 116);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1272077() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, " 3.(:", 116);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1272078() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, " 3.(:", 116);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1272079() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, " 3.(:", 116);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1272080() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, " 3.(:", 116);
        dateTimeParserBucket0.getOffset();
    }

    @Test(timeout = 4000)
    public void test1272081() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, " 3.(:", 116);
        dateTimeParserBucket0.getOffsetInteger();
    }

    @Test(timeout = 4000)
    public void test1272082() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, " 3.(:", 116);
        dateTimeParserBucket0.getPivotYear();
    }

    @Test(timeout = 4000)
    public void test1282086() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
    }

    @Test(timeout = 4000)
    public void test1282087() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1282088() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1282089() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1282090() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1282091() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        MockFileWriter mockFileWriter0 = new MockFileWriter("TkXj<+", false);
    }

    @Test(timeout = 4000)
    public void test1282092() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        MockFileWriter mockFileWriter0 = new MockFileWriter("TkXj<+", false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
    }

    @Test(timeout = 4000)
    public void test1282094() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        MockFileWriter mockFileWriter0 = new MockFileWriter("TkXj<+", false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);
    }

    @Test(timeout = 4000)
    public void test1282096() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        MockFileWriter mockFileWriter0 = new MockFileWriter("TkXj<+", false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);
        localDateTime0.size();
    }

    @Test(timeout = 4000)
    public void test1282097() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        MockFileWriter mockFileWriter0 = new MockFileWriter("TkXj<+", false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);
        Locale locale0 = Locale.ITALY;
    }

    @Test(timeout = 4000)
    public void test1282098() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        MockFileWriter mockFileWriter0 = new MockFileWriter("TkXj<+", false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);
        Locale locale0 = Locale.ITALY;
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1282099() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        MockFileWriter mockFileWriter0 = new MockFileWriter("TkXj<+", false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);
        Locale locale0 = Locale.ITALY;
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1282100() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        MockFileWriter mockFileWriter0 = new MockFileWriter("TkXj<+", false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);
        Locale locale0 = Locale.ITALY;
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1282101() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        MockFileWriter mockFileWriter0 = new MockFileWriter("TkXj<+", false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);
        Locale locale0 = Locale.ITALY;
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1282102() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        MockFileWriter mockFileWriter0 = new MockFileWriter("TkXj<+", false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);
        Locale locale0 = Locale.ITALY;
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1282103() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 7593750);
        MockFileWriter mockFileWriter0 = new MockFileWriter("TkXj<+", false);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = new LocalDateTime(168L, (Chronology) buddhistChronology0);
        Locale locale0 = Locale.ITALY;
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1292104() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer(3);
    }

    @Test(timeout = 4000)
    public void test1292105() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer(3);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1292106() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer(3);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1292107() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer(3);
        DateTimeFormatterBuilder.appendUnknownString(stringBuffer0, 3);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1292108() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer(3);
        DateTimeFormatterBuilder.appendUnknownString(stringBuffer0, 3);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1302110() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendFractionOfMinute(0, (-76));
    }

    @Test(timeout = 4000)
    public void test1312112() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendShortText((DateTimeFieldType) null);
    }

    @Test(timeout = 4000)
    public void test1322114() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
    }

    @Test(timeout = 4000)
    public void test1322115() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1322116() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1322117() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 0);
    }

    @Test(timeout = 4000)
    public void test1332119() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendFixedSignedDecimal((DateTimeFieldType) null, 259);
    }

    @Test(timeout = 4000)
    public void test1342124() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 60000);
    }

    @Test(timeout = 4000)
    public void test1342127() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 60000);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1342128() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 60000);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1352130() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(1, 1);
    }

    @Test(timeout = 4000)
    public void test1362134() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
    }

    @Test(timeout = 4000)
    public void test1362135() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1362136() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1362137() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
        dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test1372139() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(5, 0);
    }

    @Test(timeout = 4000)
    public void test1382143() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendSignedDecimal((DateTimeFieldType) null, 210, 210);
    }

    @Test(timeout = 4000)
    public void test1392148() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
        dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, (-2123));
    }

    @Test(timeout = 4000)
    public void test1402150() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
    }

    @Test(timeout = 4000)
    public void test1402151() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1402152() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1402153() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 2946);
    }

    @Test(timeout = 4000)
    public void test1402156() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 2946);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1402157() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 2946);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1412159() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendYearOfEra(0, 0);
    }

    @Test(timeout = 4000)
    public void test1422161() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendDecimal((DateTimeFieldType) null, 1, (-2317));
    }

    @Test(timeout = 4000)
    public void test1432163() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral("S");
    }

    @Test(timeout = 4000)
    public void test1442167() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendLiteral((String) null);
    }

    @Test(timeout = 4000)
    public void test1452169() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('4');
    }

    @Test(timeout = 4000)
    public void test1452170() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('4');
        dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1452171() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('4');
        dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1452172() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('4');
        dateTimeFormatterBuilder0.append((DateTimePrinter) null, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
    }

    @Test(timeout = 4000)
    public void test1462174() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.append((DateTimeParser) null);
    }

    @Test(timeout = 4000)
    public void test1472176() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
    }

    @Test(timeout = 4000)
    public void test1472177() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test1472178() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
    }

    @Test(timeout = 4000)
    public void test1472179() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test1472180() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1472181() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1472182() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
        dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
    }

    @Test(timeout = 4000)
    public void test1472186() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
        dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
        linkedList0.size();
    }

    @Test(timeout = 4000)
    public void test1472187() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
        dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1472188() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
        dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1482196() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Composite0, dateTimeParserArray0);
    }

    @Test(timeout = 4000)
    public void test1492198() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.toParser();
    }

    @Test(timeout = 4000)
    public void test1502216() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
    }

    @Test(timeout = 4000)
    public void test1502217() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
    }

    @Test(timeout = 4000)
    public void test1502218() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
    }

    @Test(timeout = 4000)
    public void test1502219() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
    }

    @Test(timeout = 4000)
    public void test1502221() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
        localTime0.size();
    }

    @Test(timeout = 4000)
    public void test1502222() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
    }

    @Test(timeout = 4000)
    public void test1502223() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        dateTimeFieldType0.getName();
    }

    @Test(timeout = 4000)
    public void test1502224() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        dateTimeFieldType0.toString();
    }

    @Test(timeout = 4000)
    public void test1502225() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1502226() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1502227() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1502228() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1502229() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1502230() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        locale0.getVariant();
    }

    @Test(timeout = 4000)
    public void test1502231() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1502232() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        locale0.getLanguage();
    }

    @Test(timeout = 4000)
    public void test1502233() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-480), (-1054));
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        Locale locale0 = Locale.KOREAN;
        MockFileWriter mockFileWriter0 = new MockFileWriter("V*5{`cp )y~EvNag", false);
        BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
        LocalTime localTime0 = LocalTime.fromMillisOfDay((-4644L), (Chronology) copticChronology0);
        dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localTime0, locale0);
        localTime0.size();
    }

    @Test(timeout = 4000)
    public void test1512234() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 214, 214);
        StringBuffer stringBuffer0 = new StringBuffer("V(!E)5");
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1054));
        Locale locale0 = Locale.ITALIAN;
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (-77554L), (Chronology) ethiopicChronology0, 214, dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1512235() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 214, 214);
        StringBuffer stringBuffer0 = new StringBuffer("V(!E)5");
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1054));
        Locale locale0 = Locale.ITALIAN;
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (-77554L), (Chronology) ethiopicChronology0, 214, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1522236() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) null, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1532237() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
        File file0 = MockFile.createTempFile("M{3$}=05OzY.'g", "");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
        Charset charset0 = Charset.defaultCharset();
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
        BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1103);
        dateTimeFormatterBuilder_TextField0.printTo((Writer) mockPrintWriter0, (long) 11, (Chronology) gJChronology0, 12825000, dateTimeZone0, locale0);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1542238() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
        Locale locale0 = Locale.KOREAN;
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
        dateTimeFormatterBuilder_TextField0.printTo((StringBuffer) null, 2787L, (Chronology) islamicChronology0, 57, (DateTimeZone) null, locale0);
    }

    @Test(timeout = 4000)
    public void test1552239() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
        LocalDate localDate0 = new LocalDate(1848L);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        dateTimeFormatter0.printTo((Writer) bufferedWriter0, (ReadablePartial) localDate0);
        dateTimeFormatterBuilder_TextField0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1552240() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
        LocalDate localDate0 = new LocalDate(1848L);
        DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
        dateTimeFormatter0.printTo((Writer) bufferedWriter0, (ReadablePartial) localDate0);
        dateTimeFormatterBuilder_TextField0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1562241() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
        MockFileWriter mockFileWriter0 = new MockFileWriter("ALL_IDS", true);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        Locale locale0 = new Locale("ALL_IDS");
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockFileWriter0, 0L, (Chronology) buddhistChronology0, (-1156), (DateTimeZone) null, locale0);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1572242() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-3647), true);
        Locale locale0 = Locale.JAPAN;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (long) 1, (Chronology) iSOChronology0, (-3647), dateTimeZone0, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1572243() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
        StringBuffer stringBuffer0 = new StringBuffer(85);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(445);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, (-3647), true);
        Locale locale0 = Locale.JAPAN;
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (long) 1, (Chronology) iSOChronology0, (-3647), dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1582244() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        int int0 = dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1582245() throws Throwable {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        int int0 = dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1592246() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.field.DelegatedDurationField");
        StringBuffer stringBuffer0 = new StringBuffer("gfDGNgzrpP$1EB/;/");
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        Locale locale0 = new Locale("org.joda.time.field.DelegatedDurationField");
        dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, 0L, (Chronology) null, 975, dateTimeZone0, locale0);
        locale0.getCountry();
    }

    @Test(timeout = 4000)
    public void test1602247() throws Throwable {
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("Ti>9'kUpyCu");
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        LocalDate localDate0 = new LocalDate(1324L, (Chronology) islamicChronology0);
        Locale locale0 = Locale.CANADA_FRENCH;
        dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) charArrayWriter0, (ReadablePartial) localDate0, locale0);
        locale0.getISO3Country();
    }

    @Test(timeout = 4000)
    public void test1612248() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("S ~uo|");
        dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (ReadablePartial) null, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1622249() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('');
        CharArrayWriter charArrayWriter0 = new CharArrayWriter();
        GJChronology gJChronology0 = GJChronology.getInstance();
        Locale locale0 = Locale.UK;
        Integer integer0 = new Integer(2049);
        DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2337L), gJChronology0, locale0, integer0, (-4));
        DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
        dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) charArrayWriter0, 63158400000L, (Chronology) gJChronology0, (-4), dateTimeZone0, locale0);
        charArrayWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test1632250() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('(');
        MockFile mockFile0 = new MockFile("#oQ&bC(uD) 8[");
        MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDateTime0, locale0);
        locale0.toString();
    }

    @Test(timeout = 4000)
    public void test1642251() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('k');
        StringBuffer stringBuffer0 = new StringBuffer();
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalTime localTime0 = new LocalTime((-2651L), dateTimeZone0);
        Locale locale0 = Locale.FRANCE;
        dateTimeFormatterBuilder_CharacterLiteral0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1652252() throws Throwable {
        DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('6');
        StringBuffer stringBuffer0 = new StringBuffer();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Locale locale0 = Locale.ENGLISH;
        dateTimeFormatterBuilder_CharacterLiteral0.printTo(stringBuffer0, 10000L, (Chronology) iSOChronology0, 7, dateTimeZone0, locale0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test1662253() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer();
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1465), (Map<String, DateTimeZone>) null);
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, 2592000000L, (Chronology) iSOChronology0, 0, (DateTimeZone) null, locale0);
        dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1672254() throws Throwable {
        HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
        DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(28265625, hashMap0);
        GJChronology gJChronology0 = GJChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Object) null, gJChronology0);
        Locale locale0 = Locale.CHINA;
        dateTimeFormatterBuilder_TimeZoneName0.printTo((StringBuffer) null, (ReadablePartial) localDateTime0, locale0);
        locale0.getISO3Language();
    }

    @Test(timeout = 4000)
    public void test1682255() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendClockhourOfDay((-1988));
    }

    @Test(timeout = 4000)
    public void test1692256() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
    }

    @Test(timeout = 4000)
    public void test1702257() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(2946);
    }

    @Test(timeout = 4000)
    public void test1712258() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(16);
    }

    @Test(timeout = 4000)
    public void test1722259() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(5, 431);
    }

    @Test(timeout = 4000)
    public void test1732260() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneOffset("9LwO4!^S6wB", "", false, 574, 574);
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder1.toParser();
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1732261() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneOffset("9LwO4!^S6wB", "", false, 574, 574);
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder1.toParser();
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1742262() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendTimeZoneOffset("f", "pVYM$2rx", false, 719482, (-945));
    }

    @Test(timeout = 4000)
    public void test1752263() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendMillisOfDay((-1));
    }

    @Test(timeout = 4000)
    public void test1762264() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
    }

    @Test(timeout = 4000)
    public void test1772265() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        boolean boolean0 = dateTimeFormatterBuilder0.canBuildPrinter();
    }

    @Test(timeout = 4000)
    public void test1782266() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(574);
    }

    @Test(timeout = 4000)
    public void test1792267() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
    }

    @Test(timeout = 4000)
    public void test1802268() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendSecondOfDay((-286));
    }

    @Test(timeout = 4000)
    public void test1812269() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
    }

    @Test(timeout = 4000)
    public void test1822270() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1822271() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1822272() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 1440);
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1822273() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 1440);
        dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1440, false);
        dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1822274() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 1440);
        dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1440, false);
        dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        dateTimeParserArray0[3] = (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0;
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1822275() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
        DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = (DateTimeFormatterBuilder.UnpaddedNumber) dateTimeFormatterBuilder1.toPrinter();
        DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_Composite0;
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 1440);
        dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
        DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1440, false);
        dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
        DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
        dateTimeParserArray0[3] = (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0;
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_UnpaddedNumber0, dateTimeParserArray0);
        dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1832276() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
    }

    @Test(timeout = 4000)
    public void test1842277() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendPattern("EU[");
    }

    @Test(timeout = 4000)
    public void test1852278() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendDayOfWeekText();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(260, true);
        boolean boolean0 = dateTimeFormatterBuilder1.canBuildParser();
    }

    @Test(timeout = 4000)
    public void test1862279() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendFractionOfDay((-241), (-241));
    }

    @Test(timeout = 4000)
    public void test1872280() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
    }

    @Test(timeout = 4000)
    public void test1882281() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
    }

    @Test(timeout = 4000)
    public void test1892282() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(12825000);
    }

    @Test(timeout = 4000)
    public void test1902283() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 10, 10);
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Fraction0, (DateTimeParser) dateTimeFormatterBuilder_Fraction0);
        dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1902284() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 10, 10);
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_Fraction0, (DateTimeParser) dateTimeFormatterBuilder_Fraction0);
        dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1912285() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.appendCenturyOfEra((-457), (-457));
    }

    @Test(timeout = 4000)
    public void test1922286() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra(5, 574);
    }

    @Test(timeout = 4000)
    public void test1932287() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(0);
    }

    @Test(timeout = 4000)
    public void test1942288() throws Throwable {
        StringBuffer stringBuffer0 = new StringBuffer("V(!E)5");
        Locale locale0 = Locale.ITALIAN;
        DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
        dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (ReadablePartial) null, locale0);
        dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1952289() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
        dateTimeFormatterBuilder1.appendTimeZoneId();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder0.toParser();
        dateTimeFormatterBuilder_Composite0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1952290() throws Throwable {
        DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
        dateTimeFormatterBuilder1.appendTimeZoneId();
        DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite) dateTimeFormatterBuilder0.toParser();
        dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
    }

    @Test(timeout = 4000)
    public void test1962291() throws Throwable {
        DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "U=J", true, 44, 1584);
        StringBuffer stringBuffer0 = new StringBuffer(0);
        LocalDateTime localDateTime0 = new LocalDateTime();
        Locale locale0 = Locale.forLanguageTag("");
        dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
        dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
    }

    @Test(timeout = 4000)
    public void test1972292() throws Throwable {
        Instant instant0 = null;
        instant0 = new Instant("kFdI~^pqIY}sv");
    }

    @Test(timeout = 4000)
    public void test1982293() throws Throwable {
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber((DateTimeFieldType) null, 162, true, (-2317));
        StringBuffer stringBuffer0 = new StringBuffer(0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, 1000000000000000L, (Chronology) buddhistChronology0, 162, (DateTimeZone) null, locale0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test1982294() throws Throwable {
        DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber((DateTimeFieldType) null, 162, true, (-2317));
        StringBuffer stringBuffer0 = new StringBuffer(0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        Locale locale0 = Locale.US;
        dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, 1000000000000000L, (Chronology) buddhistChronology0, 162, (DateTimeZone) null, locale0);
        dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
    }
}
