/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 11:42:50 GMT 2023
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Partial;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Partial_ESTest extends Partial_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
        int[] intArray0 = new int[1];
        Partial partial0 = null;
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Partial partial0 = new Partial();
        partial0.size();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Partial partial0 = new Partial();
        Minutes minutes0 = Minutes.minutes(20);
        Weeks weeks0 = minutes0.toStandardWeeks();
        Partial partial1 = partial0.plus(weeks0);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Partial partial0 = new Partial();
        Minutes minutes0 = Minutes.minutes(20);
        Weeks weeks0 = minutes0.toStandardWeeks();
        Partial partial1 = partial0.plus(weeks0);
        partial1.equals((Object) partial0);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 23);
        Partial partial1 = partial0.without(dateTimeFieldType0);
        partial1.size();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        Partial partial1 = partial0.withField(dateTimeFieldType0, 0);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Partial partial0 = new Partial();
        Partial partial1 = partial0.minus((ReadablePeriod) null);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        LocalTime localTime0 = new LocalTime(0L);
        Partial partial0 = new Partial(localTime0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
        Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
        partial_Property0.setCopy("");
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        int[] intArray0 = new int[6];
        Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
        Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
        int int0 = partial_Property0.get();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        int[] intArray0 = new int[6];
        Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
        Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
        partial_Property0.addWrapFieldToCopy((-620));
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
        Partial partial1 = partial_Property0.withMaximumValue();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        Partial partial0 = new Partial(dateTimeFieldType0, (-766));
        Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
        Partial partial1 = partial_Property0.getPartial();
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
        int[] intArray0 = new int[4];
        Partial partial0 = new Partial(julianChronology0, (DateTimeFieldType[]) null, intArray0);
        Partial.Property partial_Property0 = new Partial.Property(partial0, 1273);
        partial_Property0.addToCopy(1718);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        LocalDateTime localDateTime0 = LocalDateTime.now();
        Partial partial0 = new Partial(localDateTime0);
        Partial.Property partial_Property0 = new Partial.Property(partial0, 1);
        Partial partial1 = partial_Property0.withMinimumValue();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Partial partial0 = null;
        partial0 = new Partial((DateTimeFieldType) null, (-101));
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        int[] intArray0 = new int[0];
        Partial partial0 = null;
        partial0 = new Partial((DateTimeFieldType[]) null, intArray0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
        Partial partial0 = null;
        partial0 = new Partial(dateTimeFieldTypeArray0, (int[]) null, lenientChronology0);
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
        int[] intArray0 = new int[0];
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(35);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        Partial partial0 = null;
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, ethiopicChronology0);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
        int[] intArray0 = new int[0];
        Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, iSOChronology0);
        partial0.size();
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 23);
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
        partial0.with(dateTimeFieldType1, 23);
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 23);
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfEra();
        Partial partial1 = partial0.with(dateTimeFieldType1, 23);
        partial1.size();
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
        int[] intArray0 = new int[5];
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        Partial partial0 = null;
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, copticChronology0);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
        dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
        dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
        int[] intArray0 = new int[4];
        Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
        DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.halfdayOfDay();
        partial0.with(dateTimeFieldType2, 1);
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
        partial0.with(dateTimeFieldType1, 255);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
        dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
        dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
        dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[2];
        dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[2];
        dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
        dateTimeFieldTypeArray0[7] = dateTimeFieldTypeArray0[4];
        int[] intArray0 = new int[8];
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
        Partial partial0 = null;
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, islamicChronology0);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        Partial partial0 = null;
        partial0 = new Partial((ReadablePartial) null);
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        Partial partial0 = new Partial();
        GJChronology gJChronology0 = GJChronology.getInstance();
        Partial partial1 = partial0.withChronologyRetainFields(gJChronology0);
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Partial partial1 = partial0.withChronologyRetainFields(iSOChronology0);
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        Partial partial0 = new Partial();
        partial0.with((DateTimeFieldType) null, 256);
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        Partial partial1 = partial0.with(dateTimeFieldType0, 0);
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        partial0.with(dateTimeFieldType0, 1375);
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfMonth();
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (-1L), 2);
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        int[] intArray0 = new int[2];
        Partial partial0 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
        partial0.with(dateTimeFieldType1, (-460));
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
        Partial partial0 = new Partial(dateTimeFieldType0, 8);
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
        Partial partial1 = partial0.with(dateTimeFieldType1, 8);
        partial1.size();
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        Partial partial1 = partial0.with(dateTimeFieldType0, 37);
        partial1.size();
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        Partial partial0 = new Partial();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
        Partial partial1 = partial0.without(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        partial0.withField(dateTimeFieldType0, (-3596));
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        int[] intArray0 = new int[0];
        Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        partial0.withFieldAdded(durationFieldType0, 333);
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
        Partial partial1 = partial0.withFieldAdded(durationFieldType0, 0);
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
        DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
        dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
        DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
        int[] intArray0 = new int[9];
        DurationFieldType durationFieldType0 = dateTimeFieldType1.getRangeDurationType();
        Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
        Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 0);
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Hours hours0 = Hours.FIVE;
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        Partial partial1 = partial0.withPeriodAdded(hours0, 0);
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);
        Partial partial0 = new Partial(localDateTime0);
        Days days0 = Days.SEVEN;
        Partial partial1 = partial0.withPeriodAdded(days0, 1);
        partial1.equals((Object) partial0);
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);
        Partial partial0 = new Partial(localDateTime0);
        Days days0 = Days.SEVEN;
        Partial partial1 = partial0.withPeriodAdded(days0, 1);
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        Instant instant0 = new Instant();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
        Partial partial0 = new Partial(dateTimeFieldType0, 8, (Chronology) null);
        boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
    }

    @Test(timeout = 4000)
    public void test4144() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 8);
        Instant instant0 = new Instant();
        boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
    }

    @Test(timeout = 4000)
    public void test4245() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 15);
        boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
    }

    @Test(timeout = 4000)
    public void test4346() throws Throwable {
        Partial partial0 = new Partial();
        partial0.isMatch((ReadablePartial) null);
    }

    @Test(timeout = 4000)
    public void test4447() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
        Partial partial0 = new Partial(dateTimeFieldType0, 91);
        LocalDate localDate0 = new LocalDate();
        boolean boolean0 = partial0.isMatch((ReadablePartial) localDate0);
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        Locale locale0 = Locale.CANADA_FRENCH;
        partial0.toString((String) null, locale0);
        DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        Partial partial0 = new Partial();
        String string0 = partial0.toString((String) null);
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);
        Partial partial0 = new Partial(localDateTime0);
        Locale locale0 = Locale.CANADA_FRENCH;
        String string0 = partial0.toString((String) null, locale0);
    }

    @Test(timeout = 4000)
    public void test4851() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        Partial partial0 = new Partial(dateTimeFieldType0, 1647);
        String string0 = partial0.toString();
    }

    @Test(timeout = 4000)
    public void test4952() throws Throwable {
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        Partial partial0 = new Partial(dateTimeFieldType0, 0);
        Locale locale0 = Locale.UK;
        partial0.toString((String) null, locale0);
        String string0 = partial0.toString();
    }

    @Test(timeout = 4000)
    public void test5053() throws Throwable {
        Partial partial0 = new Partial();
        partial0.toString("Vh|w2kb2{.\"W9");
    }

    @Test(timeout = 4000)
    public void test5154() throws Throwable {
        Partial partial0 = new Partial();
        Locale locale0 = Locale.CANADA_FRENCH;
        partial0.toString("A0P", locale0);
    }
}
