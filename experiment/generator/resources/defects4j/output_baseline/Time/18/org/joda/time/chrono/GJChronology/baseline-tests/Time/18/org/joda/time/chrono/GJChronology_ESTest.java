/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 02:08:00 GMT 2023
 */
package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
        int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-1585L), (-12219292800000L));
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
        int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, (-1585L), (-12219292800000L));
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);
        DateMidnight dateMidnight1 = dateMidnight0.plusDays((-292275054));
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight1);
        String string0 = gJChronology0.toString();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        GJChronology.getInstance(dateTimeZone0, (-25252563974399000L), 1109);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
        gJChronology0.assemble(assembledChronology_Fields0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.julianToGregorianByYear(15778800000L);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.julianToGregorianByYear(15778800000L);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.julianToGregorianByWeekyear(30589264004L);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.julianToGregorianByWeekyear(30589264004L);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.gregorianToJulianByYear((-113825952000000L));
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.gregorianToJulianByYear((-113825952000000L));
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        long long0 = gJChronology0.gregorianToJulianByWeekyear((-1209604186L));
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        long long0 = gJChronology0.gregorianToJulianByWeekyear((-1209604186L));
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 168L, 1);
        Instant instant0 = gJChronology0.getGregorianCutover();
        instant0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 168L, 1);
        Instant instant0 = gJChronology0.getGregorianCutover();
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        Instant instant0 = Instant.now();
        DateTimeZone dateTimeZone0 = instant0.getZone();
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 400);
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        gJChronology0.assemble((AssembledChronology.Fields) null);
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        LocalDate localDate0 = new LocalDate((long) 1);
        long long0 = buddhistChronology0.set(localDate0, (-57358001L));
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        gJChronology0.getDateTimeMillis(12, 1136, (-4851), 3449, 1750, (-4851), 12);
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        long long0 = gJChronology0.getDateTimeMillis(2, 5, 1, 2);
    }

    @Test(timeout = 4000)
    public void test1320() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        long long0 = gJChronology0.getDateTimeMillis(2, 5, 1, 2);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        GJChronology gJChronology1 = GJChronology.getInstance();
        DateTimeZone dateTimeZone0 = gJChronology1.getZone();
        Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 2);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, 0L, 2);
        GJChronology gJChronology1 = (GJChronology) gJChronology0.withZone(dateTimeZone0);
        gJChronology1.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, 1);
        DateTimeZone.forID("cKI+| >S2");
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
        gJChronology0.getGregorianCutover();
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();
    }

    @Test(timeout = 4000)
    public void test1826() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        GJChronology gJChronology1 = (GJChronology) gJChronology0.withUTC();
        gJChronology1.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test1927() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-150));
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
        int int0 = gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2028() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Duration duration0 = Duration.standardMinutes((-463));
        Instant instant0 = GJChronology.DEFAULT_CUTOVER;
        DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
        Period period0 = new Period(354, 354, 354, 354);
        DateTime dateTime1 = dateTime0.withPeriodAdded(period0, (-1637));
        MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, dateTime1);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Months months0 = Months.NINE;
        int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-12219292800000L), 31449600000L);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2130() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Months months0 = Months.NINE;
        int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-12219292800000L), 31449600000L);
    }

    @Test(timeout = 4000)
    public void test2231() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Months months0 = Months.ZERO;
        int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) 499, (-25252563974400000L));
    }

    @Test(timeout = 4000)
    public void test2232() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Months months0 = Months.ZERO;
        int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (long) 499, (-25252563974400000L));
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2333() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);
        DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);
        DateMidnight dateMidnight2 = dateMidnight1.plusDays((-292275054));
        DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
        DateMidnight dateMidnight3 = dateMidnight2.withFieldAdded(durationFieldType0, 1);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2334() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);
        DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);
        DateMidnight dateMidnight2 = dateMidnight1.plusDays((-292275054));
        DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
        DateMidnight dateMidnight3 = dateMidnight2.withFieldAdded(durationFieldType0, 1);
        dateMidnight3.getMillis();
    }

    @Test(timeout = 4000)
    public void test2435() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
        dateTime0.withWeekyear((-541));
    }

    @Test(timeout = 4000)
    public void test2536() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0, 1);
        String string0 = gJChronology0.toString();
    }

    @Test(timeout = 4000)
    public void test2637() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        String string0 = gJChronology0.toString();
    }

    @Test(timeout = 4000)
    public void test2738() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.getDateTimeMillis(123, 3, 3, 15, 3, 3, 0);
    }

    @Test(timeout = 4000)
    public void test2739() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.getDateTimeMillis(123, 3, 3, 15, 3, 3, 0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test2840() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
        long long0 = gJChronology0.getDateTimeMillis(2, 2, 1, 2);
    }

    @Test(timeout = 4000)
    public void test2941() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        GJChronology gJChronology1 = (GJChronology) gJChronology0.withZone((DateTimeZone) null);
        gJChronology1.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3042() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 1);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3143() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        DateMidnight dateMidnight0 = new DateMidnight(1123200004L, dateTimeZone0);
        DateMidnight dateMidnight1 = dateMidnight0.withChronology(gJChronology0);
        DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
        DateMidnight dateMidnight2 = dateMidnight1.withFieldAdded(durationFieldType0, 1);
        dateMidnight2.getMillis();
    }

    @Test(timeout = 4000)
    public void test3244() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Months months0 = Months.EIGHT;
        long long0 = gJChronology0.add((ReadablePeriod) months0, (-1L), 1136);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3245() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        Months months0 = Months.EIGHT;
        long long0 = gJChronology0.add((ReadablePeriod) months0, (-1L), 1136);
    }

    @Test(timeout = 4000)
    public void test3346() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        YearMonth yearMonth0 = new YearMonth(5154L, (Chronology) gJChronology0);
        Interval interval0 = yearMonth0.toInterval();
        Months months0 = Months.monthsIn(interval0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3347() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        YearMonth yearMonth0 = new YearMonth(5154L, (Chronology) gJChronology0);
        Interval interval0 = yearMonth0.toInterval();
        Months months0 = Months.monthsIn(interval0);
        interval0.getEndMillis();
    }

    @Test(timeout = 4000)
    public void test3348() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        YearMonth yearMonth0 = new YearMonth(5154L, (Chronology) gJChronology0);
        Interval interval0 = yearMonth0.toInterval();
        Months months0 = Months.monthsIn(interval0);
        months0.getMonths();
    }

    @Test(timeout = 4000)
    public void test3449() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);
        PeriodType periodType0 = PeriodType.standard();
        Period period0 = new Period(15356250, 15356250, 4221, (-649), (-649), (-649), (-3611), 0, periodType0);
        Partial partial1 = partial0.withPeriodAdded(period0, (-649));
        partial1.equals((Object) partial0);
    }

    @Test(timeout = 4000)
    public void test3450() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
        Partial partial0 = new Partial(dateTimeFieldType0, 1, gJChronology0);
        PeriodType periodType0 = PeriodType.standard();
        Period period0 = new Period(15356250, 15356250, 4221, (-649), (-649), (-649), (-3611), 0, periodType0);
        Partial partial1 = partial0.withPeriodAdded(period0, (-649));
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3551() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        int int0 = 3499;
        int int1 = 499;
        gJChronology0.getZone();
        int[] intArray0 = new int[7];
        GJChronology.getInstanceUTC();
        intArray0[1] = 3499;
        intArray0[2] = 3499;
        intArray0[3] = 499;
        intArray0[4] = 3499;
        intArray0[5] = 3499;
        intArray0[6] = 3499;
        LocalDateTime localDateTime0 = new LocalDateTime((-454L));
        LocalDateTime localDateTime1 = localDateTime0.minusMinutes(3499);
        localDateTime1.getEra();
        gJChronology0.set(localDateTime1, (-79271568000000L));
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        Chronology chronology0 = lenientChronology0.withUTC();
        DateTime dateTime0 = new DateTime(1, 479, 3499, (-1070), 60, 2400, (-3134), chronology0);
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
        gJChronology0.getDateTimeMillis(3499, 3499, 499, 499, 0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test3652() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        gJChronology0.getZone();
        DateMidnight dateMidnight0 = new DateMidnight((-674L), dateTimeZone0);
        dateMidnight0.isEqual((-674L));
        dateTimeZone0.equals(dateMidnight0);
        GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0, 4);
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);
        Period period0 = Period.millis(4);
        gJChronology1.gregorianToJulianByWeekyear(4);
        Period.minutes(23118750);
        period0.withDays(4);
        period0.getHours();
        gJChronology1.toString();
        dateTimeZone0.adjustOffset((-5528L), false);
        gJChronology1.gregorianToJulianByYear(1351L);
        gJChronology1.getDateTimeMillis((-1), (-333), 4, (-2135));
    }

    @Test(timeout = 4000)
    public void test3753() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.julianToGregorianByYear(732L);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3754() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        long long0 = gJChronology0.julianToGregorianByYear(732L);
    }

    @Test(timeout = 4000)
    public void test3855() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        gJChronology0.hashCode();
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test3956() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(508);
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
        gJChronology0.equals(dateTimeZone0);
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test4057() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        long long0 = gJChronology0.julianToGregorianByWeekyear((-4186L));
        gJChronology0.getMinimumDaysInFirstWeek();
    }

    @Test(timeout = 4000)
    public void test4058() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        long long0 = gJChronology0.julianToGregorianByWeekyear((-4186L));
    }
}
