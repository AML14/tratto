/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 00:35:55 GMT 2023
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MutableDateTime_ESTest extends MutableDateTime_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setDateTime(0, 0, (-1302), 5, (-1794), (-134), 2735);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
        mutableDateTime0.setDateTime(1, (-529), 4, 1, 0, 2892, 0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.addSeconds(0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.addMinutes((-1886));
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) buddhistChronology0);
        mutableDateTime0.addDays(1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime((-373L));
        mutableDateTime0.addMonths(1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Instant instant0 = gJChronology0.getGregorianCutover();
        MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
        mutableDateTime0.addWeekyears(3);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setWeekyear(3230);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2558);
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
        Locale locale0 = Locale.PRC;
        mutableDateTime_Property0.set("", locale0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
        long long0 = mutableDateTime_Property0.getMillis();
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((-1L), (Chronology) gJChronology0);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
        DateTimeField dateTimeField0 = mutableDateTime_Property0.getField();
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
        Chronology chronology0 = lenientChronology0.withZone(dateTimeZone1);
        MutableDateTime mutableDateTime0 = new MutableDateTime((-172L), chronology0);
        mutableDateTime0.setZoneRetainFields(dateTimeZone1);
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);
        mutableDateTime0.setTime(1, 1, 1, 1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setSecondOfDay(2247);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
        mutableDateTime0.setMonthOfYear(4);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) buddhistChronology0);
        mutableDateTime0.setDayOfMonth(1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test01617() throws Throwable {
        DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
        DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
        doReturn(236).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter1);
    }

    @Test(timeout = 4000)
    public void test01718() throws Throwable {
        DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
        DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(10125000);
        DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test01819() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("2014-02-17T08:00:00.000Z");
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test01920() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        doReturn((-1823L)).when(dateTimeUtils_MillisProvider0).getMillis();
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test02021() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) copticChronology0);
    }

    @Test(timeout = 4000)
    public void test02122() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 2);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        doReturn((long) 0, (-1L)).when(dateTimeUtils_MillisProvider0).getMillis();
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        MutableDateTime.now(dateTimeZone0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) copticChronology0);
    }

    @Test(timeout = 4000)
    public void test02223() throws Throwable {
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
    }

    @Test(timeout = 4000)
    public void test02324() throws Throwable {
        DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
        doReturn((-442L)).when(dateTimeUtils_MillisProvider0).getMillis();
        DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.getRoundingMode();
    }

    @Test(timeout = 4000)
    public void test02425() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
        mutableDateTime0.setRounding(dateTimeField0, 3);
        mutableDateTime0.getRoundingField();
        mutableDateTime0.getRoundingMode();
    }

    @Test(timeout = 4000)
    public void test02526() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
        OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
        mutableDateTime0.setRounding((DateTimeField) offsetDateTimeField0, 1);
        mutableDateTime0.copy();
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test02627() throws Throwable {
        System.setCurrentTimeMillis(0L);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
        MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
    }

    @Test(timeout = 4000)
    public void test02728() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setYear(352831696);
    }

    @Test(timeout = 4000)
    public void test02829() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setWeekOfWeekyear(317);
    }

    @Test(timeout = 4000)
    public void test02930() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        mutableDateTime0.setSecondOfMinute((-23));
    }

    @Test(timeout = 4000)
    public void test03031() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 5);
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("-473");
        mutableDateTime0.setRounding((DateTimeField) dividedDateTimeField0, 3);
    }

    @Test(timeout = 4000)
    public void test03132() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setMinuteOfHour(1257);
    }

    @Test(timeout = 4000)
    public void test03233() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        mutableDateTime0.setMinuteOfDay((-395));
    }

    @Test(timeout = 4000)
    public void test03334() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setMillisOfSecond((-3015));
    }

    @Test(timeout = 4000)
    public void test03435() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setMillisOfDay((-3739));
    }

    @Test(timeout = 4000)
    public void test03536() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setHourOfDay(119);
    }

    @Test(timeout = 4000)
    public void test03637() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setDayOfYear(0);
    }

    @Test(timeout = 4000)
    public void test03738() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setDayOfWeek(7678125);
    }

    @Test(timeout = 4000)
    public void test03839() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) islamicChronology0);
        MutableDateTime mutableDateTime2 = MutableDateTime.parse("-473");
        mutableDateTime1.setDate((ReadableInstant) mutableDateTime2);
    }

    @Test(timeout = 4000)
    public void test03940() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        mutableDateTime0.setDate(292272984, 20, 5);
    }

    @Test(timeout = 4000)
    public void test04041() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
        mutableDateTime0.set(dateTimeFieldType0, (-3650));
    }

    @Test(timeout = 4000)
    public void test04142() throws Throwable {
        DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
        MutableDateTime.parse("Field must not be null", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test04243() throws Throwable {
        MutableDateTime.parse("", (DateTimeFormatter) null);
    }

    @Test(timeout = 4000)
    public void test04344() throws Throwable {
        DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
        DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
        MutableDateTime.parse(";2=yI7!", dateTimeFormatter0);
    }

    @Test(timeout = 4000)
    public void test04445() throws Throwable {
        MutableDateTime.parse((String) null);
    }

    @Test(timeout = 4000)
    public void test04546() throws Throwable {
        MutableDateTime.parse("");
    }

    @Test(timeout = 4000)
    public void test04647() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
        DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
        mutableDateTime0.add(durationFieldType0, (-3966));
    }

    @Test(timeout = 4000)
    public void test04748() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        MutableDateTime mutableDateTime0 = null;
        mutableDateTime0 = new MutableDateTime(gregorianChronology0, gregorianChronology0);
    }

    @Test(timeout = 4000)
    public void test04849() throws Throwable {
        MutableDateTime mutableDateTime0 = null;
        mutableDateTime0 = new MutableDateTime(58, 2034, 2034, 0, 64, (-2939), 0);
    }

    @Test(timeout = 4000)
    public void test04950() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
        Period period0 = Period.weeks((-1140));
        mutableDateTime0.add((ReadablePeriod) period0, 0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test05051() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));
        Duration duration0 = new Duration(0L, 3);
        mutableDateTime0.add((ReadableDuration) duration0, 5);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test05152() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Instant instant0 = gJChronology0.getGregorianCutover();
        MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
        mutableDateTime0.setMillis((long) 60000);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test05253() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test05354() throws Throwable {
        DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
        DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class), anyString(), anyInt());
        DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
        MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
        mutableDateTime0.addMillis((-804));
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test05455() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
        MutableDateTime mutableDateTime0 = new MutableDateTime(1899, 536, 1093, (-3307), (-606), 1, 722, lenientChronology0);
    }

    @Test(timeout = 4000)
    public void test05556() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
        mutableDateTime0.setWeekyear(0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test05657() throws Throwable {
        Instant instant0 = new Instant();
        MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
        mutableDateTime0.add(1968L);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test05758() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MutableDateTime mutableDateTime0 = new MutableDateTime(5, 4, 1, 3, 0, 0, 4, fixedDateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test05859() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
        mutableDateTime0.property((DateTimeFieldType) null);
    }

    @Test(timeout = 4000)
    public void test05960() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
    }

    @Test(timeout = 4000)
    public void test06061() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setTime((ReadableInstant) null);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test06162() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setDate((ReadableInstant) mutableDateTime0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test06263() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setDate((ReadableInstant) null);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test06364() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime(1193L, (Chronology) buddhistChronology0);
        mutableDateTime0.add((DurationFieldType) null, 4);
    }

    @Test(timeout = 4000)
    public void test06465() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
        mutableDateTime0.add(durationFieldType0, 1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test06566() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.set((DateTimeFieldType) null, 0);
    }

    @Test(timeout = 4000)
    public void test06667() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
        mutableDateTime0.set(dateTimeFieldType0, 24);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test06768() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 2);
        CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
        MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) copticChronology0);
        mutableDateTime1.setZoneRetainFields((DateTimeZone) null);
        mutableDateTime1.getMillis();
    }

    @Test(timeout = 4000)
    public void test06869() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(5, 4);
        mutableDateTime0.setZone(dateTimeZone0);
        mutableDateTime0.setZoneRetainFields(dateTimeZone0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test06970() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        mutableDateTime0.setZone(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test07071() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        mutableDateTime0.add((ReadablePeriod) null, 1);
    }

    @Test(timeout = 4000)
    public void test07172() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
        mutableDateTime0.add((ReadableDuration) null, 3346);
    }

    @Test(timeout = 4000)
    public void test07273() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Instant instant0 = gJChronology0.getGregorianCutover();
        MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
        DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, buddhistChronology0);
        mutableDateTime0.setRounding(dateTimeField1, 5);
        mutableDateTime0.getRoundingMode();
    }

    @Test(timeout = 4000)
    public void test07374() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
        mutableDateTime0.setRounding(dateTimeField0, 4);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test07475() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gregorianChronology0);
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
        MillisDurationField millisDurationField0 = (MillisDurationField) MillisDurationField.INSTANCE;
        DurationFieldType durationFieldType0 = DurationFieldType.days();
        DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(millisDurationField0, durationFieldType0);
        ScaledDurationField scaledDurationField0 = new ScaledDurationField(decoratedDurationField0, durationFieldType0, (-984));
        UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, scaledDurationField0);
        mutableDateTime0.setRounding((DateTimeField) unsupportedDateTimeField0, 3);
    }

    @Test(timeout = 4000)
    public void test07576() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
        mutableDateTime0.setRounding(dateTimeField0, 2);
        mutableDateTime0.setMillis((long) 4);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test07677() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
        mutableDateTime0.setRounding(dateTimeField0, 0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test07678() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
        mutableDateTime0.setRounding(dateTimeField0, 0);
        mutableDateTime0.getRoundingMode();
    }

    @Test(timeout = 4000)
    public void test07779() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 5);
        mutableDateTime0.setRounding((DateTimeField) dividedDateTimeField0, 6);
    }

    @Test(timeout = 4000)
    public void test07880() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
        DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
        mutableDateTime0.setRounding(dateTimeField0, (-901));
    }

    @Test(timeout = 4000)
    public void test07981() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
        mutableDateTime0.setRounding((DateTimeField) null, (-1703));
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test07982() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
        mutableDateTime0.setRounding((DateTimeField) null, (-1703));
        mutableDateTime0.getRoundingMode();
    }

    @Test(timeout = 4000)
    public void test08083() throws Throwable {
        MutableDateTime.now((Chronology) null);
    }

    @Test(timeout = 4000)
    public void test08184() throws Throwable {
        MutableDateTime.now((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test08285() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
    }

    @Test(timeout = 4000)
    public void test08386() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Instant instant0 = gJChronology0.getGregorianCutover();
        MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
    }

    @Test(timeout = 4000)
    public void test08487() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
    }

    @Test(timeout = 4000)
    public void test08588() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setMinuteOfHour(2);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test08689() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));
        mutableDateTime0.addWeeks((-1269));
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test08790() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        MutableDateTime mutableDateTime0 = null;
        mutableDateTime0 = new MutableDateTime(7678125, 7678125, 7678125, 7678125, 2180, 2180, 7678125, islamicChronology0);
    }

    @Test(timeout = 4000)
    public void test08891() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.addMonths(0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test08992() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        mutableDateTime0.setMillis((ReadableInstant) mutableDateTime0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test09093() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
        mutableDateTime0.setWeekOfWeekyear(1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test09194() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Instant instant0 = gJChronology0.getGregorianCutover();
        MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
        mutableDateTime0.setMonthOfYear(60000);
    }

    @Test(timeout = 4000)
    public void test09295() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
    }

    @Test(timeout = 4000)
    public void test09396() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        MutableDateTime mutableDateTime0 = null;
        mutableDateTime0 = new MutableDateTime(copticChronology0, dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test09497() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
    }

    @Test(timeout = 4000)
    public void test09598() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime((-1399L));
        MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
    }

    @Test(timeout = 4000)
    public void test09699() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        mutableDateTime0.setDayOfYear(5);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test097100() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        Duration duration0 = Duration.standardMinutes((-549L));
        mutableDateTime0.add((ReadableDuration) duration0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test098101() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
    }

    @Test(timeout = 4000)
    public void test099102() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        mutableDateTime0.setTime((long) 0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test100103() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setHourOfDay(2);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test101104() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
        mutableDateTime0.setMillisOfSecond(143);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test102105() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
        String string0 = mutableDateTime0.toString();
    }

    @Test(timeout = 4000)
    public void test103106() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
        mutableDateTime0.setMillisOfDay(2670);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test104107() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(4294967295L);
        mutableDateTime0.setDayOfMonth(1947);
    }

    @Test(timeout = 4000)
    public void test105108() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        int int0 = mutableDateTime0.getRoundingMode();
    }

    @Test(timeout = 4000)
    public void test106109() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
        mutableDateTime0.setDayOfWeek(4);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test107110() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
    }

    @Test(timeout = 4000)
    public void test108111() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        mutableDateTime0.setSecondOfMinute(0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test109112() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        mutableDateTime0.setMinuteOfDay(0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test110113() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        mutableDateTime0.setDate(5, 2, 4);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test111114() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
        MutableDateTime mutableDateTime0 = null;
        mutableDateTime0 = new MutableDateTime(0, 4, 4, 0, 23118750, 0, 0, dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test112115() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.addSeconds(1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test113116() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(2, 1, 5, 1, 5, 1, 1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test114117() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, (Chronology) null);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test115118() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.addHours((-553));
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test116119() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
    }

    @Test(timeout = 4000)
    public void test117120() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        Minutes minutes0 = Minutes.ZERO;
        mutableDateTime0.add((ReadablePeriod) minutes0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test118121() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
    }

    @Test(timeout = 4000)
    public void test119122() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(12);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        mutableDateTime0.setWeekyear(0);
    }

    @Test(timeout = 4000)
    public void test120123() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.addYears(529);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test121124() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        MutableDateTime mutableDateTime1 = (MutableDateTime) mutableDateTime0.clone();
    }

    @Test(timeout = 4000)
    public void test122125() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        mutableDateTime0.setDate(0L);
    }

    @Test(timeout = 4000)
    public void test123126() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime();
        mutableDateTime0.setTime(5, 4, 124, 0);
    }

    @Test(timeout = 4000)
    public void test124127() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
    }

    @Test(timeout = 4000)
    public void test125128() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        DateTimeField dateTimeField0 = mutableDateTime0.getRoundingField();
    }

    @Test(timeout = 4000)
    public void test126129() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
    }

    @Test(timeout = 4000)
    public void test127130() throws Throwable {
        MutableDateTime mutableDateTime0 = null;
        mutableDateTime0 = new MutableDateTime("(.s>>e");
    }

    @Test(timeout = 4000)
    public void test128131() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.addDays(0);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test129132() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        mutableDateTime0.setChronology(islamicChronology0);
    }

    @Test(timeout = 4000)
    public void test130133() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
        mutableDateTime0.setRounding(dateTimeField0);
        int int0 = mutableDateTime0.getRoundingMode();
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test130134() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((-52L), (Chronology) islamicChronology0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
        mutableDateTime0.setRounding(dateTimeField0);
        int int0 = mutableDateTime0.getRoundingMode();
    }

    @Test(timeout = 4000)
    public void test131135() throws Throwable {
        MutableDateTime mutableDateTime0 = MutableDateTime.now();
        mutableDateTime0.setYear(529);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test132136() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
        mutableDateTime0.setSecondOfDay(5062500);
    }

    @Test(timeout = 4000)
    public void test133137() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Instant instant0 = gJChronology0.getGregorianCutover();
        MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
        mutableDateTime0.addWeekyears(1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test134138() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
        MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfCeiling();
    }

    @Test(timeout = 4000)
    public void test135139() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
        DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
        DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 5);
        MutableDateTime.Property mutableDateTime_Property0 = new MutableDateTime.Property(mutableDateTime0, dividedDateTimeField0);
        mutableDateTime_Property0.addWrapField(1);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test136140() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
        MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfFloor();
    }

    @Test(timeout = 4000)
    public void test137141() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
        mutableDateTime_Property0.add((long) 4);
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test138142() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
        MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set(0);
        mutableDateTime1.getMillis();
    }

    @Test(timeout = 4000)
    public void test139143() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
        mutableDateTime_Property0.add((-3169));
        mutableDateTime0.getMillis();
    }

    @Test(timeout = 4000)
    public void test140144() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
        MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) islamicChronology0);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
        mutableDateTime_Property0.set("~6;u``3");
    }

    @Test(timeout = 4000)
    public void test141145() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfEra();
        Chronology chronology0 = mutableDateTime_Property0.getChronology();
    }

    @Test(timeout = 4000)
    public void test142146() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
        MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundFloor();
        mutableDateTime1.getMillis();
    }

    @Test(timeout = 4000)
    public void test143147() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
        MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundCeiling();
    }

    @Test(timeout = 4000)
    public void test144148() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
        MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
    }

    @Test(timeout = 4000)
    public void test145149() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(4294967295L);
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();
        mutableDateTime_Property0.roundHalfEven();
        mutableDateTime0.getMillis();
    }
}
