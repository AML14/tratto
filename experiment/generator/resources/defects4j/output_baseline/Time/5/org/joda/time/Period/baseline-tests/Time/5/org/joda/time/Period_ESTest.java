/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 00:39:56 GMT 2023
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Period_ESTest extends Period_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        PeriodType periodType0 = PeriodType.months();
        Period period0 = Period.days(12);
        Period period1 = period0.minusMonths(83);
        period1.normalizedStandard(periodType0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Period period0 = Period.minutes(648);
        Period period1 = period0.plusDays((-2241));
        Duration duration0 = period1.toStandardDuration();
        duration0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Period period0 = Period.hours(98);
        Duration duration0 = period0.toStandardDuration();
        duration0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Period period0 = Period.minutes(648);
        Duration duration0 = period0.toStandardDuration();
        duration0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Period period0 = new Period();
        Period period1 = period0.plusSeconds(2527);
        Duration duration0 = period1.toStandardDuration();
        duration0.getMillis();
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        Period period0 = Period.weeks(758);
        Seconds seconds0 = period0.toStandardSeconds();
        seconds0.getSeconds();
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Period period0 = Period.weeks(648);
        Minutes minutes0 = period0.toStandardMinutes();
        minutes0.getMinutes();
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        PeriodType periodType0 = PeriodType.yearDayTime();
        Period period0 = new Period((-4294967296L), periodType0);
        Minutes minutes0 = period0.toStandardMinutes();
        minutes0.getMinutes();
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Period period0 = new Period((Object) null, iSOChronology0);
        Period period1 = period0.minusMinutes(30);
        Days days0 = period1.toStandardDays();
        days0.getDays();
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Period period0 = new Period((Object) null, iSOChronology0);
        Period period1 = period0.minusMinutes(30);
        Days days0 = period1.toStandardDays();
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        Period period0 = new Period();
        Period period1 = period0.plusDays(2527);
        Period period2 = period1.plusSeconds(2527);
        Weeks weeks0 = period2.toStandardWeeks();
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        Period period0 = new Period();
        Period period1 = period0.plusDays(2527);
        Period period2 = period1.plusSeconds(2527);
        Weeks weeks0 = period2.toStandardWeeks();
        weeks0.getWeeks();
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        Duration duration0 = Duration.standardMinutes(1000L);
        Period period0 = duration0.toPeriod();
        Weeks weeks0 = period0.toStandardWeeks();
        weeks0.getWeeks();
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        LocalTime localTime0 = new LocalTime(0L);
        Period period0 = new Period(localTime0, localTime0, (PeriodType) null);
        Minutes minutes0 = Minutes.standardMinutesIn(period0);
        Weeks weeks0 = minutes0.toStandardWeeks();
        DurationFieldType durationFieldType0 = weeks0.getFieldType();
        Period period1 = period0.withFieldAdded(durationFieldType0, 1599);
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        Duration duration0 = Duration.ZERO;
        Period period0 = duration0.toPeriod();
        Period period1 = period0.withDays(1500);
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        PeriodType periodType0 = PeriodType.yearWeekDay();
        PeriodType periodType1 = periodType0.withYearsRemoved();
        Period period0 = new Period(30962844000000L, 31556952000L, periodType1);
        Weeks weeks0 = period0.toStandardWeeks();
        weeks0.getWeeks();
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        Days days0 = Days.SEVEN;
        Duration duration0 = days0.toStandardDuration();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
        PeriodType periodType0 = PeriodType.minutes();
        Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
        Seconds seconds0 = period0.toStandardSeconds();
        seconds0.getSeconds();
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        LocalTime localTime0 = new LocalTime();
        LocalTime localTime1 = localTime0.withLocalMillis(0L);
        Period period0 = Period.fieldDifference(localTime0, localTime1);
        Seconds seconds0 = period0.toStandardSeconds();
        seconds0.getSeconds();
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        Period period0 = Period.minutes(648);
        Period period1 = period0.plusDays((-2241));
        Minutes minutes0 = period1.toStandardMinutes();
        minutes0.getMinutes();
    }

    @Test(timeout = 4000)
    public void test01719() throws Throwable {
        Period period0 = Period.minutes(648);
        Period period1 = period0.plusDays((-2241));
        Hours hours0 = period1.toStandardHours();
        hours0.getHours();
    }

    @Test(timeout = 4000)
    public void test01820() throws Throwable {
        Period period0 = Period.minutes(10209375);
        Duration duration0 = period0.ZERO.toStandardDuration();
        duration0.getMillis();
    }

    @Test(timeout = 4000)
    public void test01921() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        DateTime dateTime0 = DateTime.now((Chronology) gregorianChronology0);
        Period period0 = new Period(dateTime0, dateTime0);
        Period period1 = period0.withWeeks(1007);
        Duration duration0 = period1.toStandardDuration();
        duration0.getMillis();
    }

    @Test(timeout = 4000)
    public void test02022() throws Throwable {
        Period period0 = Period.ZERO;
        Period period1 = period0.plusWeeks((-2230));
        Duration duration0 = period1.toStandardDuration();
        duration0.getStandardSeconds();
    }

    @Test(timeout = 4000)
    public void test02123() throws Throwable {
        Period period0 = Period.hours(839);
        Days days0 = period0.toStandardDays();
        days0.getDays();
    }

    @Test(timeout = 4000)
    public void test02224() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Period period0 = new Period((Object) null, iSOChronology0);
        Period period1 = period0.withWeeks((-420));
        Days days0 = period1.toStandardDays();
        days0.getDays();
    }

    @Test(timeout = 4000)
    public void test02325() throws Throwable {
        Period period0 = Period.parse("PT0S");
    }

    @Test(timeout = 4000)
    public void test02426() throws Throwable {
        Period period0 = new Period(26, (-1071), 1467, 12, 907, 139, 139, 12, (PeriodType) null);
        int int0 = period0.getYears();
    }

    @Test(timeout = 4000)
    public void test02527() throws Throwable {
        Period period0 = new Period((-41), (-3005), (-3005), (-41), (-3005), (-230), (-4053), (-230));
        int int0 = period0.getYears();
    }

    @Test(timeout = 4000)
    public void test02628() throws Throwable {
        Period period0 = new Period((-5051), 2527, 2527, 2527, 137, (-5051), (-1584), 137);
        int int0 = period0.getWeeks();
    }

    @Test(timeout = 4000)
    public void test02729() throws Throwable {
        Period period0 = Period.months(8);
        Period period1 = period0.ZERO.minusWeeks(2);
        int int0 = period1.getWeeks();
    }

    @Test(timeout = 4000)
    public void test02830() throws Throwable {
        Period period0 = Period.seconds(2679);
        int int0 = period0.getSeconds();
    }

    @Test(timeout = 4000)
    public void test02931() throws Throwable {
        Period period0 = new Period((-3624), 10, (-2171), (-3624));
        int int0 = period0.getSeconds();
    }

    @Test(timeout = 4000)
    public void test03032() throws Throwable {
        Period period0 = Period.minutes((-2229));
        Period period1 = period0.minusMonths((-2229));
        int int0 = period1.getMonths();
    }

    @Test(timeout = 4000)
    public void test03133() throws Throwable {
        Period period0 = Period.millis(0);
        int int0 = period0.getMinutes();
    }

    @Test(timeout = 4000)
    public void test03234() throws Throwable {
        PeriodType periodType0 = PeriodType.standard();
        Period period0 = new Period((-1783), (-1783), (-990), (-1783), (-1783), (-1083), 805, (-1083), periodType0);
        int int0 = period0.getMinutes();
    }

    @Test(timeout = 4000)
    public void test03335() throws Throwable {
        Period period0 = Period.millis(9);
        int int0 = period0.getMillis();
    }

    @Test(timeout = 4000)
    public void test03436() throws Throwable {
        Period period0 = new Period(2, (-1863), 153692453, (-516), 153692453, (-516), 2, 153692453);
        Period period1 = period0.ZERO.minusWeeks((-516));
        Period period2 = period1.plusMillis((-1863));
        int int0 = period2.getMillis();
    }

    @Test(timeout = 4000)
    public void test03537() throws Throwable {
        Period period0 = new Period(26, (-1071), 1467, 12, 907, 139, 139, 12, (PeriodType) null);
        int int0 = period0.getHours();
    }

    @Test(timeout = 4000)
    public void test03638() throws Throwable {
        LocalTime localTime0 = new LocalTime(0L);
        Period period0 = new Period(localTime0, localTime0, (PeriodType) null);
        Period period1 = period0.withHours(174);
        Period period2 = period1.ZERO.minus(period1);
        int int0 = period2.getHours();
    }

    @Test(timeout = 4000)
    public void test03739() throws Throwable {
        Period period0 = new Period();
        Period period1 = period0.plusDays(2527);
        Period period2 = period1.plusSeconds(2527);
        int int0 = period2.getDays();
    }

    @Test(timeout = 4000)
    public void test03841() throws Throwable {
        PeriodType periodType0 = PeriodType.yearWeekDay();
        PeriodType periodType1 = periodType0.withYearsRemoved();
        Period period0 = new Period(30962844000000L, 31556952000L, periodType1);
        period0.withYears(263);
    }

    @Test(timeout = 4000)
    public void test03942() throws Throwable {
        Period period0 = Period.weeks(9);
        PeriodType.YEAR_INDEX = 204;
        period0.withYears(526);
    }

    @Test(timeout = 4000)
    public void test04043() throws Throwable {
        Duration duration0 = Duration.standardMinutes(60L);
        PeriodType periodType0 = PeriodType.yearMonthDayTime();
        Period period0 = duration0.toPeriod(periodType0);
        period0.withWeeks((-1));
    }

    @Test(timeout = 4000)
    public void test04144() throws Throwable {
        PeriodType periodType0 = PeriodType.standard();
        Period period0 = new Period((-1783), (-1783), (-990), (-1783), (-1783), (-1083), 805, 1783, periodType0);
        PeriodType.WEEK_INDEX = (-3076);
        period0.withWeeks(3514);
    }

    @Test(timeout = 4000)
    public void test04245() throws Throwable {
        Days days0 = Days.SEVEN;
        Duration duration0 = days0.toStandardDuration();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
        PeriodType periodType0 = PeriodType.minutes();
        Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
        period0.withSeconds(1000);
    }

    @Test(timeout = 4000)
    public void test04346() throws Throwable {
        Period period0 = Period.months(8);
        PeriodType.SECOND_INDEX = 8;
        period0.ZERO.withSeconds((-1877));
    }

    @Test(timeout = 4000)
    public void test04447() throws Throwable {
        int[] intArray0 = new int[3];
        PeriodType periodType0 = new PeriodType("7ht", (DurationFieldType[]) null, intArray0);
        Period period0 = new Period(15271875, (-207), 1, (-1115), 292271022, (-207), 4082, (-207));
        period0.withPeriodType(periodType0);
    }

    @Test(timeout = 4000)
    public void test04548() throws Throwable {
        Period period0 = Period.weeks((-2274));
        PeriodType periodType0 = PeriodType.days();
        period0.withPeriodType(periodType0);
    }

    @Test(timeout = 4000)
    public void test04649() throws Throwable {
        Duration duration0 = Duration.millis(1000L);
        Seconds seconds0 = duration0.toStandardSeconds();
        PeriodType periodType0 = seconds0.getPeriodType();
        Period period0 = new Period(duration0, (ReadableInstant) null, periodType0);
        period0.withMonths(0);
    }

    @Test(timeout = 4000)
    public void test04750() throws Throwable {
        Period period0 = Period.months((-5051));
        PeriodType.MONTH_INDEX = (-5);
        period0.withMonths(1269);
    }

    @Test(timeout = 4000)
    public void test04851() throws Throwable {
        PeriodType periodType0 = PeriodType.yearWeekDay();
        Period period0 = new Period((-1050L), periodType0);
        period0.withMinutes(892);
    }

    @Test(timeout = 4000)
    public void test04952() throws Throwable {
        PeriodType periodType0 = PeriodType.yearMonthDayTime();
        Period period0 = new Period(513, 0, 0, 513, 0, 0, 513, 0, periodType0);
        PeriodType.MINUTE_INDEX = 12;
        period0.ZERO.withMinutes((-550));
    }

    @Test(timeout = 4000)
    public void test05053() throws Throwable {
        Period period0 = Period.minutes(648);
        PeriodType.MILLI_INDEX = (-1456);
        period0.withMillis(648);
    }

    @Test(timeout = 4000)
    public void test05154() throws Throwable {
        PeriodType periodType0 = PeriodType.millis();
        Period period0 = new Period(0, 0, 0, 0, 0, 0, 0, 0, periodType0);
        period0.withHours(18);
    }

    @Test(timeout = 4000)
    public void test05255() throws Throwable {
        Period period0 = Period.hours(0);
        PeriodType.HOUR_INDEX = (-2094);
        period0.withHours(8);
    }

    @Test(timeout = 4000)
    public void test05356() throws Throwable {
        Period period0 = new Period();
        Period period1 = period0.plusDays(2527);
        Period period2 = period1.plusSeconds(2527);
        Period period3 = period1.ZERO.plusHours((-5051));
        Hours hours0 = period2.toStandardHours();
        period3.withFields(hours0);
        period3.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test05357() throws Throwable {
        Period period0 = new Period();
        Period period1 = period0.plusDays(2527);
        Period period2 = period1.plusSeconds(2527);
        Period period3 = period1.ZERO.plusHours((-5051));
        Hours hours0 = period2.toStandardHours();
        period3.withFields(hours0);
    }

    @Test(timeout = 4000)
    public void test05358() throws Throwable {
        Period period0 = new Period();
        Period period1 = period0.plusDays(2527);
        Period period2 = period1.plusSeconds(2527);
        Period period3 = period1.ZERO.plusHours((-5051));
        Hours hours0 = period2.toStandardHours();
        period3.withFields(hours0);
        hours0.getHours();
    }

    @Test(timeout = 4000)
    public void test05459() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTime dateTime0 = new DateTime((-563L), (Chronology) buddhistChronology0);
        Period period0 = new Period(dateTime0, dateTime0);
        PeriodType.DAY_INDEX = 522;
        period0.ZERO.withDays(0);
    }

    @Test(timeout = 4000)
    public void test05560() throws Throwable {
        Period period0 = Period.months(2453);
        period0.toStandardWeeks();
    }

    @Test(timeout = 4000)
    public void test05661() throws Throwable {
        Period period0 = Period.millis((-5326));
        PeriodType.MONTH_INDEX = 3140;
        period0.toStandardWeeks();
    }

    @Test(timeout = 4000)
    public void test05762() throws Throwable {
        Period period0 = new Period(60L, 10000000000000000L, (Chronology) null);
        period0.toStandardSeconds();
    }

    @Test(timeout = 4000)
    public void test05863() throws Throwable {
        Period period0 = Period.minutes(648);
        Period period1 = period0.plusMonths((-1437));
        period1.toStandardMinutes();
    }

    @Test(timeout = 4000)
    public void test05964() throws Throwable {
        Period period0 = new Period(4341L, 4341L);
        PeriodType.YEAR_INDEX = 1925;
        period0.ZERO.toStandardMinutes();
    }

    @Test(timeout = 4000)
    public void test06065() throws Throwable {
        Period period0 = new Period(3600000L, 3600000L);
        Period period1 = period0.minusYears(7593750);
        Period period2 = period1.plusMonths(0);
        period2.toStandardHours();
    }

    @Test(timeout = 4000)
    public void test06166() throws Throwable {
        MockDate mockDate0 = new MockDate(0L);
        LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
        PeriodType periodType0 = PeriodType.millis();
        Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
        PeriodType.MONTH_INDEX = 61;
        period0.ZERO.toStandardHours();
    }

    @Test(timeout = 4000)
    public void test06267() throws Throwable {
        Period period0 = Period.hours(98);
        PeriodType.MINUTE_INDEX = (-935);
        period0.toStandardDuration();
    }

    @Test(timeout = 4000)
    public void test06368() throws Throwable {
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        DateTime dateTime0 = DateTime.now((Chronology) gregorianChronology0);
        Period period0 = new Period(dateTime0, dateTime0);
        PeriodType.MILLI_INDEX = (-933);
        period0.toStandardDays();
    }

    @Test(timeout = 4000)
    public void test06469() throws Throwable {
        Period period0 = new Period((-41), (-3005), (-3005), (-41), (-3005), (-230), (-230), (-230));
        Period period1 = period0.ZERO.withWeeks(317351877);
        period1.toStandardDays();
    }

    @Test(timeout = 4000)
    public void test06570() throws Throwable {
        Period period0 = Period.minutes(648);
        PeriodType.YEAR_INDEX = 4289;
        period0.plusYears((-2241));
    }

    @Test(timeout = 4000)
    public void test06671() throws Throwable {
        Instant instant0 = new Instant();
        Period period0 = Period.hours(361);
        Minutes minutes0 = period0.toStandardMinutes();
        PeriodType periodType0 = minutes0.getPeriodType();
        Period period1 = new Period(instant0, (ReadableDuration) null, periodType0);
        period1.plusSeconds(361);
    }

    @Test(timeout = 4000)
    public void test06772() throws Throwable {
        Days days0 = Days.TWO;
        Weeks weeks0 = days0.toStandardWeeks();
        Duration duration0 = weeks0.toStandardDuration();
        ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
        Period period0 = duration0.toPeriod((Chronology) iSOChronology0);
        PeriodType.SECOND_INDEX = (-1783);
        period0.plusSeconds((-1783));
    }

    @Test(timeout = 4000)
    public void test06873() throws Throwable {
        PeriodType periodType0 = PeriodType.millis();
        Period period0 = new Period(0L, 0L, periodType0);
        PeriodType.MONTH_INDEX = 61;
        period0.plusMonths(61);
    }

    @Test(timeout = 4000)
    public void test06974() throws Throwable {
        PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
        PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class), anyString(), anyInt(), any(java.util.Locale.class));
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
        PeriodType periodType0 = PeriodType.yearMonthDay();
        PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
        Period period0 = Period.parse("", periodFormatter1);
        period0.plusMinutes((-1226));
    }

    @Test(timeout = 4000)
    public void test07075() throws Throwable {
        Minutes minutes0 = Minutes.THREE;
        PeriodType periodType0 = minutes0.getPeriodType();
        PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
        PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
        doReturn(2537).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class), anyString(), anyInt(), any(java.util.Locale.class));
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
        PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
        Period period0 = Period.parse("", periodFormatter1);
        period0.plusMillis((-90));
    }

    @Test(timeout = 4000)
    public void test07176() throws Throwable {
        Period period0 = Period.seconds(0);
        PeriodType.MILLI_INDEX = (-1506);
        period0.plusMillis(366);
    }

    @Test(timeout = 4000)
    public void test07277() throws Throwable {
        Period period0 = Period.minutes(648);
        PeriodType.HOUR_INDEX = 4289;
        period0.plusHours(648);
    }

    @Test(timeout = 4000)
    public void test07378() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
        LocalTime localTime0 = new LocalTime((-763L), (Chronology) islamicChronology0);
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        period0.plusDays(1);
    }

    @Test(timeout = 4000)
    public void test07479() throws Throwable {
        PeriodType periodType0 = PeriodType.yearDay();
        MutablePeriod mutablePeriod0 = new MutablePeriod(31536000000L, 413L, periodType0);
        Minutes minutes0 = Minutes.standardMinutesIn(mutablePeriod0);
        Period period0 = new Period(1440L, 604800L, periodType0);
        period0.plus(minutes0);
    }

    @Test(timeout = 4000)
    public void test07580() throws Throwable {
        PeriodType periodType0 = PeriodType.millis();
        Period period0 = new Period(0L, 0L, periodType0);
        PeriodType.HOUR_INDEX = 2351;
        Hours hours0 = Hours.EIGHT;
        period0.ZERO.plus(hours0);
    }

    @Test(timeout = 4000)
    public void test07681() throws Throwable {
        PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
        Period.parse("q9@x}Ih6UM[t5o'F", periodFormatter0);
    }

    @Test(timeout = 4000)
    public void test07782() throws Throwable {
        Period.parse("up$s./(0_%:", (PeriodFormatter) null);
    }

    @Test(timeout = 4000)
    public void test07883() throws Throwable {
        PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
        PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class), anyString(), anyInt(), any(java.util.Locale.class));
        PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
        Period.parse("GNI:>qN7Jhe)V", periodFormatter0);
    }

    @Test(timeout = 4000)
    public void test07984() throws Throwable {
        Period.parse((String) null);
    }

    @Test(timeout = 4000)
    public void test08085() throws Throwable {
        Period period0 = Period.months(8);
        PeriodType periodType0 = PeriodType.yearMonthDay();
        PeriodType.SECOND_INDEX = 8;
        period0.normalizedStandard(periodType0);
    }

    @Test(timeout = 4000)
    public void test08186() throws Throwable {
        Period period0 = Period.minutes(10209375);
        Period period1 = period0.plusDays(10209375);
        PeriodType periodType0 = PeriodType.minutes();
        period1.normalizedStandard(periodType0);
    }

    @Test(timeout = 4000)
    public void test08287() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        Period period0 = new Period(576L, (Chronology) islamicChronology0);
        PeriodType.DAY_INDEX = (-1);
        period0.normalizedStandard();
    }

    @Test(timeout = 4000)
    public void test08388() throws Throwable {
        PeriodType periodType0 = PeriodType.millis();
        Period period0 = new Period((-2289L), (-2289L), periodType0);
        period0.minusYears((-36));
    }

    @Test(timeout = 4000)
    public void test08489() throws Throwable {
        Period period0 = Period.seconds((-5051));
        PeriodType.YEAR_INDEX = (-5051);
        period0.ZERO.minusYears(1574);
    }

    @Test(timeout = 4000)
    public void test08590() throws Throwable {
        LocalTime localTime0 = LocalTime.now();
        PeriodType periodType0 = PeriodType.time();
        Period period0 = new Period(localTime0, localTime0, periodType0);
        period0.minusWeeks(1525);
    }

    @Test(timeout = 4000)
    public void test08691() throws Throwable {
        LocalDate localDate0 = new LocalDate((Object) null);
        Period period0 = Period.fieldDifference(localDate0, localDate0);
        period0.minusSeconds(4645);
    }

    @Test(timeout = 4000)
    public void test08792() throws Throwable {
        PeriodType.SECOND_INDEX = (-1783);
        Period period0 = new Period();
        period0.minusSeconds(170);
    }

    @Test(timeout = 4000)
    public void test08893() throws Throwable {
        MockDate mockDate0 = new MockDate();
        LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
        PeriodType periodType0 = PeriodType.millis();
        Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
        period0.minusMonths(1);
    }

    @Test(timeout = 4000)
    public void test08994() throws Throwable {
        Period period0 = Period.minutes(163);
        PeriodType.MONTH_INDEX = 163;
        period0.ZERO.minusMonths(6);
    }

    @Test(timeout = 4000)
    public void test09095() throws Throwable {
        LocalDate localDate0 = new LocalDate((Object) null);
        Period period0 = Period.fieldDifference(localDate0, localDate0);
        period0.minusMinutes(3877);
    }

    @Test(timeout = 4000)
    public void test09196() throws Throwable {
        DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
        int[] intArray0 = new int[5];
        PeriodType periodType0 = new PeriodType("cex7.&i]f^B5D{mU", durationFieldTypeArray0, intArray0);
        GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
        Period period0 = new Period(0L, 0L, periodType0, gregorianChronology0);
        period0.minusMinutes((-544));
    }

    @Test(timeout = 4000)
    public void test09297() throws Throwable {
        PeriodType periodType0 = PeriodType.minutes();
        Period period0 = new Period((-4510L), 0L, periodType0);
        period0.minusMillis(1);
    }

    @Test(timeout = 4000)
    public void test09398() throws Throwable {
        Period period0 = Period.millis(50);
        PeriodType.MILLI_INDEX = 50;
        period0.minusMillis((-934));
    }

    @Test(timeout = 4000)
    public void test09499() throws Throwable {
        Period period0 = new Period();
        PeriodType.HOUR_INDEX = (-1330);
        period0.minusHours(12825000);
    }

    @Test(timeout = 4000)
    public void test095100() throws Throwable {
        PeriodType periodType0 = PeriodType.years();
        Period period0 = new Period(745L, 745L, periodType0);
        period0.minusDays(2622);
    }

    @Test(timeout = 4000)
    public void test096101() throws Throwable {
        Period period0 = new Period();
        PeriodType.DAY_INDEX = (-5051);
        period0.minusDays((-5051));
    }

    @Test(timeout = 4000)
    public void test097102() throws Throwable {
        PeriodType periodType0 = PeriodType.standard();
        Period period0 = new Period((-1783), (-1783), (-990), (-1783), (-1783), (-1083), 805, 1783, periodType0);
        PeriodType.MINUTE_INDEX = 3514;
        period0.ZERO.minus(period0);
    }

    @Test(timeout = 4000)
    public void test098103() throws Throwable {
        Period period0 = new Period((-3659), 445, 352, 0);
        Hours hours0 = Hours.MIN_VALUE;
        period0.minus(hours0);
    }

    @Test(timeout = 4000)
    public void test099104() throws Throwable {
        Period period0 = new Period((-3587L));
        PeriodType.WEEK_INDEX = 12;
        period0.getWeeks();
    }

    @Test(timeout = 4000)
    public void test100105() throws Throwable {
        Period period0 = Period.months(8);
        PeriodType.SECOND_INDEX = 8;
        period0.getSeconds();
    }

    @Test(timeout = 4000)
    public void test101106() throws Throwable {
        Period period0 = Period.months(8);
        PeriodType.MONTH_INDEX = (-11);
        period0.getMonths();
    }

    @Test(timeout = 4000)
    public void test102107() throws Throwable {
        Period period0 = new Period((-41), (-3005), (-3005), (-41), (-3005), (-230), (-4053), (-230));
        PeriodType.MILLI_INDEX = 17;
        period0.ZERO.getMillis();
    }

    @Test(timeout = 4000)
    public void test103108() throws Throwable {
        Period period0 = new Period();
        PeriodType.DAY_INDEX = (-5051);
        period0.getDays();
    }

    @Test(timeout = 4000)
    public void test104109() throws Throwable {
        Hours hours0 = Hours.TWO;
        Duration duration0 = hours0.toStandardDuration();
        Instant instant0 = Instant.now();
        MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
        DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
        DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
        durationFieldTypeArray0[0] = durationFieldType0;
        durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
        durationFieldTypeArray0[2] = durationFieldType0;
        DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
        durationFieldTypeArray0[3] = durationFieldType1;
        int[] intArray0 = new int[3];
        PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
        Period period0 = null;
        period0 = new Period(duration0, mutableDateTime0, periodType0);
    }

    @Test(timeout = 4000)
    public void test105110() throws Throwable {
        Hours hours0 = Hours.TWO;
        Duration duration0 = hours0.toStandardDuration();
        Instant instant0 = Instant.now();
        MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
        DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
        int[] intArray0 = new int[3];
        PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
        Period period0 = null;
        period0 = new Period(duration0, mutableDateTime0, periodType0);
    }

    @Test(timeout = 4000)
    public void test106111() throws Throwable {
        Object object0 = new Object();
        PeriodType periodType0 = PeriodType.time();
        Period period0 = null;
        period0 = new Period(object0, periodType0);
    }

    @Test(timeout = 4000)
    public void test107112() throws Throwable {
        Integer integer0 = new Integer((-1976));
        Period period0 = null;
        period0 = new Period((Object) integer0);
    }

    @Test(timeout = 4000)
    public void test108113() throws Throwable {
        DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
        DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
        durationFieldTypeArray0[0] = durationFieldType0;
        durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
        DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
        durationFieldTypeArray0[2] = durationFieldType1;
        int[] intArray0 = new int[0];
        PeriodType periodType0 = new PeriodType("Qm]yIx,DJinY*CNh},", durationFieldTypeArray0, intArray0);
        GJChronology gJChronology0 = GJChronology.getInstanceUTC();
        Period period0 = null;
        period0 = new Period((-2523L), periodType0, (Chronology) gJChronology0);
    }

    @Test(timeout = 4000)
    public void test109114() throws Throwable {
        DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
        DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
        durationFieldTypeArray0[0] = durationFieldType0;
        durationFieldTypeArray0[1] = durationFieldType0;
        durationFieldTypeArray0[2] = durationFieldType0;
        DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
        durationFieldTypeArray0[3] = durationFieldType1;
        int[] intArray0 = new int[3];
        PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
        Period period0 = null;
        period0 = new Period((long) 83, periodType0);
    }

    @Test(timeout = 4000)
    public void test110115() throws Throwable {
        Period period0 = null;
        period0 = new Period(1000000000000000000L);
    }

    @Test(timeout = 4000)
    public void test111116() throws Throwable {
        int[] intArray0 = new int[8];
        PeriodType periodType0 = new PeriodType("7ht", (DurationFieldType[]) null, intArray0);
        Period period0 = null;
        period0 = new Period((-2825), (-2825), 15271875, (-194), (-2825), (-2825), (-194), (-2825), periodType0);
    }

    @Test(timeout = 4000)
    public void test112117() throws Throwable {
        PeriodType periodType0 = PeriodType.yearMonthDayTime();
        Period period0 = null;
        period0 = new Period((-1391), (-1391), (-4172), 2532, 488, 2532, 7, (-3906), periodType0);
    }

    @Test(timeout = 4000)
    public void test113118() throws Throwable {
        Duration duration0 = Duration.standardMinutes(60L);
        PeriodType periodType0 = PeriodType.yearMonthDayTime();
        Period period0 = duration0.toPeriod(periodType0);
        Period period1 = period0.normalizedStandard(periodType0);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test114119() throws Throwable {
        Period period0 = Period.millis(0);
        Period period1 = period0.multipliedBy(0);
    }

    @Test(timeout = 4000)
    public void test114120() throws Throwable {
        Period period0 = Period.millis(0);
        Period period1 = period0.multipliedBy(0);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test115121() throws Throwable {
        Period period0 = Period.seconds(2096);
        Period period1 = period0.plusMillis(0);
    }

    @Test(timeout = 4000)
    public void test116122() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
        MutablePeriod mutablePeriod0 = new MutablePeriod(3712L, 3712L, iSOChronology0);
        Period period0 = mutablePeriod0.toPeriod();
        Period period1 = period0.plusHours(0);
    }

    @Test(timeout = 4000)
    public void test117123() throws Throwable {
        Duration duration0 = Duration.standardDays(86400L);
        PeriodType periodType0 = PeriodType.yearDayTime();
        Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
        period0.plusMonths(63);
    }

    @Test(timeout = 4000)
    public void test118124() throws Throwable {
        Days days0 = Days.SEVEN;
        Duration duration0 = days0.toStandardDuration();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
        PeriodType periodType0 = PeriodType.minutes();
        Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
        period0.plusYears(1203);
    }

    @Test(timeout = 4000)
    public void test119125() throws Throwable {
        Days days0 = Days.SEVEN;
        Duration duration0 = days0.toStandardDuration();
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
        PeriodType periodType0 = PeriodType.minutes();
        Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
        Period period1 = period0.plusYears(0);
    }

    @Test(timeout = 4000)
    public void test120126() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        Period period0 = new Period((-1L), (Chronology) ethiopicChronology0);
        int int0 = period0.getHours();
    }

    @Test(timeout = 4000)
    public void test121127() throws Throwable {
        Hours hours0 = Hours.SIX;
        Days days0 = hours0.toStandardDays();
        PeriodType periodType0 = days0.getPeriodType();
        Period period0 = new Period(4540L, periodType0);
        period0.plusHours(2025);
    }

    @Test(timeout = 4000)
    public void test122128() throws Throwable {
        Period period0 = new Period((Object) null);
    }

    @Test(timeout = 4000)
    public void test123129() throws Throwable {
        Period period0 = Period.months((-5051));
        int int0 = period0.getWeeks();
    }

    @Test(timeout = 4000)
    public void test124130() throws Throwable {
        Period period0 = new Period((-2233L));
        period0.multipliedBy((-292269337));
    }

    @Test(timeout = 4000)
    public void test125131() throws Throwable {
        Duration duration0 = new Duration(0L, 0L);
        GJChronology gJChronology0 = GJChronology.getInstance();
        Instant instant0 = gJChronology0.getGregorianCutover();
        Period period0 = new Period(duration0, instant0);
    }

    @Test(timeout = 4000)
    public void test126132() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
        DateTime dateTime0 = DateTime.now((Chronology) copticChronology0);
        PeriodType periodType0 = PeriodType.minutes();
        Period period0 = new Period(dateTime0, dateTime0, periodType0);
        period0.minusHours((-1522));
    }

    @Test(timeout = 4000)
    public void test127133() throws Throwable {
        Period period0 = Period.hours(839);
        int int0 = period0.getYears();
    }

    @Test(timeout = 4000)
    public void test128134() throws Throwable {
        Duration duration0 = Duration.millis(1000L);
        Seconds seconds0 = duration0.toStandardSeconds();
        PeriodType periodType0 = seconds0.getPeriodType();
        Period period0 = new Period(duration0, (ReadableInstant) null, periodType0);
        Period period1 = period0.ZERO.plusMinutes(0);
    }

    @Test(timeout = 4000)
    public void test129135() throws Throwable {
        PeriodType periodType0 = PeriodType.hours();
        Period period0 = new Period((Object) null, periodType0);
    }

    @Test(timeout = 4000)
    public void test130136() throws Throwable {
        LocalTime localTime0 = new LocalTime(0L);
        Period period0 = new Period(localTime0, localTime0, (PeriodType) null);
        int int0 = period0.getDays();
    }

    @Test(timeout = 4000)
    public void test131137() throws Throwable {
        Period period0 = Period.minutes(10209375);
        int int0 = period0.getMinutes();
    }

    @Test(timeout = 4000)
    public void test132138() throws Throwable {
        Period period0 = Period.minutes((-2229));
        int int0 = period0.getMonths();
    }

    @Test(timeout = 4000)
    public void test133139() throws Throwable {
        Period period0 = new Period(843L, (PeriodType) null, (Chronology) null);
    }

    @Test(timeout = 4000)
    public void test134140() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Period period0 = new Period((Object) null, iSOChronology0);
        int int0 = period0.ZERO.getMillis();
    }

    @Test(timeout = 4000)
    public void test135141() throws Throwable {
        LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
        Period period0 = new Period(localDateTime0, localDateTime0);
    }

    @Test(timeout = 4000)
    public void test136142() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Period period0 = new Period((Object) null, iSOChronology0);
        Minutes minutes0 = period0.toStandardMinutes();
        minutes0.getMinutes();
    }

    @Test(timeout = 4000)
    public void test137143() throws Throwable {
        Period period0 = new Period();
        PeriodType periodType0 = PeriodType.yearWeekDay();
        Period period1 = period0.withYears(137);
        Period period2 = period1.normalizedStandard(periodType0);
        period2.equals((Object) period1);
    }

    @Test(timeout = 4000)
    public void test138144() throws Throwable {
        Period period0 = Period.months(8);
        Period period1 = period0.normalizedStandard();
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test139145() throws Throwable {
        Period period0 = Period.years(4);
        period0.toStandardDuration();
    }

    @Test(timeout = 4000)
    public void test140146() throws Throwable {
        Period period0 = new Period((-41), (-3005), (-3005), (-41), (-3005), (-230), (-230), (-230));
        period0.toStandardDays();
    }

    @Test(timeout = 4000)
    public void test141147() throws Throwable {
        Period period0 = new Period();
        Period period1 = period0.plusDays(2527);
        Period period2 = period1.multipliedBy(2527);
        period2.toStandardSeconds();
    }

    @Test(timeout = 4000)
    public void test142148() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(10080L);
        Period period0 = new Period(mutableDateTime0, mutableDateTime0);
        Period period1 = period0.ZERO.minus((ReadablePeriod) null);
    }

    @Test(timeout = 4000)
    public void test143149() throws Throwable {
        Period period0 = Period.millis(0);
        Period period1 = period0.minusMillis(0);
    }

    @Test(timeout = 4000)
    public void test144150() throws Throwable {
        Period period0 = Period.weeks(0);
        Period period1 = period0.ZERO.plusSeconds(0);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test145151() throws Throwable {
        Duration duration0 = Duration.standardDays(86400L);
        PeriodType periodType0 = PeriodType.yearDayTime();
        Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
        Period period1 = period0.minusHours(0);
    }

    @Test(timeout = 4000)
    public void test146152() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Period period0 = new Period((Object) null, iSOChronology0);
        Period period1 = period0.plusDays(0);
    }

    @Test(timeout = 4000)
    public void test147153() throws Throwable {
        Duration duration0 = Duration.standardDays(86400L);
        PeriodType periodType0 = PeriodType.yearDayTime();
        Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
        Period period1 = period0.plusWeeks(0);
    }

    @Test(timeout = 4000)
    public void test148154() throws Throwable {
        PeriodType periodType0 = PeriodType.millis();
        Period period0 = new Period(0L, 0L, periodType0);
        Period period1 = period0.ZERO.plus((ReadablePeriod) null);
    }

    @Test(timeout = 4000)
    public void test149155() throws Throwable {
        Duration duration0 = Duration.standardDays(86400L);
        Minutes minutes0 = duration0.toStandardMinutes();
        PeriodType periodType0 = PeriodType.yearDayTime();
        Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
        Period period1 = period0.plus(minutes0);
    }

    @Test(timeout = 4000)
    public void test150156() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
        EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
        Period period0 = new Period((-1L), (Chronology) ethiopicChronology0);
        DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
        Period period1 = period0.withFieldAdded(durationFieldType0, 0);
    }

    @Test(timeout = 4000)
    public void test151157() throws Throwable {
        Days days0 = Days.TWO;
        Weeks weeks0 = days0.toStandardWeeks();
        Duration duration0 = weeks0.toStandardDuration();
        Period period0 = duration0.toPeriod();
        period0.withFieldAdded((DurationFieldType) null, 683);
    }

    @Test(timeout = 4000)
    public void test152158() throws Throwable {
        ISOChronology iSOChronology0 = ISOChronology.getInstance();
        Period period0 = new Period((Object) null, iSOChronology0);
        Years years0 = Years.MIN_VALUE;
        DurationFieldType durationFieldType0 = years0.getFieldType();
        Period period1 = period0.withFieldAdded(durationFieldType0, (-420));
    }

    @Test(timeout = 4000)
    public void test153159() throws Throwable {
        Period period0 = Period.millis((-1869));
        period0.withField((DurationFieldType) null, (-1869));
    }

    @Test(timeout = 4000)
    public void test154160() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
        Period period0 = new Period((-870L), (-870L), lenientChronology0);
        DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
        Period period1 = period0.withField(durationFieldType0, 1000);
    }

    @Test(timeout = 4000)
    public void test155161() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime(10080L);
        Period period0 = new Period(mutableDateTime0, mutableDateTime0);
        Period period1 = period0.ZERO.withFields((ReadablePeriod) null);
    }

    @Test(timeout = 4000)
    public void test156162() throws Throwable {
        MockDate mockDate0 = new MockDate(0L);
        LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
        PeriodType periodType0 = PeriodType.millis();
        Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
        Period period1 = period0.withPeriodType(periodType0);
    }

    @Test(timeout = 4000)
    public void test157163() throws Throwable {
        YearMonth yearMonth0 = new YearMonth(0L);
        MonthDay monthDay0 = new MonthDay();
        Period.fieldDifference(yearMonth0, monthDay0);
    }

    @Test(timeout = 4000)
    public void test158164() throws Throwable {
        CopticChronology copticChronology0 = CopticChronology.getInstance();
        YearMonth yearMonth0 = YearMonth.now((Chronology) copticChronology0);
        LocalTime localTime0 = LocalTime.now();
        Period.fieldDifference(yearMonth0, localTime0);
    }

    @Test(timeout = 4000)
    public void test159165() throws Throwable {
        LocalDate localDate0 = LocalDate.now();
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        Calendar calendar0 = MockCalendar.getInstance(timeZone0);
        LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
        LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
        Period.fieldDifference(localDateTime0, (ReadablePartial) null);
    }

    @Test(timeout = 4000)
    public void test160166() throws Throwable {
        LocalTime localTime0 = new LocalTime();
        Period period0 = Period.fieldDifference(localTime0, localTime0);
        period0.plusWeeks(24);
    }

    @Test(timeout = 4000)
    public void test161167() throws Throwable {
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
    }

    @Test(timeout = 4000)
    public void test162168() throws Throwable {
        int[] intArray0 = new int[3];
        PeriodType periodType0 = new PeriodType("7ht", (DurationFieldType[]) null, intArray0);
        Period period0 = null;
        period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
    }

    @Test(timeout = 4000)
    public void test163169() throws Throwable {
        Period period0 = new Period((-41), (-3005), (-3005), (-41), (-3005), (-230), (-230), (-230));
        Period period1 = period0.normalizedStandard();
    }

    @Test(timeout = 4000)
    public void test164170() throws Throwable {
        Period period0 = Period.years((-1877));
        PeriodType.MONTH_INDEX = 0;
        int int0 = period0.getMonths();
    }

    @Test(timeout = 4000)
    public void test165171() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
        Period period0 = new Period((-870L), (-870L), lenientChronology0);
        Period period1 = period0.minusSeconds(1);
        Days days0 = period1.toStandardDays();
        days0.getDays();
    }

    @Test(timeout = 4000)
    public void test165172() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
        LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
        Period period0 = new Period((-870L), (-870L), lenientChronology0);
        Period period1 = period0.minusSeconds(1);
        Days days0 = period1.toStandardDays();
    }

    @Test(timeout = 4000)
    public void test166173() throws Throwable {
        Period period0 = new Period();
        Seconds seconds0 = period0.toStandardSeconds();
        seconds0.getSeconds();
    }

    @Test(timeout = 4000)
    public void test167174() throws Throwable {
        Period period0 = Period.months(8);
        Period period1 = period0.minusDays(8);
        int int0 = period1.getDays();
    }

    @Test(timeout = 4000)
    public void test168175() throws Throwable {
        Hours hours0 = Hours.TWO;
        Duration duration0 = hours0.toStandardDuration();
        Period period0 = duration0.toPeriod();
        Period period1 = period0.plusMonths(2);
        PeriodType periodType0 = PeriodType.yearDayTime();
        period1.normalizedStandard(periodType0);
    }

    @Test(timeout = 4000)
    public void test169176() throws Throwable {
        Period period0 = new Period((-3624), 10, (-2171), (-3624));
        PeriodType.SECOND_INDEX = (-2066);
        period0.ZERO.toStandardSeconds();
    }

    @Test(timeout = 4000)
    public void test170177() throws Throwable {
        Object object0 = new Object();
        PeriodType periodType0 = PeriodType.standard();
        JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
        Period period0 = null;
        period0 = new Period(object0, periodType0, julianChronology0);
    }

    @Test(timeout = 4000)
    public void test171178() throws Throwable {
        Weeks weeks0 = Weeks.ZERO;
        Duration duration0 = weeks0.toStandardDuration();
        Period period0 = new Period((ReadableInstant) null, duration0);
    }

    @Test(timeout = 4000)
    public void test172179() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        Period period0 = new Period(576L, (Chronology) islamicChronology0);
        Period period1 = period0.withMonths(67);
    }

    @Test(timeout = 4000)
    public void test173180() throws Throwable {
        MutableDateTime mutableDateTime0 = new MutableDateTime((-283L));
        DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
        Period period0 = new Period(dateTime0, dateTime0);
        PeriodType.MINUTE_INDEX = 1960;
        period0.plusMinutes(3);
    }

    @Test(timeout = 4000)
    public void test174181() throws Throwable {
        Period.parse("Positive hours must not have negative minutes: ");
    }

    @Test(timeout = 4000)
    public void test175182() throws Throwable {
        Period period0 = new Period();
        Hours hours0 = period0.toStandardHours();
        Period period1 = period0.withFields(hours0);
        hours0.getHours();
    }

    @Test(timeout = 4000)
    public void test175183() throws Throwable {
        Period period0 = new Period();
        Hours hours0 = period0.toStandardHours();
        Period period1 = period0.withFields(hours0);
    }

    @Test(timeout = 4000)
    public void test176184() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
        Period period0 = new Period(576L, (Chronology) islamicChronology0);
        Period period1 = period0.toPeriod();
    }

    @Test(timeout = 4000)
    public void test177185() throws Throwable {
        PeriodType periodType0 = PeriodType.standard();
        Period period0 = new Period((-1783), (-1783), (-990), (-1783), (-1783), (-1083), 805, 1783, periodType0);
        Period period1 = period0.withMillis((-919));
    }

    @Test(timeout = 4000)
    public void test178186() throws Throwable {
        Duration duration0 = Duration.standardMinutes(60L);
        PeriodType periodType0 = PeriodType.yearMonthDayTime();
        Period period0 = duration0.toPeriod(periodType0);
        int int0 = period0.getSeconds();
    }

    @Test(timeout = 4000)
    public void test179187() throws Throwable {
        IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
        Period period0 = null;
        period0 = new Period("", islamicChronology0);
    }

    @Test(timeout = 4000)
    public void test180188() throws Throwable {
        Period period0 = null;
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
    }

    @Test(timeout = 4000)
    public void test181189() throws Throwable {
        Period period0 = Period.weeks(0);
        Period period1 = period0.ZERO.negated();
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test182190() throws Throwable {
        Period period0 = Period.minutes(10209375);
        Period period1 = period0.withSeconds(10209375);
        period1.equals((Object) period0);
    }

    @Test(timeout = 4000)
    public void test183191() throws Throwable {
        Duration duration0 = Duration.standardDays(86400L);
        PeriodType periodType0 = PeriodType.yearDayTime();
        Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
        Period period1 = period0.withMinutes(0);
    }

    @Test(timeout = 4000)
    public void test184192() throws Throwable {
        MockDate mockDate0 = new MockDate(0L);
        LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
        PeriodType periodType0 = PeriodType.millis();
        Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
        period0.withDays(6);
    }
}
