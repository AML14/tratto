/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 02:21:09 GMT 2023
 */
package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        GJChronology gJChronology0 = GJChronology.getInstance();
        DateTimeZone dateTimeZone0 = gJChronology0.getZone();
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
        //  // Unstable assertion: assertNotSame(dateTimeZone1, dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        DateTimeZone.forOffsetHoursMinutes((-621), 59);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("-08:00");
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTimeZone.setDefault(dateTimeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        dateTimeZone0.hashCode();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(549);
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        timeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(549);
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        long long0 = fixedDateTimeZone0.previousTransition(0L);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        long long0 = fixedDateTimeZone0.previousTransition(2189L);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        long long0 = dateTimeZone0.previousTransition(1);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.UTC.nextTransition(0L);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.nextTransition(637L);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
        dateTimeZone0.nextTransition((-2180L));
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        boolean boolean0 = dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        boolean boolean0 = dateTimeZone0.isFixed();
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        int int0 = dateTimeZone0.getStandardOffset((-266L));
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
        int int0 = dateTimeZone0.getStandardOffset(0L);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
        int int0 = dateTimeZone0.getStandardOffset(0L);
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1314));
        int int0 = dateTimeZone0.getStandardOffset((-1314));
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1314));
        int int0 = dateTimeZone0.getStandardOffset((-1314));
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        int int0 = dateTimeZone0.UTC.getOffsetFromLocal(1);
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        int int0 = dateTimeZone0.getOffsetFromLocal(0L);
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        int int0 = dateTimeZone0.getOffsetFromLocal(0L);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test2025() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
        int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
        dateMidnight0.getMillis();
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
        int int0 = dateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
    }

    @Test(timeout = 4000)
    public void test2127() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        int int0 = dateTimeZone0.getOffset(0L);
    }

    @Test(timeout = 4000)
    public void test2228() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1189);
        int int0 = dateTimeZone0.getOffset(2587L);
    }

    @Test(timeout = 4000)
    public void test2229() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1189);
        int int0 = dateTimeZone0.getOffset(2587L);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test2330() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffset(162L);
    }

    @Test(timeout = 4000)
    public void test2431() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
        dateTimeZone0.getNameKey(918518400000L);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test2532() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        String string0 = dateTimeZone0.getNameKey((-2642L));
    }

    @Test(timeout = 4000)
    public void test2633() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        boolean boolean0 = dateTimeZone0.equals(dateTimeZone0);
    }

    @Test(timeout = 4000)
    public void test2734() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
        long long0 = dateTimeZone0.convertUTCToLocal(15778800000L);
    }

    @Test(timeout = 4000)
    public void test2835() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.UTC.convertLocalToUTC(0L, false, 0L);
    }

    @Test(timeout = 4000)
    public void test2936() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone dateTimeZone0 = uTCProvider0.getZone("UTC");
        long long0 = dateTimeZone0.convertLocalToUTC((-1L), false, (-1L));
    }

    @Test(timeout = 4000)
    public void test3037() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 1, false);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test3038() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        long long0 = dateTimeZone0.convertLocalToUTC((long) 1, false);
    }

    @Test(timeout = 4000)
    public void test3139() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
    }

    @Test(timeout = 4000)
    public void test3240() throws Throwable {
        DateTimeZone.forOffsetHours((-1585));
    }

    @Test(timeout = 4000)
    public void test3341() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
        dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0L);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test3442() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = dateTimeZone0.convertLocalToUTC(0L, false, 9223372036854775807L);
    }

    @Test(timeout = 4000)
    public void test3543() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1841));
        long long0 = dateTimeZone0.convertUTCToLocal(1);
    }

    @Test(timeout = 4000)
    public void test3544() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1841));
        long long0 = dateTimeZone0.convertUTCToLocal(1);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test3645() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        long long0 = dateTimeZone0.convertUTCToLocal(0L);
    }

    @Test(timeout = 4000)
    public void test3746() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
    }

    @Test(timeout = 4000)
    public void test3847() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        int int0 = dateTimeZone0.getOffsetFromLocal((-1L));
    }

    @Test(timeout = 4000)
    public void test3948() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        String string0 = dateTimeZone0.getName(465L, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test4050() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1778));
        String string0 = dateTimeZone0.getShortName(793L, (Locale) null);
    }

    @Test(timeout = 4000)
    public void test4151() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("-08:00");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test4252() throws Throwable {
        DateTimeZone.forID("Eg&");
    }

    @Test(timeout = 4000)
    public void test4353() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("MST");
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test4454() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        String string0 = dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test4555() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        boolean boolean0 = fixedDateTimeZone0.UTC.isLocalDateTimeGap((LocalDateTime) null);
    }

    @Test(timeout = 4000)
    public void test4656() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
        boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
    }

    @Test(timeout = 4000)
    public void test4757() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3185));
        long long0 = dateTimeZone0.convertLocalToUTC((long) (-3185), true);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test4758() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3185));
        long long0 = dateTimeZone0.convertLocalToUTC((long) (-3185), true);
    }

    @Test(timeout = 4000)
    public void test4859() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        dateTimeZone0.convertLocalToUTC(9223372036854775807L, true);
    }

    @Test(timeout = 4000)
    public void test4960() throws Throwable {
        BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
        DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
        long long0 = dateTimeZone0.convertLocalToUTC(249L, false);
    }

    @Test(timeout = 4000)
    public void test5061() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(256);
        dateTimeZone0.convertUTCToLocal(9223372036854775807L);
    }

    @Test(timeout = 4000)
    public void test5162() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        long long0 = fixedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, 9223372036854775807L);
    }

    @Test(timeout = 4000)
    public void test5263() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(24);
        long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-580L));
    }

    @Test(timeout = 4000)
    public void test5264() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(24);
        long long0 = dateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-580L));
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test5365() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        boolean boolean0 = fixedDateTimeZone0.isStandardOffset(1L);
    }

    @Test(timeout = 4000)
    public void test5466() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
    }

    @Test(timeout = 4000)
    public void test5467() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        boolean boolean0 = dateTimeZone0.isStandardOffset(9223372036854775807L);
    }

    @Test(timeout = 4000)
    public void test5568() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 2);
        int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test5569() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 2);
        int int0 = dateTimeZone0.getOffset((ReadableInstant) null);
    }

    @Test(timeout = 4000)
    public void test5670() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        DateMidnight dateMidnight0 = new DateMidnight(0L, (DateTimeZone) fixedDateTimeZone0);
        int int0 = fixedDateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
    }

    @Test(timeout = 4000)
    public void test5771() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(24);
        Locale locale0 = Locale.ROOT;
        String string0 = dateTimeZone0.getName(877L, locale0);
    }

    @Test(timeout = 4000)
    public void test5872() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(24);
        String string0 = dateTimeZone0.getShortName(877L);
    }

    @Test(timeout = 4000)
    public void test5973() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Locale locale0 = Locale.ITALY;
        String string0 = fixedDateTimeZone0.getShortName(0L, locale0);
    }

    @Test(timeout = 4000)
    public void test6075() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-28378000));
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test6176() throws Throwable {
        DateTimeZone.setNameProvider((NameProvider) null);
    }

    @Test(timeout = 4000)
    public void test6277() throws Throwable {
        DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
        DateTimeZone.setNameProvider(defaultNameProvider0);
    }

    @Test(timeout = 4000)
    public void test6378() throws Throwable {
        DateTimeZone.setProvider((Provider) null);
    }

    @Test(timeout = 4000)
    public void test6479() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(24);
        DateTimeZone dateTimeZone1 = DateTimeZone.forID("+00:00:00.024");
        dateTimeZone1.toString();
    }

    @Test(timeout = 4000)
    public void test6480() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(24);
        DateTimeZone dateTimeZone1 = DateTimeZone.forID("+00:00:00.024");
    }

    @Test(timeout = 4000)
    public void test6581() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test6682() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone.forTimeZone(timeZone0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test6683() throws Throwable {
        ZoneOffset zoneOffset0 = ZoneOffset.MIN;
        TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
        DateTimeZone.forTimeZone(timeZone0);
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test6784() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        TimeZone timeZone0 = fixedDateTimeZone0.UTC.toTimeZone();
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test6885() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test6986() throws Throwable {
        DateTimeZone.forOffsetHoursMinutes(89, 75);
    }

    @Test(timeout = 4000)
    public void test7087() throws Throwable {
        DateTimeZone.forOffsetHoursMinutes(0, (-4177984));
    }

    @Test(timeout = 4000)
    public void test7188() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test7289() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test7390() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
    }

    @Test(timeout = 4000)
    public void test7391() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("+00:00");
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test7492() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test7593() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
        dateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test7694() throws Throwable {
        DateTimeZone.setDefault((DateTimeZone) null);
    }

    @Test(timeout = 4000)
    public void test7795() throws Throwable {
        UTCProvider uTCProvider0 = new UTCProvider();
        DateTimeZone.setProvider(uTCProvider0);
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        //  // Unstable assertion: assertEquals("UTC", dateTimeZone0.getID());
    }

    @Test(timeout = 4000)
    public void test7896() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
        DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
    }

    @Test(timeout = 4000)
    public void test7997() throws Throwable {
        Provider provider0 = DateTimeZone.getProvider();
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
        dateTimeZone0.equals(provider0);
        dateTimeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test8098() throws Throwable {
        NameProvider nameProvider0 = DateTimeZone.getNameProvider();
    }

    @Test(timeout = 4000)
    public void test8199() throws Throwable {
        Set<String> set0 = DateTimeZone.getAvailableIDs();
        set0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test82100() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        String string0 = fixedDateTimeZone0.toString();
    }

    @Test(timeout = 4000)
    public void test83101() throws Throwable {
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2831, "hsZfnd<-{UF+T");
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
        String string0 = dateTimeZone0.getName((long) 807);
    }

    @Test(timeout = 4000)
    public void test84103() throws Throwable {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-589));
        TimeZone timeZone0 = dateTimeZone0.toTimeZone();
        DateTimeZone.forTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test85104() throws Throwable {
        FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone) DateTimeZone.UTC;
        Object object0 = fixedDateTimeZone0.UTC.writeReplace();
    }
}
