/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 16:18:30 GMT 2023
 */
package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper;
import com.google.gson.internal.bind.TypeAdapters;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.lang.reflect.Type;
import java.net.URL;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class TypeAdapters_ESTest extends TypeAdapters_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Gson gson0 = new Gson();
        Class<Calendar> class0 = Calendar.class;
        Class<GregorianCalendar> class1 = GregorianCalendar.class;
        TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, (TypeAdapter<Calendar>) null, class1);
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactoryForMultipleTypes(class0, (Class<? extends Calendar>) class1, (TypeAdapter<? super Calendar>) typeAdapterRuntimeTypeWrapper0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        Class<Calendar> class1 = Calendar.class;
        TypeToken<Calendar> typeToken0 = TypeToken.get(class1);
        TypeAdapter<Calendar> typeAdapter0 = TypeAdapters.CALENDAR;
        TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>((Gson) null, typeAdapter0, class0);
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(typeToken0, (TypeAdapter<Calendar>) typeAdapterRuntimeTypeWrapper0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<UUID> class0 = UUID.class;
        Gson gson0 = new Gson();
        Class<Calendar> class1 = Calendar.class;
        TypeAdapter<Calendar> typeAdapter0 = gson0.getAdapter(class1);
        TypeAdapterRuntimeTypeWrapper<Calendar> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Calendar>(gson0, typeAdapter0, class0);
        PipedReader pipedReader0 = new PipedReader();
        JsonReader jsonReader0 = new JsonReader(pipedReader0);
        typeAdapterRuntimeTypeWrapper0.read(jsonReader0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        Gson gson0 = new Gson();
        TypeAdapter<ChronoLocalDate> typeAdapter0 = gson0.getAdapter(class0);
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, typeAdapter0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        Gson gson0 = new Gson();
        TypeAdapter<Boolean> typeAdapter0 = gson0.getAdapter(class0);
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newFactory(class0, class0, (TypeAdapter<? super Boolean>) typeAdapter0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Gson gson0 = new Gson();
        Class<GregorianCalendar> class0 = GregorianCalendar.class;
        TypeAdapter<GregorianCalendar> typeAdapter0 = gson0.getAdapter(class0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Gson gson0 = new Gson();
        Class<Object> class0 = Object.class;
        TypeToken<Object> typeToken0 = TypeToken.get(class0);
        TypeAdapter<Object> typeAdapter0 = gson0.getAdapter(typeToken0);
        String string0 = gson0.toJson((Object) typeAdapter0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Gson gson0 = new Gson();
        JsonObject jsonObject0 = new JsonObject();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
        gson0.toJson((JsonElement) jsonObject0, (Appendable) mockPrintWriter0);
        jsonObject0.isJsonArray();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        JsonArray jsonArray0 = new JsonArray();
        jsonArray0.getAsJsonObject();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Gson gson0 = new Gson();
        String string0 = gson0.toJson((Object) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Gson gson0 = new Gson();
        Character character0 = Character.valueOf('c');
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
        String string0 = gson0.toJson((JsonElement) jsonPrimitive0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Gson gson0 = new Gson();
        String string0 = gson0.toJson((JsonElement) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<Object> class0 = Object.class;
        Gson gson0 = new Gson();
        JsonElement jsonElement0 = gson0.toJsonTree((Object) null, (Type) class0);
        Class<JsonArray> class1 = JsonArray.class;
        gson0.fromJson(jsonElement0, class1);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Gson gson0 = new Gson();
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive("Qu");
        Class<JsonArray> class0 = JsonArray.class;
        gson0.fromJson((JsonElement) jsonPrimitive0, class0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Class<Object> class0 = Object.class;
        Excluder excluder0 = Excluder.DEFAULT;
        Gson gson0 = new Gson();
        JsonElement jsonElement0 = gson0.toJsonTree((Object) excluder0, (Type) class0);
        Class<JsonArray> class1 = JsonArray.class;
        gson0.fromJson(jsonElement0, class1);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
        Gson gson0 = new Gson();
        TypeAdapter<Locale> typeAdapter0 = TypeAdapters.LOCALE;
        TypeAdapterRuntimeTypeWrapper<Locale> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Locale>(gson0, typeAdapter0, class0);
        Locale locale0 = Locale.PRC;
        JsonPrimitive jsonPrimitive0 = (JsonPrimitive) typeAdapterRuntimeTypeWrapper0.toJsonTree(locale0);
        jsonPrimitive0.isBoolean();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Class<Locale> class0 = Locale.class;
        Gson gson0 = new Gson();
        TypeAdapterRuntimeTypeWrapper<Object> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<Object>(gson0, (TypeAdapter<Object>) null, class0);
        URL uRL0 = MockURL.getFileExample();
        typeAdapterRuntimeTypeWrapper0.toJson((Object) uRL0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Class<URL> class0 = URL.class;
        Gson gson0 = new Gson();
        TypeAdapter<URL> typeAdapter0 = gson0.getAdapter(class0);
        TypeAdapterRuntimeTypeWrapper<URL> typeAdapterRuntimeTypeWrapper0 = new TypeAdapterRuntimeTypeWrapper<URL>(gson0, typeAdapter0, class0);
        JsonNull jsonNull0 = JsonNull.INSTANCE;
        URL uRL0 = typeAdapterRuntimeTypeWrapper0.fromJsonTree(jsonNull0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Class<StringBuffer> class0 = StringBuffer.class;
        Gson gson0 = new Gson();
        gson0.fromJson("Expected name", (Type) class0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Gson gson0 = new Gson();
        Boolean boolean0 = new Boolean("/s*XB$;,$>m0)");
        JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
        Class<Long> class0 = Long.TYPE;
        gson0.fromJson((JsonElement) jsonPrimitive0, (Type) class0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Gson gson0 = new Gson();
        Class<Short> class0 = Short.class;
        gson0.fromJson("Expected ", (Type) class0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Class<Byte> class0 = Byte.class;
        Gson gson0 = new Gson();
        JsonObject jsonObject0 = new JsonObject();
        gson0.fromJson((JsonElement) jsonObject0, (Type) class0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Gson gson0 = new Gson();
        Class<Boolean> class0 = Boolean.TYPE;
        String string0 = gson0.toJson((Object) null, (Type) class0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Gson gson0 = new Gson();
        BitSet bitSet0 = new BitSet();
        bitSet0.flip(12);
        JsonArray jsonArray0 = (JsonArray) gson0.toJsonTree((Object) bitSet0);
        jsonArray0.size();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Gson gson0 = new Gson();
        BitSet bitSet0 = new BitSet();
        JsonElement jsonElement0 = gson0.toJsonTree((Object) bitSet0);
        Class<StringBuilder> class0 = StringBuilder.class;
        gson0.fromJson(jsonElement0, class0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Class<Byte> class0 = Byte.class;
        Gson gson0 = new Gson();
        gson0.toJson((Object) class0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
        TypeAdapterFactory typeAdapterFactory0 = TypeAdapters.newTypeHierarchyFactory(class0, (TypeAdapter<MockGregorianCalendar>) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Gson gson0 = new Gson();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(38, 38, 38, 8, 38);
        gson0.toJsonTree((Object) mockGregorianCalendar0);
        mockGregorianCalendar0.toString();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Gson gson0 = new Gson();
        String string0 = gson0.toString();
    }
}
