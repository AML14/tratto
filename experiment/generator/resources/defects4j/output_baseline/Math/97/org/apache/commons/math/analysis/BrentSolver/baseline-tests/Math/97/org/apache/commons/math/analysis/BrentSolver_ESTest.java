/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 21:14:20 GMT 2023
 */
package org.apache.commons.math.analysis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.BrentSolver;
import org.apache.commons.math.analysis.PolynomialFunction;
import org.apache.commons.math.analysis.PolynomialFunctionLagrangeForm;
import org.apache.commons.math.analysis.PolynomialSplineFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class BrentSolver_ESTest extends BrentSolver_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[] doubleArray0 = new double[1];
        doubleArray0[0] = (-1621.92256);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        double[] doubleArray0 = new double[5];
        double double0 = (-716.65515642436);
        doubleArray0[0] = (-716.65515642436);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 1.0E-14;
        doubleArray0[4] = 1.0E-14;
        PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[0];
        PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
        PolynomialSplineFunction polynomialSplineFunction1 = polynomialSplineFunction0.polynomialSplineDerivative();
        UnivariateRealFunction univariateRealFunction0 = polynomialSplineFunction1.derivative();
        BrentSolver brentSolver0 = new BrentSolver(univariateRealFunction0);
        double double1 = 1.0;
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        double[] doubleArray0 = new double[0];
        PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[2];
        PolynomialFunction polynomialFunction0 = null;
        polynomialFunction0 = new PolynomialFunction(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        double[] doubleArray0 = new double[2];
        PolynomialFunction[] polynomialFunctionArray0 = new PolynomialFunction[0];
        PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, polynomialFunctionArray0);
        PolynomialSplineFunction polynomialSplineFunction1 = polynomialSplineFunction0.polynomialSplineDerivative();
        BrentSolver brentSolver0 = null;
        brentSolver0 = new BrentSolver(polynomialSplineFunction1);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = Double.NaN;
        doubleArray0[1] = 1.0E-15;
        doubleArray0[2] = (-4510.698156509001);
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = (-1025.35);
        PolynomialSplineFunction polynomialSplineFunction0 = new PolynomialSplineFunction(doubleArray0, (PolynomialFunction[]) null);
        BrentSolver brentSolver0 = new BrentSolver(polynomialSplineFunction0);
        double double0 = Double.POSITIVE_INFINITY;
        brentSolver0.solve(doubleArray0[4], double0, double0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (-779.6);
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 1737.02882716;
        doubleArray0[4] = (-1963.992012385359);
        doubleArray0[5] = 0.0;
        doubleArray0[6] = 307.620826868;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
        UnivariateRealFunction univariateRealFunction0 = polynomialFunction1.derivative();
        BrentSolver brentSolver0 = new BrentSolver(univariateRealFunction0);
        brentSolver0.solve(0.0, 1768.0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 1631.4;
        doubleArray0[1] = (-1.0);
        doubleArray0[2] = 203.07557048759;
        doubleArray0[3] = 0.0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
        BrentSolver brentSolver0 = new BrentSolver(univariateRealFunction0);
        brentSolver0.solve((-1.0), 1631.4, 0.0);
        brentSolver0.solve(0.0, 959.12, 1.0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 1358.0044425483322;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = Double.POSITIVE_INFINITY;
        doubleArray0[4] = Double.NaN;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = 0.5;
        doubleArray0[7] = 0.5;
        doubleArray0[8] = (-1302.754403996);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
        brentSolver0.solve((-1794.233680471964), (-1302.754403996), 0.0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = Double.NaN;
        doubleArray0[1] = (-822.61440658905);
        doubleArray0[2] = (-1.0);
        doubleArray0[3] = 1.5;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 2276.6;
        double double0 = 2.0;
        doubleArray0[6] = 2.0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        PolynomialFunction.evaluate(doubleArray0, 2276.6);
        PolynomialFunction.differentiate(doubleArray0);
        polynomialFunction0.polynomialDerivative();
        brentSolver0.verifyInterval(0.5, Double.NaN);
        polynomialFunction0.value(0.0);
        brentSolver0.defaultMaximalIterationCount = (-2417);
        brentSolver0.solve((-467.3028784347007), 2.0);
        double double1 = brentSolver0.solve(0.0, (-822.61440658905), 1412.590456528);
        brentSolver0.solve(double0, doubleArray0[6]);
        double double2 = 1.0E-14;
        double double3 = 0.5;
        double double4 = 2797.8850271;
        brentSolver0.solve(double2, double3, double4);
        brentSolver0.solve(double1, doubleArray0[2]);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver((UnivariateRealFunction) null);
        double double0 = 0.0;
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 3109.9112056178765;
        double double0 = 3279.1329366841;
        doubleArray0[1] = 3279.1329366841;
        double double1 = 0.0;
        doubleArray0[2] = 0.0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
        polynomialFunction1.value(0.0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
        brentSolver0.setAbsoluteAccuracy(3109.9112056178765);
        double double2 = 50.8887;
        polynomialFunction0.derivative();
        polynomialFunction1.derivative();
        PolynomialFunction.evaluate(doubleArray0, 0.0);
        brentSolver0.solve(3109.9112056178765, 3279.1329366841, 50.8887);
        brentSolver0.clearResult();
        double double3 = 0.0;
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (-0.45434979018766);
        doubleArray0[1] = (-1224.19661365);
        doubleArray0[2] = (-1437.62855111132);
        doubleArray0[3] = 1267.903838786579;
        doubleArray0[4] = 0.0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
        PolynomialFunction.evaluate(doubleArray0, (-521.563387244608));
        brentSolver0.setMaximalIterationCount(2479);
        polynomialFunction1.polynomialDerivative();
        PolynomialFunction.differentiate(doubleArray0);
        brentSolver0.solve(0.0, 0.0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 1120.239;
        doubleArray0[1] = (-1549.8);
        doubleArray0[2] = 0.0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        brentSolver0.solve(1120.239, 0.0, 0.0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 1.0E-6;
        doubleArray0[1] = 1741.5850202877;
        doubleArray0[2] = (-2634.2247453252967);
        doubleArray0[3] = 1.0E-6;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        brentSolver0.solve((-3449.0), 958.3823);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 3305.51209;
        doubleArray0[2] = 6133.4;
        doubleArray0[3] = Double.NaN;
        doubleArray0[4] = (-2242.872329309273);
        PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunctionLagrangeForm0);
        brentSolver0.setRelativeAccuracy(6133.4);
        brentSolver0.defaultMaximalIterationCount = 1809;
        brentSolver0.solve((-2242.872329309273), 6133.4);
        brentSolver0.solve(1243.67292695043, (-2242.872329309273));
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 1.0E-6;
        doubleArray0[1] = 1703.539088128;
        doubleArray0[2] = (-1.0);
        doubleArray0[3] = 1.0E-14;
        doubleArray0[4] = (-1.0);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
        UnivariateRealFunction univariateRealFunction0 = polynomialFunction1.derivative();
        BrentSolver brentSolver0 = new BrentSolver(univariateRealFunction0);
        brentSolver0.solve((-1.0), 1.0E-6, 1.0E-14);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 8.002;
        doubleArray0[2] = 0.5;
        doubleArray0[3] = 0.5;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
        brentSolver0.solve((-1594.8358614586), Double.NaN);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 3223.855;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = (-1.0);
        doubleArray0[4] = (-2855.77799142);
        doubleArray0[5] = Double.NaN;
        doubleArray0[6] = (-1307.511259);
        doubleArray0[7] = (-144.363924192059);
        doubleArray0[8] = 0.0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        PolynomialFunction.evaluate(doubleArray0, 0.0);
        brentSolver0.solve(0.0, Double.NaN);
        double double0 = (-363.6);
        brentSolver0.solve(doubleArray0[2], double0, double0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 1563.0;
        doubleArray0[2] = 2.0;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = (-2255.28547895);
        doubleArray0[6] = (-931.461445);
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
        brentSolver0.solve((-1861.3), (-931.461445), Double.NaN);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 1.0E-6;
        doubleArray0[2] = 2997.0566;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
        PolynomialFunction.differentiate(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
        brentSolver0.solve(1.0E-6, (-166.66), 1.0E-6);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        double[] doubleArray0 = new double[2];
        double double0 = 1.5;
        doubleArray0[0] = 1.5;
        double double1 = 0.0;
        doubleArray0[1] = 0.0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
        brentSolver0.setRelativeAccuracy(1.5);
        double double2 = brentSolver0.solve(1.5, 0.0, 0.0);
        brentSolver0.solve(0.0, (-1886.83536996), 1.0E-6);
        brentSolver0.solve(double0, double2, double1);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        double[] doubleArray0 = new double[2];
        double double0 = 1.5;
        doubleArray0[0] = 1.5;
        double double1 = 0.0;
        doubleArray0[1] = 1.5;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
        brentSolver0.setRelativeAccuracy(1.5);
        brentSolver0.solve(1.5, 0.0, 0.0);
        double double2 = 1.0E-6;
        brentSolver0.solve(0.0, (-1886.83536996), 1.0E-6);
        double double3 = 4.3764418752698397E-7;
        brentSolver0.solve(doubleArray0[1], double3);
        brentSolver0.solve(double2, doubleArray0[0], double0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = 0.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1.0E-6;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = Double.NaN;
        doubleArray0[6] = 2185.652705690423;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
        polynomialFunction0.polynomialDerivative();
        double[] doubleArray1 = PolynomialFunction.differentiate(doubleArray0);
        brentSolver0.solve(0.0, 2.0);
        brentSolver0.defaultAbsoluteAccuracy = 0.0;
        PolynomialFunction.evaluate(doubleArray1, 1.0E-6);
        brentSolver0.resetRelativeAccuracy();
        brentSolver0.solve(0.0, 3609.17);
        polynomialFunction0.derivative();
        brentSolver0.solve(2602.552537048, 0.0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[0] = (-987.3);
        doubleArray0[1] = (-2104.8);
        doubleArray0[2] = 1091.0146;
        doubleArray0[3] = 0.0;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = 0.0;
        PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunctionLagrangeForm0);
        brentSolver0.solve((-2722.902714835398), 0.0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = 377.205282441559;
        double double0 = 0.0;
        doubleArray0[1] = 0.0;
        doubleArray0[2] = 1007.585;
        double double1 = (-456.59252182888);
        doubleArray0[3] = (-456.59252182888);
        doubleArray0[4] = 155.64351735;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
        BrentSolver brentSolver0 = new BrentSolver(univariateRealFunction0);
        double double2 = brentSolver0.solve((-456.59252182888), 1007.585);
        polynomialFunction0.derivative();
        brentSolver0.defaultRelativeAccuracy = 1007.585;
        brentSolver0.solve(1070.48819033283, 0.0, 1070.48819033283);
        brentSolver0.resetAbsoluteAccuracy();
        double double3 = 0.0;
        brentSolver0.solve(0.0, 0.0, 4169.34981857003);
        brentSolver0.clearResult();
        brentSolver0.solve(doubleArray0[4], doubleArray0[3]);
        double double4 = 1.0E-15;
        brentSolver0.solve(doubleArray0[3], double4, double2);
        double double5 = 0.0;
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = Double.NaN;
        doubleArray0[1] = 1329.65170899;
        doubleArray0[2] = 0.0;
        doubleArray0[3] = 36.2145388420927;
        doubleArray0[4] = 0.0;
        doubleArray0[5] = 0.0;
        doubleArray0[6] = (-1708.887);
        doubleArray0[7] = Double.NaN;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
        BrentSolver brentSolver0 = new BrentSolver(univariateRealFunction0);
        brentSolver0.solve((-1708.887), 36.2145388420927);
        brentSolver0.functionValueAccuracy = 847.0494;
        brentSolver0.solve((-2844.91), Double.NaN);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[0] = 2460.4345776872;
        doubleArray0[1] = 450.357;
        doubleArray0[2] = 7091478.4586825855;
        doubleArray0[3] = 461.62;
        doubleArray0[4] = (-3132.799129223553);
        doubleArray0[5] = 0.0;
        doubleArray0[6] = Double.NaN;
        doubleArray0[7] = 1.0E-15;
        doubleArray0[8] = 0.0;
        PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
        PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
        BrentSolver brentSolver0 = new BrentSolver(polynomialFunction1);
        brentSolver0.solve((-3487.317), 1.0E-15);
    }
}
