/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 16:36:27 GMT 2023
 */
package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[5] = 1.63E18;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[7] = 3.834E-20;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0026() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 61;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test0038() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = (double) 2821L;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test0049() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = 1060.6;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test00510() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[1] = (double) 872356L;
        MathUtils.checkOrder(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test00611() throws Throwable {
        int[] intArray0 = new int[3];
        intArray0[0] = 14;
        double double0 = MathUtils.distance(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test00714() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 3628800L;
        double double0 = MathUtils.distance(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test00817() throws Throwable {
        int[] intArray0 = new int[8];
        intArray0[0] = (int) (byte) 1;
        int[] intArray1 = new int[5];
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test00818() throws Throwable {
        int[] intArray0 = new int[8];
        intArray0[0] = (int) (byte) 1;
        int[] intArray1 = new int[5];
        MathUtils.distance1(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test00919() throws Throwable {
        int[] intArray0 = new int[8];
        intArray0[0] = (int) (byte) 1;
        int int0 = MathUtils.distance1(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test01022() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[5] = Double.NEGATIVE_INFINITY;
        double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01125() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01228() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test01231() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test01232() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test01233() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
    }

    @Test(timeout = 4000)
    public void test01236() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test01239() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test01240() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test01241() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test01242() throws Throwable {
        byte[] byteArray0 = new byte[7];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0L);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test01343() throws Throwable {
        long long0 = MathUtils.pow(0L, 0L);
    }

    @Test(timeout = 4000)
    public void test01444() throws Throwable {
        float float0 = MathUtils.round(Float.NaN, 0);
    }

    @Test(timeout = 4000)
    public void test01545() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (short) (-310);
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
    }

    @Test(timeout = 4000)
    public void test01548() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) (short) (-310);
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 0.9999997615814209);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test01653() throws Throwable {
        double double0 = MathUtils.scalb((-6340.6206967), (-1981));
    }

    @Test(timeout = 4000)
    public void test01754() throws Throwable {
        short short0 = MathUtils.indicator((short) 0);
    }

    @Test(timeout = 4000)
    public void test01855() throws Throwable {
        long long0 = MathUtils.indicator(0L);
    }

    @Test(timeout = 4000)
    public void test01956() throws Throwable {
        int int0 = MathUtils.indicator(2471);
    }

    @Test(timeout = 4000)
    public void test02057() throws Throwable {
        double double0 = MathUtils.indicator((double) 0);
    }

    @Test(timeout = 4000)
    public void test02158() throws Throwable {
        byte byte0 = MathUtils.indicator((byte) 39);
    }

    @Test(timeout = 4000)
    public void test02259() throws Throwable {
        long long0 = MathUtils.gcd(0L, 2216L);
    }

    @Test(timeout = 4000)
    public void test02360() throws Throwable {
        double double0 = MathUtils.factorialDouble((byte) 110);
    }

    @Test(timeout = 4000)
    public void test02461() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02462() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02464() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02465() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[8];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02571() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02572() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02574() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test02575() throws Throwable {
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[9];
        boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test02681() throws Throwable {
        MathUtils.equalsIncludingNaN(0.0, 752.22, 0);
    }

    @Test(timeout = 4000)
    public void test02782() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(0.4342944622039795, 0.0, 0.4342944622039795);
    }

    @Test(timeout = 4000)
    public void test02883() throws Throwable {
        boolean boolean0 = MathUtils.equals(1.0, (double) 2L, 1.0);
    }

    @Test(timeout = 4000)
    public void test02984() throws Throwable {
        boolean boolean0 = MathUtils.equals(10.0, 3087.04427599);
    }

    @Test(timeout = 4000)
    public void test03085() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(61, (-6));
    }

    @Test(timeout = 4000)
    public void test03186() throws Throwable {
        long long0 = MathUtils.subAndCheck(0L, (long) 9);
    }

    @Test(timeout = 4000)
    public void test03287() throws Throwable {
        long long0 = MathUtils.addAndCheck(1800L, 1800L);
    }

    @Test(timeout = 4000)
    public void test03388() throws Throwable {
        int int0 = MathUtils.addAndCheck(31, 64);
    }

    @Test(timeout = 4000)
    public void test03489() throws Throwable {
        long long0 = MathUtils.subAndCheck(471L, (long) 1);
    }

    @Test(timeout = 4000)
    public void test03590() throws Throwable {
        int int0 = MathUtils.subAndCheck((-639), (-639));
    }

    @Test(timeout = 4000)
    public void test03691() throws Throwable {
        int int0 = MathUtils.subAndCheck(0, 2257);
    }

    @Test(timeout = 4000)
    public void test03792() throws Throwable {
        double double0 = MathUtils.sinh(0.0);
    }

    @Test(timeout = 4000)
    public void test03893() throws Throwable {
        double double0 = MathUtils.sinh((-3052.3));
    }

    @Test(timeout = 4000)
    public void test03994() throws Throwable {
        float float0 = MathUtils.round(0.0F, 9, 0);
    }

    @Test(timeout = 4000)
    public void test04095() throws Throwable {
        float float0 = MathUtils.round((-3002.0F), 0, 0);
    }

    @Test(timeout = 4000)
    public void test04196() throws Throwable {
        float float0 = MathUtils.round((float) 0, 915);
    }

    @Test(timeout = 4000)
    public void test04297() throws Throwable {
        float float0 = MathUtils.round((float) 14, 14);
    }

    @Test(timeout = 4000)
    public void test04398() throws Throwable {
        float float0 = MathUtils.round((-3241.0F), 30);
    }

    @Test(timeout = 4000)
    public void test04499() throws Throwable {
        double double0 = MathUtils.round(0.0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test045100() throws Throwable {
        double double0 = MathUtils.round((double) 1, 136, 0);
    }

    @Test(timeout = 4000)
    public void test046101() throws Throwable {
        double double0 = MathUtils.round(1062.0, 706);
    }

    @Test(timeout = 4000)
    public void test047102() throws Throwable {
        double double0 = MathUtils.round((-1531.101501175026), 927);
    }

    @Test(timeout = 4000)
    public void test048103() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test048106() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test048107() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test048108() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test048111() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test048114() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test048115() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test048116() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test048117() throws Throwable {
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 95;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test049118() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
    }

    @Test(timeout = 4000)
    public void test049119() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test049120() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test049121() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
    }

    @Test(timeout = 4000)
    public void test049124() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test049125() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test049126() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test049127() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test049128() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 194L);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test050129() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test050132() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test050133() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test050134() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    }

    @Test(timeout = 4000)
    public void test050137() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test050140() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test050141() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test050142() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test050143() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 85;
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test051147() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
    }

    @Test(timeout = 4000)
    public void test051150() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test051151() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test051152() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test051153() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 0);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test052154() throws Throwable {
        long long0 = MathUtils.pow(4635822497680326656L, (long) 1);
    }

    @Test(timeout = 4000)
    public void test053155() throws Throwable {
        long long0 = MathUtils.pow((-4035746434778044925L), 483L);
    }

    @Test(timeout = 4000)
    public void test054156() throws Throwable {
        long long0 = MathUtils.pow((long) (byte) 0, 1);
    }

    @Test(timeout = 4000)
    public void test055157() throws Throwable {
        long long0 = MathUtils.pow((-309L), 0);
    }

    @Test(timeout = 4000)
    public void test056158() throws Throwable {
        int int0 = MathUtils.pow(1880, (long) 1880);
    }

    @Test(timeout = 4000)
    public void test057159() throws Throwable {
        int int0 = MathUtils.pow(143, (long) 143);
    }

    @Test(timeout = 4000)
    public void test058160() throws Throwable {
        int int0 = MathUtils.pow(1, (int) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test059161() throws Throwable {
        int int0 = MathUtils.pow(9, 272);
    }

    @Test(timeout = 4000)
    public void test060162() throws Throwable {
        double double0 = MathUtils.normalizeAngle(0.0, 0.0);
    }

    @Test(timeout = 4000)
    public void test061163() throws Throwable {
        double double0 = MathUtils.normalizeAngle(2304L, (-2648.155));
    }

    @Test(timeout = 4000)
    public void test062164() throws Throwable {
        int int0 = MathUtils.mulAndCheck(0, 40);
    }

    @Test(timeout = 4000)
    public void test063165() throws Throwable {
        int int0 = MathUtils.mulAndCheck((-2703), 3908);
    }

    @Test(timeout = 4000)
    public void test064166() throws Throwable {
        double double0 = MathUtils.log(0.0, 570.4046387729519);
    }

    @Test(timeout = 4000)
    public void test065167() throws Throwable {
        double double0 = MathUtils.log(4507L, 4507L);
    }

    @Test(timeout = 4000)
    public void test066168() throws Throwable {
        double double0 = MathUtils.log((byte) 1, 0.0);
    }

    @Test(timeout = 4000)
    public void test067169() throws Throwable {
        int int0 = MathUtils.hash((double[]) null);
    }

    @Test(timeout = 4000)
    public void test068170() throws Throwable {
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = Double.NEGATIVE_INFINITY;
        int int0 = MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test069173() throws Throwable {
        int int0 = MathUtils.hash(1.0);
    }

    @Test(timeout = 4000)
    public void test070174() throws Throwable {
        int int0 = MathUtils.hash(9.219544613762692E-9);
    }

    @Test(timeout = 4000)
    public void test071175() throws Throwable {
        int int0 = MathUtils.gcd(0, 0);
    }

    @Test(timeout = 4000)
    public void test072176() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test072177() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1[0] = (-2147483644);
        int int0 = MathUtils.distanceInf(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test072179() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1[0] = (-2147483644);
        int int0 = MathUtils.distanceInf(intArray0, intArray1);
        intArray0.equals((Object) intArray1);
    }

    @Test(timeout = 4000)
    public void test072180() throws Throwable {
        int[] intArray0 = new int[3];
        int[] intArray1 = new int[6];
        intArray1[0] = (-2147483644);
        int int0 = MathUtils.distanceInf(intArray0, intArray1);
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test073186() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test073187() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test073189() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test073190() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test074196() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test074197() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        double double0 = MathUtils.distance(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test074199() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        double double0 = MathUtils.distance(intArray0, intArray1);
        intArray0.equals((Object) intArray1);
    }

    @Test(timeout = 4000)
    public void test074200() throws Throwable {
        int[] intArray0 = new int[6];
        intArray0[2] = 1030;
        int[] intArray1 = new int[6];
        double double0 = MathUtils.distance(intArray0, intArray1);
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test075206() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test075207() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        double double0 = MathUtils.distance(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test075209() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        double double0 = MathUtils.distance(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test075210() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = 114.316110400768;
        double[] doubleArray1 = new double[6];
        double double0 = MathUtils.distance(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test076216() throws Throwable {
        long long0 = MathUtils.addAndCheck(0L, (long) (short) 0);
    }

    @Test(timeout = 4000)
    public void test077217() throws Throwable {
        long long0 = MathUtils.addAndCheck((long) (byte) 1, (-1694L));
    }

    @Test(timeout = 4000)
    public void test078218() throws Throwable {
        MathUtils.safeNorm((double[]) null);
    }

    @Test(timeout = 4000)
    public void test079219() throws Throwable {
        MathUtils.round(2921.464137515, (int) (byte) 0, (-2682));
    }

    @Test(timeout = 4000)
    public void test080220() throws Throwable {
        MathUtils.round((-1725.28993636968), 710504735, 0);
    }

    @Test(timeout = 4000)
    public void test081221() throws Throwable {
        MathUtils.pow((BigInteger) null, (BigInteger) null);
    }

    @Test(timeout = 4000)
    public void test082222() throws Throwable {
        MathUtils.pow((BigInteger) null, 65L);
    }

    @Test(timeout = 4000)
    public void test083223() throws Throwable {
        MathUtils.pow((BigInteger) null, 883);
    }

    @Test(timeout = 4000)
    public void test084224() throws Throwable {
        MockRandom mockRandom0 = new MockRandom((-37L));
    }

    @Test(timeout = 4000)
    public void test084225() throws Throwable {
        MockRandom mockRandom0 = new MockRandom((-37L));
        BigInteger bigInteger0 = new BigInteger(1162067162, mockRandom0);
    }

    @Test(timeout = 4000)
    public void test084226() throws Throwable {
        MockRandom mockRandom0 = new MockRandom((-37L));
        BigInteger bigInteger0 = new BigInteger(1162067162, mockRandom0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test084227() throws Throwable {
        MockRandom mockRandom0 = new MockRandom((-37L));
        BigInteger bigInteger0 = new BigInteger(1162067162, mockRandom0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test084228() throws Throwable {
        MockRandom mockRandom0 = new MockRandom((-37L));
        BigInteger bigInteger0 = new BigInteger(1162067162, mockRandom0);
        MathUtils.pow(bigInteger0, 1162067162);
    }

    @Test(timeout = 4000)
    public void test085229() throws Throwable {
        MathUtils.normalizeArray((double[]) null, (-1067.364075367));
    }

    @Test(timeout = 4000)
    public void test086230() throws Throwable {
        MathUtils.lcm(4577762542105553359L, 121645100408832000L);
    }

    @Test(timeout = 4000)
    public void test087231() throws Throwable {
        MathUtils.lcm((-1287859880), (-2376));
    }

    @Test(timeout = 4000)
    public void test088232() throws Throwable {
        // Undeclared exception!
        MathUtils.factorialLog(2143136515);
    }

    @Test(timeout = 4000)
    public void test089233() throws Throwable {
        MathUtils.distanceInf((int[]) null, (int[]) null);
    }

    @Test(timeout = 4000)
    public void test090234() throws Throwable {
        int[] intArray0 = new int[6];
        int[] intArray1 = new int[1];
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test090235() throws Throwable {
        int[] intArray0 = new int[6];
        int[] intArray1 = new int[1];
        MathUtils.distanceInf(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test091236() throws Throwable {
        MathUtils.distanceInf((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test092237() throws Throwable {
        MathUtils.distance1((int[]) null, (int[]) null);
    }

    @Test(timeout = 4000)
    public void test093238() throws Throwable {
        double[] doubleArray0 = new double[1];
        MathUtils.distance1(doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test094239() throws Throwable {
        int[] intArray0 = new int[5];
        MathUtils.distance((int[]) null, intArray0);
    }

    @Test(timeout = 4000)
    public void test095240() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = new int[1];
        intArray1.equals((Object) intArray0);
    }

    @Test(timeout = 4000)
    public void test095241() throws Throwable {
        int[] intArray0 = new int[7];
        int[] intArray1 = new int[1];
        MathUtils.distance(intArray0, intArray1);
    }

    @Test(timeout = 4000)
    public void test096242() throws Throwable {
        MathUtils.distance((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test097243() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = new double[1];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test097244() throws Throwable {
        double[] doubleArray0 = new double[5];
        double[] doubleArray1 = new double[1];
        MathUtils.distance(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test098245() throws Throwable {
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
        MathUtils.checkOrder((double[]) null, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test099246() throws Throwable {
        double[] doubleArray0 = new double[0];
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test100247() throws Throwable {
        MathUtils.binomialCoefficientDouble((-2147483647), 72);
    }

    @Test(timeout = 4000)
    public void test101248() throws Throwable {
        MathUtils.binomialCoefficient((-386), 1547);
    }

    @Test(timeout = 4000)
    public void test102249() throws Throwable {
        double[] doubleArray0 = new double[6];
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test103250() throws Throwable {
        MathUtils.mulAndCheck(287L, 2935890503282001226L);
    }

    @Test(timeout = 4000)
    public void test104251() throws Throwable {
        long long0 = MathUtils.mulAndCheck((long) (short) 1, 336L);
    }

    @Test(timeout = 4000)
    public void test105252() throws Throwable {
        long long0 = MathUtils.mulAndCheck((-5034868814120038111L), 1L);
    }

    @Test(timeout = 4000)
    public void test106253() throws Throwable {
        long long0 = MathUtils.mulAndCheck(0L, 1800L);
    }

    @Test(timeout = 4000)
    public void test107254() throws Throwable {
        int int0 = MathUtils.mulAndCheck((-473), (-1621));
    }

    @Test(timeout = 4000)
    public void test108255() throws Throwable {
        float float0 = MathUtils.indicator((-1.0F));
    }

    @Test(timeout = 4000)
    public void test109256() throws Throwable {
        long long0 = MathUtils.gcd(355687428096000L, 355687428096000L);
    }

    @Test(timeout = 4000)
    public void test110257() throws Throwable {
        int int0 = MathUtils.gcd(9, 1532);
    }

    @Test(timeout = 4000)
    public void test111258() throws Throwable {
        long long0 = MathUtils.factorial(13);
    }

    @Test(timeout = 4000)
    public void test112259() throws Throwable {
        boolean boolean0 = MathUtils.equals((double) 1, (double) (-978), 123);
    }

    @Test(timeout = 4000)
    public void test113260() throws Throwable {
        boolean boolean0 = MathUtils.equals((-1409.0), (-1409.0), 902);
    }

    @Test(timeout = 4000)
    public void test114261() throws Throwable {
        MathUtils.equals(0.5000000000042687, 3087.04427599, 1073741824);
    }

    @Test(timeout = 4000)
    public void test115262() throws Throwable {
        boolean boolean0 = MathUtils.equals(545.8799724201457, 545.8799724201457, 1030);
    }

    @Test(timeout = 4000)
    public void test116263() throws Throwable {
        MathUtils.equals((-3010.7841332), 1439.9909648456148, (-2144));
    }

    @Test(timeout = 4000)
    public void test117264() throws Throwable {
        boolean boolean0 = MathUtils.equals((-2259.94506036678), (-2259.94506036678), (-2259.94506036678));
    }

    @Test(timeout = 4000)
    public void test118265() throws Throwable {
        boolean boolean0 = MathUtils.equals(2.2250738585072014E-308, (double) 1, 2.2250738585072014E-308);
    }

    @Test(timeout = 4000)
    public void test119266() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 0.0);
    }

    @Test(timeout = 4000)
    public void test120267() throws Throwable {
        boolean boolean0 = MathUtils.equals((-3052.3), (-3052.3));
    }

    @Test(timeout = 4000)
    public void test121268() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(2025, 14);
    }

    @Test(timeout = 4000)
    public void test122269() throws Throwable {
        MathUtils.binomialCoefficient(119764, 927);
    }

    @Test(timeout = 4000)
    public void test123270() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[2] = Double.NaN;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test124273() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = 2.2250738585072014E-308;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test125276() throws Throwable {
        double[] doubleArray0 = new double[7];
        doubleArray0[6] = Double.POSITIVE_INFINITY;
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test126279() throws Throwable {
        double[] doubleArray0 = new double[8];
        double double0 = MathUtils.safeNorm(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test127282() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = 1060.6;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test128283() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) 61;
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, true);
    }

    @Test(timeout = 4000)
    public void test129284() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[1] = 1.0;
        MathUtils.checkOrder(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test130286() throws Throwable {
        double[] doubleArray0 = new double[3];
        MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, false);
    }

    @Test(timeout = 4000)
    public void test131288() throws Throwable {
        int[] intArray0 = new int[4];
        int int0 = MathUtils.distanceInf(intArray0, intArray0);
    }

    @Test(timeout = 4000)
    public void test132291() throws Throwable {
        double[] doubleArray0 = new double[4];
        double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test133294() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
    }

    @Test(timeout = 4000)
    public void test133295() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test133296() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test133297() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test133300() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test133301() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test133302() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test133303() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test133304() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test134305() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-33);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test134308() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-33);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test134309() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-33);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test134310() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[0] = (byte) (-33);
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test135311() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
    }

    @Test(timeout = 4000)
    public void test135312() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test135313() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test135314() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
    }

    @Test(timeout = 4000)
    public void test135317() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test135318() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test135319() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test135320() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test135321() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test136322() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test136325() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test136326() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test136327() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
    }

    @Test(timeout = 4000)
    public void test136330() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test136333() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test136334() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test136335() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test136336() throws Throwable {
        byte[] byteArray0 = new byte[1];
        BigInteger bigInteger0 = new BigInteger(byteArray0);
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 544L);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test137340() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        MathUtils.pow(bigInteger0, (-4607181111125649408L));
    }

    @Test(timeout = 4000)
    public void test138344() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        MathUtils.pow(bigInteger0, (-997));
    }

    @Test(timeout = 4000)
    public void test139348() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
    }

    @Test(timeout = 4000)
    public void test139351() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
        bigInteger1.equals((Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test139352() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
        bigInteger0.byteValue();
    }

    @Test(timeout = 4000)
    public void test139353() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
        bigInteger0.shortValue();
    }

    @Test(timeout = 4000)
    public void test139354() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
        bigInteger1.byteValue();
    }

    @Test(timeout = 4000)
    public void test139355() throws Throwable {
        BigInteger bigInteger0 = BigInteger.TEN;
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, 992);
        bigInteger1.shortValue();
    }

    @Test(timeout = 4000)
    public void test140356() throws Throwable {
        MathUtils.pow(0L, (-638L));
    }

    @Test(timeout = 4000)
    public void test141357() throws Throwable {
        long long0 = MathUtils.pow(0L, 1581L);
    }

    @Test(timeout = 4000)
    public void test142358() throws Throwable {
        MathUtils.pow((long) 1, (-1841));
    }

    @Test(timeout = 4000)
    public void test143359() throws Throwable {
        long long0 = MathUtils.pow(4294967295L, 596);
    }

    @Test(timeout = 4000)
    public void test144360() throws Throwable {
        int int0 = MathUtils.pow((-2059), 2L);
    }

    @Test(timeout = 4000)
    public void test145361() throws Throwable {
        MathUtils.pow(14, (-1445L));
    }

    @Test(timeout = 4000)
    public void test146362() throws Throwable {
        int int0 = MathUtils.pow(395, (long) 0);
    }

    @Test(timeout = 4000)
    public void test147363() throws Throwable {
        MathUtils.pow((-3551), (-3551));
    }

    @Test(timeout = 4000)
    public void test148364() throws Throwable {
        int int0 = MathUtils.pow(0, 2682);
    }

    @Test(timeout = 4000)
    public void test149365() throws Throwable {
        int int0 = MathUtils.subAndCheck(220, (-967));
    }

    @Test(timeout = 4000)
    public void test150366() throws Throwable {
        MathUtils.subAndCheck((-2147483646), (int) (short) 238);
    }

    @Test(timeout = 4000)
    public void test151367() throws Throwable {
        short short0 = MathUtils.sign((short) (-4654));
    }

    @Test(timeout = 4000)
    public void test152368() throws Throwable {
        short short0 = MathUtils.sign((short) 0);
    }

    @Test(timeout = 4000)
    public void test153369() throws Throwable {
        short short0 = MathUtils.sign((short) 85);
    }

    @Test(timeout = 4000)
    public void test154370() throws Throwable {
        long long0 = MathUtils.sign((long) (-1367));
    }

    @Test(timeout = 4000)
    public void test155371() throws Throwable {
        long long0 = MathUtils.sign(0L);
    }

    @Test(timeout = 4000)
    public void test156372() throws Throwable {
        long long0 = MathUtils.sign((long) 916);
    }

    @Test(timeout = 4000)
    public void test157373() throws Throwable {
        int int0 = MathUtils.sign((-2355));
    }

    @Test(timeout = 4000)
    public void test158374() throws Throwable {
        int int0 = MathUtils.sign(0);
    }

    @Test(timeout = 4000)
    public void test159375() throws Throwable {
        int int0 = MathUtils.sign(4239481);
    }

    @Test(timeout = 4000)
    public void test160376() throws Throwable {
        float float0 = MathUtils.sign(1694.555F);
    }

    @Test(timeout = 4000)
    public void test161377() throws Throwable {
        float float0 = MathUtils.sign((float) 0);
    }

    @Test(timeout = 4000)
    public void test162378() throws Throwable {
        float float0 = MathUtils.sign(Float.NaN);
    }

    @Test(timeout = 4000)
    public void test163379() throws Throwable {
        float float0 = MathUtils.sign((-61.0F));
    }

    @Test(timeout = 4000)
    public void test164380() throws Throwable {
        double double0 = MathUtils.sign((-48.01345));
    }

    @Test(timeout = 4000)
    public void test165381() throws Throwable {
        double double0 = MathUtils.sign(0.0);
    }

    @Test(timeout = 4000)
    public void test166382() throws Throwable {
        double double0 = MathUtils.sign(323.0);
    }

    @Test(timeout = 4000)
    public void test167383() throws Throwable {
        byte byte0 = MathUtils.sign((byte) (-31));
    }

    @Test(timeout = 4000)
    public void test168384() throws Throwable {
        byte byte0 = MathUtils.sign((byte) 0);
    }

    @Test(timeout = 4000)
    public void test169385() throws Throwable {
        byte byte0 = MathUtils.sign((byte) 24);
    }

    @Test(timeout = 4000)
    public void test170386() throws Throwable {
        MathUtils.round((float) 0, 0, (-1687));
    }

    @Test(timeout = 4000)
    public void test171387() throws Throwable {
        float float0 = MathUtils.round((float) 2508, 2508, 1);
    }

    @Test(timeout = 4000)
    public void test172388() throws Throwable {
        float float0 = MathUtils.round((float) 0L, 9998, 0);
    }

    @Test(timeout = 4000)
    public void test173389() throws Throwable {
        double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, 61, 0);
    }

    @Test(timeout = 4000)
    public void test174390() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) Float.NaN;
        doubleArray0[2] = (double) 402;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
    }

    @Test(timeout = 4000)
    public void test174393() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) Float.NaN;
        doubleArray0[2] = (double) 402;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 2202.8);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test175398() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = (double) Float.NaN;
        MathUtils.normalizeArray(doubleArray0, 2202.8);
    }

    @Test(timeout = 4000)
    public void test176399() throws Throwable {
        double[] doubleArray0 = new double[9];
        doubleArray0[4] = Double.POSITIVE_INFINITY;
        MathUtils.normalizeArray(doubleArray0, (-3551.0));
    }

    @Test(timeout = 4000)
    public void test177400() throws Throwable {
        double[] doubleArray0 = new double[3];
        MathUtils.normalizeArray(doubleArray0, Double.NaN);
    }

    @Test(timeout = 4000)
    public void test178401() throws Throwable {
        double double0 = MathUtils.scalb(Double.POSITIVE_INFINITY, (byte) 9);
    }

    @Test(timeout = 4000)
    public void test179402() throws Throwable {
        double double0 = MathUtils.scalb(0.0, (-64));
    }

    @Test(timeout = 4000)
    public void test180403() throws Throwable {
        long long0 = MathUtils.mulAndCheck(2307L, 0L);
    }

    @Test(timeout = 4000)
    public void test181404() throws Throwable {
        MathUtils.mulAndCheck((long) (-1981), 2935890503282001226L);
    }

    @Test(timeout = 4000)
    public void test182405() throws Throwable {
        long long0 = MathUtils.mulAndCheck((-904L), 0L);
    }

    @Test(timeout = 4000)
    public void test183406() throws Throwable {
        long long0 = MathUtils.mulAndCheck((-934L), (-934L));
    }

    @Test(timeout = 4000)
    public void test184407() throws Throwable {
        MathUtils.mulAndCheck((-976L), (-4035746434778044925L));
    }

    @Test(timeout = 4000)
    public void test185408() throws Throwable {
        MathUtils.mulAndCheck(Integer.MIN_VALUE, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test186409() throws Throwable {
        MathUtils.mulAndCheck((-2146209931), 6);
    }

    @Test(timeout = 4000)
    public void test187410() throws Throwable {
        long long0 = MathUtils.lcm((-95L), 0L);
    }

    @Test(timeout = 4000)
    public void test188411() throws Throwable {
        long long0 = MathUtils.lcm(0L, (-5241L));
    }

    @Test(timeout = 4000)
    public void test189412() throws Throwable {
        int int0 = MathUtils.lcm((-1712), 0);
    }

    @Test(timeout = 4000)
    public void test190413() throws Throwable {
        int int0 = MathUtils.lcm(70, 70);
    }

    @Test(timeout = 4000)
    public void test191414() throws Throwable {
        int int0 = MathUtils.lcm(0, 931);
    }

    @Test(timeout = 4000)
    public void test192415() throws Throwable {
        short short0 = MathUtils.indicator((short) 78);
    }

    @Test(timeout = 4000)
    public void test193416() throws Throwable {
        short short0 = MathUtils.indicator((short) (-2116));
    }

    @Test(timeout = 4000)
    public void test194417() throws Throwable {
        long long0 = MathUtils.indicator((long) 70);
    }

    @Test(timeout = 4000)
    public void test195418() throws Throwable {
        long long0 = MathUtils.indicator((-2175L));
    }

    @Test(timeout = 4000)
    public void test196419() throws Throwable {
        int int0 = MathUtils.indicator(0);
    }

    @Test(timeout = 4000)
    public void test197420() throws Throwable {
        int int0 = MathUtils.indicator((-1400));
    }

    @Test(timeout = 4000)
    public void test198421() throws Throwable {
        float float0 = MathUtils.indicator(1.0F);
    }

    @Test(timeout = 4000)
    public void test199422() throws Throwable {
        float float0 = MathUtils.indicator(Float.NaN);
    }

    @Test(timeout = 4000)
    public void test200423() throws Throwable {
        double double0 = MathUtils.indicator(1.0);
    }

    @Test(timeout = 4000)
    public void test201424() throws Throwable {
        double double0 = MathUtils.indicator((double) (-681));
    }

    @Test(timeout = 4000)
    public void test202425() throws Throwable {
        byte byte0 = MathUtils.indicator((byte) 0);
    }

    @Test(timeout = 4000)
    public void test203426() throws Throwable {
        byte byte0 = MathUtils.indicator((byte) (-31));
    }

    @Test(timeout = 4000)
    public void test204427() throws Throwable {
        MathUtils.gcd((-9223372036854775808L), (-9223372036854775808L));
    }

    @Test(timeout = 4000)
    public void test205428() throws Throwable {
        long long0 = MathUtils.lcm(395L, (-2144L));
    }

    @Test(timeout = 4000)
    public void test206429() throws Throwable {
        long long0 = MathUtils.gcd((-1L), (long) (short) 0);
    }

    @Test(timeout = 4000)
    public void test207430() throws Throwable {
        long long0 = MathUtils.gcd((-9223372036854775808L), 4648655997399728128L);
    }

    @Test(timeout = 4000)
    public void test208431() throws Throwable {
        long long0 = MathUtils.gcd((long) 0, (long) 0);
    }

    @Test(timeout = 4000)
    public void test209432() throws Throwable {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test210433() throws Throwable {
        int int0 = MathUtils.gcd((-1172), (-2567));
    }

    @Test(timeout = 4000)
    public void test211434() throws Throwable {
        int int0 = MathUtils.gcd((-1), 0);
    }

    @Test(timeout = 4000)
    public void test212435() throws Throwable {
        int int0 = MathUtils.gcd(0, (-303));
    }

    @Test(timeout = 4000)
    public void test213436() throws Throwable {
        double double0 = MathUtils.factorialLog(1300);
    }

    @Test(timeout = 4000)
    public void test214437() throws Throwable {
        double double0 = MathUtils.factorialLog(0);
    }

    @Test(timeout = 4000)
    public void test215438() throws Throwable {
        MathUtils.factorialLog((-1192));
    }

    @Test(timeout = 4000)
    public void test216439() throws Throwable {
        // Undeclared exception!
        MathUtils.factorialDouble(2117237399);
    }

    @Test(timeout = 4000)
    public void test217440() throws Throwable {
        MathUtils.factorialDouble((-1108));
    }

    @Test(timeout = 4000)
    public void test218441() throws Throwable {
        MathUtils.factorial(83);
    }

    @Test(timeout = 4000)
    public void test219442() throws Throwable {
        MathUtils.factorial((-82));
    }

    @Test(timeout = 4000)
    public void test220443() throws Throwable {
        double double0 = MathUtils.factorialDouble(0);
    }

    @Test(timeout = 4000)
    public void test221445() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test221447() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test221448() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = 49.053375057164;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test222454() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test222455() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test222457() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test222458() throws Throwable {
        double[] doubleArray0 = new double[9];
        double[] doubleArray1 = new double[5];
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test223464() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test224465() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
    }

    @Test(timeout = 4000)
    public void test224468() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test224473() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test224475() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test224476() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = (double) 1.0F;
        doubleArray0[2] = (double) 1.0F;
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, 1.0);
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test225482() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test225483() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test225485() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        doubleArray0.equals((Object) doubleArray1);
    }

    @Test(timeout = 4000)
    public void test225486() throws Throwable {
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
        doubleArray1.equals((Object) doubleArray0);
    }

    @Test(timeout = 4000)
    public void test226492() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test227495() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test228498() throws Throwable {
        boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test229499() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, (double) 0.0F, 647);
    }

    @Test(timeout = 4000)
    public void test230500() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN((double) (short) 1, (double) (short) 19, 22);
    }

    @Test(timeout = 4000)
    public void test231501() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN((double) 0, (-1769.71));
    }

    @Test(timeout = 4000)
    public void test232502() throws Throwable {
        MathUtils.equalsIncludingNaN((double) 6L, 2.0, 4194304);
    }

    @Test(timeout = 4000)
    public void test233503() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(11.0, 888.8365771801, 1242.851314);
    }

    @Test(timeout = 4000)
    public void test234504() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(0.0, 2021.0989655927, (-189.65088836));
    }

    @Test(timeout = 4000)
    public void test235505() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(10.0, 10.0, 10.0);
    }

    @Test(timeout = 4000)
    public void test236506() throws Throwable {
        boolean boolean0 = MathUtils.equals(87.0, (double) 916, (double) 1300);
    }

    @Test(timeout = 4000)
    public void test237507() throws Throwable {
        boolean boolean0 = MathUtils.equalsIncludingNaN(Double.NaN, 1568.3587501037364);
    }

    @Test(timeout = 4000)
    public void test238508() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = Double.NaN;
        boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test239511() throws Throwable {
        double[] doubleArray0 = new double[3];
        doubleArray0[0] = Double.NaN;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test240514() throws Throwable {
        int int0 = MathUtils.compareTo(Double.NaN, 0, 1);
    }

    @Test(timeout = 4000)
    public void test241515() throws Throwable {
        int int0 = MathUtils.compareTo(1.304E19, 1.304E19, 0.097);
    }

    @Test(timeout = 4000)
    public void test242516() throws Throwable {
        int int0 = MathUtils.compareTo(647.3, 2294L, 0.0);
    }

    @Test(timeout = 4000)
    public void test243517() throws Throwable {
        MathUtils.binomialCoefficientLog((-2595), (-2595));
    }

    @Test(timeout = 4000)
    public void test244518() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1627, 1525);
    }

    @Test(timeout = 4000)
    public void test245519() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(524, (-3363));
    }

    @Test(timeout = 4000)
    public void test246520() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(205, 0);
    }

    @Test(timeout = 4000)
    public void test247521() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(1, (-681));
    }

    @Test(timeout = 4000)
    public void test248522() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(0, 0);
    }

    @Test(timeout = 4000)
    public void test249523() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(2471, 13);
    }

    @Test(timeout = 4000)
    public void test250524() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(2513, 1);
    }

    @Test(timeout = 4000)
    public void test251525() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(2513, 0);
    }

    @Test(timeout = 4000)
    public void test252526() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(4, 4);
    }

    @Test(timeout = 4000)
    public void test253527() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(1382, (-622));
    }

    @Test(timeout = 4000)
    public void test254528() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(66, 2);
    }

    @Test(timeout = 4000)
    public void test255529() throws Throwable {
        MathUtils.binomialCoefficient(3239, 1924);
    }

    @Test(timeout = 4000)
    public void test256530() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(57, 1);
    }

    @Test(timeout = 4000)
    public void test257531() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(1030, 0);
    }

    @Test(timeout = 4000)
    public void test258532() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(39, 22);
    }

    @Test(timeout = 4000)
    public void test259533() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(0, 0);
    }

    @Test(timeout = 4000)
    public void test260534() throws Throwable {
        long long0 = MathUtils.subAndCheck((-1862L), (-1862L));
    }

    @Test(timeout = 4000)
    public void test261535() throws Throwable {
        long long0 = MathUtils.subAndCheck((-874L), 1421L);
    }

    @Test(timeout = 4000)
    public void test262536() throws Throwable {
        int int0 = MathUtils.addAndCheck((-1), 0);
    }

    @Test(timeout = 4000)
    public void test263537() throws Throwable {
        double double0 = MathUtils.round(1.4456468917292502E-16, 0);
    }

    @Test(timeout = 4000)
    public void test264538() throws Throwable {
        double double0 = MathUtils.cosh((-442.158));
    }

    @Test(timeout = 4000)
    public void test265539() throws Throwable {
        double double0 = MathUtils.normalizeAngle((-1493.0), 0);
    }

    @Test(timeout = 4000)
    public void test266540() throws Throwable {
        MathUtils.sinh(1.0);
    }

    @Test(timeout = 4000)
    public void test267541() throws Throwable {
        double[] doubleArray0 = new double[0];
        int int0 = MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test268542() throws Throwable {
        MathUtils.checkOrder((double[]) null);
    }

    @Test(timeout = 4000)
    public void test269543() throws Throwable {
        int int0 = MathUtils.hash((double) 0);
    }
}
