/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 15:56:11 GMT 2023
 */
package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        double double0 = Vector3D.distanceSq(vector3D0, vector3D0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.NaN.orthogonal();
        Vector3D.distanceInf(vector3D1, vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.NaN.orthogonal();
        Vector3D.distanceInf(vector3D1, vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        double double0 = Vector3D.distance1(vector3D0, vector3D0);
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_K;
        Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_K;
        Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_K;
        Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D1.getNormSq();
    }

    @Test(timeout = 4000)
    public void test0048() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_K;
        Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test0049() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_K;
        Vector3D vector3D1 = vector3D0.PLUS_J.orthogonal();
        boolean boolean0 = vector3D1.equals(vector3D0);
    }

    @Test(timeout = 4000)
    public void test00510() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test00511() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test00512() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test00513() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D1.getNormSq();
    }

    @Test(timeout = 4000)
    public void test00514() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D0.equals((Object) vector3D1);
    }

    @Test(timeout = 4000)
    public void test00515() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.add(1.0, vector3D0);
        boolean boolean0 = vector3D1.equals(vector3D0);
    }

    @Test(timeout = 4000)
    public void test00616() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = new Vector3D(3221.73509842, vector3D0, 1752.3212, vector3D0);
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D1.getNormSq();
    }

    @Test(timeout = 4000)
    public void test00617() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = new Vector3D(3221.73509842, vector3D0, 1752.3212, vector3D0);
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D0.equals((Object) vector3D1);
    }

    @Test(timeout = 4000)
    public void test00618() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = new Vector3D(3221.73509842, vector3D0, 1752.3212, vector3D0);
        boolean boolean0 = vector3D1.equals(vector3D0);
    }

    @Test(timeout = 4000)
    public void test00719() throws Throwable {
        Vector3D vector3D0 = new Vector3D(834.5009557906232, (-2754.0));
        Vector3D vector3D1 = new Vector3D(834.5009557906232, vector3D0);
        Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D0);
        Vector3D vector3D3 = vector3D0.subtract((-2754.0), vector3D2);
        Vector3D vector3D4 = vector3D3.scalarMultiply((-2754.0));
        double double0 = Vector3D.angle(vector3D1, vector3D4);
    }

    @Test(timeout = 4000)
    public void test00720() throws Throwable {
        Vector3D vector3D0 = new Vector3D(834.5009557906232, (-2754.0));
        Vector3D vector3D1 = new Vector3D(834.5009557906232, vector3D0);
        Vector3D vector3D2 = Vector3D.crossProduct(vector3D1, vector3D0);
        Vector3D vector3D3 = vector3D0.subtract((-2754.0), vector3D2);
        Vector3D vector3D4 = vector3D3.scalarMultiply((-2754.0));
        double double0 = Vector3D.angle(vector3D1, vector3D4);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test00821() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.6, 342.0);
        Vector3D vector3D1 = new Vector3D(0.43359924128746297, vector3D0, 0.43359924128746297, vector3D0, 1.0, vector3D0);
        double double0 = Vector3D.angle(vector3D1, vector3D0);
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test00822() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.6, 342.0);
        Vector3D vector3D1 = new Vector3D(0.43359924128746297, vector3D0, 0.43359924128746297, vector3D0, 1.0, vector3D0);
        double double0 = Vector3D.angle(vector3D1, vector3D0);
    }

    @Test(timeout = 4000)
    public void test00823() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.6, 342.0);
        Vector3D vector3D1 = new Vector3D(0.43359924128746297, vector3D0, 0.43359924128746297, vector3D0, 1.0, vector3D0);
        double double0 = Vector3D.angle(vector3D1, vector3D0);
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test00924() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        double double0 = Vector3D.angle(vector3D0, vector3D0);
    }

    @Test(timeout = 4000)
    public void test01025() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply((-1628.9462));
        Vector3D.angle(vector3D0, vector3D1);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test01026() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply((-1628.9462));
        Vector3D.angle(vector3D0, vector3D1);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test01027() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply((-1628.9462));
        Vector3D.angle(vector3D0, vector3D1);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test01128() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test01129() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test01130() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.orthogonal();
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test01231() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.NaN.normalize();
        vector3D1.isNaN();
    }

    @Test(timeout = 4000)
    public void test01332() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = vector3D1.getDelta();
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test01333() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = vector3D1.getDelta();
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test01334() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = vector3D1.getDelta();
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test01335() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = vector3D1.getDelta();
        vector3D1.getNormSq();
    }

    @Test(timeout = 4000)
    public void test01336() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = vector3D1.getDelta();
    }

    @Test(timeout = 4000)
    public void test01437() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.MINUS_K.negate();
        double double0 = vector3D1.getNormSq();
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test01438() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.MINUS_K.negate();
        double double0 = vector3D1.getNormSq();
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test01439() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.MINUS_K.negate();
        double double0 = vector3D1.getNormSq();
    }

    @Test(timeout = 4000)
    public void test01440() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.MINUS_K.negate();
        double double0 = vector3D1.getNormSq();
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test01441() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.MINUS_K.negate();
        double double0 = vector3D1.getNormSq();
        vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test01542() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        double double0 = vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test01643() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        double double0 = vector3D0.getNorm1();
    }

    @Test(timeout = 4000)
    public void test01744() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
        vector3D1.getNormSq();
    }

    @Test(timeout = 4000)
    public void test01745() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test01746() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test01747() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.MINUS_J.subtract(vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test01848() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test01849() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);
        vector3D1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test01850() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test01851() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.subtract(1588.4996, vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test01952() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test01953() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
        vector3D2.getY();
    }

    @Test(timeout = 4000)
    public void test01954() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test01955() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test01956() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test01957() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
        vector3D2.getNormSq();
    }

    @Test(timeout = 4000)
    public void test01958() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        Vector3D vector3D2 = vector3D1.subtract(0.0, vector3D1);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test02059() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply(1068.8);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test02060() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply(1068.8);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test02061() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.NEGATIVE_INFINITY.scalarMultiply(1068.8);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test02162() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);
        vector3D1.getNormSq();
    }

    @Test(timeout = 4000)
    public void test02163() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test02164() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test02165() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.scalarMultiply(1752.3212);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test02266() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);
        vector3D1.getNormSq();
    }

    @Test(timeout = 4000)
    public void test02267() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test02268() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test02269() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        Vector3D vector3D1 = vector3D0.PLUS_I.scalarMultiply(0.0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test02370() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
        Vector3D vector3D1 = vector3D0.orthogonal();
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test02371() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
        Vector3D vector3D1 = vector3D0.orthogonal();
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test02372() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
        Vector3D vector3D1 = vector3D0.orthogonal();
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test02373() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
        Vector3D vector3D1 = vector3D0.orthogonal();
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test02474() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_J.normalize();
        double double0 = Vector3D.distance1(vector3D1, vector3D1);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test02475() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_J.normalize();
        double double0 = Vector3D.distance1(vector3D1, vector3D1);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test02476() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_J.normalize();
        double double0 = Vector3D.distance1(vector3D1, vector3D1);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test02477() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_J.normalize();
        double double0 = Vector3D.distance1(vector3D1, vector3D1);
    }

    @Test(timeout = 4000)
    public void test02578() throws Throwable {
        Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.negate();
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test02579() throws Throwable {
        Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.negate();
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test02580() throws Throwable {
        Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.negate();
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test02681() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.ZERO.negate();
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test02682() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.ZERO.negate();
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test02683() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.ZERO.negate();
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test02784() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);
        double double0 = vector3D0.getZ();
        vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test02785() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);
        double double0 = vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test02786() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);
        double double0 = vector3D0.getZ();
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test02787() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.07842259109020233, 20.0, 0.07842259109020233);
        double double0 = vector3D0.getZ();
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test02888() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        double double0 = vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test02989() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_K;
        double double0 = vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test03090() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);
        double double0 = vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test03091() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);
        double double0 = vector3D0.getY();
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test03092() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);
        double double0 = vector3D0.getY();
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test03093() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 409.0, 409.0);
        double double0 = vector3D0.getY();
        vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test03194() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_I.scalarMultiply(Double.NEGATIVE_INFINITY);
        double double0 = vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test03195() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_I.scalarMultiply(Double.NEGATIVE_INFINITY);
        double double0 = vector3D1.getX();
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test03196() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_I.scalarMultiply(Double.NEGATIVE_INFINITY);
        double double0 = vector3D1.getX();
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test03297() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        double double0 = vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test03398() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        double double0 = vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test03499() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        double double0 = vector3D0.ZERO.getNormInf();
    }

    @Test(timeout = 4000)
    public void test035100() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        double double0 = vector3D0.ZERO.getNorm1();
    }

    @Test(timeout = 4000)
    public void test036101() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        double double0 = vector3D0.ZERO.getNorm();
    }

    @Test(timeout = 4000)
    public void test037102() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_K;
        double double0 = vector3D0.getDelta();
    }

    @Test(timeout = 4000)
    public void test038103() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        double double0 = vector3D0.MINUS_K.getDelta();
    }

    @Test(timeout = 4000)
    public void test039104() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        double double0 = vector3D0.MINUS_I.getAlpha();
    }

    @Test(timeout = 4000)
    public void test040105() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        double double0 = vector3D0.NEGATIVE_INFINITY.getAlpha();
    }

    @Test(timeout = 4000)
    public void test041106() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        double double0 = Vector3D.dotProduct(vector3D0, vector3D0);
    }

    @Test(timeout = 4000)
    public void test042107() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
        double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test042108() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
        double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test042109() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
        double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
    }

    @Test(timeout = 4000)
    public void test042110() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.PLUS_I.subtract(vector3D0);
        double double0 = Vector3D.dotProduct(vector3D0, vector3D1);
        vector3D1.getNormSq();
    }

    @Test(timeout = 4000)
    public void test043111() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
    }

    @Test(timeout = 4000)
    public void test043112() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test043113() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test043114() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = Vector3D.distanceSq(vector3D1, vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test044115() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.orthogonal();
        double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test044116() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.orthogonal();
        double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test044117() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.orthogonal();
        double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test044118() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.orthogonal();
        double double0 = Vector3D.distanceInf(vector3D1, vector3D0);
    }

    @Test(timeout = 4000)
    public void test045119() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
        double double0 = Vector3D.distance1(vector3D1, vector3D0);
    }

    @Test(timeout = 4000)
    public void test045120() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
        double double0 = Vector3D.distance1(vector3D1, vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test045121() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
        double double0 = Vector3D.distance1(vector3D1, vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test045122() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.MINUS_I.orthogonal();
        double double0 = Vector3D.distance1(vector3D1, vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test046123() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        double double0 = Vector3D.distance(vector3D0, vector3D0);
    }

    @Test(timeout = 4000)
    public void test047124() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = new Vector3D((-2140.04), vector3D0, (-2140.04), vector3D0);
        double double0 = Vector3D.distance(vector3D0, vector3D1);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test047125() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = new Vector3D((-2140.04), vector3D0, (-2140.04), vector3D0);
        double double0 = Vector3D.distance(vector3D0, vector3D1);
    }

    @Test(timeout = 4000)
    public void test047126() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = new Vector3D((-2140.04), vector3D0, (-2140.04), vector3D0);
        double double0 = Vector3D.distance(vector3D0, vector3D1);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test048127() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
        Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
        Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
        Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D0);
        vector3D3.getY();
    }

    @Test(timeout = 4000)
    public void test048128() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
        Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
        Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
        Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D0);
        vector3D2.getY();
    }

    @Test(timeout = 4000)
    public void test048129() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.9999, (-368.225788), 8.0E298);
        Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
        Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
        Vector3D vector3D3 = Vector3D.crossProduct(vector3D2, vector3D0);
        vector3D3.isInfinite();
    }

    @Test(timeout = 4000)
    public void test049130() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-1571.5076023384229), (-4394.434624269667), (-2036.1805858460173));
        Vector3D vector3D1 = new Vector3D((-1.2246467991473532E-16), vector3D0, 2968.0, vector3D0, (-2036.1805858460173), vector3D0);
        Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
        Vector3D vector3D3 = vector3D2.orthogonal();
        vector3D3.getNormSq();
    }

    @Test(timeout = 4000)
    public void test049131() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-1571.5076023384229), (-4394.434624269667), (-2036.1805858460173));
        Vector3D vector3D1 = new Vector3D((-1.2246467991473532E-16), vector3D0, 2968.0, vector3D0, (-2036.1805858460173), vector3D0);
        Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
        Vector3D vector3D3 = vector3D2.orthogonal();
        vector3D3.getX();
    }

    @Test(timeout = 4000)
    public void test050132() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test050133() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test050134() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test051135() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test051136() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test051137() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test051138() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.add(vector3D0);
        vector3D1.isNaN();
    }

    @Test(timeout = 4000)
    public void test052139() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.NaN.orthogonal();
        Vector3D vector3D2 = vector3D0.add(vector3D1);
        vector3D2.getX();
    }

    @Test(timeout = 4000)
    public void test052140() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.NaN.orthogonal();
        Vector3D vector3D2 = vector3D0.add(vector3D1);
        vector3D2.getY();
    }

    @Test(timeout = 4000)
    public void test052141() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.NaN.orthogonal();
        Vector3D vector3D2 = vector3D0.add(vector3D1);
        vector3D2.getZ();
    }

    @Test(timeout = 4000)
    public void test053142() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
        Vector3D vector3D1 = vector3D0.negate();
        Vector3D vector3D2 = vector3D1.add(vector3D0);
        vector3D2.getX();
    }

    @Test(timeout = 4000)
    public void test053143() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
        Vector3D vector3D1 = vector3D0.negate();
        Vector3D vector3D2 = vector3D1.add(vector3D0);
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test053144() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
        Vector3D vector3D1 = vector3D0.negate();
        Vector3D vector3D2 = vector3D1.add(vector3D0);
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test053145() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
        Vector3D vector3D1 = vector3D0.negate();
        Vector3D vector3D2 = vector3D1.add(vector3D0);
        vector3D1.getNormSq();
    }

    @Test(timeout = 4000)
    public void test053146() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
        Vector3D vector3D1 = vector3D0.negate();
        Vector3D vector3D2 = vector3D1.add(vector3D0);
        vector3D2.getNormSq();
    }

    @Test(timeout = 4000)
    public void test053147() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
        Vector3D vector3D1 = vector3D0.negate();
        Vector3D vector3D2 = vector3D1.add(vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test053148() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1059.501, 1059.501);
        Vector3D vector3D1 = vector3D0.negate();
        Vector3D vector3D2 = vector3D1.add(vector3D0);
        vector3D2.getY();
    }

    @Test(timeout = 4000)
    public void test054149() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        Vector3D vector3D1 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D2 = vector3D1.add(0.0, vector3D0);
        vector3D2.equals((Object) vector3D1);
    }

    @Test(timeout = 4000)
    public void test055150() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_K.negate();
        Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
        vector3D1.getNormSq();
    }

    @Test(timeout = 4000)
    public void test055151() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_K.negate();
        Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
        vector3D2.getY();
    }

    @Test(timeout = 4000)
    public void test055152() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_K.negate();
        Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
        vector3D2.getX();
    }

    @Test(timeout = 4000)
    public void test055153() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_K.negate();
        Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
        vector3D2.getNormSq();
    }

    @Test(timeout = 4000)
    public void test055154() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_K.negate();
        Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
        vector3D2.getZ();
    }

    @Test(timeout = 4000)
    public void test055155() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_K.negate();
        Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test055156() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.MINUS_K.negate();
        Vector3D vector3D2 = vector3D0.add(1.0, vector3D1);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test056157() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        vector3D0.PLUS_I.subtract((Vector3D) null);
    }

    @Test(timeout = 4000)
    public void test057158() throws Throwable {
        Vector3D vector3D0 = new Vector3D(2714.53457909, 2714.53457909, 2714.53457909);
        vector3D0.subtract(2714.53457909, (Vector3D) null);
    }

    @Test(timeout = 4000)
    public void test058159() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        Vector3D.distanceSq(vector3D0, (Vector3D) null);
    }

    @Test(timeout = 4000)
    public void test059160() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-1036.6), Double.NEGATIVE_INFINITY, (-610.2));
        Vector3D.distanceInf(vector3D0, (Vector3D) null);
    }

    @Test(timeout = 4000)
    public void test060161() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.097, (-4218.6746623851), 0.0);
        Vector3D.distance1((Vector3D) null, vector3D0);
    }

    @Test(timeout = 4000)
    public void test061162() throws Throwable {
        Vector3D.distance((Vector3D) null, (Vector3D) null);
    }

    @Test(timeout = 4000)
    public void test062163() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D.crossProduct(vector3D0, (Vector3D) null);
    }

    @Test(timeout = 4000)
    public void test063164() throws Throwable {
        Vector3D.angle((Vector3D) null, (Vector3D) null);
    }

    @Test(timeout = 4000)
    public void test064165() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_J;
        vector3D0.add((Vector3D) null);
    }

    @Test(timeout = 4000)
    public void test065166() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        vector3D0.PLUS_I.add((-135.3), (Vector3D) null);
    }

    @Test(timeout = 4000)
    public void test066167() throws Throwable {
        Vector3D vector3D0 = null;
        vector3D0 = new Vector3D((-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null, (-1384.652), (Vector3D) null);
    }

    @Test(timeout = 4000)
    public void test067168() throws Throwable {
        Vector3D vector3D0 = null;
        vector3D0 = new Vector3D(0.0, (Vector3D) null, 0.0, (Vector3D) null, 0.0, (Vector3D) null);
    }

    @Test(timeout = 4000)
    public void test068169() throws Throwable {
        Vector3D vector3D0 = null;
        vector3D0 = new Vector3D(10.0, (Vector3D) null, Double.NaN, (Vector3D) null);
    }

    @Test(timeout = 4000)
    public void test069170() throws Throwable {
        Vector3D vector3D0 = null;
        vector3D0 = new Vector3D((-3672.146764020265), (Vector3D) null);
    }

    @Test(timeout = 4000)
    public void test070171() throws Throwable {
        Vector3D vector3D0 = Vector3D.NaN;
        boolean boolean0 = vector3D0.isNaN();
    }

    @Test(timeout = 4000)
    public void test071172() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        boolean boolean0 = vector3D0.isNaN();
    }

    @Test(timeout = 4000)
    public void test072173() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
        boolean boolean0 = vector3D1.isNaN();
    }

    @Test(timeout = 4000)
    public void test072174() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
        boolean boolean0 = vector3D1.isNaN();
        vector3D0.isNaN();
    }

    @Test(timeout = 4000)
    public void test072175() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
        boolean boolean0 = vector3D1.isNaN();
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test072176() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
        boolean boolean0 = vector3D1.isNaN();
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test072177() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        Vector3D vector3D1 = vector3D0.add(Double.POSITIVE_INFINITY, vector3D0);
        boolean boolean0 = vector3D1.isNaN();
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test073178() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
    }

    @Test(timeout = 4000)
    public void test073179() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
        vector3D1.getNormSq();
    }

    @Test(timeout = 4000)
    public void test073180() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test073181() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test073182() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
        double double0 = Vector3D.dotProduct(vector3D1, vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test074183() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        double double0 = vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test075184() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_J;
        double double0 = vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test076185() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D.dotProduct((Vector3D) null, vector3D0);
    }

    @Test(timeout = 4000)
    public void test077186() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));
        double double0 = vector3D0.getX();
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test077187() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));
        double double0 = vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test077188() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));
        double double0 = vector3D0.getX();
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test077189() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0, (-1411.89255812476));
        double double0 = vector3D0.getX();
        vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test078190() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        double double0 = vector3D0.MINUS_K.getNorm();
    }

    @Test(timeout = 4000)
    public void test079191() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        vector3D0.POSITIVE_INFINITY.hashCode();
        vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test079192() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        vector3D0.POSITIVE_INFINITY.hashCode();
        vector3D0.isNaN();
    }

    @Test(timeout = 4000)
    public void test079193() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        vector3D0.POSITIVE_INFINITY.hashCode();
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test079194() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        vector3D0.POSITIVE_INFINITY.hashCode();
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test079195() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        vector3D0.POSITIVE_INFINITY.hashCode();
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test080196() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
        boolean boolean0 = vector3D3.equals(vector3D2);
    }

    @Test(timeout = 4000)
    public void test080197() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
        boolean boolean0 = vector3D3.equals(vector3D2);
        vector3D2.getY();
    }

    @Test(timeout = 4000)
    public void test080198() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
        boolean boolean0 = vector3D3.equals(vector3D2);
        vector3D3.getX();
    }

    @Test(timeout = 4000)
    public void test080199() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
        boolean boolean0 = vector3D3.equals(vector3D2);
        vector3D3.equals((Object) vector3D1);
    }

    @Test(timeout = 4000)
    public void test080200() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
        boolean boolean0 = vector3D3.equals(vector3D2);
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test080201() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        Vector3D vector3D3 = vector3D2.MINUS_K.normalize();
        boolean boolean0 = vector3D3.equals(vector3D2);
        vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test081202() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D0.equals((Object) vector3D1);
    }

    @Test(timeout = 4000)
    public void test081203() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test081204() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test081205() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
        boolean boolean0 = vector3D1.equals(vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test081206() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
        boolean boolean0 = vector3D1.equals(vector3D0);
    }

    @Test(timeout = 4000)
    public void test082207() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        boolean boolean0 = vector3D1.equals(vector3D2);
        vector3D2.getZ();
    }

    @Test(timeout = 4000)
    public void test082208() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        boolean boolean0 = vector3D1.equals(vector3D2);
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test082209() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        boolean boolean0 = vector3D1.equals(vector3D2);
        vector3D2.getX();
    }

    @Test(timeout = 4000)
    public void test082210() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        boolean boolean0 = vector3D1.equals(vector3D2);
        vector3D2.getNormSq();
    }

    @Test(timeout = 4000)
    public void test082211() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        boolean boolean0 = vector3D1.equals(vector3D2);
    }

    @Test(timeout = 4000)
    public void test082212() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        boolean boolean0 = vector3D1.equals(vector3D2);
        vector3D2.equals((Object) vector3D1);
    }

    @Test(timeout = 4000)
    public void test082213() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        boolean boolean0 = vector3D1.equals(vector3D2);
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test082214() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        boolean boolean0 = vector3D1.equals(vector3D2);
        vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test082215() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = Vector3D.ZERO;
        Vector3D vector3D2 = vector3D0.MINUS_K.add(0.8221835551436544, vector3D1);
        boolean boolean0 = vector3D1.equals(vector3D2);
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test083216() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
        Object object0 = new Object();
        boolean boolean0 = vector3D0.equals(object0);
        vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test083217() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
        Object object0 = new Object();
        boolean boolean0 = vector3D0.equals(object0);
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test083218() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
        Object object0 = new Object();
        boolean boolean0 = vector3D0.equals(object0);
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test083219() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
        Object object0 = new Object();
        boolean boolean0 = vector3D0.equals(object0);
    }

    @Test(timeout = 4000)
    public void test083220() throws Throwable {
        Vector3D vector3D0 = new Vector3D((-614.99275592239), 342.0);
        Object object0 = new Object();
        boolean boolean0 = vector3D0.equals(object0);
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test084221() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        boolean boolean0 = vector3D0.equals(vector3D0);
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test084222() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        boolean boolean0 = vector3D0.equals(vector3D0);
        vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test084223() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        boolean boolean0 = vector3D0.equals(vector3D0);
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test084224() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        boolean boolean0 = vector3D0.equals(vector3D0);
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test084225() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        boolean boolean0 = vector3D0.equals(vector3D0);
    }

    @Test(timeout = 4000)
    public void test085226() throws Throwable {
        Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);
        boolean boolean0 = vector3D0.isInfinite();
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test085227() throws Throwable {
        Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);
        boolean boolean0 = vector3D0.isInfinite();
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test085228() throws Throwable {
        Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);
        boolean boolean0 = vector3D0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test085229() throws Throwable {
        Vector3D vector3D0 = new Vector3D(47.9603363, 47.9603363, Double.NEGATIVE_INFINITY);
        boolean boolean0 = vector3D0.isInfinite();
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test086230() throws Throwable {
        Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
        boolean boolean0 = vector3D0.isInfinite();
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test086231() throws Throwable {
        Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
        boolean boolean0 = vector3D0.isInfinite();
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test086232() throws Throwable {
        Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
        boolean boolean0 = vector3D0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test086233() throws Throwable {
        Vector3D vector3D0 = new Vector3D(47.9603363, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
        boolean boolean0 = vector3D0.isInfinite();
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test087234() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        boolean boolean0 = vector3D0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test088235() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        boolean boolean0 = vector3D0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test088236() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        boolean boolean0 = vector3D0.isInfinite();
        vector3D0.isNaN();
    }

    @Test(timeout = 4000)
    public void test089237() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
        vector3D1.hashCode();
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test089238() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
        vector3D1.hashCode();
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test089239() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
        vector3D1.hashCode();
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test089240() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
        vector3D1.hashCode();
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test089241() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
        vector3D1.hashCode();
        vector3D0.isNaN();
    }

    @Test(timeout = 4000)
    public void test089242() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
        vector3D1.hashCode();
        vector3D1.isNaN();
    }

    @Test(timeout = 4000)
    public void test089243() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
        vector3D1.hashCode();
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test089244() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
        vector3D1.hashCode();
        vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test089245() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.POSITIVE_INFINITY.orthogonal();
        vector3D1.hashCode();
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test090246() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
        boolean boolean0 = vector3D0.equals(vector3D1);
        vector3D1.isNaN();
    }

    @Test(timeout = 4000)
    public void test090247() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
        boolean boolean0 = vector3D0.equals(vector3D1);
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test090248() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
        boolean boolean0 = vector3D0.equals(vector3D1);
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test090249() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
        boolean boolean0 = vector3D0.equals(vector3D1);
        vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test090250() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
        boolean boolean0 = vector3D0.equals(vector3D1);
        vector3D1.equals((Object) vector3D0);
    }

    @Test(timeout = 4000)
    public void test090251() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
        boolean boolean0 = vector3D0.equals(vector3D1);
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test090252() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.8221835551436544, 0.8221835551436544);
        Vector3D vector3D1 = vector3D0.NaN.subtract(vector3D0);
        boolean boolean0 = vector3D0.equals(vector3D1);
    }

    @Test(timeout = 4000)
    public void test091253() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.NaN.orthogonal();
        Vector3D.angle(vector3D1, vector3D1);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test091254() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.NaN.orthogonal();
        Vector3D.angle(vector3D1, vector3D1);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test092255() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
        Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);
        Vector3D vector3D3 = vector3D2.orthogonal();
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test092256() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
        Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);
        Vector3D vector3D3 = vector3D2.orthogonal();
        vector3D2.getZ();
    }

    @Test(timeout = 4000)
    public void test092257() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
        Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);
        Vector3D vector3D3 = vector3D2.orthogonal();
        vector3D3.getY();
    }

    @Test(timeout = 4000)
    public void test092258() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D vector3D1 = vector3D0.PLUS_K.orthogonal();
        Vector3D vector3D2 = vector3D1.add(1.0, vector3D0);
        Vector3D vector3D3 = vector3D2.orthogonal();
        vector3D3.getX();
    }

    @Test(timeout = 4000)
    public void test093259() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));
        Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);
        Vector3D vector3D2 = vector3D1.subtract(vector3D0);
        Vector3D vector3D3 = vector3D2.orthogonal();
        vector3D2.getY();
    }

    @Test(timeout = 4000)
    public void test093260() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));
        Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);
        Vector3D vector3D2 = vector3D1.subtract(vector3D0);
        Vector3D vector3D3 = vector3D2.orthogonal();
        vector3D3.getNormSq();
    }

    @Test(timeout = 4000)
    public void test093261() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));
        Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);
        Vector3D vector3D2 = vector3D1.subtract(vector3D0);
        Vector3D vector3D3 = vector3D2.orthogonal();
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test093262() throws Throwable {
        Vector3D vector3D0 = new Vector3D(1323.34, (-2292.393));
        Vector3D vector3D1 = vector3D0.PLUS_K.scalarMultiply(0.5011224222);
        Vector3D vector3D2 = vector3D1.subtract(vector3D0);
        Vector3D vector3D3 = vector3D2.orthogonal();
        vector3D3.getZ();
    }

    @Test(timeout = 4000)
    public void test094263() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.orthogonal();
        Vector3D vector3D2 = vector3D1.normalize();
        vector3D2.equals((Object) vector3D1);
    }

    @Test(timeout = 4000)
    public void test094264() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.orthogonal();
        Vector3D vector3D2 = vector3D1.normalize();
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test094265() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.orthogonal();
        Vector3D vector3D2 = vector3D1.normalize();
        vector3D2.getZ();
    }

    @Test(timeout = 4000)
    public void test094266() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.orthogonal();
        Vector3D vector3D2 = vector3D1.normalize();
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test094267() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.orthogonal();
        Vector3D vector3D2 = vector3D1.normalize();
        vector3D2.getY();
    }

    @Test(timeout = 4000)
    public void test094268() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_K;
        Vector3D vector3D1 = vector3D0.orthogonal();
        Vector3D vector3D2 = vector3D1.normalize();
        vector3D2.getX();
    }

    @Test(timeout = 4000)
    public void test095269() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        vector3D0.normalize();
    }

    @Test(timeout = 4000)
    public void test096270() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);
        boolean boolean0 = vector3D1.isInfinite();
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test096271() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);
        boolean boolean0 = vector3D1.isInfinite();
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test096272() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);
        boolean boolean0 = vector3D1.isInfinite();
    }

    @Test(timeout = 4000)
    public void test096273() throws Throwable {
        Vector3D vector3D0 = Vector3D.ZERO;
        Vector3D vector3D1 = new Vector3D(5.0, vector3D0, Double.POSITIVE_INFINITY, vector3D0, 0.6, vector3D0, 0.0, vector3D0);
        boolean boolean0 = vector3D1.isInfinite();
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test097274() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        vector3D0.MINUS_I.getNormInf();
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test097275() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        vector3D0.MINUS_I.getNormInf();
        vector3D0.getX();
    }

    @Test(timeout = 4000)
    public void test097276() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        vector3D0.MINUS_I.getNormInf();
        vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test097277() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        vector3D0.MINUS_I.getNormInf();
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test098278() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test098279() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test098280() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.MINUS_I.subtract(vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test099281() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        double double0 = vector3D0.getNormSq();
    }

    @Test(timeout = 4000)
    public void test100282() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.PLUS_K.subtract(0.0, vector3D0);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test100283() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.PLUS_K.subtract(0.0, vector3D0);
        vector3D1.getY();
    }

    @Test(timeout = 4000)
    public void test100284() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.PLUS_K.subtract(0.0, vector3D0);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test101285() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        double double0 = vector3D0.PLUS_J.getDelta();
    }

    @Test(timeout = 4000)
    public void test102286() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        Vector3D vector3D1 = vector3D0.MINUS_I.add(vector3D0);
        vector3D1.equals((Object) vector3D0);
    }

    @Test(timeout = 4000)
    public void test103287() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        String string0 = vector3D0.MINUS_I.toString();
    }

    @Test(timeout = 4000)
    public void test104288() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        double double0 = Vector3D.distance(vector3D0, vector3D0);
    }

    @Test(timeout = 4000)
    public void test105289() throws Throwable {
        Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
        double double0 = vector3D0.ZERO.getAlpha();
    }

    @Test(timeout = 4000)
    public void test106290() throws Throwable {
        Vector3D vector3D0 = Vector3D.PLUS_I;
        double double0 = Vector3D.distanceInf(vector3D0, vector3D0);
    }

    @Test(timeout = 4000)
    public void test107291() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
        boolean boolean0 = vector3D0.equals(vector3D1);
    }

    @Test(timeout = 4000)
    public void test107292() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
        boolean boolean0 = vector3D0.equals(vector3D1);
        vector3D0.getY();
    }

    @Test(timeout = 4000)
    public void test107293() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
        boolean boolean0 = vector3D0.equals(vector3D1);
        vector3D1.getNormSq();
    }

    @Test(timeout = 4000)
    public void test107294() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
        boolean boolean0 = vector3D0.equals(vector3D1);
        vector3D1.getX();
    }

    @Test(timeout = 4000)
    public void test107295() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
        boolean boolean0 = vector3D0.equals(vector3D1);
        vector3D1.getZ();
    }

    @Test(timeout = 4000)
    public void test107296() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, 0.0);
        Vector3D vector3D1 = vector3D0.MINUS_K.add(0.6, vector3D0);
        boolean boolean0 = vector3D0.equals(vector3D1);
        vector3D0.getZ();
    }

    @Test(timeout = 4000)
    public void test108297() throws Throwable {
        Vector3D vector3D0 = new Vector3D(0.0, (-1219.44199785));
        Vector3D vector3D1 = new Vector3D(0.0, vector3D0);
        Vector3D.angle(vector3D0, vector3D1);
    }

    @Test(timeout = 4000)
    public void test109298() throws Throwable {
        Vector3D vector3D0 = Vector3D.MINUS_I;
        Vector3D.angle(vector3D0, vector3D0);
    }
}
