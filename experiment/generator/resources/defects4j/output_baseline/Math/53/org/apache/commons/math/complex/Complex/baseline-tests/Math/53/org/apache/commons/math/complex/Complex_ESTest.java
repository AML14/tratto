/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 15:50:34 GMT 2023
 */
package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Complex_ESTest extends Complex_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = new Complex(1.0000000000744322, Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.multiply(complex1);
        Complex complex3 = complex2.NaN.sinh();
        Complex complex4 = complex0.ONE.subtract(complex1);
        Complex complex5 = complex0.log();
        complex5.INF.readResolve();
        complex5.ZERO.getArgument();
        Complex complex6 = complex0.multiply(1.0000000000744322);
        complex6.NaN.toString();
        complex2.ONE.multiply(complex5);
        complex0.createComplex((-171.4417953), (-6.663542893624021E-14));
        Complex complex7 = complex1.sqrt1z();
        complex7.INF.sin();
        Complex complex8 = complex7.NaN.divide(complex0);
        complex4.conjugate();
        complex2.nthRoot(17);
        complex3.exp();
        complex8.sin();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.INF.exp();
        complex2.getArgument();
        complex1.INF.readResolve();
        complex1.INF.subtract(complex3);
        Complex complex4 = complex2.cos();
        complex3.ONE.atan();
        Complex complex5 = complex0.cos();
        Complex complex6 = complex4.I.multiply((-2753.17));
        complex3.NaN.asin();
        Complex complex7 = complex6.NaN.pow(complex2);
        Complex complex8 = complex5.I.subtract(complex2);
        Complex complex9 = complex8.INF.negate();
        Complex complex10 = complex4.conjugate();
        complex10.NaN.exp();
        complex1.INF.tanh();
        complex1.abs();
        complex0.getReal();
        complex5.abs();
        complex0.asin();
        complex5.equals((Object) null);
        complex3.log();
        complex1.getArgument();
        complex9.divide(complex7);
        complex8.asin();
        Complex complex11 = Complex.I;
        complex0.equals(complex11);
        complex11.exp();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.I.tanh();
        complex2.INF.log();
        complex1.I.hashCode();
        complex1.getField();
        Complex complex3 = complex0.cos();
        Complex complex4 = complex3.cos();
        complex1.NaN.negate();
        complex0.getReal();
        complex2.nthRoot(37);
        Complex complex5 = complex3.INF.atan();
        complex4.INF.abs();
        Complex complex6 = complex4.atan();
        complex6.NaN.abs();
        Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.NaN);
        complex6.I.cos();
        Complex complex8 = complex2.acos();
        complex8.ONE.multiply(complex2);
        complex6.getArgument();
        complex2.getField();
        Complex complex9 = complex3.negate();
        complex0.tan();
        complex9.divide(complex2);
        complex5.multiply(Double.NaN);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = new Complex((-2085.116), (-2085.116));
        complex0.I.pow(complex1);
        complex0.toString();
        complex0.hashCode();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = Complex.I;
        complex0.add((Complex) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.INF.log();
        Complex complex2 = complex1.ZERO.negate();
        Complex complex3 = complex2.I.add(complex1);
        Complex complex4 = complex1.INF.atan();
        Complex complex5 = complex1.ONE.log();
        Complex complex6 = complex4.I.createComplex(1.979872122629245E8, 1.979872122629245E8);
        complex6.ONE.hashCode();
        complex5.toString();
        complex3.I.sqrt1z();
        complex0.abs();
        Complex complex7 = complex0.asin();
        Complex complex8 = complex4.divide(complex5);
        Object object0 = new Object();
        complex7.equals(object0);
        complex7.ZERO.atan();
        Complex complex9 = complex7.sqrt1z();
        Complex complex10 = complex5.sinh();
        complex9.cosh();
        Complex complex11 = complex7.subtract(complex5);
        complex11.ONE.cosh();
        complex3.readResolve();
        Complex complex12 = complex7.divide(complex9);
        complex12.NaN.hashCode();
        complex12.ZERO.sinh();
        complex11.ONE.asin();
        complex12.ONE.hashCode();
        complex5.getField();
        complex8.abs();
        complex11.sqrt1z();
        complex3.negate();
        complex10.getField();
        complex6.sin();
        complex11.nthRoot((-341));
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = Complex.ONE;
        complex0.I.asin();
        Complex complex1 = complex0.I.tan();
        Complex complex2 = complex0.multiply(0.0);
        complex2.NaN.cos();
        Complex complex3 = complex0.multiply(3642.897);
        complex0.tan();
        Complex complex4 = complex1.pow(complex3);
        complex4.INF.sin();
        complex0.conjugate();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.I.cosh();
        Complex complex2 = complex1.ONE.add(complex0);
        Complex complex3 = complex0.cos();
        Complex complex4 = complex3.negate();
        complex3.ZERO.tanh();
        complex0.getField();
        complex3.NaN.getArgument();
        complex4.nthRoot(1);
        complex0.getField();
        complex2.ZERO.hashCode();
        Complex complex5 = complex0.subtract(complex3);
        Complex complex6 = complex5.I.sqrt();
        Complex complex7 = complex4.pow(complex0);
        complex7.getReal();
        complex0.hashCode();
        complex2.sqrt1z();
        complex6.log();
        complex0.createComplex(2122.161, 2122.161);
        Complex complex8 = complex4.tanh();
        complex8.ZERO.nthRoot(0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1388.4446);
        Complex complex1 = Complex.INF;
        Complex complex2 = complex0.ZERO.acos();
        Complex complex3 = complex0.ZERO.add(complex1);
        complex0.abs();
        Complex complex4 = complex0.multiply((-1005.5086));
        complex4.readResolve();
        complex1.pow(complex3);
        complex4.sqrt1z();
        complex4.divide(complex3);
        complex2.pow(complex3);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = Complex.ZERO;
        Complex complex2 = complex0.INF.add(complex1);
        complex0.isInfinite();
        Complex complex3 = Complex.INF;
        complex2.divide(complex3);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.ONE.sin();
        Complex complex2 = complex0.I.log();
        complex2.I.readResolve();
        complex1.INF.readResolve();
        Complex complex3 = complex0.negate();
        Complex complex4 = complex3.ZERO.exp();
        complex4.ONE.getArgument();
        Complex complex5 = complex1.ONE.exp();
        Complex complex6 = complex0.asin();
        complex0.getReal();
        complex5.I.acos();
        complex6.equals(complex1);
        complex3.readResolve();
        Complex complex7 = complex3.createComplex((-2473.8064128516303), (-3370.98404));
        Complex complex8 = complex3.INF.cosh();
        complex8.NaN.negate();
        complex7.exp();
        Complex complex9 = complex7.I.multiply(complex5);
        complex9.ZERO.sqrt1z();
        Complex complex10 = complex9.INF.sin();
        Complex complex11 = Complex.ZERO;
        complex5.equals(complex11);
        complex9.ZERO.toString();
        complex4.getField();
        complex7.cosh();
        complex3.atan();
        Complex complex12 = complex5.createComplex((-3370.98404), 1.494140625);
        complex4.tan();
        complex12.cos();
        complex10.negate();
        Complex complex13 = complex6.atan();
        complex13.negate();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Complex complex0 = new Complex(2.0, 2.0);
        complex0.ONE.divide((Complex) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.INF.negate();
        Complex complex2 = complex1.I.exp();
        Complex complex3 = complex2.ZERO.sin();
        Complex complex4 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
        Complex complex5 = complex2.cos();
        complex4.sin();
        complex4.conjugate();
        complex4.NaN.negate();
        complex4.createComplex(1.0E-6, Double.NaN);
        complex3.sinh();
        complex5.toString();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = Complex.ZERO;
        Complex complex2 = complex1.NaN.multiply(complex0);
        Complex complex3 = complex2.INF.sqrt();
        Complex complex4 = complex0.multiply(complex1);
        complex0.NaN.abs();
        complex0.nthRoot(1223);
        Complex complex5 = complex0.acos();
        Complex complex6 = complex5.divide(complex0);
        complex1.subtract(complex4);
        Complex complex7 = complex6.tan();
        complex3.getReal();
        complex4.INF.hashCode();
        complex4.createComplex(Double.NaN, (-1559.34));
        complex5.add(complex6);
        complex0.multiply(Double.NaN);
        complex4.isInfinite();
        complex6.tan();
        complex4.log();
        complex7.equals("");
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.ONE.tan();
        Complex complex2 = complex1.INF.createComplex(0.0, 0.0);
        Complex complex3 = complex0.sinh();
        Complex complex4 = complex3.ONE.acos();
        complex1.NaN.nthRoot(168);
        Complex complex5 = complex1.ZERO.createComplex(0.0, 0.0);
        complex5.ZERO.readResolve();
        complex1.acos();
        Complex complex6 = complex1.NaN.sinh();
        Complex complex7 = complex2.ZERO.tan();
        Complex complex8 = complex7.ONE.subtract(complex0);
        complex0.I.acos();
        complex2.ZERO.readResolve();
        Complex complex9 = complex2.createComplex(0.0, (-1629.2217549875743));
        complex9.sin();
        Complex complex10 = new Complex(0.0, (-1028.0465254));
        complex1.NaN.asin();
        Complex complex11 = complex1.pow(complex10);
        complex11.INF.abs();
        Complex complex12 = complex4.pow(complex3);
        complex8.readResolve();
        complex0.cos();
        complex6.exp();
        complex9.log();
        complex7.conjugate();
        Complex complex13 = Complex.NaN;
        complex12.multiply(complex13);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.I.exp();
        Complex complex2 = complex0.INF.subtract(complex1);
        Complex complex3 = complex1.divide(complex0);
        complex3.multiply((-1285.93531427));
        Complex complex4 = complex3.NaN.cosh();
        Complex complex5 = complex4.NaN.multiply((-3510.85620034098));
        Complex complex6 = complex5.I.multiply(complex0);
        complex1.I.toString();
        Complex complex7 = complex1.ONE.cos();
        complex7.ONE.atan();
        Complex complex8 = complex1.INF.cos();
        Complex complex9 = new Complex(2.0, 4.9E-324);
        Complex complex10 = complex1.add(complex9);
        Complex complex11 = complex2.INF.tan();
        complex11.ZERO.sin();
        complex0.abs();
        complex8.getField();
        Complex complex12 = complex2.createComplex(1292.76428, 1292.76428);
        Complex complex13 = complex12.exp();
        Complex complex14 = complex9.cos();
        complex8.hashCode();
        complex12.toString();
        complex13.subtract(complex6);
        complex10.divide(complex14);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Complex complex0 = new Complex((-7.44321345601866E-11), (-7.44321345601866E-11));
        Complex complex1 = new Complex((-5265.440415820579), (-7.44321345601866E-11));
        Complex complex2 = complex0.atan();
        complex2.INF.tanh();
        complex1.I.readResolve();
        Complex complex3 = complex1.ZERO.subtract(complex2);
        Object object0 = complex1.readResolve();
        complex0.equals(object0);
        Complex complex4 = complex1.multiply(complex3);
        Complex complex5 = complex4.I.tan();
        Complex complex6 = complex5.multiply(1952.464);
        Complex complex7 = complex4.ONE.subtract(complex1);
        complex2.abs();
        Complex complex8 = complex0.INF.createComplex((-5265.440415820579), (-7.44321345601866E-11));
        complex8.multiply(complex4);
        complex5.atan();
        complex4.log();
        complex5.isNaN();
        complex0.sqrt1z();
        complex1.sqrt();
        complex6.getImaginary();
        complex7.hashCode();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = new Complex((-1183.0), (-1183.0));
        complex0.multiply(complex1);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Complex complex0 = Complex.I;
        complex0.conjugate();
        complex0.multiply((Complex) null);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Complex complex0 = Complex.ZERO;
        complex0.nthRoot(1);
        Complex complex1 = complex0.sqrt1z();
        complex0.I.readResolve();
        Complex complex2 = complex0.acos();
        complex2.ONE.pow(complex1);
        Complex complex3 = Complex.ZERO;
        complex2.multiply(0.0);
        complex3.INF.hashCode();
        Complex complex4 = complex1.subtract(complex3);
        Complex complex5 = complex2.exp();
        complex5.cosh();
        Complex complex6 = complex3.sqrt1z();
        complex3.nthRoot(1);
        Object object0 = complex4.readResolve();
        complex0.equals(object0);
        complex4.ONE.tan();
        Complex complex7 = complex3.log();
        complex7.I.sinh();
        complex4.getImaginary();
        complex7.sqrt();
        complex6.atan();
        complex6.isNaN();
        complex6.negate();
        complex6.tanh();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = Complex.NaN;
        Complex complex2 = complex1.log();
        Complex complex3 = complex0.ONE.sinh();
        Complex complex4 = complex2.INF.tan();
        complex4.INF.abs();
        Complex complex5 = complex4.ONE.multiply(13.07);
        complex5.asin();
        complex0.multiply(complex1);
        Complex complex6 = complex2.sinh();
        complex3.conjugate();
        complex3.multiply((-7.800414592973399E-9));
        complex3.multiply(complex6);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.asin();
        Complex complex2 = complex0.negate();
        Complex complex3 = complex2.add(complex0);
        Complex complex4 = complex3.conjugate();
        Complex complex5 = complex4.I.negate();
        complex0.isNaN();
        Complex complex6 = complex2.ONE.tan();
        complex6.ONE.getField();
        complex4.isInfinite();
        complex2.isNaN();
        complex6.add(complex0);
        Complex complex7 = complex5.sinh();
        complex1.tanh();
        complex7.equals("");
        complex4.readResolve();
        complex0.conjugate();
        complex5.log();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.I.negate();
        Complex complex2 = complex0.acos();
        complex0.isNaN();
        Complex complex3 = complex2.asin();
        complex3.readResolve();
        Complex complex4 = complex2.pow(complex0);
        Complex complex5 = complex2.ONE.multiply((double) 1);
        complex4.nthRoot(1);
        complex4.toString();
        complex4.ZERO.add(complex1);
        Complex complex6 = complex4.exp();
        complex6.ONE.nthRoot(1);
        complex1.acos();
        complex0.getImaginary();
        complex6.readResolve();
        complex5.cos();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Complex complex0 = new Complex(1132.75991764, 1132.75991764);
        Complex complex1 = complex0.ONE.sinh();
        Complex complex2 = Complex.ZERO;
        Complex complex3 = complex0.divide(complex2);
        complex3.negate();
        Complex complex4 = complex0.subtract(complex1);
        complex0.ZERO.divide(complex2);
        complex2.ONE.getArgument();
        complex4.ONE.conjugate();
        Complex complex5 = complex4.tan();
        Complex complex6 = complex4.tanh();
        complex5.ONE.getField();
        complex5.multiply(complex2);
        complex4.tan();
        complex1.toString();
        complex4.getImaginary();
        complex5.cosh();
        complex0.abs();
        complex4.sinh();
        complex0.multiply(complex6);
        complex1.hashCode();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = new Complex((-2546.359171), (-2546.359171));
        Complex complex2 = complex1.ZERO.subtract(complex0);
        Complex complex3 = complex0.add(complex1);
        Complex complex4 = complex3.NaN.add(complex0);
        Complex complex5 = complex3.NaN.sinh();
        Complex complex6 = complex5.ONE.tan();
        complex6.INF.sinh();
        complex0.abs();
        complex1.getImaginary();
        Complex complex7 = complex0.add(complex1);
        Complex complex8 = complex7.asin();
        complex8.I.nthRoot(47);
        complex7.abs();
        Complex complex9 = Complex.I;
        Complex complex10 = complex9.ZERO.sinh();
        complex10.ONE.sinh();
        complex9.ZERO.tanh();
        complex7.I.abs();
        complex1.ZERO.toString();
        Complex complex11 = complex1.pow(complex9);
        complex9.NaN.log();
        Complex complex12 = complex8.sin();
        complex11.sinh();
        complex11.getImaginary();
        complex2.I.getArgument();
        complex11.getReal();
        complex9.multiply(672.17229925647);
        complex2.acos();
        complex4.tanh();
        complex12.isNaN();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Complex complex0 = Complex.I;
        complex0.ZERO.negate();
        Complex complex1 = complex0.exp();
        complex0.isNaN();
        complex1.isInfinite();
        Complex complex2 = complex0.acos();
        Complex complex3 = Complex.I;
        Complex complex4 = complex0.INF.sin();
        complex4.ONE.subtract(complex0);
        complex2.pow(complex3);
        complex2.INF.sqrt();
        Complex complex5 = complex2.sinh();
        complex5.ONE.hashCode();
        complex1.sin();
        // Undeclared exception!
        complex1.nthRoot(8388608);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ONE.sinh();
        complex0.NaN.getArgument();
        Complex complex2 = complex0.ONE.cos();
        complex2.NaN.sin();
        complex0.equals("{yd!<`NuF\"oaX$(y3HW");
        complex1.getReal();
        Complex complex3 = complex1.sqrt1z();
        Complex complex4 = complex3.INF.asin();
        complex3.INF.asin();
        complex0.ZERO.tanh();
        Complex complex5 = complex4.I.sqrt1z();
        complex4.NaN.hashCode();
        Complex complex6 = complex3.atan();
        complex5.ZERO.log();
        complex1.ONE.abs();
        Complex complex7 = complex6.NaN.exp();
        complex7.INF.multiply(complex1);
        complex4.I.tan();
        Complex complex8 = complex3.asin();
        complex8.NaN.tanh();
        Complex complex9 = complex6.negate();
        complex9.ONE.pow(complex8);
        Complex complex10 = complex9.tanh();
        complex10.I.divide(complex9);
        complex0.nthRoot((-1143));
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Complex complex0 = new Complex(2834.436239484218, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.ONE.conjugate();
        Complex complex2 = complex0.conjugate();
        complex2.abs();
        Complex complex3 = complex1.ZERO.divide(complex0);
        Complex complex4 = complex3.sinh();
        complex0.hashCode();
        complex2.isNaN();
        Complex complex5 = complex1.subtract(complex0);
        complex2.getField();
        Complex complex6 = complex2.divide(complex1);
        complex1.isNaN();
        complex5.subtract(complex6);
        complex0.readResolve();
        Complex complex7 = complex0.subtract(complex3);
        complex7.ONE.log();
        complex6.getArgument();
        complex0.divide(complex3);
        complex6.sqrt();
        complex4.pow(complex6);
        complex3.createComplex(6.283185307179586, 1618.7686746504);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.INF.tanh();
        Complex complex2 = complex1.ZERO.cosh();
        complex2.ONE.tan();
        Complex complex3 = complex0.INF.multiply(Double.NaN);
        complex3.ONE.toString();
        complex0.isInfinite();
        complex0.nthRoot(1109);
        complex3.conjugate();
        Complex complex4 = complex0.sqrt1z();
        complex4.tan();
        complex3.isInfinite();
        Complex complex5 = new Complex(Double.NaN, 0.0);
        complex0.multiply(complex5);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Complex complex0 = new Complex((-2122.66), (-2122.66));
        Complex complex1 = Complex.NaN;
        Complex complex2 = complex0.subtract(complex1);
        complex2.NaN.sqrt1z();
        Complex complex3 = complex2.INF.acos();
        Complex complex4 = complex3.I.multiply(complex2);
        Complex complex5 = complex2.exp();
        Complex complex6 = complex1.pow(complex0);
        Complex complex7 = complex0.exp();
        Complex complex8 = complex5.pow(complex6);
        Complex complex9 = complex2.ZERO.asin();
        complex8.I.createComplex((-2122.66), (-2122.66));
        complex8.INF.readResolve();
        Complex complex10 = complex6.tan();
        complex2.sin();
        Complex complex11 = complex10.cosh();
        complex8.log();
        complex7.cosh();
        Complex complex12 = complex9.multiply(complex2);
        complex11.log();
        complex1.getArgument();
        complex12.log();
        complex11.negate();
        complex12.getImaginary();
        Complex complex13 = Complex.NaN;
        complex4.pow(complex13);
        complex12.getReal();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.INF.tanh();
        Complex complex2 = complex1.ZERO.cosh();
        complex2.ONE.tan();
        Complex complex3 = complex0.INF.multiply(Double.NaN);
        complex3.ONE.toString();
        complex0.isInfinite();
        complex0.nthRoot(1109);
        Complex complex4 = complex0.sqrt1z();
        complex4.tan();
        complex3.isInfinite();
        Complex complex5 = new Complex(Double.NaN, 0.0);
        complex0.multiply(complex5);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.NaN;
        Complex complex2 = complex1.I.createComplex(0.0, 0.0);
        complex1.INF.sqrt1z();
        complex0.I.add(complex1);
        Complex complex3 = complex0.sqrt();
        complex3.equals(complex0);
        complex1.abs();
        Complex complex4 = complex0.conjugate();
        Object object0 = complex1.readResolve();
        complex1.equals(object0);
        complex2.getReal();
        complex0.readResolve();
        complex4.atan();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Complex complex0 = new Complex(1.2958646899018938E-9, (-1038.0));
        Complex complex1 = complex0.I.sin();
        Complex complex2 = complex1.NaN.exp();
        complex2.I.sinh();
        Complex complex3 = complex0.INF.acos();
        complex0.getArgument();
        complex3.getReal();
        complex1.sinh();
        complex1.asin();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        Complex complex0 = new Complex(9.0, 2567.8858228083);
        Complex complex1 = new Complex(1253.629671148, 9.0);
        complex0.multiply(1253.629671148);
        Complex complex2 = complex0.ONE.multiply(complex1);
        Complex complex3 = complex0.cos();
        complex3.createComplex(0.0, 1253.629671148);
        complex0.isInfinite();
        complex2.abs();
        Complex complex4 = complex1.add(complex3);
        complex4.ZERO.log();
        complex1.subtract(complex3);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ONE.log();
        complex1.cos();
        Complex complex2 = complex0.sqrt();
        Complex complex3 = complex1.asin();
        complex3.INF.toString();
        complex2.subtract(complex0);
        complex3.nthRoot((-106));
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Complex complex0 = new Complex((-5851.0), 0.041666663879186654);
        Complex complex1 = complex0.tan();
        complex1.ZERO.log();
        complex1.ONE.cosh();
        complex1.hashCode();
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.NaN.acos();
        complex0.cos();
        Complex complex2 = complex0.negate();
        Complex complex3 = complex1.multiply(248.0);
        complex3.acos();
        complex0.equals(complex2);
        complex1.tan();
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = Complex.INF;
        Complex complex2 = complex1.ZERO.asin();
        complex0.I.getArgument();
        complex2.ONE.conjugate();
        Complex complex3 = complex1.INF.sin();
        Complex complex4 = complex0.INF.pow(complex1);
        complex4.INF.hashCode();
        complex0.nthRoot(17);
        complex0.NaN.tanh();
        complex0.nthRoot(1);
        Complex complex5 = complex0.conjugate();
        complex5.pow(complex3);
        Complex complex6 = Complex.ONE;
        complex0.equals(complex6);
        complex6.sin();
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Complex complex0 = new Complex(0.0, 3184.411);
        Complex complex1 = Complex.NaN;
        complex0.multiply(complex1);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = Complex.ONE;
        Complex complex2 = complex0.ZERO.add(complex1);
        complex0.getField();
        complex2.I.sqrt1z();
        complex0.asin();
        Complex complex3 = complex1.tan();
        complex2.acos();
        complex3.toString();
        complex0.atan();
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        Complex complex0 = Complex.ZERO;
        complex0.NaN.cosh();
        complex0.conjugate();
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.ONE.sqrt1z();
        complex0.ZERO.abs();
        Complex complex3 = complex1.tanh();
        complex3.NaN.conjugate();
        complex0.hashCode();
        complex1.hashCode();
        complex1.asin();
        complex2.getField();
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        complex0.I.cosh();
        Complex complex1 = Complex.INF;
        complex0.multiply(complex1);
        complex1.isInfinite();
        complex1.multiply(0.0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        Complex complex0 = Complex.INF;
        complex0.INF.abs();
        complex0.I.sin();
        complex0.ONE.createComplex(6.283185307179586, 0.0);
        complex0.tan();
        complex0.subtract((Complex) null);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = Complex.ZERO;
        Complex complex2 = complex0.I.divide(complex1);
        complex0.ZERO.getArgument();
        complex0.getReal();
        complex1.ZERO.acos();
        Complex complex3 = complex0.createComplex(1.0, 58.9892943134);
        complex2.add(complex1);
        complex3.tan();
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = Complex.I;
        complex1.ZERO.getArgument();
        Complex complex2 = complex1.multiply((-1698.38546402823));
        Complex complex3 = complex1.I.multiply(2.0);
        Complex complex4 = complex3.INF.cos();
        Complex complex5 = complex4.NaN.exp();
        Complex complex6 = complex0.add(complex1);
        complex0.tan();
        complex5.ONE.add(complex3);
        Complex complex7 = complex5.negate();
        Complex complex8 = complex7.ONE.negate();
        complex5.divide(complex4);
        complex6.tan();
        complex2.sqrt();
        complex8.getImaginary();
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.cos();
        complex1.INF.add(complex0);
        Complex complex2 = Complex.INF;
        complex2.ZERO.subtract(complex0);
        Complex complex3 = complex0.subtract(complex2);
        complex3.NaN.tanh();
        complex2.ZERO.tanh();
        complex3.INF.exp();
        Complex complex4 = complex2.createComplex(0.0, 0.0);
        complex4.atan();
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.I;
        complex0.ONE.subtract(complex1);
        Complex complex2 = complex0.sinh();
        complex2.getImaginary();
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        Complex complex0 = Complex.INF;
        complex0.nthRoot(1493);
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.I.asin();
        Complex complex3 = complex2.NaN.atan();
        Complex complex4 = complex3.ZERO.createComplex(2008.0, 0.0);
        complex4.NaN.add(complex3);
        complex1.sin();
        complex0.ONE.readResolve();
        Complex complex5 = complex1.INF.multiply(2008.0);
        Complex complex6 = complex5.sin();
        complex6.ZERO.hashCode();
        complex0.abs();
        complex0.I.getField();
        complex5.isNaN();
        Complex complex7 = complex1.negate();
        Complex complex8 = complex7.NaN.sin();
        Complex complex9 = complex0.sqrt1z();
        complex8.INF.cos();
        complex7.NaN.asin();
        Complex complex10 = complex9.ZERO.multiply(0.0);
        complex8.isNaN();
        complex10.isInfinite();
        complex9.getImaginary();
        complex8.getField();
        complex3.getImaginary();
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.ZERO.createComplex((-7.44321345601866E-11), (-7.44321345601866E-11));
        complex0.add(complex1);
        Complex complex2 = complex0.I.negate();
        complex2.INF.exp();
        Complex complex3 = complex0.conjugate();
        complex3.ZERO.abs();
        complex1.isInfinite();
        Complex complex4 = complex3.log();
        complex0.ZERO.sin();
        complex1.getReal();
        complex1.INF.createComplex((-1244.0), 0.0);
        complex1.createComplex(3833.732008, 3833.732008);
        complex4.isNaN();
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.I;
        complex0.NaN.pow(complex1);
        complex0.toString();
        Complex complex2 = complex0.sqrt1z();
        complex0.NaN.negate();
        Complex complex3 = complex0.cosh();
        Complex complex4 = complex2.asin();
        Complex complex5 = complex4.cos();
        complex3.INF.sqrt();
        complex2.acos();
        complex3.abs();
        complex5.acos();
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.asin();
        complex1.ZERO.hashCode();
        Complex complex2 = complex1.I.cos();
        Complex complex3 = Complex.I;
        complex3.cos();
        complex3.I.multiply(complex1);
        complex2.ONE.add(complex3);
        Complex complex4 = complex0.sqrt();
        complex1.sqrt();
        complex4.getField();
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        Complex complex0 = Complex.INF;
        complex0.getField();
        Complex complex1 = complex0.ONE.sin();
        Complex complex2 = complex0.cos();
        Complex complex3 = complex2.I.negate();
        complex3.INF.add(complex1);
        complex1.add(complex2);
        complex2.I.readResolve();
        complex0.hashCode();
        complex0.multiply(2.0);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = Complex.I;
        complex0.ONE.multiply(complex1);
        complex0.ZERO.abs();
        complex0.sinh();
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = Complex.NaN;
        complex0.atan();
        Complex complex2 = complex0.ZERO.sqrt1z();
        Complex complex3 = complex2.createComplex(1774.436800834765, 1774.436800834765);
        Complex complex4 = complex0.NaN.subtract(complex1);
        Complex complex5 = complex4.ONE.pow(complex2);
        complex5.ZERO.sinh();
        complex0.toString();
        Complex complex6 = complex0.sinh();
        Complex complex7 = complex1.multiply(complex6);
        complex7.tan();
        complex2.isNaN();
        complex3.isNaN();
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.asin();
        complex1.ONE.createComplex((-0.12502530217170715), 128.208383999138);
        Complex complex2 = complex0.negate();
        complex0.hashCode();
        complex2.tanh();
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        Complex complex0 = Complex.NaN;
        complex0.isInfinite();
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.NaN.exp();
        complex2.acos();
        complex2.I.createComplex(1084.03784095867, 1084.03784095867);
        Complex complex3 = complex1.negate();
        complex3.ZERO.createComplex(0.0, 0.0);
        complex3.atan();
        complex1.getArgument();
        complex1.sqrt();
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        Complex complex0 = Complex.I;
        complex0.getReal();
        Complex complex1 = new Complex(2082.17, (-3627.15047442206));
        complex0.divide(complex1);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        Complex complex0 = Complex.ONE;
        complex0.atan();
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        Complex complex0 = Complex.INF;
        complex0.ZERO.tanh();
        Complex complex1 = Complex.ZERO;
        Complex complex2 = complex0.add(complex1);
        complex2.NaN.readResolve();
        Complex complex3 = complex0.sinh();
        complex3.INF.nthRoot(0);
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        Complex complex0 = new Complex(3270.9503103, 2.0);
        complex0.I.hashCode();
        Complex complex1 = complex0.asin();
        complex1.I.sin();
        complex0.tan();
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        Complex complex0 = Complex.ONE;
        complex0.ONE.multiply(0.0);
        complex0.negate();
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        Complex complex0 = new Complex((-1726.9857756533), (-1726.9857756533));
        complex0.sqrt();
        complex0.conjugate();
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        Complex complex0 = Complex.I;
        complex0.ZERO.nthRoot((-888));
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex0.I.add(complex1);
        complex2.INF.atan();
        complex0.getField();
        complex1.NaN.divide(complex0);
        Complex complex3 = complex1.cos();
        Complex complex4 = complex3.divide(complex1);
        complex4.NaN.pow((Complex) null);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = Complex.NaN;
        complex1.asin();
        complex0.divide(complex1);
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        Complex complex0 = Complex.NaN;
        complex0.ZERO.toString();
        complex0.ONE.sqrt();
        complex0.sin();
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.cos();
        complex1.hashCode();
        Complex complex2 = complex1.sinh();
        complex2.NaN.add(complex0);
        Complex complex3 = complex2.NaN.tanh();
        complex3.ONE.asin();
        complex2.NaN.pow(complex1);
        complex0.sinh();
        complex1.getField();
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        Complex complex0 = Complex.I;
        Complex complex1 = complex0.ONE.sinh();
        complex1.I.multiply(3.425518820814759);
        complex0.asin();
        complex0.sinh();
        Complex complex2 = complex0.sqrt();
        complex2.NaN.getField();
        complex2.I.sin();
        Complex complex3 = complex0.sin();
        Complex complex4 = complex3.INF.divide(complex0);
        complex4.ZERO.negate();
        Complex complex5 = complex2.acos();
        complex5.I.atan();
        complex0.NaN.abs();
        // Undeclared exception!
        complex1.nthRoot(2141026880);
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.exp();
        complex1.nthRoot(1);
        complex2.abs();
        complex1.nthRoot(1);
        complex1.toString();
        Complex complex3 = complex1.acos();
        complex0.I.getField();
        complex3.ZERO.negate();
        complex2.cosh();
        complex2.createComplex(3.425518820814759, Double.POSITIVE_INFINITY);
        complex1.negate();
    }

    @Test(timeout = 4000)
    public void test7171() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.conjugate();
        complex0.NaN.hashCode();
        Complex complex2 = complex0.ONE.cosh();
        Complex complex3 = complex2.NaN.cosh();
        Complex complex4 = complex0.multiply(2.0000000000000004);
        complex3.INF.tan();
        Complex complex5 = complex1.I.createComplex(2.0000000000000004, (-1564.9570709));
        complex5.INF.negate();
        complex5.ZERO.log();
        complex0.equals(complex1);
        Complex complex6 = complex0.I.sqrt();
        complex1.getField();
        Complex complex7 = complex4.pow(complex2);
        Complex complex8 = complex1.cosh();
        complex7.I.add(complex3);
        Complex complex9 = complex4.exp();
        complex8.multiply(1250.0435382044338);
        complex7.multiply(complex8);
        Complex complex10 = complex9.sin();
        Complex complex11 = complex10.ZERO.tanh();
        Complex complex12 = complex10.pow(complex6);
        complex12.tan();
        Complex complex13 = complex1.cosh();
        complex0.toString();
        Complex complex14 = new Complex((-1564.9570709), 2.0000000000000004);
        complex13.equals(complex14);
        complex5.sqrt();
        complex10.pow(complex11);
    }

    @Test(timeout = 4000)
    public void test7272() throws Throwable {
        Complex complex0 = Complex.ONE;
        Complex complex1 = complex0.ZERO.log();
        complex0.toString();
        Complex complex2 = complex0.exp();
        Complex complex3 = complex2.INF.log();
        complex2.ONE.acos();
        complex1.I.abs();
        Complex complex4 = complex1.NaN.sqrt1z();
        complex4.I.cos();
        Complex complex5 = complex4.negate();
        complex5.ZERO.divide(complex1);
        complex1.INF.sin();
        complex0.getField();
        Complex complex6 = complex2.I.sin();
        Complex complex7 = Complex.I;
        complex1.equals(complex7);
        Complex complex8 = complex0.pow(complex7);
        Complex complex9 = complex8.NaN.sqrt();
        Complex complex10 = complex7.sin();
        Complex complex11 = complex10.I.negate();
        Complex complex12 = complex10.sin();
        complex12.ZERO.atan();
        complex11.tan();
        complex12.INF.abs();
        complex11.sin();
        Complex complex13 = complex2.multiply(1256.1699696);
        Complex complex14 = complex6.createComplex(1256.1699696, 1256.1699696);
        complex14.ONE.divide(complex6);
        complex6.sqrt();
        complex3.negate();
        Complex complex15 = complex0.subtract(complex6);
        complex15.I.sqrt();
        complex13.exp();
        Complex complex16 = complex6.multiply(complex13);
        complex16.subtract(complex9);
    }

    @Test(timeout = 4000)
    public void test7373() throws Throwable {
        Complex complex0 = Complex.INF;
        complex0.toString();
        Complex complex1 = complex0.atan();
        complex0.abs();
        Complex complex2 = complex1.INF.multiply(Double.POSITIVE_INFINITY);
        complex0.readResolve();
        complex0.negate();
        Complex complex3 = complex1.log();
        Complex complex4 = complex0.ONE.log();
        complex0.INF.toString();
        complex3.isNaN();
        Complex complex5 = complex1.ONE.negate();
        complex5.ONE.tanh();
        complex5.ONE.multiply(Double.POSITIVE_INFINITY);
        Complex complex6 = complex3.cos();
        complex3.ONE.exp();
        complex6.ONE.sqrt();
        complex3.nthRoot(2918);
        complex2.log();
        complex1.readResolve();
        complex3.cosh();
        complex4.isNaN();
    }

    @Test(timeout = 4000)
    public void test7474() throws Throwable {
        Complex complex0 = Complex.NaN;
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.I.tanh();
        complex2.INF.log();
        complex1.I.hashCode();
        complex1.getField();
        Complex complex3 = complex0.cos();
        Complex complex4 = complex3.cos();
        complex1.NaN.negate();
        complex0.getReal();
        complex2.nthRoot(37);
        Complex complex5 = complex3.INF.atan();
        complex4.INF.abs();
        Complex complex6 = complex4.atan();
        complex6.NaN.abs();
        complex6.sqrt();
        complex6.I.cos();
        Complex complex7 = complex2.acos();
        complex7.ONE.multiply(complex2);
        complex6.getArgument();
        complex2.getField();
        Complex complex8 = complex3.negate();
        complex0.tan();
        complex8.divide(complex2);
        complex5.multiply(Double.NaN);
    }

    @Test(timeout = 4000)
    public void test7575() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = new Complex((-3044.0), 0.0);
        Complex complex2 = complex0.add(complex1);
        Complex complex3 = complex0.log();
        Complex complex4 = complex0.INF.cosh();
        Complex complex5 = complex4.conjugate();
        complex5.createComplex((-3044.0), 0.0);
        Complex complex6 = complex2.log();
        Complex complex7 = complex2.multiply(10.0);
        complex7.hashCode();
        complex2.equals(complex0);
        complex3.abs();
        complex2.isNaN();
        Complex complex8 = complex6.exp();
        Complex complex9 = complex8.I.tan();
        complex8.asin();
        complex9.ONE.nthRoot((-2229));
    }

    @Test(timeout = 4000)
    public void test7676() throws Throwable {
        Complex complex0 = new Complex((-7.44321345601866E-11), (-7.44321345601866E-11));
        Complex complex1 = Complex.NaN;
        Complex complex2 = complex0.atan();
        complex2.INF.tanh();
        Complex complex3 = Complex.NaN;
        Complex complex4 = complex1.ZERO.subtract(complex2);
        Object object0 = complex1.readResolve();
        complex0.equals(object0);
        Complex complex5 = complex1.multiply(complex4);
        Complex complex6 = complex5.I.tan();
        Complex complex7 = complex6.multiply(1952.464);
        Complex complex8 = complex5.ONE.subtract(complex1);
        complex2.abs();
        Complex complex9 = complex0.INF.createComplex((-5265.440415820579), (-7.44321345601866E-11));
        complex9.multiply(complex5);
        complex6.atan();
        complex5.log();
        complex6.isNaN();
        complex0.sqrt1z();
        complex1.sqrt();
        complex7.getImaginary();
        complex8.hashCode();
    }

    @Test(timeout = 4000)
    public void test7777() throws Throwable {
        Complex complex0 = new Complex(1.0, 1.0);
        Complex complex1 = new Complex(331.594212, 0.0);
        Complex complex2 = complex1.ONE.add(complex0);
        complex2.getReal();
    }

    @Test(timeout = 4000)
    public void test7778() throws Throwable {
        Complex complex0 = new Complex(1.0, 1.0);
        Complex complex1 = new Complex(331.594212, 0.0);
        Complex complex2 = complex1.ONE.add(complex0);
        Complex complex3 = complex0.I.multiply(complex1);
        Complex complex4 = complex0.NaN.log();
        Complex complex5 = complex4.ONE.tan();
        String string0 = complex0.NaN.toString();
    }

    @Test(timeout = 4000)
    public void test7779() throws Throwable {
        Complex complex0 = new Complex(1.0, 1.0);
        Complex complex1 = new Complex(331.594212, 0.0);
        Complex complex2 = complex1.ONE.add(complex0);
        Complex complex3 = complex0.I.multiply(complex1);
        Complex complex4 = complex0.NaN.log();
        Complex complex5 = complex4.ONE.tan();
        String string0 = complex0.NaN.toString();
        Complex complex6 = complex0.sqrt();
        complex0.createComplex(0.0, 1.0);
        List<Complex> list0 = complex0.nthRoot(2645);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test7780() throws Throwable {
        Complex complex0 = new Complex(1.0, 1.0);
        Complex complex1 = new Complex(331.594212, 0.0);
        Complex complex2 = complex1.ONE.add(complex0);
        Complex complex3 = complex0.I.multiply(complex1);
        Complex complex4 = complex0.NaN.log();
        Complex complex5 = complex4.ONE.tan();
        String string0 = complex0.NaN.toString();
        Complex complex6 = complex0.sqrt();
        complex0.createComplex(0.0, 1.0);
        List<Complex> list0 = complex0.nthRoot(2645);
        Complex complex7 = complex4.asin();
        Complex complex8 = complex7.tanh();
        complex7.abs();
        Complex complex9 = complex0.subtract(complex7);
        complex9.ONE.sqrt();
        Complex complex10 = complex9.negate();
        complex10.I.createComplex((-978.246), (-978.246));
        Complex complex11 = complex7.divide(complex6);
        complex6.getImaginary();
    }

    @Test(timeout = 4000)
    public void test7781() throws Throwable {
        Complex complex0 = new Complex(1.0, 1.0);
        Complex complex1 = new Complex(331.594212, 0.0);
        Complex complex2 = complex1.ONE.add(complex0);
        Complex complex3 = complex0.I.multiply(complex1);
        Complex complex4 = complex0.NaN.log();
        Complex complex5 = complex4.ONE.tan();
        String string0 = complex0.NaN.toString();
        Complex complex6 = complex0.sqrt();
        complex0.createComplex(0.0, 1.0);
        List<Complex> list0 = complex0.nthRoot(2645);
        Complex complex7 = complex4.asin();
        Complex complex8 = complex7.tanh();
        complex7.abs();
        Complex complex9 = complex0.subtract(complex7);
        complex9.ONE.sqrt();
        Complex complex10 = complex9.negate();
        complex10.I.createComplex((-978.246), (-978.246));
        Complex complex11 = complex7.divide(complex6);
    }

    @Test(timeout = 4000)
    public void test7782() throws Throwable {
        Complex complex0 = new Complex(1.0, 1.0);
        Complex complex1 = new Complex(331.594212, 0.0);
        Complex complex2 = complex1.ONE.add(complex0);
        Complex complex3 = complex0.I.multiply(complex1);
        Complex complex4 = complex0.NaN.log();
        Complex complex5 = complex4.ONE.tan();
        String string0 = complex0.NaN.toString();
        Complex complex6 = complex0.sqrt();
        complex0.createComplex(0.0, 1.0);
        List<Complex> list0 = complex0.nthRoot(2645);
        Complex complex7 = complex4.asin();
        Complex complex8 = complex7.tanh();
        complex7.abs();
        Complex complex9 = complex0.subtract(complex7);
        complex9.ONE.sqrt();
        Complex complex10 = complex9.negate();
        complex10.I.createComplex((-978.246), (-978.246));
        Complex complex11 = complex7.divide(complex6);
        Complex complex12 = complex3.sqrt1z();
        complex12.getReal();
    }

    @Test(timeout = 4000)
    public void test7783() throws Throwable {
        Complex complex0 = new Complex(1.0, 1.0);
        Complex complex1 = new Complex(331.594212, 0.0);
        Complex complex2 = complex1.ONE.add(complex0);
        Complex complex3 = complex0.I.multiply(complex1);
        Complex complex4 = complex0.NaN.log();
        Complex complex5 = complex4.ONE.tan();
        String string0 = complex0.NaN.toString();
        Complex complex6 = complex0.sqrt();
        complex0.createComplex(0.0, 1.0);
        List<Complex> list0 = complex0.nthRoot(2645);
        Complex complex7 = complex4.asin();
        Complex complex8 = complex7.tanh();
        complex7.abs();
        Complex complex9 = complex0.subtract(complex7);
        complex9.ONE.sqrt();
        Complex complex10 = complex9.negate();
        complex10.I.createComplex((-978.246), (-978.246));
        Complex complex11 = complex7.divide(complex6);
        Complex complex12 = complex3.sqrt1z();
        Complex complex13 = complex5.exp();
        Complex complex14 = complex3.log();
        complex14.getImaginary();
    }

    @Test(timeout = 4000)
    public void test7784() throws Throwable {
        Complex complex0 = new Complex(1.0, 1.0);
        Complex complex1 = new Complex(331.594212, 0.0);
        Complex complex2 = complex1.ONE.add(complex0);
        Complex complex3 = complex0.I.multiply(complex1);
        Complex complex4 = complex0.NaN.log();
        Complex complex5 = complex4.ONE.tan();
        String string0 = complex0.NaN.toString();
        Complex complex6 = complex0.sqrt();
        complex0.createComplex(0.0, 1.0);
        List<Complex> list0 = complex0.nthRoot(2645);
        Complex complex7 = complex4.asin();
        Complex complex8 = complex7.tanh();
        complex7.abs();
        Complex complex9 = complex0.subtract(complex7);
        complex9.ONE.sqrt();
        Complex complex10 = complex9.negate();
        complex10.I.createComplex((-978.246), (-978.246));
        Complex complex11 = complex7.divide(complex6);
        Complex complex12 = complex3.sqrt1z();
        Complex complex13 = complex5.exp();
        Complex complex14 = complex3.log();
        complex3.getReal();
    }

    @Test(timeout = 4000)
    public void test7785() throws Throwable {
        Complex complex0 = new Complex(1.0, 1.0);
        Complex complex1 = new Complex(331.594212, 0.0);
        Complex complex2 = complex1.ONE.add(complex0);
        Complex complex3 = complex0.I.multiply(complex1);
        Complex complex4 = complex0.NaN.log();
        Complex complex5 = complex4.ONE.tan();
        String string0 = complex0.NaN.toString();
        Complex complex6 = complex0.sqrt();
        complex0.createComplex(0.0, 1.0);
        List<Complex> list0 = complex0.nthRoot(2645);
        Complex complex7 = complex4.asin();
        Complex complex8 = complex7.tanh();
        complex7.abs();
        Complex complex9 = complex0.subtract(complex7);
        complex9.ONE.sqrt();
        Complex complex10 = complex9.negate();
        complex10.I.createComplex((-978.246), (-978.246));
        Complex complex11 = complex7.divide(complex6);
        Complex complex12 = complex3.sqrt1z();
        Complex complex13 = complex5.exp();
        Complex complex14 = complex3.log();
        complex14.getReal();
    }

    @Test(timeout = 4000)
    public void test7786() throws Throwable {
        Complex complex0 = new Complex(1.0, 1.0);
        Complex complex1 = new Complex(331.594212, 0.0);
        Complex complex2 = complex1.ONE.add(complex0);
        Complex complex3 = complex0.I.multiply(complex1);
        Complex complex4 = complex0.NaN.log();
        Complex complex5 = complex4.ONE.tan();
        String string0 = complex0.NaN.toString();
        Complex complex6 = complex0.sqrt();
        complex0.createComplex(0.0, 1.0);
        List<Complex> list0 = complex0.nthRoot(2645);
        Complex complex7 = complex4.asin();
        Complex complex8 = complex7.tanh();
        complex7.abs();
        Complex complex9 = complex0.subtract(complex7);
        complex9.ONE.sqrt();
        Complex complex10 = complex9.negate();
        complex10.I.createComplex((-978.246), (-978.246));
        Complex complex11 = complex7.divide(complex6);
        Complex complex12 = complex3.sqrt1z();
        Complex complex13 = complex5.exp();
        Complex complex14 = complex3.log();
        complex1.createComplex(3908.994616, 331.594212);
        Complex complex15 = complex13.pow(complex8);
    }

    @Test(timeout = 4000)
    public void test7787() throws Throwable {
        Complex complex0 = new Complex(1.0, 1.0);
        Complex complex1 = new Complex(331.594212, 0.0);
        Complex complex2 = complex1.ONE.add(complex0);
        Complex complex3 = complex0.I.multiply(complex1);
        Complex complex4 = complex0.NaN.log();
        Complex complex5 = complex4.ONE.tan();
        String string0 = complex0.NaN.toString();
        Complex complex6 = complex0.sqrt();
        complex0.createComplex(0.0, 1.0);
        List<Complex> list0 = complex0.nthRoot(2645);
        Complex complex7 = complex4.asin();
        Complex complex8 = complex7.tanh();
        complex7.abs();
        Complex complex9 = complex0.subtract(complex7);
        complex9.ONE.sqrt();
        Complex complex10 = complex9.negate();
        complex10.I.createComplex((-978.246), (-978.246));
        Complex complex11 = complex7.divide(complex6);
        Complex complex12 = complex3.sqrt1z();
        Complex complex13 = complex5.exp();
        Complex complex14 = complex3.log();
        complex1.createComplex(3908.994616, 331.594212);
        Complex complex15 = complex13.pow(complex8);
        complex13.getImaginary();
    }

    @Test(timeout = 4000)
    public void test7788() throws Throwable {
        Complex complex0 = new Complex(1.0, 1.0);
        Complex complex1 = new Complex(331.594212, 0.0);
        Complex complex2 = complex1.ONE.add(complex0);
        Complex complex3 = complex0.I.multiply(complex1);
        Complex complex4 = complex0.NaN.log();
        Complex complex5 = complex4.ONE.tan();
        String string0 = complex0.NaN.toString();
        Complex complex6 = complex0.sqrt();
        complex0.createComplex(0.0, 1.0);
        List<Complex> list0 = complex0.nthRoot(2645);
        Complex complex7 = complex4.asin();
        Complex complex8 = complex7.tanh();
        complex7.abs();
        Complex complex9 = complex0.subtract(complex7);
        complex9.ONE.sqrt();
        Complex complex10 = complex9.negate();
        complex10.I.createComplex((-978.246), (-978.246));
        Complex complex11 = complex7.divide(complex6);
        Complex complex12 = complex3.sqrt1z();
        Complex complex13 = complex5.exp();
        Complex complex14 = complex3.log();
        complex1.createComplex(3908.994616, 331.594212);
        Complex complex15 = complex13.pow(complex8);
        complex13.getReal();
    }

    @Test(timeout = 4000)
    public void test7889() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.INF.exp();
        complex2.getArgument();
        Complex complex4 = (Complex) complex1.INF.readResolve();
        Complex complex5 = complex1.INF.subtract(complex3);
        Complex complex6 = complex2.cos();
        Complex complex7 = complex3.ONE.atan();
        Complex complex8 = complex0.cos();
        Complex complex9 = complex6.I.multiply((-2753.17));
        complex3.NaN.asin();
        Complex complex10 = complex9.NaN.pow(complex2);
        Complex complex11 = complex8.I.subtract(complex2);
        Complex complex12 = complex11.INF.negate();
        complex6.conjugate();
        complex1.INF.tanh();
        double double0 = complex1.abs();
    }

    @Test(timeout = 4000)
    public void test7890() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.INF.exp();
        complex2.getArgument();
        Complex complex4 = (Complex) complex1.INF.readResolve();
        Complex complex5 = complex1.INF.subtract(complex3);
        Complex complex6 = complex2.cos();
        Complex complex7 = complex3.ONE.atan();
        Complex complex8 = complex0.cos();
        Complex complex9 = complex6.I.multiply((-2753.17));
        complex3.NaN.asin();
        Complex complex10 = complex9.NaN.pow(complex2);
        Complex complex11 = complex8.I.subtract(complex2);
        Complex complex12 = complex11.INF.negate();
        complex6.conjugate();
        complex1.INF.tanh();
        double double0 = complex1.abs();
        double double1 = complex8.abs();
    }

    @Test(timeout = 4000)
    public void test7891() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.INF.exp();
        complex2.getArgument();
        Complex complex4 = (Complex) complex1.INF.readResolve();
        Complex complex5 = complex1.INF.subtract(complex3);
        Complex complex6 = complex2.cos();
        Complex complex7 = complex3.ONE.atan();
        Complex complex8 = complex0.cos();
        Complex complex9 = complex6.I.multiply((-2753.17));
        complex3.NaN.asin();
        Complex complex10 = complex9.NaN.pow(complex2);
        Complex complex11 = complex8.I.subtract(complex2);
        Complex complex12 = complex11.INF.negate();
        complex6.conjugate();
        complex1.INF.tanh();
        double double0 = complex1.abs();
        double double1 = complex8.abs();
        Complex complex13 = complex0.asin();
        complex13.getImaginary();
    }

    @Test(timeout = 4000)
    public void test7892() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.INF.exp();
        complex2.getArgument();
        Complex complex4 = (Complex) complex1.INF.readResolve();
        Complex complex5 = complex1.INF.subtract(complex3);
        Complex complex6 = complex2.cos();
        Complex complex7 = complex3.ONE.atan();
        Complex complex8 = complex0.cos();
        Complex complex9 = complex6.I.multiply((-2753.17));
        complex3.NaN.asin();
        Complex complex10 = complex9.NaN.pow(complex2);
        Complex complex11 = complex8.I.subtract(complex2);
        Complex complex12 = complex11.INF.negate();
        complex6.conjugate();
        complex1.INF.tanh();
        double double0 = complex1.abs();
        double double1 = complex8.abs();
        Complex complex13 = complex0.asin();
        complex8.equals((Object) null);
        complex3.subtract(complex8);
        complex3.log();
        double double2 = complex1.getArgument();
    }

    @Test(timeout = 4000)
    public void test7893() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.INF.exp();
        complex2.getArgument();
        Complex complex4 = (Complex) complex1.INF.readResolve();
        Complex complex5 = complex1.INF.subtract(complex3);
        Complex complex6 = complex2.cos();
        Complex complex7 = complex3.ONE.atan();
        Complex complex8 = complex0.cos();
        Complex complex9 = complex6.I.multiply((-2753.17));
        complex3.NaN.asin();
        Complex complex10 = complex9.NaN.pow(complex2);
        Complex complex11 = complex8.I.subtract(complex2);
        Complex complex12 = complex11.INF.negate();
        complex6.conjugate();
        complex1.INF.tanh();
        double double0 = complex1.abs();
        double double1 = complex8.abs();
        Complex complex13 = complex0.asin();
        complex8.equals((Object) null);
        complex3.subtract(complex8);
        complex3.log();
        double double2 = complex1.getArgument();
        complex12.divide(complex10);
    }

    @Test(timeout = 4000)
    public void test7894() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.INF.exp();
        complex2.getArgument();
        Complex complex4 = (Complex) complex1.INF.readResolve();
        Complex complex5 = complex1.INF.subtract(complex3);
        Complex complex6 = complex2.cos();
        Complex complex7 = complex3.ONE.atan();
        Complex complex8 = complex0.cos();
        Complex complex9 = complex6.I.multiply((-2753.17));
        complex3.NaN.asin();
        Complex complex10 = complex9.NaN.pow(complex2);
        Complex complex11 = complex8.I.subtract(complex2);
        Complex complex12 = complex11.INF.negate();
        complex6.conjugate();
        complex1.INF.tanh();
        double double0 = complex1.abs();
        double double1 = complex8.abs();
        Complex complex13 = complex0.asin();
        complex8.equals((Object) null);
        complex3.subtract(complex8);
        complex3.log();
        double double2 = complex1.getArgument();
        complex12.divide(complex10);
        Complex complex14 = complex7.atan();
        complex14.getImaginary();
    }

    @Test(timeout = 4000)
    public void test7895() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.INF.exp();
        complex2.getArgument();
        Complex complex4 = (Complex) complex1.INF.readResolve();
        Complex complex5 = complex1.INF.subtract(complex3);
        Complex complex6 = complex2.cos();
        Complex complex7 = complex3.ONE.atan();
        Complex complex8 = complex0.cos();
        Complex complex9 = complex6.I.multiply((-2753.17));
        complex3.NaN.asin();
        Complex complex10 = complex9.NaN.pow(complex2);
        Complex complex11 = complex8.I.subtract(complex2);
        Complex complex12 = complex11.INF.negate();
        complex6.conjugate();
        complex1.INF.tanh();
        double double0 = complex1.abs();
        double double1 = complex8.abs();
        Complex complex13 = complex0.asin();
        complex8.equals((Object) null);
        complex3.subtract(complex8);
        complex3.log();
        double double2 = complex1.getArgument();
        complex12.divide(complex10);
        Complex complex14 = complex7.atan();
        Complex complex15 = complex9.pow(complex4);
        complex9.getReal();
    }

    @Test(timeout = 4000)
    public void test7896() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.INF.exp();
        complex2.getArgument();
        Complex complex4 = (Complex) complex1.INF.readResolve();
        Complex complex5 = complex1.INF.subtract(complex3);
        Complex complex6 = complex2.cos();
        Complex complex7 = complex3.ONE.atan();
        Complex complex8 = complex0.cos();
        Complex complex9 = complex6.I.multiply((-2753.17));
        complex3.NaN.asin();
        Complex complex10 = complex9.NaN.pow(complex2);
        Complex complex11 = complex8.I.subtract(complex2);
        Complex complex12 = complex11.INF.negate();
        complex6.conjugate();
        complex1.INF.tanh();
        double double0 = complex1.abs();
        double double1 = complex8.abs();
        Complex complex13 = complex0.asin();
        complex8.equals((Object) null);
        complex3.subtract(complex8);
        complex3.log();
        double double2 = complex1.getArgument();
        complex12.divide(complex10);
        Complex complex14 = complex7.atan();
        Complex complex15 = complex9.pow(complex4);
        complex1.equals((Object) complex13);
    }

    @Test(timeout = 4000)
    public void test7897() throws Throwable {
        Complex complex0 = Complex.ZERO;
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.INF.exp();
        complex2.getArgument();
        Complex complex4 = (Complex) complex1.INF.readResolve();
        Complex complex5 = complex1.INF.subtract(complex3);
        Complex complex6 = complex2.cos();
        Complex complex7 = complex3.ONE.atan();
        Complex complex8 = complex0.cos();
        Complex complex9 = complex6.I.multiply((-2753.17));
        complex3.NaN.asin();
        Complex complex10 = complex9.NaN.pow(complex2);
        Complex complex11 = complex8.I.subtract(complex2);
        Complex complex12 = complex11.INF.negate();
        complex6.conjugate();
        complex1.INF.tanh();
        double double0 = complex1.abs();
        double double1 = complex8.abs();
        Complex complex13 = complex0.asin();
        complex8.equals((Object) null);
        complex3.subtract(complex8);
        complex3.log();
        double double2 = complex1.getArgument();
        complex12.divide(complex10);
        Complex complex14 = complex7.atan();
        Complex complex15 = complex9.pow(complex4);
        complex15.isNaN();
    }

    @Test(timeout = 4000)
    public void test7998() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.atan();
        complex0.readResolve();
        Complex complex2 = complex0.INF.sqrt1z();
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test7999() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.atan();
        complex0.readResolve();
        Complex complex2 = complex0.INF.sqrt1z();
        complex1.toString();
        String string0 = complex0.INF.toString();
    }

    @Test(timeout = 4000)
    public void test79100() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.atan();
        complex0.readResolve();
        Complex complex2 = complex0.INF.sqrt1z();
        complex1.toString();
        String string0 = complex0.INF.toString();
        List<Complex> list0 = complex1.INF.nthRoot(17);
        list0.contains(complex1);
    }

    @Test(timeout = 4000)
    public void test79101() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.atan();
        complex0.readResolve();
        Complex complex2 = complex0.INF.sqrt1z();
        complex1.toString();
        String string0 = complex0.INF.toString();
        List<Complex> list0 = complex1.INF.nthRoot(17);
        Complex complex3 = complex0.INF.acos();
        Complex complex4 = complex3.NaN.sqrt();
        Complex complex5 = complex1.INF.multiply((-869.3549889687644));
        complex5.INF.exp();
        Complex complex6 = complex0.ONE.multiply(0.7853981633974483);
        Complex complex7 = complex5.I.createComplex(0.7853981633974483, 0.0);
        complex7.equals((Object) complex6);
    }

    @Test(timeout = 4000)
    public void test79102() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.atan();
        complex0.readResolve();
        Complex complex2 = complex0.INF.sqrt1z();
        complex1.toString();
        String string0 = complex0.INF.toString();
        List<Complex> list0 = complex1.INF.nthRoot(17);
        Complex complex3 = complex0.INF.acos();
        Complex complex4 = complex3.NaN.sqrt();
        Complex complex5 = complex1.INF.multiply((-869.3549889687644));
        complex5.INF.exp();
        Complex complex6 = complex0.ONE.multiply(0.7853981633974483);
        Complex complex7 = complex5.I.createComplex(0.7853981633974483, 0.0);
        Complex complex8 = complex0.negate();
        Complex complex9 = complex8.ZERO.sinh();
        complex8.getField();
        complex9.hashCode();
        complex9.isInfinite();
    }

    @Test(timeout = 4000)
    public void test79103() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.atan();
        complex0.readResolve();
        Complex complex2 = complex0.INF.sqrt1z();
        complex1.toString();
        String string0 = complex0.INF.toString();
        List<Complex> list0 = complex1.INF.nthRoot(17);
        Complex complex3 = complex0.INF.acos();
        Complex complex4 = complex3.NaN.sqrt();
        Complex complex5 = complex1.INF.multiply((-869.3549889687644));
        complex5.INF.exp();
        Complex complex6 = complex0.ONE.multiply(0.7853981633974483);
        Complex complex7 = complex5.I.createComplex(0.7853981633974483, 0.0);
        Complex complex8 = complex0.negate();
        Complex complex9 = complex8.ZERO.sinh();
        complex8.getField();
        complex9.hashCode();
        complex8.getReal();
    }

    @Test(timeout = 4000)
    public void test79104() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.atan();
        complex0.readResolve();
        Complex complex2 = complex0.INF.sqrt1z();
        complex1.toString();
        String string0 = complex0.INF.toString();
        List<Complex> list0 = complex1.INF.nthRoot(17);
        Complex complex3 = complex0.INF.acos();
        Complex complex4 = complex3.NaN.sqrt();
        Complex complex5 = complex1.INF.multiply((-869.3549889687644));
        complex5.INF.exp();
        Complex complex6 = complex0.ONE.multiply(0.7853981633974483);
        Complex complex7 = complex5.I.createComplex(0.7853981633974483, 0.0);
        Complex complex8 = complex0.negate();
        Complex complex9 = complex8.ZERO.sinh();
        complex8.getField();
        complex9.hashCode();
        complex9.getImaginary();
    }

    @Test(timeout = 4000)
    public void test79105() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.atan();
        complex0.readResolve();
        Complex complex2 = complex0.INF.sqrt1z();
        complex1.toString();
        String string0 = complex0.INF.toString();
        List<Complex> list0 = complex1.INF.nthRoot(17);
        Complex complex3 = complex0.INF.acos();
        Complex complex4 = complex3.NaN.sqrt();
        Complex complex5 = complex1.INF.multiply((-869.3549889687644));
        complex5.INF.exp();
        Complex complex6 = complex0.ONE.multiply(0.7853981633974483);
        Complex complex7 = complex5.I.createComplex(0.7853981633974483, 0.0);
        Complex complex8 = complex0.negate();
        Complex complex9 = complex8.ZERO.sinh();
        complex8.getField();
        complex9.hashCode();
        Complex complex10 = complex0.sqrt();
        complex4.multiply((double) 17);
    }

    @Test(timeout = 4000)
    public void test79107() throws Throwable {
        Complex complex0 = Complex.INF;
        Complex complex1 = complex0.INF.atan();
        complex0.readResolve();
        Complex complex2 = complex0.INF.sqrt1z();
        complex1.toString();
        String string0 = complex0.INF.toString();
        List<Complex> list0 = complex1.INF.nthRoot(17);
        Complex complex3 = complex0.INF.acos();
        Complex complex4 = complex3.NaN.sqrt();
        Complex complex5 = complex1.INF.multiply((-869.3549889687644));
        complex5.INF.exp();
        Complex complex6 = complex0.ONE.multiply(0.7853981633974483);
        Complex complex7 = complex5.I.createComplex(0.7853981633974483, 0.0);
        Complex complex8 = complex0.negate();
        Complex complex9 = complex8.ZERO.sinh();
        complex8.getField();
        complex9.hashCode();
        Complex complex10 = complex0.sqrt();
        complex4.multiply((double) 17);
        complex0.equals((Object) complex10);
    }

    @Test(timeout = 4000)
    public void test80108() throws Throwable {
        Complex complex0 = Complex.I;
        complex0.getArgument();
        complex0.equals((Object) null);
        complex0.getImaginary();
        Complex complex1 = complex0.log();
        complex1.INF.conjugate();
        complex1.ONE.toString();
        complex1.NaN.acos();
        Complex complex2 = complex0.I.exp();
        Complex complex3 = complex1.NaN.exp();
        Complex complex4 = complex3.INF.cosh();
        complex4.ZERO.toString();
        complex4.log();
        Complex complex5 = complex3.ONE.cosh();
        complex5.INF.multiply(complex0);
        complex1.ONE.createComplex(1.0, 1.5707963267948966);
        complex0.createComplex(1.5707963267948966, 1.0);
        complex2.nthRoot((-982));
    }
}
