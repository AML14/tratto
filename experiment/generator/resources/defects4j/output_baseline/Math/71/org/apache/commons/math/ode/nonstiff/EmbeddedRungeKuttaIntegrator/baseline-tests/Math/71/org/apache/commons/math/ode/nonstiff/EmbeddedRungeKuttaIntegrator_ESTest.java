/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 18:40:56 GMT 2023
 */
package org.apache.commons.math.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.FirstOrderConverter;
import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(408.234179, 408.234179, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        // Undeclared exception!
        dormandPrince54Integrator0.integrate(firstOrderConverter0, (-186.065561), doubleArray0, 1.0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, 958.3823, (-6.179694156470946));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        dormandPrince54Integrator0.integrate(firstOrderConverter0, (-6.179694156470946), doubleArray0, 0.0, doubleArray0);
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        double double0 = dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        double[] doubleArray0 = new double[7];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        double[] doubleArray0 = new double[7];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMinReduction(0.0);
        double double0 = dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-1368.3));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        double double0 = highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(510.63347, 510.63347, 510.63347, 510.63347);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[6];
        dormandPrince853Integrator0.integrate(firstOrderConverter0, 510.63347, doubleArray0, 3963.8, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
        double[] doubleArray0 = new double[7];
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, (-331.364376440207), doubleArray0, 0.0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        double[] doubleArray0 = new double[0];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2602.0188660334, 0.0, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        highamHall54Integrator0.addEventHandler(eventHandler0, 6579.906, (-783.025116643216), 951);
        // Undeclared exception!
        highamHall54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, (-2561.6749248379533), doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1218() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, 958.3823, 958.3823);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        double[] doubleArray1 = new double[4];
        dormandPrince54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray0, 3831.9243024, doubleArray1);
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test1320() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getMaxGrowth();
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test1321() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getMaxGrowth();
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test1422() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-1368.3));
        double double0 = highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test1423() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-1368.3));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test1424() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-1368.3));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test1525() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test1526() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getSafety();
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test1527() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getSafety();
        highamHall54Integrator0.getMinReduction();
    }
}
