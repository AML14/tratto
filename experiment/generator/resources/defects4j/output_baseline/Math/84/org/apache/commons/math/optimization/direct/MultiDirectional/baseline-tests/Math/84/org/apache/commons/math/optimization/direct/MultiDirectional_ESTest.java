/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 19:25:45 GMT 2023
 */
package org.apache.commons.math.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.commons.math.analysis.MultivariateVectorialFunction;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.LeastSquaresConverter;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.direct.MultiDirectional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class MultiDirectional_ESTest extends MultiDirectional_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        MultiDirectional multiDirectional0 = new MultiDirectional(0.0, 1.1102230246251565E-14);
        multiDirectional0.setMaxIterations((-2143));
        multiDirectional0.iterateSimplex((Comparator<RealPointValuePair>) null);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        MultiDirectional multiDirectional0 = new MultiDirectional();
        RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[1];
        double[] doubleArray0 = new double[2];
        RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, (-4225.05309));
        realPointValuePairArray0[0] = realPointValuePair0;
        multiDirectional0.simplex = realPointValuePairArray0;
        Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        multiDirectional0.iterateSimplex(comparator0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        MultiDirectional multiDirectional0 = new MultiDirectional();
        double[] doubleArray0 = new double[5];
        doubleArray0[0] = (double) 306;
        MultivariateVectorialFunction multivariateVectorialFunction0 = mock(MultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
        doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateVectorialFunction0).value(any(double[].class));
        LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorialFunction0, doubleArray0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        // Undeclared exception!
        multiDirectional0.optimize(leastSquaresConverter0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        MultiDirectional multiDirectional0 = new MultiDirectional((-163.956534124), (-163.956534124));
        Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        multiDirectional0.iterateSimplex(comparator0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        MultiDirectional multiDirectional0 = new MultiDirectional();
        double[] doubleArray0 = new double[5];
        MultivariateVectorialFunction multivariateVectorialFunction0 = mock(MultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
        doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateVectorialFunction0).value(any(double[].class));
        LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorialFunction0, doubleArray0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        // Undeclared exception!
        multiDirectional0.optimize(leastSquaresConverter0, goalType0, doubleArray0);
    }
}
