/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 05:03:41 GMT 2023
 */
package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray1);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray1, 0.0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        double[] doubleArray0 = new double[8];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 3219.24015011664, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble(), any(double[].class));
        gillIntegrator0.addEventHandler(eventHandler0, 570.4101323738074, 570.4101323738074, 1017);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        // Undeclared exception!
        gillIntegrator0.integrate(expandableStatefulODE0, 570.4101323738074);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-220.8858634), (-220.8858634), doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double double0 = dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-220.8858634), doubleArray0, 0.0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1203.928542009299, 1203.928542009299, 1203.928542009299, Double.NaN);
        graggBulirschStoerIntegrator0.setMaxEvaluations(0);
        int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        double[] doubleArray0 = new double[6];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
        double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1062.793099660106));
        midpointIntegrator0.setMaxEvaluations(0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[0];
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2884.68803), doubleArray0, 0.0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2596.669037036749, 2596.669037036749, 0.78125, 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, (double[]) null, 0.0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        double[] doubleArray0 = new double[0];
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.384185791015625E-4, (-421.461515), doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-421.461515), doubleArray0, (-1943.57583495), doubleArray0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        double[] doubleArray0 = new double[4];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-1.0), doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2848.829017));
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2481.1941896976573, 2481.1941896976573, 2481.1941896976573, 1.0);
        highamHall54Integrator0.integrate((ExpandableStatefulODE) null, 2481.1941896976573);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        double[] doubleArray0 = new double[0];
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.setMaxEvaluations(0);
        double[] doubleArray0 = new double[0];
        gillIntegrator0.computeDerivatives(0, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(3, 2632.11502318578, 3, 3, 2632.11502318578);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 2632.11502318578);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5, 0, 505.29965, 4.450312892752409);
        graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) (-1211));
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5, 0, 505.29965, 4.450312892752409);
        graggBulirschStoerIntegrator0.setMaxEvaluations((-1211));
        graggBulirschStoerIntegrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3730.0862259082087), 0.0, doubleArray0, doubleArray0);
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
        highamHall54Integrator0.addStepHandler(stepNormalizer0);
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        gillIntegrator0.addEventHandler(eventHandler0, 0.0, (-450.374), 0, (UnivariateSolver) null);
        gillIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        gillIntegrator0.addEventHandler(eventHandler0, 0.0, (-450.374), 0, (UnivariateSolver) null);
        gillIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1.1270175653862835));
        classicalRungeKuttaIntegrator0.clearEventHandlers();
        classicalRungeKuttaIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1.1270175653862835));
        classicalRungeKuttaIntegrator0.clearEventHandlers();
        classicalRungeKuttaIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        double[] doubleArray0 = new double[0];
        gillIntegrator0.computeDerivatives(0, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        double[] doubleArray0 = new double[2];
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1523.4801996885988, 1523.4801996885988, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1523.4801996885988, doubleArray0, 1523.4801996885988, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 2260.9539330813764, doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        // Undeclared exception!
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-220.8858634), doubleArray0, 0.0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[0];
        double[] doubleArray1 = new double[6];
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 474.0, doubleArray0, 110.2558, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(570.4101323738074, 570.4101323738074, 570.4101323738074, 570.4101323738074, (-1829.963)).when(eventHandler0).g(anyDouble(), any(double[].class));
        gillIntegrator0.addEventHandler(eventHandler0, 570.4101323738074, 570.4101323738074, 1017);
        gillIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(570.4101323738074, 570.4101323738074, 570.4101323738074, 570.4101323738074, (-1829.963)).when(eventHandler0).g(anyDouble(), any(double[].class));
        gillIntegrator0.addEventHandler(eventHandler0, 570.4101323738074, 570.4101323738074, 1017);
        gillIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn(570.4101323738074, 570.4101323738074, 570.4101323738074, 570.4101323738074, (-1829.963)).when(eventHandler0).g(anyDouble(), any(double[].class));
        gillIntegrator0.addEventHandler(eventHandler0, 570.4101323738074, 570.4101323738074, 1017);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[0];
        double double0 = gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 1017, doubleArray0, (-1623.58756927), doubleArray0);
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        double[] doubleArray0 = new double[7];
        GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-193.6399867), doubleArray0, doubleArray0);
        graggBulirschStoerIntegrator0.setMaxEvaluations(58);
        graggBulirschStoerIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.075);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn("5e~bUB;g").when(eventHandler0).toString();
        eulerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.075, (-7));
        Collection<EventHandler> collection0 = eulerIntegrator0.getEventHandlers();
        collection0.contains(eventHandler0);
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.075);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn("5e~bUB;g").when(eventHandler0).toString();
        eulerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.075, (-7));
        Collection<EventHandler> collection0 = eulerIntegrator0.getEventHandlers();
        eulerIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test2531() throws Throwable {
        EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.075);
        EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
        doReturn("5e~bUB;g").when(eventHandler0).toString();
        eulerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.075, (-7));
        Collection<EventHandler> collection0 = eulerIntegrator0.getEventHandlers();
        eulerIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test2632() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.getName();
        gillIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test2633() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.getName();
        gillIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test2734() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.getStepHandlers();
        gillIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test2735() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.getStepHandlers();
        gillIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test2836() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        double double0 = gillIntegrator0.getCurrentStepStart();
        gillIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test2837() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        double double0 = gillIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test2938() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        int int0 = gillIntegrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test2939() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        int int0 = gillIntegrator0.getMaxEvaluations();
        gillIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test2940() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator(570.4101323738074);
        int int0 = gillIntegrator0.getMaxEvaluations();
        gillIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test3041() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.getEvaluations();
        gillIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test3042() throws Throwable {
        GillIntegrator gillIntegrator0 = new GillIntegrator((-450.374));
        gillIntegrator0.getEvaluations();
        gillIntegrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test3143() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-9.147934308113573), (-9.147934308113573), (-3005.0), (-3005.0));
        double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test3244() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1062.793099660106));
        midpointIntegrator0.clearStepHandlers();
        midpointIntegrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test3245() throws Throwable {
        MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1062.793099660106));
        midpointIntegrator0.clearStepHandlers();
        midpointIntegrator0.getCurrentStepStart();
    }
}
