/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 18:48:13 GMT 2023
 */
package org.apache.commons.math.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.FirstOrderConverter;
import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math.ode.sampling.FixedStepHandler;
import org.apache.commons.math.ode.sampling.StepNormalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0010() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0014() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
    }

    @Test(timeout = 4000)
    public void test0016() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test0017() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0018() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0020() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test0021() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0025() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0026() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0027() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0030() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test0031() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0032() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0036() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0037() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0038() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0039() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0040() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setSafety(0.0);
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0141() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
    }

    @Test(timeout = 4000)
    public void test0142() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0143() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0144() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0145() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0146() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0147() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0148() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0149() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0150() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0151() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test0152() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test0153() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0154() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0155() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0156() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0157() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0158() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0159() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0160() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0161() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0162() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test0163() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test0164() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        double double0 = dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0165() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0166() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0167() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0168() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0169() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0170() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0171() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0172() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0173() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0174() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test0175() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setSafety((-1151.70847888));
        double double0 = dormandPrince54Integrator0.getSafety();
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test0276() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0279() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0280() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0281() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0282() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0283() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0284() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0285() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test0286() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test0287() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test0288() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test0289() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test0290() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        int int0 = highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test0293() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        int int0 = highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test0294() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        int int0 = highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test0295() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        int int0 = highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test0296() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        int int0 = highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test0297() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        int int0 = highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test0298() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        int int0 = highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test0299() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        int int0 = highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test02100() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        int int0 = highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test02101() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        int int0 = highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test02102() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        int int0 = highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test02103() throws Throwable {
        double[] doubleArray0 = new double[1];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-547.75788), (-7.35), doubleArray0, doubleArray0);
        int int0 = highamHall54Integrator0.getOrder();
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test03104() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test03107() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test03108() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test03109() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test03110() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test03111() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test03112() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test03113() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test03114() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test03115() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test03116() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test03117() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test03118() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
    }

    @Test(timeout = 4000)
    public void test03120() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test03121() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test03122() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test03123() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        highamHall54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test03124() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        highamHall54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test03125() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test03126() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test03127() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test03128() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test03129() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test03130() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        double double0 = highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test03134() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test03135() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test03136() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test03137() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test03138() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test03139() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test03140() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test03141() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test03142() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test03143() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test03144() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        highamHall54Integrator0.setMinReduction(0.0);
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test04145() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
    }

    @Test(timeout = 4000)
    public void test04146() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test04148() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test04149() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test04150() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test04151() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test04152() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test04153() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test04154() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test04155() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test04156() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test04157() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test04158() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test04159() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test04160() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test04161() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test04162() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        highamHall54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test04163() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test04164() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test04165() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test04166() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        highamHall54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test04167() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test04168() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        double double0 = highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test04169() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test04170() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test04171() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test04172() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test04173() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test04174() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test04175() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test04176() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test04177() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test04178() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test04179() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        highamHall54Integrator0.setMinReduction((-3.0689499459498917));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test05192() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test05193() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test05194() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test05195() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test05196() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test05197() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test05198() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test05199() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test05200() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test05201() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test05202() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test05203() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test05204() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test05205() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test05206() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test05207() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test05208() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test05209() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test05210() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test05211() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test05212() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test05213() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test05214() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, (-2333.907148752371), (-1151.70847888), (-2826.589577));
        dormandPrince54Integrator0.setMaxGrowth((-2629.544768));
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test06215() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    }

    @Test(timeout = 4000)
    public void test06216() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test06217() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
    }

    @Test(timeout = 4000)
    public void test06218() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test06219() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test06220() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test06221() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test06222() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test06223() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test06224() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test06225() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test06226() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test06227() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
        highamHall54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test06228() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
        highamHall54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test06229() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, (-11.87528245965743));
        double[][] doubleArray0 = new double[3][7];
        highamHall54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray0[2], 2.0, doubleArray0[1]);
    }

    @Test(timeout = 4000)
    public void test07230() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
    }

    @Test(timeout = 4000)
    public void test07231() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test07232() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test07233() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test07234() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test07235() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test07236() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test07237() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test07238() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test07239() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test07240() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test07241() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test07242() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(305.07576780617, 305.07576780617, 539.627267855558, 0.0);
        double[] doubleArray0 = new double[7];
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, (-331.364376440207), doubleArray0, 0.0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test08257() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
    }

    @Test(timeout = 4000)
    public void test08259() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test08260() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test08261() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test08262() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test08263() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test08264() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test08265() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test08266() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test08267() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test08268() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test08269() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test08270() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test08273() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test08274() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test08275() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test08276() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test08277() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test08278() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test08279() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test08280() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test08281() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test08283() throws Throwable {
        double[] doubleArray0 = new double[1];
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2473.63036006), 573.13, doubleArray0, doubleArray0);
        dormandPrince54Integrator0.setMaxGrowth(0.0);
        double double0 = dormandPrince54Integrator0.getMaxGrowth();
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test09286() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
    }

    @Test(timeout = 4000)
    public void test09287() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
        highamHall54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test09288() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test09289() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
        highamHall54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test09290() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
        highamHall54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test09291() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
        highamHall54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
        highamHall54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test09293() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test09294() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
        highamHall54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test09295() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
        highamHall54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test09296() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test09297() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
        highamHall54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test10298() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
    }

    @Test(timeout = 4000)
    public void test10299() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test10300() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test10301() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test10302() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test10303() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test10304() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test10305() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test10306() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test10307() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test10308() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test10309() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test10310() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
    }

    @Test(timeout = 4000)
    public void test10311() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test10312() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
    }

    @Test(timeout = 4000)
    public void test10313() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        stepNormalizer0.requiresDenseOutput();
    }

    @Test(timeout = 4000)
    public void test10314() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test10315() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test10316() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test10317() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test10318() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test10319() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test10320() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test10321() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test10322() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test10323() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test10324() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test10325() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        stepNormalizer0.requiresDenseOutput();
    }

    @Test(timeout = 4000)
    public void test10326() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test10329() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
        dormandPrince54Integrator0.getCurrentStepStart();
    }

    @Test(timeout = 4000)
    public void test10330() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
        dormandPrince54Integrator0.getMinStep();
    }

    @Test(timeout = 4000)
    public void test10331() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test10332() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
        dormandPrince54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test10333() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
        dormandPrince54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test10334() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
        dormandPrince54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test10335() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
        dormandPrince54Integrator0.getCurrentSignedStepsize();
    }

    @Test(timeout = 4000)
    public void test10336() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
        dormandPrince54Integrator0.getMaxStep();
    }

    @Test(timeout = 4000)
    public void test10337() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
        dormandPrince54Integrator0.getOrder();
    }

    @Test(timeout = 4000)
    public void test10338() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
        dormandPrince54Integrator0.getName();
    }

    @Test(timeout = 4000)
    public void test10339() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
        dormandPrince54Integrator0.getMaxEvaluations();
    }

    @Test(timeout = 4000)
    public void test10340() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), 0.0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
        StepNormalizer stepNormalizer0 = new StepNormalizer(2662.6024984, fixedStepHandler0);
        dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 3831.9243024, doubleArray0);
        firstOrderConverter0.getDimension();
    }

    @Test(timeout = 4000)
    public void test11341() throws Throwable {
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 5, 756.9, 3831.9243024);
        double[] doubleArray1 = new double[4];
        // Undeclared exception!
        highamHall54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray1, 2.0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test12342() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), (-11.87528245965743));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray0, (-11.87528245965743), doubleArray0);
        dormandPrince54Integrator0.getEvaluations();
    }

    @Test(timeout = 4000)
    public void test12343() throws Throwable {
        DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(958.3823, 958.3823, (-11.87528245965743), (-11.87528245965743));
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        double[] doubleArray0 = new double[4];
        double double0 = dormandPrince54Integrator0.integrate(firstOrderConverter0, 958.3823, doubleArray0, (-11.87528245965743), doubleArray0);
    }

    @Test(timeout = 4000)
    public void test13344() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test13345() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getMaxGrowth();
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test13346() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getMaxGrowth();
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test14347() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        double double0 = highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test14348() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test14349() throws Throwable {
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1643.914493, 1643.914493, (-1368.3), (-452.1072983195));
        double double0 = highamHall54Integrator0.getMinReduction();
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test15350() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getSafety();
        highamHall54Integrator0.getMinReduction();
    }

    @Test(timeout = 4000)
    public void test15351() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getSafety();
        highamHall54Integrator0.getMaxGrowth();
    }

    @Test(timeout = 4000)
    public void test15352() throws Throwable {
        double[] doubleArray0 = new double[9];
        HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3004.8064), (-3004.8064), doubleArray0, doubleArray0);
        double double0 = highamHall54Integrator0.getSafety();
    }

    @Test(timeout = 4000)
    public void test16353() throws Throwable {
        double[] doubleArray0 = new double[0];
        DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.9, (-1.0), doubleArray0, doubleArray0);
        SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
        FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        // Undeclared exception!
        dormandPrince853Integrator0.integrate(firstOrderConverter0, 0.0, doubleArray0, 5, doubleArray0);
    }
}
