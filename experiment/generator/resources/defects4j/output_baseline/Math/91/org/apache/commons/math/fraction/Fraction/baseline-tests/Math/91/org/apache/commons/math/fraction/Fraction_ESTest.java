/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 19:37:41 GMT 2023
 */
package org.apache.commons.math.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Fraction fraction0 = new Fraction(0.0);
        fraction0.divide(fraction0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Fraction fraction0 = new Fraction(1797.67598);
        Fraction fraction1 = fraction0.divide(fraction0);
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Fraction fraction0 = new Fraction(1797.67598);
        Fraction fraction1 = fraction0.divide(fraction0);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.TWO.reciprocal();
        boolean boolean0 = fraction0.equals(fraction1);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.TWO.reciprocal();
        boolean boolean0 = fraction0.equals(fraction1);
        fraction1.equals((Object) fraction0);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.TWO.reciprocal();
        boolean boolean0 = fraction0.equals(fraction1);
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.TWO.reciprocal();
        boolean boolean0 = fraction0.equals(fraction1);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(1, 1);
        Fraction fraction1 = fraction0.negate();
        boolean boolean0 = fraction0.equals(fraction1);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(1, 1);
        Fraction fraction1 = fraction0.negate();
        boolean boolean0 = fraction0.equals(fraction1);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(1, 1);
        Fraction fraction1 = fraction0.negate();
        boolean boolean0 = fraction0.equals(fraction1);
        fraction0.intValue();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN);
        Fraction fraction1 = Fraction.ZERO;
        Fraction fraction2 = fraction0.subtract(fraction1);
        fraction2.getNumerator();
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN);
        Fraction fraction1 = Fraction.ZERO;
        Fraction fraction2 = fraction0.subtract(fraction1);
        fraction2.shortValue();
    }

    @Test(timeout = 4000)
    public void test0512() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN, 37, 37);
        Fraction fraction1 = fraction0.reciprocal();
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN, 37, 37);
        Fraction fraction1 = fraction0.reciprocal();
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        Fraction fraction1 = fraction0.reciprocal();
        fraction1.equals((Object) fraction0);
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.TWO.reciprocal();
        long long0 = fraction1.longValue();
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.TWO.reciprocal();
        long long0 = fraction1.longValue();
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.TWO.reciprocal();
        long long0 = fraction1.longValue();
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        long long0 = fraction0.longValue();
    }

    @Test(timeout = 4000)
    public void test0919() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        int int0 = fraction0.intValue();
    }

    @Test(timeout = 4000)
    public void test1020() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        int int0 = fraction0.intValue();
    }

    @Test(timeout = 4000)
    public void test1121() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        int int0 = fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test1222() throws Throwable {
        Fraction fraction0 = Fraction.TWO;
        Fraction fraction1 = fraction0.negate();
        int int0 = fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test1223() throws Throwable {
        Fraction fraction0 = Fraction.TWO;
        Fraction fraction1 = fraction0.negate();
        int int0 = fraction1.getNumerator();
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test1324() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        int int0 = fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test1425() throws Throwable {
        Fraction fraction0 = new Fraction(0.0, 2079.4, 0);
        float float0 = fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test1526() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        Fraction fraction1 = fraction0.abs();
        float float0 = fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test1527() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        Fraction fraction1 = fraction0.abs();
        float float0 = fraction1.floatValue();
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test1628() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        double double0 = fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test1729() throws Throwable {
        Fraction fraction0 = new Fraction(9, (-922));
        double double0 = fraction0.doubleValue();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test1730() throws Throwable {
        Fraction fraction0 = new Fraction(9, (-922));
        double double0 = fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test1831() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        Fraction fraction1 = fraction0.TWO.divide(fraction0);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test1932() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN);
        Fraction fraction1 = fraction0.ZERO.add(fraction0);
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test1933() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN);
        Fraction fraction1 = fraction0.ZERO.add(fraction0);
        fraction1.intValue();
    }

    @Test(timeout = 4000)
    public void test2034() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN);
        Fraction fraction1 = fraction0.abs();
        fraction1.intValue();
    }

    @Test(timeout = 4000)
    public void test2035() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN);
        Fraction fraction1 = fraction0.abs();
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test2136() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-1073741824), 5);
        Fraction fraction1 = fraction0.abs();
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test2137() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-1073741824), 5);
        Fraction fraction1 = fraction0.abs();
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test2238() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN);
        fraction0.subtract(fraction0);
    }

    @Test(timeout = 4000)
    public void test2339() throws Throwable {
        Fraction fraction0 = new Fraction((-2147483647), 97);
        fraction0.ONE.subtract(fraction0);
    }

    @Test(timeout = 4000)
    public void test2440() throws Throwable {
        Fraction fraction0 = Fraction.TWO;
        Fraction fraction1 = fraction0.subtract(fraction0);
        fraction1.reciprocal();
    }

    @Test(timeout = 4000)
    public void test2541() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(613654404, (-3857));
        fraction0.multiply(fraction0);
    }

    @Test(timeout = 4000)
    public void test2642() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = new Fraction((-2032.329579254536));
        Fraction fraction2 = fraction0.subtract(fraction1);
        Fraction fraction3 = fraction0.ONE.divide(fraction1);
        fraction3.divide(fraction2);
    }

    @Test(timeout = 4000)
    public void test2743() throws Throwable {
        Fraction fraction0 = new Fraction((-557.952506913556), (-1473));
        fraction0.compareTo((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test2844() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN);
        Fraction fraction1 = Fraction.ONE;
        fraction0.add(fraction1);
    }

    @Test(timeout = 4000)
    public void test2945() throws Throwable {
        Fraction fraction0 = new Fraction(569.819967);
        fraction0.add((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test3046() throws Throwable {
        Fraction fraction0 = new Fraction(2088600, 1);
        Fraction fraction1 = fraction0.reciprocal();
        fraction1.add(fraction0);
    }

    @Test(timeout = 4000)
    public void test3147() throws Throwable {
        Fraction.getReducedFraction(1, 0);
    }

    @Test(timeout = 4000)
    public void test3248() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        Fraction fraction1 = fraction0.ZERO.multiply(fraction0);
        fraction1.longValue();
    }

    @Test(timeout = 4000)
    public void test3349() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 55);
        fraction0.negate();
    }

    @Test(timeout = 4000)
    public void test3450() throws Throwable {
        Fraction fraction0 = new Fraction((-261), (-261));
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test3451() throws Throwable {
        Fraction fraction0 = new Fraction((-261), (-261));
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test3552() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction(185, 0);
    }

    @Test(timeout = 4000)
    public void test3653() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN, 37, 37);
        int int0 = fraction0.getDenominator();
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test3654() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN, 37, 37);
        int int0 = fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test3755() throws Throwable {
        Fraction fraction0 = new Fraction(0.0);
        double double0 = fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test3856() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN, 37, 37);
        int int0 = fraction0.getNumerator();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test3857() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN, 37, 37);
        int int0 = fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test3958() throws Throwable {
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2114));
    }

    @Test(timeout = 4000)
    public void test4059() throws Throwable {
        Fraction.getReducedFraction((-221), Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test4160() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-3468), Integer.MIN_VALUE);
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test4161() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction((-3468), Integer.MIN_VALUE);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test4262() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(0, 2);
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test4363() throws Throwable {
        Fraction fraction0 = new Fraction(Double.NaN);
        fraction0.ONE.multiply(fraction0);
    }

    @Test(timeout = 4000)
    public void test4464() throws Throwable {
        Fraction fraction0 = Fraction.MINUS_ONE;
        Fraction fraction1 = fraction0.ZERO.abs();
        fraction0.MINUS_ONE.divide(fraction1);
    }

    @Test(timeout = 4000)
    public void test4565() throws Throwable {
        Fraction fraction0 = new Fraction(473.4698288);
        fraction0.ONE.divide((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test4666() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(613654404, (-3857));
        Fraction fraction1 = fraction0.negate();
        Fraction fraction2 = fraction0.add(fraction1);
        Fraction fraction3 = fraction0.multiply(fraction2);
        fraction2.doubleValue();
    }

    @Test(timeout = 4000)
    public void test4667() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(613654404, (-3857));
        Fraction fraction1 = fraction0.negate();
        Fraction fraction2 = fraction0.add(fraction1);
        Fraction fraction3 = fraction0.multiply(fraction2);
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test4668() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(613654404, (-3857));
        Fraction fraction1 = fraction0.negate();
        Fraction fraction2 = fraction0.add(fraction1);
        Fraction fraction3 = fraction0.multiply(fraction2);
        fraction3.doubleValue();
    }

    @Test(timeout = 4000)
    public void test4769() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = fraction0.ZERO.divide(fraction0);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test4770() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = fraction0.ZERO.divide(fraction0);
        fraction0.byteValue();
    }

    @Test(timeout = 4000)
    public void test4871() throws Throwable {
        Fraction fraction0 = new Fraction(1.0);
        fraction0.MINUS_ONE.multiply((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test4972() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = fraction0.ONE.multiply(fraction0);
        fraction1.doubleValue();
    }

    @Test(timeout = 4000)
    public void test5073() throws Throwable {
        Fraction fraction0 = new Fraction((-1994091957), 100);
        Fraction fraction1 = new Fraction((-379.15983));
        fraction0.subtract(fraction1);
    }

    @Test(timeout = 4000)
    public void test5174() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test5175() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = new Fraction((-2089.562449831285));
        Fraction fraction2 = fraction0.MINUS_ONE.add(fraction1);
        Fraction fraction3 = fraction2.add(fraction1);
        fraction3.getNumerator();
    }

    @Test(timeout = 4000)
    public void test5176() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = new Fraction((-2089.562449831285));
        Fraction fraction2 = fraction0.MINUS_ONE.add(fraction1);
        Fraction fraction3 = fraction2.add(fraction1);
        fraction2.intValue();
    }

    @Test(timeout = 4000)
    public void test5277() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = fraction0.ZERO.negate();
        Fraction fraction2 = fraction1.add(fraction0);
        fraction2.getNumerator();
    }

    @Test(timeout = 4000)
    public void test5278() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = fraction0.ZERO.negate();
        Fraction fraction2 = fraction1.add(fraction0);
    }

    @Test(timeout = 4000)
    public void test5279() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = fraction0.ZERO.negate();
        Fraction fraction2 = fraction1.add(fraction0);
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test5380() throws Throwable {
        Fraction fraction0 = new Fraction((-391.221), (-1076));
        fraction0.subtract((Fraction) null);
    }

    @Test(timeout = 4000)
    public void test5481() throws Throwable {
        Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
        fraction0.abs();
    }

    @Test(timeout = 4000)
    public void test5582() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.TWO.reciprocal();
        boolean boolean0 = fraction1.equals(fraction0);
        fraction0.equals((Object) fraction1);
    }

    @Test(timeout = 4000)
    public void test5583() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.TWO.reciprocal();
        boolean boolean0 = fraction1.equals(fraction0);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test5584() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.TWO.reciprocal();
        boolean boolean0 = fraction1.equals(fraction0);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test5585() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.TWO.reciprocal();
        boolean boolean0 = fraction1.equals(fraction0);
    }

    @Test(timeout = 4000)
    public void test5686() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        Fraction fraction1 = fraction0.negate();
        boolean boolean0 = fraction1.equals(fraction0);
    }

    @Test(timeout = 4000)
    public void test5787() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(1252, (-2444));
        Fraction fraction1 = Fraction.ONE;
        boolean boolean0 = fraction0.equals(fraction1);
    }

    @Test(timeout = 4000)
    public void test5788() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(1252, (-2444));
        Fraction fraction1 = Fraction.ONE;
        boolean boolean0 = fraction0.equals(fraction1);
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test5789() throws Throwable {
        Fraction fraction0 = Fraction.getReducedFraction(1252, (-2444));
        Fraction fraction1 = Fraction.ONE;
        boolean boolean0 = fraction0.equals(fraction1);
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test5890() throws Throwable {
        Fraction fraction0 = new Fraction((-1.0));
        boolean boolean0 = fraction0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test5891() throws Throwable {
        Fraction fraction0 = new Fraction((-1.0));
        boolean boolean0 = fraction0.equals((Object) null);
        fraction0.intValue();
    }

    @Test(timeout = 4000)
    public void test5992() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        boolean boolean0 = fraction0.equals(fraction0);
    }

    @Test(timeout = 4000)
    public void test6093() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        boolean boolean0 = fraction0.equals("");
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test6094() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        boolean boolean0 = fraction0.equals("");
    }

    @Test(timeout = 4000)
    public void test6195() throws Throwable {
        Fraction fraction0 = Fraction.TWO;
        Fraction fraction1 = Fraction.ZERO;
        int int0 = fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test6196() throws Throwable {
        Fraction fraction0 = Fraction.TWO;
        Fraction fraction1 = Fraction.ZERO;
        int int0 = fraction0.compareTo(fraction1);
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test6297() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        int int0 = fraction0.compareTo(fraction0);
    }

    @Test(timeout = 4000)
    public void test6298() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        int int0 = fraction0.compareTo(fraction0);
        fraction0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test6399() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = fraction0.ONE.abs();
        int int0 = fraction0.compareTo(fraction1);
        fraction1.getNumerator();
    }

    @Test(timeout = 4000)
    public void test63100() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = fraction0.ONE.abs();
        int int0 = fraction0.compareTo(fraction1);
    }

    @Test(timeout = 4000)
    public void test63101() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = fraction0.ONE.abs();
        int int0 = fraction0.compareTo(fraction1);
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test64102() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction((-3468), Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test65103() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test66104() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction((-24.016514532197593), (-2147483645), (-2147483645));
    }

    @Test(timeout = 4000)
    public void test67105() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction(0.0, 37);
    }

    @Test(timeout = 4000)
    public void test68106() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction(37, 0, 0);
    }

    @Test(timeout = 4000)
    public void test69107() throws Throwable {
        Fraction fraction0 = null;
        fraction0 = new Fraction(Double.POSITIVE_INFINITY);
    }

    @Test(timeout = 4000)
    public void test70108() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        int int0 = fraction0.intValue();
        fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test70109() throws Throwable {
        Fraction fraction0 = Fraction.ZERO;
        int int0 = fraction0.intValue();
    }

    @Test(timeout = 4000)
    public void test71110() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        float float0 = fraction0.floatValue();
    }

    @Test(timeout = 4000)
    public void test72111() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = fraction0.MINUS_ONE.subtract(fraction0);
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test72112() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = fraction0.MINUS_ONE.subtract(fraction0);
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test72113() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        Fraction fraction1 = fraction0.MINUS_ONE.subtract(fraction0);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test73114() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        fraction0.hashCode();
        fraction0.getNumerator();
    }

    @Test(timeout = 4000)
    public void test73115() throws Throwable {
        Fraction fraction0 = new Fraction((-2089.562449831285), 1);
        fraction0.hashCode();
        fraction0.getDenominator();
    }

    @Test(timeout = 4000)
    public void test74116() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.TWO.add(fraction0);
        fraction1.floatValue();
    }

    @Test(timeout = 4000)
    public void test74117() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        Fraction fraction1 = fraction0.TWO.add(fraction0);
        fraction1.getDenominator();
    }

    @Test(timeout = 4000)
    public void test75118() throws Throwable {
        Fraction fraction0 = Fraction.ONE;
        long long0 = fraction0.longValue();
    }
}
