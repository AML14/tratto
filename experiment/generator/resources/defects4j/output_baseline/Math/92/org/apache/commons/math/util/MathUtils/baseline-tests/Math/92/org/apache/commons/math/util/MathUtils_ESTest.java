/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 21 17:56:12 GMT 2023
 */
package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        int int0 = MathUtils.hash((-841.431583755455));
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        double[] doubleArray0 = new double[4];
        int int0 = MathUtils.hash(doubleArray0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        MathUtils.lcm(307, (-2147483646));
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        float float0 = MathUtils.round((float) 3872, 3872, 6);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        MathUtils.addAndCheck((-9223372036854775808L), (-9223372036854775808L));
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        double double0 = MathUtils.sinh(2.2250738585072014E-308);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        double double0 = MathUtils.normalizeAngle(3180.6304183601, 3180.6304183601);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        MathUtils.binomialCoefficient(473, 363);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        double double0 = MathUtils.cosh(10.0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        double double0 = MathUtils.log(3858, 3858);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        MathUtils.addAndCheck((-2147483645), (-2147483645));
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        MathUtils.addAndCheck(2097152006, 2097152006);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        int int0 = MathUtils.addAndCheck(21, 21);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        MathUtils.subAndCheck(9223372036854774385L, (long) (-3866));
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        long long0 = MathUtils.subAndCheck((long) 2546, (long) 2546);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        long long0 = MathUtils.addAndCheck((-1L), (-1L));
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        long long0 = MathUtils.addAndCheck((long) 25, (long) 25);
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        MathUtils.binomialCoefficient((short) (-24), 4);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        MathUtils.binomialCoefficient((-2145267461), (-2145267461));
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(7, 7);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(13, (byte) 0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(21, 1);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(8, 7);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        long long0 = MathUtils.binomialCoefficient(25, 21);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        MathUtils.binomialCoefficientDouble(16, 25);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        MathUtils.binomialCoefficientLog((-747), (-747));
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        double double0 = MathUtils.binomialCoefficientDouble(25, 25);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(907, 0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(2062, 1);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        double double0 = MathUtils.binomialCoefficientLog(13, 12);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[2] = (double) Float.NaN;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        boolean boolean0 = MathUtils.equals(Double.NaN, (double) 0L);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        double[] doubleArray0 = new double[1];
        boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        double[] doubleArray0 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        double[] doubleArray0 = new double[3];
        double[] doubleArray1 = new double[6];
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        double[] doubleArray0 = new double[6];
        double[] doubleArray1 = new double[6];
        doubleArray1[5] = Double.NEGATIVE_INFINITY;
        boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        double double0 = MathUtils.factorialDouble(16);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        MathUtils.factorial((-3564));
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        MathUtils.factorial(1108);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        MathUtils.factorialDouble((-769));
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        double double0 = MathUtils.factorialDouble(3872);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        MathUtils.factorialLog((-3));
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        double double0 = MathUtils.factorialLog(16);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        int int0 = MathUtils.gcd(0, 0);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        int int0 = MathUtils.gcd((-910), 0);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        int int0 = MathUtils.gcd(3872, 3872);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        int int0 = MathUtils.gcd((-826), 1117);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        byte byte0 = MathUtils.indicator((byte) (-78));
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        byte byte0 = MathUtils.indicator((byte) 0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        double double0 = MathUtils.indicator((double) (-3281));
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        double double0 = MathUtils.indicator(Double.NaN);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        double double0 = MathUtils.indicator((double) 0);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        float float0 = MathUtils.indicator(Float.NaN);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        int int0 = MathUtils.indicator((-384));
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        int int0 = MathUtils.indicator(3872);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        long long0 = MathUtils.indicator((-8L));
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        long long0 = MathUtils.indicator(1267L);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        short short0 = MathUtils.indicator((short) (-565));
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        short short0 = MathUtils.indicator((short) 23);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        MathUtils.mulAndCheck((-2147483619), (-2147483619));
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        int int0 = MathUtils.lcm((-1204), (-1204));
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        MathUtils.mulAndCheck((-9223372036854775808L), (-9223372036854775808L));
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        long long0 = MathUtils.mulAndCheck((long) 0, (-1L));
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        MathUtils.mulAndCheck(9223372036854775803L, 9223372036854775803L);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        long long0 = MathUtils.mulAndCheck((-1571L), (-1571L));
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        long long0 = MathUtils.mulAndCheck((long) 21, (-1L));
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        MathUtils.mulAndCheck(22L, (-9223372036854775806L));
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        long long0 = MathUtils.mulAndCheck(0L, 0L);
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        long long0 = MathUtils.mulAndCheck(1241L, 1241L);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        float float0 = MathUtils.round(0.0F, 3073);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        float float0 = MathUtils.round((-841.53F), 3073, 2);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        double double0 = MathUtils.nextAfter(1, (-2100));
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        double double0 = MathUtils.nextAfter(0, (-121.66024));
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        double double0 = MathUtils.nextAfter(0.9999999999999999, 1);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        float float0 = MathUtils.round((float) 5, (-2), 5);
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        double double0 = MathUtils.scalb(0, 0);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        double double0 = MathUtils.scalb(Float.NaN, 1732);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        double double0 = MathUtils.scalb(Double.POSITIVE_INFINITY, 15);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        double double0 = MathUtils.scalb((-17), (-17));
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        double double0 = MathUtils.round(Double.NaN, 0, 0);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        double double0 = MathUtils.round(Double.NEGATIVE_INFINITY, (int) (byte) 9);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        float float0 = MathUtils.round((float) 0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        float float0 = MathUtils.round((float) 1, 1, 1);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        float float0 = MathUtils.round((-1852.62F), 3, 3);
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        MathUtils.round(3643.34F, 1, 7);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        MathUtils.round((float) 13, 13, 13);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        float float0 = MathUtils.round((float) 2, 2, 2);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        float float0 = MathUtils.round((float) 3, 3, 3);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        float float0 = MathUtils.round((float) 5, 5, 5);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        float float0 = MathUtils.round((-581.498F), (-2), 6);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        float float0 = MathUtils.round((float) 6, 6, 6);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        float float0 = MathUtils.round(0.0F, 3872, 6);
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        float float0 = MathUtils.round((float) 7, (-1));
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        float float0 = MathUtils.round((float) 7, 7, 7);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        byte byte0 = MathUtils.sign((byte) (-87));
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        byte byte0 = MathUtils.sign((byte) 0);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        byte byte0 = MathUtils.sign((byte) 5);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        double double0 = MathUtils.sign((double) (-1736L));
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        double double0 = MathUtils.sign(Double.NaN);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        double double0 = MathUtils.sign(0.0);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        double double0 = MathUtils.sign(0.5);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        float float0 = MathUtils.sign(0.0F);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        float float0 = MathUtils.sign(Float.NaN);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        float float0 = MathUtils.sign((-0.7871165F));
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        float float0 = MathUtils.sign((float) 3073);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        int int0 = MathUtils.sign((-388));
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        int int0 = MathUtils.sign(0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        int int0 = MathUtils.sign(3872);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        long long0 = MathUtils.sign((-8L));
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        long long0 = MathUtils.sign(0L);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        long long0 = MathUtils.sign(7L);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        short short0 = MathUtils.sign((short) (-615));
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        short short0 = MathUtils.sign((short) 0);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        short short0 = MathUtils.sign((short) 1434);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        MathUtils.subAndCheck((-2147483645), 2097152000);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        MathUtils.subAndCheck(1762, (-2147483646));
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        int int0 = MathUtils.subAndCheck(7, 7);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        MathUtils.subAndCheck(1L, (-9223372036854775808L));
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        long long0 = MathUtils.subAndCheck((-9223372036854775808L), (-9223372036854775808L));
    }
}
