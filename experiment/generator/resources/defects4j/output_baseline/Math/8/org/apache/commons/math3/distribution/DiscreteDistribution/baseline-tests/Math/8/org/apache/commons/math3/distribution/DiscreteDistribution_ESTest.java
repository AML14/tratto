/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 05:06:11 GMT 2023
 */
package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well512a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DiscreteDistribution_ESTest extends DiscreteDistribution_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        int[] intArray0 = new int[2];
        Well512a well512a0 = new Well512a(intArray0);
        LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
        Double double0 = new Double(1);
        Pair<Object, Double> pair0 = new Pair<Object, Double>("", double0);
        linkedList0.add(pair0);
        DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
        discreteDistribution0.sample(0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
        DiscreteDistribution<Byte> discreteDistribution0 = null;
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
        Double double0 = Double.valueOf(1639.442144482485);
        Pair<Short, Double> pair0 = new Pair<Short, Double>((Short) null, double0);
        linkedList0.add(pair0);
        DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>(linkedList0);
        Short short0 = discreteDistribution0.sample();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
        Double double0 = new Double(3039L);
        Pair<Byte, Double> pair0 = new Pair<Byte, Double>((Byte) null, double0);
        linkedList0.add(pair0);
        DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
        discreteDistribution0.sample(389);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        int[] intArray0 = new int[2];
        Well512a well512a0 = new Well512a(intArray0);
        LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
        Double double0 = new Double(1015.9618516734);
        Pair<Object, Double> pair0 = new Pair<Object, Double>(intArray0[1], double0);
        linkedList0.add(pair0);
        Pair<Object, Double> pair1 = new Pair<Object, Double>("", double0);
        linkedList0.add(pair1);
        DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
        discreteDistribution0.sample(2382);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
        Short short0 = new Short((short) 18681);
        Double double0 = new Double((short) 18681);
        Pair<Short, Double> pair0 = new Pair<Short, Double>(short0, double0);
        linkedList0.add(pair0);
        DiscreteDistribution<Short> discreteDistribution0 = new DiscreteDistribution<Short>((RandomGenerator) null, linkedList0);
        discreteDistribution0.reseedRandomGenerator((-972714661));
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        int[] intArray0 = new int[2];
        Well512a well512a0 = new Well512a(intArray0);
        LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
        DiscreteDistribution<Short> discreteDistribution0 = null;
        discreteDistribution0 = new DiscreteDistribution<Short>(well512a0, linkedList0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        DiscreteDistribution<Byte> discreteDistribution0 = null;
        discreteDistribution0 = new DiscreteDistribution<Byte>((RandomGenerator) null, (List<Pair<Byte, Double>>) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        int[] intArray0 = new int[2];
        intArray0[1] = 1;
        Well512a well512a0 = new Well512a(intArray0);
        LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
        Double double0 = new Double(1);
        Pair<Object, Double> pair0 = new Pair<Object, Double>("", double0);
        linkedList0.add(pair0);
        linkedList0.add(pair0);
        DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
        Object object0 = discreteDistribution0.sample();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
        Double double0 = new Double((-240.455777));
        Pair<Object, Double> pair0 = new Pair<Object, Double>(linkedList0, double0);
        linkedList0.add(pair0);
        DiscreteDistribution<Object> discreteDistribution0 = null;
        discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) null, linkedList0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        int[] intArray0 = new int[2];
        Well512a well512a0 = new Well512a(intArray0);
        LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
        Double double0 = new Double(1);
        Pair<Object, Double> pair0 = new Pair<Object, Double>("", double0);
        linkedList0.add(pair0);
        DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
        discreteDistribution0.sample((-2454));
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        int[] intArray0 = new int[2];
        Well512a well512a0 = new Well512a(intArray0);
        LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
        Double double0 = new Double(1015.9618516734);
        Pair<Object, Double> pair0 = new Pair<Object, Double>(intArray0[1], double0);
        linkedList0.add(pair0);
        linkedList0.add(pair0);
        DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>(well512a0, linkedList0);
        Object[] objectArray0 = discreteDistribution0.sample(2382);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        int[] intArray0 = new int[7];
        Well1024a well1024a0 = new Well1024a(intArray0);
        LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
        Double double0 = new Double(2743.928701244215);
        Pair<String, Double> pair0 = new Pair<String, Double>("s,$A$Zh?;NOno~", double0);
        linkedList0.add(pair0);
        DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
        // Undeclared exception!
        discreteDistribution0.sample(168507691);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        int[] intArray0 = new int[7];
        Well1024a well1024a0 = new Well1024a(intArray0);
        LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
        Double double0 = new Double(1019.075);
        Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
        linkedList0.add(pair0);
        DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
        List<Pair<String, Double>> list0 = discreteDistribution0.getSamples();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        int[] intArray0 = new int[7];
        Well1024a well1024a0 = new Well1024a(intArray0);
        LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
        Double double0 = new Double(2743.928701244215);
        Pair<String, Double> pair0 = new Pair<String, Double>("s,$A$Zh?;NOno~", double0);
        linkedList0.add(pair0);
        DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
        double double1 = discreteDistribution0.probability("s,$A$Zh?;NOno~");
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        int[] intArray0 = new int[7];
        Well1024a well1024a0 = new Well1024a(intArray0);
        LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
        Double double0 = new Double(1019.075);
        Pair<String, Double> pair0 = new Pair<String, Double>("s,$A$Zh?;NOno~", double0);
        linkedList0.add(pair0);
        DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
        double double1 = discreteDistribution0.probability((String) null);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        int[] intArray0 = new int[7];
        Well1024a well1024a0 = new Well1024a(intArray0);
        LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
        Double double0 = new Double(1019.075);
        Pair<String, Double> pair0 = new Pair<String, Double>((String) null, double0);
        linkedList0.add(pair0);
        DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>(well1024a0, linkedList0);
        double double1 = discreteDistribution0.probability((String) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        int[] intArray0 = new int[4];
        MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
        LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
        Double double0 = new Double(1702);
        Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) intArray0[1], double0);
        linkedList0.add(pair0);
        DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(mersenneTwister0, linkedList0);
        LinkedList<Pair<Object, Double>> linkedList1 = new LinkedList<Pair<Object, Double>>();
        Pair<Object, Double> pair1 = new Pair<Object, Double>(discreteDistribution0, double0);
        linkedList1.add(pair1);
        DiscreteDistribution<Object> discreteDistribution1 = new DiscreteDistribution<Object>(linkedList1);
        Byte byte0 = new Byte((byte) (-27));
        double double1 = discreteDistribution1.probability(byte0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
        Byte byte0 = new Byte((byte) 96);
        Double double0 = new Double((-1.0));
        Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double0);
        linkedList0.add(pair0);
        DiscreteDistribution<Byte> discreteDistribution0 = null;
        discreteDistribution0 = new DiscreteDistribution<Byte>(linkedList0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        int[] intArray0 = new int[4];
        MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
        LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
        Double double0 = new Double(1702);
        Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) intArray0[0], double0);
        linkedList0.add(pair0);
        DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>(mersenneTwister0, linkedList0);
        discreteDistribution0.reseedRandomGenerator(0L);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        DiscreteDistribution<String> discreteDistribution0 = null;
        discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) null);
    }
}
