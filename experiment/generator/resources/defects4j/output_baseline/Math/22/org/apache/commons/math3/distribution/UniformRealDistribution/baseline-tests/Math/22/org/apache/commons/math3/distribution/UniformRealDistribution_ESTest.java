/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 09:25:19 GMT 2023
 */
package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.UniformRealDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class UniformRealDistribution_ESTest extends UniformRealDistribution_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-675.9794592268), 0.0, 0.0);
        double double0 = uniformRealDistribution0.sample();
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-675.9794592268), 0.0, 0.0);
        double double0 = uniformRealDistribution0.sample();
        uniformRealDistribution0.getSupportUpperBound();
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        double double0 = uniformRealDistribution0.inverseCumulativeProbability(1.0E-6);
        uniformRealDistribution0.isSupportConnected();
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        double double0 = uniformRealDistribution0.inverseCumulativeProbability(1.0E-6);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        double double0 = uniformRealDistribution0.inverseCumulativeProbability(1.0E-6);
        uniformRealDistribution0.getNumericalMean();
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        double double0 = uniformRealDistribution0.inverseCumulativeProbability(1.0E-6);
        uniformRealDistribution0.getSupportUpperBound();
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        double double0 = uniformRealDistribution0.inverseCumulativeProbability(1.0E-6);
        uniformRealDistribution0.getNumericalVariance();
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        double double0 = uniformRealDistribution0.inverseCumulativeProbability(1.0E-6);
        uniformRealDistribution0.getSupportLowerBound();
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
        uniformRealDistribution0.getSupportLowerBound();
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
    }

    @Test(timeout = 4000)
    public void test210() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
        uniformRealDistribution0.getNumericalMean();
    }

    @Test(timeout = 4000)
    public void test311() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
        uniformRealDistribution0.getNumericalVariance();
    }

    @Test(timeout = 4000)
    public void test312() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
    }

    @Test(timeout = 4000)
    public void test313() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
        uniformRealDistribution0.getSupportLowerBound();
    }

    @Test(timeout = 4000)
    public void test414() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = null;
        uniformRealDistribution0 = new UniformRealDistribution(223.0646342768073, 223.0646342768073);
    }

    @Test(timeout = 4000)
    public void test515() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        double double0 = uniformRealDistribution0.density((-1442.257006783594));
        uniformRealDistribution0.getNumericalMean();
    }

    @Test(timeout = 4000)
    public void test516() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        double double0 = uniformRealDistribution0.density((-1442.257006783594));
    }

    @Test(timeout = 4000)
    public void test517() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        double double0 = uniformRealDistribution0.density((-1442.257006783594));
        uniformRealDistribution0.getSupportLowerBound();
    }

    @Test(timeout = 4000)
    public void test618() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        double double0 = uniformRealDistribution0.density(0.0);
    }

    @Test(timeout = 4000)
    public void test619() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
        double double0 = uniformRealDistribution0.density(0.0);
        uniformRealDistribution0.getSupportLowerBound();
    }

    @Test(timeout = 4000)
    public void test720() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-1442.257006783594), 0.08333333333333333, 121.928);
        double double0 = uniformRealDistribution0.density(1.0);
    }

    @Test(timeout = 4000)
    public void test721() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-1442.257006783594), 0.08333333333333333, 121.928);
        double double0 = uniformRealDistribution0.density(1.0);
        uniformRealDistribution0.getNumericalMean();
    }

    @Test(timeout = 4000)
    public void test822() throws Throwable {
        UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-675.9794592268), 0.0, 0.0);
        uniformRealDistribution0.probability(2687.229247, 2687.229247);
        uniformRealDistribution0.getNumericalMean();
    }
}
