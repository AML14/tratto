/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 06:09:15 GMT 2023
 */
package org.apache.commons.math3.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.SimplePointChecker;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray0 = new double[1][3];
        double[] doubleArray1 = new double[1];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(47, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 30000, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MINIMIZE;
        double[] doubleArray2 = new double[1];
        doubleArray2[0] = (double) 47;
        cMAESOptimizer0.optimize((-576), (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray2);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-2198));
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        cMAESOptimizer0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        cMAESOptimizer0.getEvaluations();
        cMAESOptimizer0.getMaxEvaluations();
        cMAESOptimizer0.getStatisticsMeanHistory();
        cMAESOptimizer0.getStatisticsMeanHistory();
        double[][] doubleArray0 = new double[1][3];
        double[] doubleArray1 = new double[1];
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(47, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 30000, 0, unitSphereRandomVectorGenerator0);
        double[] doubleArray2 = new double[1];
        doubleArray2[0] = (double) 47;
        doubleArray1[0] = (double) 0;
        doubleArray0[0] = doubleArray2;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator1 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        unitSphereRandomVectorGenerator1.nextVector();
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction1 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray2, 2628, 0, unitSphereRandomVectorGenerator1);
        GoalType goalType0 = GoalType.MINIMIZE;
        // Undeclared exception!
        cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction1, goalType0, doubleArray2, doubleArray1, doubleArray2);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Well44497a well44497a0 = new Well44497a();
        SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, (-2157.173657120076));
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-633066204), (double[]) null, 0, (-633066204), true, (-961), (-633066204), well44497a0, true, simplePointChecker0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        double[] doubleArray0 = new double[0];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2, doubleArray0, 2, 2, true, 0, 2, (RandomGenerator) null, true, (ConvergenceChecker<PointValuePair>) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Well19937a well19937a0 = new Well19937a();
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-1796), (double[]) null, (-1796), (-1796), false, 0, 62, well19937a0, true);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        double[] doubleArray0 = new double[3];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
        double[][] doubleArray1 = new double[3][8];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, (UnitSphereRandomVectorGenerator) null);
        GoalType goalType0 = GoalType.MAXIMIZE;
        // Undeclared exception!
        cMAESOptimizer0.optimize(1187, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-28));
        double[][] doubleArray0 = new double[1][3];
        double[] doubleArray1 = new double[1];
        doubleArray0[0] = doubleArray1;
        UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(0, cMAESOptimizer0.DEFAULT_RANDOMGENERATOR);
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray0, doubleArray1, 2628, 0, unitSphereRandomVectorGenerator0);
        GoalType goalType0 = GoalType.MAXIMIZE;
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(2628, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1, doubleArray1, doubleArray1);
        PointValuePair pointValuePair1 = cMAESOptimizer0.doOptimize();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-28));
        List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
        list0.size();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        double[] doubleArray0 = new double[3];
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1187, doubleArray0);
        double[][] doubleArray1 = new double[3][8];
        doubleArray1[0] = doubleArray0;
        doubleArray1[1] = doubleArray0;
        doubleArray1[2] = doubleArray0;
        MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, 0, 0, (UnitSphereRandomVectorGenerator) null);
        GoalType goalType0 = GoalType.MAXIMIZE;
        // Undeclared exception!
        cMAESOptimizer0.optimize(1187, microsphereInterpolatingFunction0, goalType0, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1998);
        List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
        list0.size();
    }
}
