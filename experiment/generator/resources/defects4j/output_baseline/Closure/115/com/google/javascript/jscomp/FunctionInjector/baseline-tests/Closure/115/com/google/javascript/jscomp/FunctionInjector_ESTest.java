/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 05:35:43 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.rhino.Node;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionInjector_ESTest extends FunctionInjector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        functionInjector0.maybePrepareCall((Node) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = Node.newString("VAR_DECL_SIMPLE_ASSIGNMENT", 55, 39);
        Node node1 = new Node(4095, node0, node0, node0, node0);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
        functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node1, (Node) null, linkedHashSet0, functionInjector_InliningMode0, false, true);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, false);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = Node.newString("$VALES", (-525), (-525));
        Node node1 = new Node(31, node0, node0, node0, node0);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, linkedHashSet0, functionInjector_InliningMode0, true, true);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        Node node0 = Node.newString("jvAUE<", (-596), (-596));
        Node node1 = new Node((-596), node0, node0, node0, node0, 48, 52);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, set0, functionInjector_InliningMode0, false, false);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        functionInjector0.inline((Node) null, "g$ oP", (Node) null, functionInjector_InliningMode0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
        compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        functionInjector0.inline((Node) null, "?bvr.2jH+#Ma", (Node) null, functionInjector_InliningMode0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        Node node0 = Node.newString(2929, "; ");
        Node node1 = new Node(4095, node0, node0, node0);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        Node node2 = new Node(4, node1);
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node1, node2, compilerOptions0.stripNamePrefixes, functionInjector_InliningMode0, false, false);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, true);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
        boolean boolean0 = functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, true, true);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        JSModule jSModule0 = new JSModule(":M=HTm<-9\",An%p");
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of();
        boolean boolean0 = functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, (Set<String>) null, true, true);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        JSModule jSModule0 = new JSModule("");
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        Set<String> set0 = inlineSimpleMethods0.externMethods;
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set0, true, true);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        JSModule jSModule0 = new JSModule("AFTER_PREPARATION");
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, linkedHashSet0, true, true);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        JSModule jSModule0 = new JSModule((String) null);
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        JSModule jSModule1 = new JSModule((String) null);
        functionInjector0.inliningLowersCost(jSModule1, (Node) null, immutableList0, linkedHashSet0, true, true);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, false, true);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, true, true);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        functionInjector0.setKnownConstants(set0);
        functionInjector0.setKnownConstants(set0);
    }
}
