/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 08:02:41 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PrototypeObjectType_ESTest extends PrototypeObjectType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ObjectType objectType0 = errorFunctionType0.getInstanceType();
        boolean boolean0 = objectType0.matchesObjectContext();
        objectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ObjectType objectType0 = errorFunctionType0.getInstanceType();
        boolean boolean0 = objectType0.matchesObjectContext();
        objectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ObjectType objectType0 = errorFunctionType0.getInstanceType();
        boolean boolean0 = objectType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.canBeCalled();
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.canBeCalled();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NullType", (Node) null);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0);
        functionType0.setExtendedInterfaces(immutableList0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        instanceObjectType0.getSlot("Unknown class name");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NullType", (Node) null);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0);
        functionType0.setExtendedInterfaces(immutableList0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        instanceObjectType0.getSlot("Unknown class name");
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", unknownType0);
        boolean boolean0 = prototypeObjectType0.defineProperty("P~)&Bnz", (JSType) null, false, (Node) null);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", unknownType0);
        boolean boolean0 = prototypeObjectType0.defineProperty("P~)&Bnz", (JSType) null, false, (Node) null);
        int int0 = prototypeObjectType0.getPropertiesCount();
        prototypeObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", unknownType0);
        boolean boolean0 = prototypeObjectType0.defineProperty("P~)&Bnz", (JSType) null, false, (Node) null);
        int int0 = prototypeObjectType0.getPropertiesCount();
        prototypeObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0310() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", unknownType0);
        boolean boolean0 = prototypeObjectType0.defineProperty("P~)&Bnz", (JSType) null, false, (Node) null);
        int int0 = prototypeObjectType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
        Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
        errorFunctionType0.defineSynthesizedProperty("{", (JSType) null, node0);
        int int0 = errorFunctionType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
        Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
        errorFunctionType0.defineSynthesizedProperty("{", (JSType) null, node0);
        int int0 = errorFunctionType0.getPropertiesCount();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ObjectType objectType0 = errorFunctionType0.getTopMostDefiningType("Unknown class name");
        objectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0514() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ObjectType objectType0 = errorFunctionType0.getTopMostDefiningType("Unknown class name");
        objectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "NOT_NULL");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("NOT_NULL", jSDocInfo0);
        errorFunctionType0.matchRecordTypeConstraint(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ": ");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo0);
        functionType0.matchRecordTypeConstraint(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0817() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
        boolean boolean0 = errorFunctionType0.defineSynthesizedProperty("{", (JSType) null, node0);
    }

    @Test(timeout = 4000)
    public void test0818() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
        boolean boolean0 = errorFunctionType0.defineSynthesizedProperty("{", (JSType) null, node0);
        errorFunctionType0.matchRecordTypeConstraint(indexedType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0819() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
        boolean boolean0 = errorFunctionType0.defineSynthesizedProperty("{", (JSType) null, node0);
        errorFunctionType0.matchRecordTypeConstraint(indexedType0);
        indexedType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        Node node0 = Node.newNumber(3823.8162115272617, 0, 0);
        boolean boolean0 = errorFunctionType0.defineSynthesizedProperty("{", (JSType) null, node0);
        errorFunctionType0.matchRecordTypeConstraint(indexedType0);
        indexedType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test0921() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getPropertyNames();
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0922() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getPropertyNames();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1023() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) stringType0);
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "", node0, stringType0);
        enumType0.defineProperty("iX<K", stringType0, false, node0);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Set<String> set0 = jSDocInfo0.getSuppressions();
        enumType0.collectPropertyNames(set0);
    }

    @Test(timeout = 4000)
    public void test1124() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (Node) null);
        boolean boolean0 = functionType0.defineProperty(", ", recordType0, false, (Node) null);
        boolean boolean1 = functionType0.isPropertyTypeInferred(", ");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1125() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (Node) null);
        boolean boolean0 = functionType0.defineProperty(", ", recordType0, false, (Node) null);
        boolean boolean1 = functionType0.isPropertyTypeInferred(", ");
    }

    @Test(timeout = 4000)
    public void test1126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (Node) null);
        boolean boolean0 = functionType0.defineProperty(", ", recordType0, false, (Node) null);
        boolean boolean1 = functionType0.isPropertyTypeInferred(", ");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1228() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("com.google.common.collect.Iterators$3");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1229() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("com.google.common.collect.Iterators$3");
    }

    @Test(timeout = 4000)
    public void test1330() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<45KY2");
        boolean boolean0 = errorFunctionType0.isPropertyInExterns("<45KY2");
    }

    @Test(timeout = 4000)
    public void test1331() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<45KY2");
        boolean boolean0 = errorFunctionType0.isPropertyInExterns("<45KY2");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1432() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "NOT_NULL");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("NOT_NULL", jSDocInfo0);
        errorFunctionType0.isPropertyInExterns("NOT_NULL");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1533() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
        boolean boolean0 = recordType0.removeProperty("Not declared as a constructor");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1534() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
        boolean boolean0 = recordType0.removeProperty("Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test1535() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
        boolean boolean0 = recordType0.removeProperty("Not declared as a constructor");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1636() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("Not declared as a type name", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.removeProperty("Not declared as a type name");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1637() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("Not declared as a type name", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.removeProperty("Not declared as a type name");
    }

    @Test(timeout = 4000)
    public void test1738() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getPropertyNode("BOOLEAN_TYPE");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1739() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getPropertyNode("BOOLEAN_TYPE");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1840() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "NOT_NULL");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("NOT_NULL", jSDocInfo0);
        errorFunctionType0.getPropertyNode("NOT_NULL");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1941() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ": ");
        errorFunctionType0.getOwnPropertyJSDocInfo(": ");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test2042() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo0);
        errorFunctionType0.getOwnPropertyJSDocInfo("Named type with empty name component");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "N4Qjq4W");
        errorFunctionType0.setPropertyJSDocInfo("Not declared as a constructor", (JSDocInfo) null);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test2144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "N4Qjq4W");
        errorFunctionType0.setPropertyJSDocInfo("Not declared as a constructor", (JSDocInfo) null);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2245() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "$(aB,.q2I");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("$(aB,.q2I", jSDocInfo0);
        errorFunctionType0.setPropertyJSDocInfo("$(aB,.q2I", jSDocInfo0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2346() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.setPropertyJSDocInfo("^Dke V~@5)kWy#u", jSDocInfo0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2447() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C|PDOa^Q-bG#");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2448() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C|PDOa^Q-bG#");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2549() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2550() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2651() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
        Node node0 = Node.newNumber((double) 1);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("toString", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType1.matchesStringContext();
        recordType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2652() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
        Node node0 = Node.newNumber((double) 1);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        hashMap0.put("toString", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
        boolean boolean0 = recordType1.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2753() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = functionType0.matchesStringContext();
        functionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test2754() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = functionType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2855() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "c*e{'C$Jcdy\"U:m:y");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = functionType0.matchesNumberContext();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2856() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "c*e{'C$Jcdy\"U:m:y");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = functionType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test2857() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "c*e{'C$Jcdy\"U:m:y");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = functionType0.matchesNumberContext();
        functionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test2958() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = recordType0.unboxesTo();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2959() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = recordType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test2960() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType jSType0 = recordType0.unboxesTo();
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test3061() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        JSType jSType0 = instanceObjectType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test3062() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        JSType jSType0 = instanceObjectType0.unboxesTo();
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test3163() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", unknownType0);
        String string0 = prototypeObjectType0.toStringHelper(true);
        prototypeObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test3164() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", unknownType0);
        String string0 = prototypeObjectType0.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test3265() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        String string0 = errorFunctionType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test3266() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        String string0 = errorFunctionType0.toStringHelper(false);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test3367() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        Node node0 = Node.newString(0, "Not declared as a constructor");
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, node0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        String string0 = recordType0.toStringHelper(true);
    }

    @Test(timeout = 4000)
    public void test3469() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = new Node(1, 1, 105);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty> biFunction0 = (BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.merge("tR*i:", recordTypeBuilder_RecordProperty0, biFunction0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Not declared as a type name", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty1);
        RecordType recordType1 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType1.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test3571() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        jSTypeRegistry0.resetImplicitPrototype(functionType0, functionType0);
    }

    @Test(timeout = 4000)
    public void test3672() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType[] jSTypeArray0 = new JSType[8];
        jSTypeArray0[7] = (JSType) recordType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) recordType0, jSTypeArray0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3673() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType[] jSTypeArray0 = new JSType[8];
        jSTypeArray0[7] = (JSType) recordType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) recordType0, jSTypeArray0);
        recordType0.setOwnerFunction(functionType0);
        recordType0.getReferenceName();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3774() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ", ...");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        errorFunctionType0.matchRecordTypeConstraint(functionType0);
        functionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test3775() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ", ...");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        errorFunctionType0.matchRecordTypeConstraint(functionType0);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test3876() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "H7Xroxy", (Node) null);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) instanceObjectType0, (ObjectType) indexedType0, (ObjectType) instanceObjectType0);
        functionType0.setExtendedInterfaces(immutableList0);
        instanceObjectType0.getTypesUnderShallowEquality(indexedType0);
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3877() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "H7Xroxy", (Node) null);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) instanceObjectType0, (ObjectType) indexedType0, (ObjectType) instanceObjectType0);
        functionType0.setExtendedInterfaces(immutableList0);
        instanceObjectType0.getTypesUnderShallowEquality(indexedType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test3978() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = new Node(1, 1, 105);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty> biFunction0 = (BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        hashMap0.merge("tR*i:", recordTypeBuilder_RecordProperty0, biFunction0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
        RecordType recordType2 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType2.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3979() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = new Node(1, 1, 105);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
        BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty> biFunction0 = (BiFunction<RecordTypeBuilder.RecordProperty, Object, RecordTypeBuilder.RecordProperty>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
        hashMap0.merge("tR*i:", recordTypeBuilder_RecordProperty0, biFunction0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
        RecordType recordType2 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType2.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test4080() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NullType", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test4081() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NullType", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    }

    @Test(timeout = 4000)
    public void test4082() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NullType", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test4183() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isNumber();
    }

    @Test(timeout = 4000)
    public void test4184() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isNumber();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test4285() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NullType", (Node) null);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0);
        functionType0.setExtendedInterfaces(immutableList0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
        JSType jSType0 = unionType0.meet(instanceObjectType0);
        boolean boolean0 = instanceObjectType0.isSubtype(jSType0);
        instanceObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4286() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NullType", (Node) null);
        ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0);
        functionType0.setExtendedInterfaces(immutableList0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
        JSType jSType0 = unionType0.meet(instanceObjectType0);
        boolean boolean0 = instanceObjectType0.isSubtype(jSType0);
    }

    @Test(timeout = 4000)
    public void test4387() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test4388() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test4389() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isSubtype(noResolvedType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test4490() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "    ");
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", templateType0, true);
        PrototypeObjectType prototypeObjectType1 = new PrototypeObjectType(jSTypeRegistry0, (String) null, prototypeObjectType0);
        jSTypeRegistry0.createOptionalType(prototypeObjectType1);
        prototypeObjectType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4491() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "    ");
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", templateType0, true);
        PrototypeObjectType prototypeObjectType1 = new PrototypeObjectType(jSTypeRegistry0, (String) null, prototypeObjectType0);
        jSTypeRegistry0.createOptionalType(prototypeObjectType1);
        prototypeObjectType1.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test4592() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "N4Qjq4W");
        errorFunctionType0.setOwnerFunction(errorFunctionType0);
        errorFunctionType0.setOwnerFunction(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test4693() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", unknownType0);
        prototypeObjectType0.getCtorImplementedInterfaces();
        prototypeObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test4694() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", unknownType0);
        prototypeObjectType0.getCtorImplementedInterfaces();
        prototypeObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test4795() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "N4Qjq4W");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("N4Qjq4W", jSDocInfo0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4796() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "N4Qjq4W");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("N4Qjq4W", jSDocInfo0);
        JSType.safeResolve(errorFunctionType0, simpleErrorReporter0, errorFunctionType0);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test4897() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.matchConstraint(recordType0);
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test4898() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.matchConstraint(recordType0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test4999() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Not declared as a constructor", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        instanceObjectType0.matchConstraint(functionType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test49100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Not declared as a constructor", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        instanceObjectType0.matchConstraint(functionType0);
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test50101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = new Node(1, (-2231), 1);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, recordType0);
        recordType0.matchConstraint(arrowType0);
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test50102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        Node node0 = new Node(1, (-2231), 1);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, recordType0);
        recordType0.matchConstraint(arrowType0);
        recordType0.hasReferenceName();
    }
}
