/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 23:43:21 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.PriorityQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JSType_ESTest extends JSType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        booleanType0.getTypesUnderEquality(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        booleanType0.getTypesUnderEquality(errorFunctionType0);
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
        instanceObjectType0.getTypesUnderShallowEquality(booleanType0);
        instanceObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 0, 1);
        namedType0.resolve(simpleErrorReporter0, errorFunctionType0);
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 0, 1);
        namedType0.resolve(simpleErrorReporter0, errorFunctionType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test0036() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0037() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test0038() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test0039() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00310() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00311() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        boolean boolean0 = errorFunctionType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test00412() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isBooleanObjectType();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00413() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isBooleanObjectType();
    }

    @Test(timeout = 4000)
    public void test00514() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSType0.autobox();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00515() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSType0.autobox();
        jSType1.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00516() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = jSType0.autobox();
        jSType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test00617() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getJSDocInfo();
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test00618() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getJSDocInfo();
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test00619() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getJSDocInfo();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test00620() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getJSDocInfo();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00621() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getJSDocInfo();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test00722() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        String string0 = voidType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test00723() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        String string0 = voidType0.toDebugHashCodeString();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00824() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isRegexpType();
    }

    @Test(timeout = 4000)
    public void test00825() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isRegexpType();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test00926() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        JSType jSType0 = voidType0.collapseUnion();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01027() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test01028() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test01029() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
    }

    @Test(timeout = 4000)
    public void test01030() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01131() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isDateType();
    }

    @Test(timeout = 4000)
    public void test01132() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isDateType();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01233() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
        voidType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test01234() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
        voidType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01235() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
        voidType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01236() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
        voidType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test01237() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
        voidType0.getTypesUnderShallowInequality(jSType0);
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test01238() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
        voidType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01239() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
        voidType0.getTypesUnderShallowInequality(jSType0);
        voidType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test01240() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
        voidType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test01341() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.toAnnotationString();
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test01342() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.toAnnotationString();
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test01343() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.toAnnotationString();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01344() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.toAnnotationString();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01345() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.toAnnotationString();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01446() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isStringObjectType();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01447() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isStringObjectType();
    }

    @Test(timeout = 4000)
    public void test01548() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        arrowType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test01549() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        arrowType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test01550() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test01551() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
        arrowType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test01552() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01553() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01554() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01555() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test01556() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "zGr");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
        boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
        arrowType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test01657() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        JSType.toMaybeParameterizedType((JSType) booleanType0);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01758() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isNumberObjectType();
    }

    @Test(timeout = 4000)
    public void test01759() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isNumberObjectType();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01860() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", (Node) null, arrowType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        boolean boolean0 = enumElementType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test01861() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", (Node) null, arrowType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        boolean boolean0 = enumElementType0.matchesStringContext();
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test01862() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", (Node) null, arrowType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        boolean boolean0 = enumElementType0.matchesStringContext();
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test01863() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", (Node) null, arrowType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        boolean boolean0 = enumElementType0.matchesStringContext();
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test01864() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", (Node) null, arrowType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        boolean boolean0 = enumElementType0.matchesStringContext();
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test01865() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", (Node) null, arrowType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        boolean boolean0 = enumElementType0.matchesStringContext();
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test01966() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test02067() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.unboxesTo();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02168() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        booleanType0.canTestForEqualityWith(booleanType0);
    }

    @Test(timeout = 4000)
    public void test02269() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test02270() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isNominalConstructor();
        voidType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test02271() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isNominalConstructor();
        voidType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test02272() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isNominalConstructor();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02373() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isArrayType();
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test02374() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isArrayType();
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test02375() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isArrayType();
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02376() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test02377() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isArrayType();
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test02378() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.isArrayType();
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test02479() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.setValidator((Predicate<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test02580() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2^\"qi3");
        boolean boolean0 = errorFunctionType0.isBooleanValueType();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test02581() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2^\"qi3");
        boolean boolean0 = errorFunctionType0.isBooleanValueType();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test02582() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2^\"qi3");
        boolean boolean0 = errorFunctionType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test02583() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2^\"qi3");
        boolean boolean0 = errorFunctionType0.isBooleanValueType();
        errorFunctionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test02584() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2^\"qi3");
        boolean boolean0 = errorFunctionType0.isBooleanValueType();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test02585() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2^\"qi3");
        boolean boolean0 = errorFunctionType0.isBooleanValueType();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02586() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C2^\"qi3");
        boolean boolean0 = errorFunctionType0.isBooleanValueType();
        errorFunctionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test02687() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.canBeCalled();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02688() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test02789() throws Throwable {
        PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, priorityQueue0);
        boolean boolean0 = unionType0.hasDisplayName();
        unionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test02790() throws Throwable {
        PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, priorityQueue0);
        boolean boolean0 = unionType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test02891() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.isNumber();
    }

    @Test(timeout = 4000)
    public void test02992() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test02993() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.isOrdinaryFunction();
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test03094() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "wc~Oc?(C");
        boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(voidType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test03095() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "wc~Oc?(C");
        boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(voidType0);
    }

    @Test(timeout = 4000)
    public void test03196() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ObjectType objectType0 = booleanType0.dereference();
    }

    @Test(timeout = 4000)
    public void test03197() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ObjectType objectType0 = booleanType0.dereference();
        objectType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test03198() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ObjectType objectType0 = booleanType0.dereference();
        objectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test03199() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ObjectType objectType0 = booleanType0.dereference();
        objectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test031100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ObjectType objectType0 = booleanType0.dereference();
        objectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test031101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ObjectType objectType0 = booleanType0.dereference();
        objectType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test032102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isNamedType();
        numberType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test032103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isNamedType();
        numberType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test032104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isNamedType();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test032105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isNamedType();
        numberType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test032106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isNamedType();
    }

    @Test(timeout = 4000)
    public void test032107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        boolean boolean0 = numberType0.isNamedType();
        numberType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test033108() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.matchConstraint(voidType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test034109() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesInt32Context();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test034110() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesInt32Context();
    }

    @Test(timeout = 4000)
    public void test035111() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test035112() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isInstanceType();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test036113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test036114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
        proxyObjectType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test036115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
        proxyObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test037116() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isTheObjectType();
    }

    @Test(timeout = 4000)
    public void test037117() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.isTheObjectType();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test038118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.UnionType");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test038119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.UnionType");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test039120() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        stringType0.matchesUint32Context();
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test039121() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        stringType0.matchesUint32Context();
        stringType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test039122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        stringType0.matchesUint32Context();
        stringType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test039123() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        stringType0.matchesUint32Context();
        stringType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test039124() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        stringType0.matchesUint32Context();
        stringType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test040125() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, indexedType0);
        boolean boolean0 = arrowType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test040126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, indexedType0);
        boolean boolean0 = arrowType0.isEnumType();
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test040127() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, indexedType0);
        boolean boolean0 = arrowType0.isEnumType();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test040128() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, indexedType0);
        boolean boolean0 = arrowType0.isEnumType();
        arrowType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test040129() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, indexedType0);
        boolean boolean0 = arrowType0.isEnumType();
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test040130() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
        ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, indexedType0);
        boolean boolean0 = arrowType0.isEnumType();
        arrowType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test041131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNumberValueType();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test041132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNumberValueType();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test041133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test042134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test042135() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test043136() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.clearResolved();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test044137() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isFunctionPrototypeType();
        arrowType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test044138() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test044139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isFunctionPrototypeType();
        arrowType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test044140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isFunctionPrototypeType();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test044141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isFunctionPrototypeType();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test044142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isFunctionPrototypeType();
        arrowType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test044143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.isFunctionPrototypeType();
        arrowType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test045144() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0);
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
        unionType0.toStringHelper(true);
        unionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test046145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test046146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test046147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test046148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test046149() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test046150() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test046151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test047152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M%wwv73OYGw38^PiR");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test047153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M%wwv73OYGw38^PiR");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test047154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M%wwv73OYGw38^PiR");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test047155() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M%wwv73OYGw38^PiR");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test047156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M%wwv73OYGw38^PiR");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test047157() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M%wwv73OYGw38^PiR");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test047158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M%wwv73OYGw38^PiR");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test048159() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(parameterizedType0);
    }

    @Test(timeout = 4000)
    public void test048160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(parameterizedType0);
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test048161() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(parameterizedType0);
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test049162() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".LQv=]31fidt4-wJRV");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
        functionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test049163() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".LQv=]31fidt4-wJRV");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
        functionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test049164() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".LQv=]31fidt4-wJRV");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
        functionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test049165() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".LQv=]31fidt4-wJRV");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
        functionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test049166() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".LQv=]31fidt4-wJRV");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
    }

    @Test(timeout = 4000)
    public void test049167() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ".LQv=]31fidt4-wJRV");
        FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
        boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
        functionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test050168() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isGlobalThisType();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test050169() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isGlobalThisType();
    }

    @Test(timeout = 4000)
    public void test050170() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isGlobalThisType();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test051171() throws Throwable {
        FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test052172() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(recordType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test052173() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(recordType0);
    }

    @Test(timeout = 4000)
    public void test053174() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isParameterizedType();
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test053175() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isParameterizedType();
        voidType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test053176() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isParameterizedType();
    }

    @Test(timeout = 4000)
    public void test053177() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isParameterizedType();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test053178() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isParameterizedType();
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test053179() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isParameterizedType();
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test054180() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isParameterizedType();
    }

    @Test(timeout = 4000)
    public void test054181() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isParameterizedType();
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test054182() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isParameterizedType();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test055183() throws Throwable {
        ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test056184() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = templateType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test056185() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = templateType0.isTemplateType();
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test057186() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        JSType.toMaybeTemplateType((JSType) voidType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test058187() throws Throwable {
        TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
    }

    @Test(timeout = 4000)
    public void test059188() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.hasAnyTemplateInternal();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test059189() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.hasAnyTemplateInternal();
    }

    @Test(timeout = 4000)
    public void test059190() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.hasAnyTemplateInternal();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test060191() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "`cP4d8V_>)XLj>4WLaT", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test060192() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "`cP4d8V_>)XLj>4WLaT", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
        functionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test060193() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "`cP4d8V_>)XLj>4WLaT", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
        functionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test060194() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "`cP4d8V_>)XLj>4WLaT", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
        functionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test060195() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "`cP4d8V_>)XLj>4WLaT", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
        functionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test060196() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "`cP4d8V_>)XLj>4WLaT", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
        functionType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test060197() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "`cP4d8V_>)XLj>4WLaT", (Node) null);
        boolean boolean0 = functionType0.isNominalConstructor();
        functionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test061198() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNominalConstructor();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test061199() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNominalConstructor();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test061200() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test062201() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test062202() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
        voidType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test062203() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test062204() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test062205() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
    }

    @Test(timeout = 4000)
    public void test062206() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test063207() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(booleanType0);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test063208() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(booleanType0);
    }

    @Test(timeout = 4000)
    public void test063209() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(booleanType0);
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test063210() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(booleanType0);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test063211() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(booleanType0);
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test063212() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(booleanType0);
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test064213() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isEquivalentTo(noResolvedType0);
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test064214() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isEquivalentTo(noResolvedType0);
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test064215() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isEquivalentTo(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test065216() throws Throwable {
        ParameterizedType parameterizedType0 = new ParameterizedType((JSTypeRegistry) null, (ObjectType) null, (JSType) null);
        boolean boolean0 = JSType.isEquivalent(parameterizedType0, parameterizedType0);
    }

    @Test(timeout = 4000)
    public void test065217() throws Throwable {
        ParameterizedType parameterizedType0 = new ParameterizedType((JSTypeRegistry) null, (ObjectType) null, (JSType) null);
        boolean boolean0 = JSType.isEquivalent(parameterizedType0, parameterizedType0);
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test066218() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.equals((Object) null);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test066219() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test067220() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.equals(numberType0);
    }

    @Test(timeout = 4000)
    public void test067221() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = voidType0.equals(numberType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test068222() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.findPropertyType("Unknown class name");
        voidType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test068223() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.findPropertyType("Unknown class name");
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test068224() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.findPropertyType("Unknown class name");
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test068225() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.findPropertyType("Unknown class name");
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test068226() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.findPropertyType("Unknown class name");
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test069227() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
        enumElementType0.findPropertyType("Unknown class name");
        enumElementType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test069228() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
        enumElementType0.findPropertyType("Unknown class name");
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test069229() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
        enumElementType0.findPropertyType("Unknown class name");
        enumElementType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test069230() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
        enumElementType0.findPropertyType("Unknown class name");
        enumElementType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test069231() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Unknown class name");
        enumElementType0.findPropertyType("Unknown class name");
        enumElementType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test070232() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canAssignTo(stringType0);
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test070233() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canAssignTo(stringType0);
    }

    @Test(timeout = 4000)
    public void test070234() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canAssignTo(stringType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test070235() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canAssignTo(stringType0);
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test070236() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canAssignTo(stringType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test071237() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
        boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test071238() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
        boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
        objectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test071239() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
        boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
        objectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test071240() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
        boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
    }

    @Test(timeout = 4000)
    public void test071241() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
        boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
        objectType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test071242() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
        boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
        objectType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test072243() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        booleanType0.getTypesUnderEquality(allType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test072244() throws Throwable {
        BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        booleanType0.getTypesUnderEquality(allType0);
        booleanType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test073245() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        noResolvedType0.getTypesUnderInequality(templateType0);
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test073246() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        noResolvedType0.getTypesUnderInequality(templateType0);
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test073247() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        noResolvedType0.getTypesUnderInequality(templateType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test074248() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test074249() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(noResolvedType0);
        boolean boolean0 = jSType_TypePair0.typeA.differsFrom(jSType_TypePair0.typeB);
    }

    @Test(timeout = 4000)
    public void test075250() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.collapseUnion();
        booleanType0.testForEqualityHelper(jSType0, unionType0);
        jSType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test075251() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.collapseUnion();
        booleanType0.testForEqualityHelper(jSType0, unionType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test075252() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.collapseUnion();
        booleanType0.testForEqualityHelper(jSType0, unionType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test075253() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.collapseUnion();
        booleanType0.testForEqualityHelper(jSType0, unionType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test075254() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.collapseUnion();
        booleanType0.testForEqualityHelper(jSType0, unionType0);
        unionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test075255() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        JSType jSType0 = unionType0.collapseUnion();
        booleanType0.testForEqualityHelper(jSType0, unionType0);
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test076256() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        JSType jSType0 = errorFunctionType0.getReturnType();
        jSType0.testForEquality(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test076257() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        JSType jSType0 = errorFunctionType0.getReturnType();
        jSType0.testForEquality(errorFunctionType0);
        errorFunctionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test077258() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.testForEquality(voidType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test078259() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.getTypesUnderInequality(noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test079260() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        booleanType0.getTypesUnderEquality(noObjectType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test079261() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        booleanType0.getTypesUnderEquality(noObjectType0);
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test080262() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.getTypesUnderInequality(voidType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test081263() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
        errorFunctionType0.testForEquality(objectType0);
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test081264() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
        ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
        errorFunctionType0.testForEquality(objectType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test082265() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
        booleanType0.getTypesUnderEquality(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test083266() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        voidType0.testForEquality(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test083267() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        voidType0.testForEquality(jSType0);
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test083268() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        voidType0.testForEquality(jSType0);
        voidType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test083269() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        voidType0.testForEquality(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test083270() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        voidType0.testForEquality(jSType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test083271() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        voidType0.testForEquality(jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test084272() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test084273() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(functionType0);
    }

    @Test(timeout = 4000)
    public void test085274() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test085275() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(noType0);
    }

    @Test(timeout = 4000)
    public void test086276() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        noResolvedType0.getLeastSupertype(booleanType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test087277() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
        noResolvedType0.getLeastSupertype(jSType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test088278() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) voidType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test089279() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.canTestForShallowEqualityWith(voidType0);
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test089280() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.canTestForShallowEqualityWith(voidType0);
    }

    @Test(timeout = 4000)
    public void test089281() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.canTestForShallowEqualityWith(voidType0);
        voidType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test089282() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.canTestForShallowEqualityWith(voidType0);
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test089283() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.canTestForShallowEqualityWith(voidType0);
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test089284() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.canTestForShallowEqualityWith(voidType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test090285() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.UnionType");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test090286() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.UnionType");
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "Not declared as a type name");
        boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test091287() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "W4916m<QC*");
        JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test091288() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "W4916m<QC*");
        JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
        errorFunctionType0.testForEquality(jSType0);
        errorFunctionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test092289() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
        JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) enumElementType0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(jSType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test092290() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
        JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) enumElementType0);
        boolean boolean0 = booleanType0.canTestForShallowEqualityWith(jSType0);
    }

    @Test(timeout = 4000)
    public void test093291() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(booleanType0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test093292() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
        boolean boolean0 = recordType0.canTestForShallowEqualityWith(booleanType0);
    }

    @Test(timeout = 4000)
    public void test094293() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(booleanType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test094294() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(booleanType0);
    }

    @Test(timeout = 4000)
    public void test095295() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = JSType.filterNoResolvedType(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test095296() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = JSType.filterNoResolvedType(noResolvedType0);
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test095297() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = JSType.filterNoResolvedType(noResolvedType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test096298() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        voidType0.getRestrictedTypeGivenToBooleanOutcome(true);
    }

    @Test(timeout = 4000)
    public void test097299() throws Throwable {
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        JSType jSType0 = voidType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test098300() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        booleanType0.getTypesUnderEquality(jSType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test098301() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        booleanType0.getTypesUnderEquality(jSType0);
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test098302() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        booleanType0.getTypesUnderEquality(jSType0);
        booleanType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test098303() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        booleanType0.getTypesUnderEquality(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test098304() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        booleanType0.getTypesUnderEquality(jSType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test098305() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
        booleanType0.getTypesUnderEquality(jSType0);
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test099306() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
        JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) objectType0);
        voidType0.getTypesUnderEquality(jSType0);
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test100307() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNullableType(noResolvedType0);
        noResolvedType0.getTypesUnderInequality(jSType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test101308() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getTypesUnderInequality(voidType0);
        booleanType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test101309() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getTypesUnderInequality(voidType0);
        booleanType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test101310() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getTypesUnderInequality(voidType0);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test101311() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        booleanType0.getTypesUnderInequality(voidType0);
        booleanType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test102312() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Qh", 0, 1);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderShallowInequality(nullType0);
        unionType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test102313() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Qh", 0, 1);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderShallowInequality(nullType0);
        unionType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test102314() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Qh", 0, 1);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderShallowInequality(nullType0);
        unionType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test102315() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Qh", 0, 1);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderShallowInequality(nullType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test102316() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Qh", 0, 1);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderShallowInequality(nullType0);
        unionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test102317() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Qh", 0, 1);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderShallowInequality(nullType0);
        unionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test102318() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Qh");
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Qh", 0, 1);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
        UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
        unionType0.getTypesUnderShallowInequality(nullType0);
        unionType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test103319() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(booleanType0);
        voidType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test103320() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(booleanType0);
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test103321() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(booleanType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test103322() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(booleanType0);
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test103323() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(booleanType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test104324() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.differsFrom(voidType0);
        voidType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test104325() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.differsFrom(voidType0);
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test104326() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.differsFrom(voidType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test104327() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.differsFrom(voidType0);
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test104328() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.differsFrom(voidType0);
    }

    @Test(timeout = 4000)
    public void test104329() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.differsFrom(voidType0);
        voidType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test105330() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = noResolvedType0.differsFrom(unknownType0);
        unknownType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test105331() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = noResolvedType0.differsFrom(unknownType0);
        unknownType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test105332() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = noResolvedType0.differsFrom(unknownType0);
        unknownType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test105333() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = noResolvedType0.differsFrom(unknownType0);
        unknownType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test105334() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = noResolvedType0.differsFrom(unknownType0);
    }

    @Test(timeout = 4000)
    public void test105335() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = noResolvedType0.differsFrom(unknownType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test106336() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
        boolean boolean0 = jSType0.differsFrom(voidType0);
        voidType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test106337() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
        boolean boolean0 = jSType0.differsFrom(voidType0);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test106338() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
        boolean boolean0 = jSType0.differsFrom(voidType0);
        voidType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test106339() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
        boolean boolean0 = jSType0.differsFrom(voidType0);
        jSType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test106340() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
        boolean boolean0 = jSType0.differsFrom(voidType0);
    }

    @Test(timeout = 4000)
    public void test106341() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
        boolean boolean0 = jSType0.differsFrom(voidType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test107342() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
    }

    @Test(timeout = 4000)
    public void test107343() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
        instanceObjectType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test107344() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
        instanceObjectType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test107345() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
        instanceObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test107346() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
        instanceObjectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test107347() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
        instanceObjectType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test108348() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
    }

    @Test(timeout = 4000)
    public void test108349() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
        voidType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test108350() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test108351() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
        allType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test108352() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
        allType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test108353() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
        allType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test109354() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.UnionType");
        errorFunctionType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test110355() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, (JSType) null);
        JSType jSType0 = JSType.safeResolve((JSType) null, simpleErrorReporter0, proxyObjectType0);
    }
}
