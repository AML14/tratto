/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 03:15:08 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckPropertyOrder;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ConstCheck;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PrepareAst;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SemanticReverseAbstractInterpreter;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeCheck_ESTest extends TypeCheck_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("");
        Node node1 = new Node(35, node0, node0, node0, node0, 3, 40);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(15);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.DefaultPassConfig$58");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(8, node0, node0, node0, node0, 34, 44);
        typeCheck0.processForTesting(node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.DefaultPassConfig$58");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(8, node0, node0, node0, node0, 34, 44);
        typeCheck0.processForTesting(node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("isExtensible");
        CodingConvention codingConvention0 = compiler0.getCodingConvention();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(7, node0, node0, node0, node0, 19, 31);
        typeCheck0.processForTesting(node0, node0);
        typeCheck0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("Yh8hV");
        Node node1 = new Node(16, node0, node0, node0, node0, (-103), 17);
        Scope scope0 = typeCheck0.processForTesting((Node) null, node0);
        scope0.getVarCount();
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("isExtensible");
        CodingConvention codingConvention0 = compiler0.getCodingConvention();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(7, node0, node0, node0, node0, 19, 31);
        typeCheck0.processForTesting(node0, node0);
        typeCheck0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test0067() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("isExtensible");
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, defaultCodingConvention0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, typedScopeCreator0, checkLevel0, checkLevel0);
        typeCheck0.processForTesting((Node) null, node0);
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = Node.newString("L>0");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        Scope scope0 = new Scope(node0, compiler0);
        defaultPassConfig0.topScope = scope0;
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.processForTesting(node0, node0);
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
        Node node0 = new Node(115, 115, 101);
        typeCheck0.processForTesting(node0, node0);
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = Node.newNumber((double) 86, 86, 86);
        Node node1 = new Node(86, node0);
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.visit((NodeTraversal) null, node1, node0);
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]x!dKp1C.");
        Node node1 = new Node(105, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.shouldTraverse(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(118, 1504, 118);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        node0.getSideEffectFlags();
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("dgZ}V/8&v4");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.setJSDocInfo(jSDocInfo0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test01415() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("");
        Node node1 = new Node(105, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        boolean boolean0 = typeCheck0.shouldTraverse(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test01516() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = Node.newString("// Input %num%", (-1083), (-1083));
        Node node1 = new Node(4, node0, node0, node0, node0, 19, 37);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test01617() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node((-2160), (-81), (-81));
        Node node1 = new Node(5, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node((-2160), (-81), (-81));
        Node node1 = new Node(5, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test01719() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]K!dKpWB.");
        Node node1 = new Node(6, node0, node0, node0, node0, 12, 47);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test01720() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]K!dKpWB.");
        Node node1 = new Node(6, node0, node0, node0, node0, 12, 47);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test01821() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;V-m]x!d-pJC.");
        Node node1 = new Node(7);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test01822() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;V-m]x!d-pJC.");
        Node node1 = new Node(7);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test01923() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(8, 8, 131);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test01924() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(8, 8, 131);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test02025() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("is|xtenfible");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(2, node0, node0, node0, node0, 4, 21);
        typeCheck0.processForTesting(node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test02026() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("is|xtenfible");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node1 = new Node(2, node0, node0, node0, node0, 4, 21);
        typeCheck0.processForTesting(node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test02127() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;V-m]x!d-p?C.");
        Node node1 = new Node(10, node0, node0, node0, node0, 16, 30);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02128() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;V-m]x!d-p?C.");
        Node node1 = new Node(10, node0, node0, node0, node0, 16, 30);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test02129() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;V-m]x!d-p?C.");
        Node node1 = new Node(10, node0, node0, node0, node0, 16, 30);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test02230() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("JSC_BAD_TYPE_FOR_BIT_OPERATION");
        Node node1 = new Node(11, node0, node0, node0, node0, 1, 47);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02231() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("JSC_BAD_TYPE_FOR_BIT_OPERATION");
        Node node1 = new Node(11, node0, node0, node0, node0, 1, 47);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test02232() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("JSC_BAD_TYPE_FOR_BIT_OPERATION");
        Node node1 = new Node(11, node0, node0, node0, node0, 1, 47);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test02333() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
        Node node1 = new Node(12, node0, node0, 28, 2);
        typeCheck0.visit((NodeTraversal) null, node1, node1);
    }

    @Test(timeout = 4000)
    public void test02434() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("e=");
        Node node1 = new Node(13, node0, 47, 2);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        node0.equals((Object) node1);
    }

    @Test(timeout = 4000)
    public void test02535() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("");
        Node node1 = new Node(14, node0, node0, node0, node0, 19, 13);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test02636() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("initializing variable");
        Node node1 = new Node(16, node0, node0, node0, node0, 48, 2);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test02737() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("l<D:}q9k");
        Node node1 = new Node(17, node0, node0, node0, node0, 4095, 47);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test02838() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";<j766]x!dKp1C");
        Node node1 = new Node(18, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test02839() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";<j766]x!dKp1C");
        Node node1 = new Node(18, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02940() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("ikitializn* variable");
        Node node1 = new Node(19, node0, node0, node0, node0, 4, 42);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02941() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("ikitializn* variable");
        Node node1 = new Node(19, node0, node0, node0, node0, 4, 42);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test03042() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("initalizing variable");
        Node node1 = new Node(20, node0);
        typeCheck0.visit((NodeTraversal) null, node1, node1);
    }

    @Test(timeout = 4000)
    public void test03143() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("SKxUNihd)if)DS/Jw");
        Node node1 = new Node(21, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        nodeTraversal0.getLineNumber();
    }

    @Test(timeout = 4000)
    public void test03244() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]x!dKp1C.");
        Node node1 = new Node(22, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test03345() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";<j766]x!dKp1C");
        Node node1 = new Node(23, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test03446() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("e=");
        Node node1 = new Node(24, node0, node0, node0, node0, 1, 2);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test03547() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(27, 27, 27);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = new Node(25, node0, node0, node0, 17, 4095);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test03548() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(27, 27, 27);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = new Node(25, node0, node0, node0, 17, 4095);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test03649() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(3103);
        Node node1 = new Node(26, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test03750() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("initalizing variabe");
        Node node1 = new Node(27, node0, node0, node0, node0, 42, 38);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test03851() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(28);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test03952() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("*(;;V-m]x!d-p?C.");
        Node node1 = new Node(29, node0, node0, node0, node0, 12, 43);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test04053() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("G;;-m]xudKp?C.");
        Node node1 = new Node(31, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test04154() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = Node.newString("");
        Node node1 = new Node(32, node0, node0, node0, node0, 35, 3);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test04255() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("");
        Node node1 = new Node(34, node0, node0, node0, node0, 2600, 46);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test04256() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("");
        Node node1 = new Node(34, node0, node0, node0, node0, 2600, 46);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test04357() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(132);
        Node node1 = new Node(36, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test04458() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("P");
        Node node1 = new Node(37, node0, node0, node0, node0, 22, 47);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test04559() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = Node.newNumber((double) 130, 130, 130);
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.visit((NodeTraversal) null, node0, node0);
    }

    @Test(timeout = 4000)
    public void test04660() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(76);
        Node node1 = new Node(41, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test04761() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
        Node node0 = compiler0.parseSyntheticCode("AzbYH/r,6vX^pvy", "AzbYH/r,6vX^pvy");
        Node node1 = new Node(42, node0, node0, 28, 2);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test04862() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]x!dKp1C.");
        Node node1 = new Node(43, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test04963() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = Node.newString(";;]-m]x!dKp1C.");
        Node node1 = new Node(44, node0, node0, node0, node0, 22, 43);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test05064() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("SKxUNihd)iDS/Jw");
        Node node1 = new Node(45, node0, node0, 31, 12);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test05165() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = Node.newString("// Input %num%", (-1083), (-1083));
        Node node1 = new Node(46, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test05266() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("dgZ}V/8&v4");
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node1 = new Node(47);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test05367() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(114, 114, 114);
        Node node1 = new Node(48);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test05468() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("iMzF9n?<l]");
        Node node1 = new Node(49, node0, node0, 6, (-3));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test05569() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(50);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05570() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(50);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test05671() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = Node.newString("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", 1, (-1083));
        Node node1 = new Node(51, node0, node0, node0, node0, 44, 3);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test05772() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(52, 52, 52);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05873() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(53);
        compiler0.parseTestCode("");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05874() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(53);
        compiler0.parseTestCode("");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test05975() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(54, 54, 54);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05976() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(54, 54, 54);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06077() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
        Node node0 = Node.newString("AzbYH/r,'vX^&@vy");
        Node node1 = new Node(55, node0, node0, node0, 4, 8);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test06178() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(101, 101, 101);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = new Node(56, node0, node0, node0, node0, 10, 15);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06179() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(101, 101, 101);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node1 = new Node(56, node0, node0, node0, node0, 10, 15);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06280() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(57);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06281() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(57);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06382() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(58);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06383() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(58);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06484() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(59, 59, (-4229));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test06585() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(60);
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.visit((NodeTraversal) null, node0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test06686() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(61, 61, 61);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06687() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(61, 61, 61);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test06788() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("");
        Node node1 = new Node(62, node0, node0, node0, node0, 1, 3775);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06789() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("");
        Node node1 = new Node(62, node0, node0, node0, node0, 1, 3775);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06890() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
        Node node0 = compiler0.parseSyntheticCode("AzbYH/r,'vX^&vy", "AzbYH/r,'vX^&vy");
        Node node1 = new Node(63, node0, node0, node0, 131, 8);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test06991() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(64, 64, 64);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test07092() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
        Node node0 = compiler0.parseSyntheticCode("AzbYH/r,6vX^pvy", "AzbYH/r,6vX^pvy");
        Node node1 = Node.newString(65, "msg.not.ctor", 794, 44);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test07193() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(66);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07194() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(66);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test07295() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(68, 32, (-1302));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test07396() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
        Node node0 = new Node(69, 90, 1540);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test07497() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
        Node node0 = new Node(70);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test07598() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(71);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07599() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(71);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test076100() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(72, 72, 72);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test076101() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(72, 72, 72);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test077102() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(73);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test077103() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(73);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test078104() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(74);
        Node node1 = compiler0.parseTestCode("");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test078105() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(74);
        Node node1 = compiler0.parseTestCode("");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test079106() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(75, 75, 75);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test079107() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(75, 75, 75);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test080108() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(76);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test080109() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(76);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test081110() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(77);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test082111() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(78, 1504, 64);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test082112() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(78, 1504, 64);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test083113() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
        Node node0 = new Node(79, 76, 11);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test084114() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(80, (-242), (-242));
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test084115() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(80, (-242), (-242));
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test085116() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(81);
        compiler0.parseTestCode("");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test085117() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(81);
        compiler0.parseTestCode("");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test086118() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(82, (-1826), 82);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test087119() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(105);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
        Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test088120() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(84);
        compiler0.parseTestCode("1(?/,,sN+k>>g");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test088121() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(84);
        compiler0.parseTestCode("1(?/,,sN+k>>g");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test089122() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("initalizing variable");
        Node node1 = new Node(85, node0, node0, node0, node0, 2, 143);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test090123() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("qvPww)g|l`X<)");
        Node node1 = new Node(87, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test090124() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("qvPww)g|l`X<)");
        Node node1 = new Node(87, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test091125() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]x!dK8Ap1C.");
        Node node1 = new Node(88, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test092126() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]x!dKp1C.");
        Node node1 = new Node(90, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test093127() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("qvPww)g|l`X<)");
        Node node1 = new Node(91, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test094128() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("l<D:}q9k");
        Node node1 = new Node(92, node0, node0, 48, (-3351));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test095129() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("l<D:}q9k");
        Node node1 = new Node(93, node0, node0, 48, (-3351));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test096130() throws Throwable {
        Compiler compiler0 = new Compiler();
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        CheckPropertyOrder checkPropertyOrder0 = new CheckPropertyOrder(compiler0, checkLevel0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkPropertyOrder0, syntacticScopeCreator0);
        Node node0 = compiler0.parseSyntheticCode("AzbYH/r,6vX^pvy", "AzbYH/r,6vX^pvy");
        Node node1 = new Node(94, node0, node0, node0, 5497, 123);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test097131() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("qvPww)g|l`X<)");
        Node node1 = new Node(95, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test098132() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(96, 96, 96);
        StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test099133() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]x!dKp1C.");
        Node node1 = new Node(97, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test099134() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]x!dKp1C.");
        Node node1 = new Node(97, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test100135() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(98, 98, 98);
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        ConstCheck constCheck0 = new ConstCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, constCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test101136() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]x!dKp1C.");
        Node node1 = new Node(99, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test101137() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]x!dKp1C.");
        Node node1 = new Node(99, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test102138() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(100);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test103139() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(101, 101, 101);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test104140() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(102, 102, 102);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test105141() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(103, 103, 103);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test106142() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(104);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test106143() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(104);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test107144() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]x!dKp?C.");
        Node node1 = new Node(105, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test108145() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(106, 1393, (-4229));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test109146() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(107);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test109147() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(107);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test110148() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(108, 108, 39);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test111149() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(109, "-soU+XaFv`CG]%", 109, 992);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test111150() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        Node node0 = Node.newString(109, "-soU+XaFv`CG]%", 109, 992);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test112151() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(110);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test113152() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("|t]/iV?+I7LVHE");
        Node node1 = new Node(111, node0, node0, node0, node0, 50, 3);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test114153() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);
        Node node0 = new Node(112, 112, 112);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test115154() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(113);
        compiler0.parseTestCode("1(?/,,sN+k>>g");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test116155() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(114, 114, 114);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test117156() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
        Node node0 = new Node(115, 115, 101);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test118157() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(116, 116, 228);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test119158() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(117);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test120159() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(1667);
        Node node1 = new Node(119, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test121160() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(120);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test122161() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(121);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test122162() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(121);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test123163() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
        Node node0 = new Node(122, 122, (-1979));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test124164() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(123);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test124165() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(123);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test125166() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(124);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test126167() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
        Node node0 = new Node(126, (-1), 126);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test127168() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(128);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test127169() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(128);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test128170() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
        Node node0 = new Node(129, 138, 90);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test129171() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("<j766x!dp1C");
        Node node1 = new Node(131, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test129172() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("<j766x!dp1C");
        Node node1 = new Node(131, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test130173() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(133, 133, 133);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test131174() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;V-m]x!0-p?C.");
        Node node1 = new Node(134, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test131175() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;V-m]x!0-p?C.");
        Node node1 = new Node(134, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test132176() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(135);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test132177() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(135);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test133178() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(136);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test133179() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(136);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test134180() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(137);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test134181() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(137);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test135182() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
        Node node0 = new Node(138, 149, 149);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test136183() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(139);
        compiler0.parseTestCode("");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test136184() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(139);
        compiler0.parseTestCode("");
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test137185() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(140);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test137186() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(140);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test138187() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]x!dKp1C.");
        Node node1 = new Node(141, node0, node0, node0, node0, 16, 9);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test138188() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]x!dKp1C.");
        Node node1 = new Node(141, node0, node0, node0, node0, 16, 9);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test139189() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(142, 1177, 1177);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test139190() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(142, 1177, 1177);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test140191() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(143);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test141192() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(144, 2158, 90);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test142193() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
        Node node0 = compiler0.parseSyntheticCode("AzbYH/r,6vX^pvy", "(FSSI!#Hg2/ m7#0wb~");
        Node node1 = new Node(145, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test143194() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(146);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test144195() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("initializing variable");
        Node node1 = new Node(148, node0, node0, node0, node0, (-1249), 30);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test145196() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(149);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test145197() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(149);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test146198() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(150);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test146199() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(150);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test147200() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(151);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test148201() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(152);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test149202() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(153);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test150203() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = Node.newString("L>0");
        Node node1 = new Node(1, (-1896), 15);
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test150204() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = Node.newString("L>0");
        Node node1 = new Node(1, (-1896), 15);
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test151205() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = new Node(83);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test152206() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("initalizing variabe");
        Node node1 = new Node(27, node0, node0, node0, node0, 42, 38);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
        node0.setJSType(functionType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test152207() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = compiler0.parseTestCode("initalizing variabe");
        Node node1 = new Node(27, node0, node0, node0, node0, 42, 38);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
        node0.setJSType(functionType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test153208() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = Node.newString("l<D:}q9k");
        Node node1 = new Node(17, node0, node0, node0, node0, 4095, 47);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test154209() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = new Node(64, 64, 64);
        node0.addChildrenToFront(node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test155210() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(67, 67, 67);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        TypeCheck typeCheck1 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
        typeCheck1.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test155211() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(67, 67, 67);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        TypeCheck typeCheck1 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
        typeCheck1.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test156212() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;]-m]x!dKp1C.");
        Node node1 = new Node(105, node0, node0, node0, node0, 0, 45);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);
    }

    @Test(timeout = 4000)
    public void test157213() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        Node node0 = new Node(120, 120, 120);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test158214() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = compiler0.options;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
        boolean boolean0 = typeCheck0.visitName((NodeTraversal) null, node0, node0);
    }

    @Test(timeout = 4000)
    public void test159215() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(132);
        Node node1 = new Node(118, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test160216() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = Node.newString("", 33, 33);
        Node node1 = new Node(33, node0, node0, node0, node0, 113, 14);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node0, node1);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test161217() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        Node node0 = Node.newString("", 33, 33);
        Node node1 = new Node(33, node0, node0, node0, node0, 115, 14);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node0);
        DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
        TypeCheck typeCheck1 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        typeCheck1.visit(nodeTraversal0, node1, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test162218() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
        Node node0 = new Node(114, 114, 114);
        Node node1 = new Node(118, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test163219() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString("P");
        Node node1 = new Node(37, node0, node0, node0, node0, 22, 47);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        typeCheck0.visit(nodeTraversal0, node1, node1);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test164220() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
        Node node0 = Node.newString(";;V-m]x!d-p?C.");
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
        Node node2 = new Node(30, node1, node0, 33, 31);
        typeCheck0.visit((NodeTraversal) null, node2, node0);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test165221() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
        MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, memoizedScopeCreator0);
        Node node0 = compiler0.parseSyntheticCode("AzbYH/r,6vX^vy", "TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(89, node0);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
        typeCheck0.visit(nodeTraversal0, node1, (Node) null);
    }

    @Test(timeout = 4000)
    public void test166222() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(127);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        node0.addSuppression(".?P;w=z9OEg1'rrz");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test166223() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
        Node node0 = new Node(127);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        node0.addSuppression(".?P;w=z9OEg1'rrz");
        typeCheck0.visit(nodeTraversal0, node0, node0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test167224() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        PrepareAst.PrepareAnnotations prepareAst_PrepareAnnotations0 = new PrepareAst.PrepareAnnotations(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, prepareAst_PrepareAnnotations0, syntacticScopeCreator0);
        Node node0 = new Node(147, 147, 147);
        typeCheck0.visit(nodeTraversal0, node0, node0);
        double double0 = typeCheck0.getTypedPercent();
    }

    @Test(timeout = 4000)
    public void test168225() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);
        double double0 = typeCheck0.getTypedPercent();
    }
}
