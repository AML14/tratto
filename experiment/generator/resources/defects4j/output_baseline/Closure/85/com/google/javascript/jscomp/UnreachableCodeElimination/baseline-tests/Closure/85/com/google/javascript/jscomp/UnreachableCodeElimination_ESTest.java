/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 04:11:44 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.UnreachableCodeElimination;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class UnreachableCodeElimination_ESTest extends UnreachableCodeElimination_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("?d5D0v8e{B-SYmd", "?d5D0v8e{B-SYmd");
        Node node1 = new Node(114);
        node1.addChildToFront(node0);
        Node node2 = new Node(117);
        node0.addChildToFront(node2);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node2, node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("?d5D0v8e{B-SYmd", "?d5D0v8e{B-SYmd");
        Node node1 = new Node(114);
        node1.addChildToFront(node0);
        Node node2 = new Node(117);
        node0.addChildToFront(node2);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node2, node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Compiler compiler0 = new Compiler();
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        Node node0 = new Node(105, 938, 103);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0, (ScopeCreator) null);
        unreachableCodeElimination0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Compiler compiler0 = new Compiler();
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "G:P", "G:P");
        Node node1 = new Node(35, node0, node0, node0);
        unreachableCodeElimination0.process(node0, node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Compiler compiler0 = new Compiler();
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "G:P", "G:P");
        Node node1 = new Node(35, node0, node0, node0);
        unreachableCodeElimination0.process(node0, node1);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("KL'>V}f7fN9zwE.I}");
        Node node1 = new Node(4);
        node0.addChildToFront(node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        unreachableCodeElimination0.process(node0, node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("KL'>V}f7fN9zwE.I}");
        Node node1 = new Node(4);
        node0.addChildToFront(node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        unreachableCodeElimination0.process(node0, node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("?d5D0v8e{B-md", "?d5D0v8e{B-md");
        Node node1 = new Node(114);
        node1.addChildToFront(node0);
        Node node2 = new Node(116);
        node0.addChildToFront(node2);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node1, node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("?d5D0v8e{B-md", "?d5D0v8e{B-md");
        Node node1 = new Node(114);
        node1.addChildToFront(node0);
        Node node2 = new Node(116);
        node0.addChildToFront(node2);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node1, node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("3M");
        Node node1 = compiler0.parseSyntheticCode("3M", "3M");
        node0.addChildToFront(node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        Compiler compiler0 = new Compiler();
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "G:P", "G:P");
        unreachableCodeElimination0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(";I");
        Node node1 = new Node(4);
        Node node2 = Node.newString("Removing ");
        node1.addChildToFront(node2);
        node0.addChildToFront(node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node1, node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(";I");
        Node node1 = new Node(4);
        Node node2 = Node.newString("Removing ");
        node1.addChildToFront(node2);
        node0.addChildToFront(node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node1, node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(";I");
        Node node1 = new Node(4);
        node0.addChildToFront(node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node1, node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test0814() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(";I");
        Node node1 = new Node(4);
        node0.addChildToFront(node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node1, node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("<5D0ve{B-ZSYmd");
        Node node1 = compiler0.parseTestCode("<5D0ve{B-ZSYmd");
        node0.addChildToFront(node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        Node node2 = new Node(77, node0, node0);
        unreachableCodeElimination0.process(node1, node2);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test0916() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("<5D0ve{B-ZSYmd");
        Node node1 = compiler0.parseTestCode("<5D0ve{B-ZSYmd");
        node0.addChildToFront(node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, true);
        Node node2 = new Node(77, node0, node0);
        unreachableCodeElimination0.process(node1, node2);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test1017() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("pxnI{){K'II #m!WO");
        Node node1 = new Node(114);
        node1.addChildToFront(node0);
        Node node2 = new Node(23, node1, node1);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        unreachableCodeElimination0.process(node0, node2);
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("F#Ve\"Xe0", "F#Ve\"Xe0");
        Node node0 = new Node(120);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        Node node1 = new Node(44, node0, node0);
        unreachableCodeElimination0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1219() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("F#Ve\"Xe0");
        Node node1 = compiler0.parseTestCode("F#Ve\"Xe0");
        node1.addChildToFront(node0);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        Node node2 = new Node(1, node1, node1);
        unreachableCodeElimination0.process(node0, node2);
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test1220() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("F#Ve\"Xe0");
        Node node1 = compiler0.parseTestCode("F#Ve\"Xe0");
        node1.addChildToFront(node0);
        UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);
        Node node2 = new Node(1, node1, node1);
        unreachableCodeElimination0.process(node0, node2);
        node1.hasChildren();
    }
}
