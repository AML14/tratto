/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 22:57:07 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noObjectType0);
        functionType0.getLeastSupertype(noObjectType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getTypesUnderShallowEquality(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getTypesUnderShallowEquality(functionType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.hasEqualCallType((FunctionType) null);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "YcO{Qh!-zLrhA");
        boolean boolean0 = errorFunctionType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "prototype", (Node) null);
        boolean boolean0 = functionType0.isSubtype(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "prototype", (Node) null);
        boolean boolean0 = functionType0.isSubtype(functionType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "prototype", (Node) null);
        boolean boolean0 = functionType0.isSubtype(functionType0);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "prototype", (Node) null);
        boolean boolean0 = functionType0.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType1.getLeastSupertype(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0712() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType1.getLeastSupertype(functionType0);
        functionType0.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        Node node0 = Node.newString("Not declared as a constructor");
        errorFunctionType0.setSource(node0);
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        List<FunctionType> list0 = functionType0.getSubTypes();
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = Node.newString("Not declared as a type name");
        jSTypeRegistry0.createConstructorType("Not declared as a type name", node0, node0, (JSType) noType0);
    }

    @Test(timeout = 4000)
    public void test1116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = Node.newString(1, "Unknown class name");
        Node node1 = new Node(105, node0, node0, node0);
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType("this:", node1, node1, (JSType) noType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newNumber((double) 1, 1, 0);
        FunctionType.forInterface(jSTypeRegistry0, "Named type with empty name component", node0);
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = new Node(105);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("w&FL{./j{hF", node0);
        functionType0.isNoType();
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType.forInterface(jSTypeRegistry0, (String) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionType((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
        functionType0.getTypesUnderShallowEquality(functionType1);
        functionType0.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionType((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
        functionType0.getTypesUnderShallowEquality(functionType1);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionType((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
        functionType0.getTypesUnderShallowEquality(functionType1);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = (FunctionType) jSTypeRegistry0.createFunctionType((ObjectType) functionType0, (JSType) functionType0, (List<JSType>) linkedList0);
        functionType0.getTypesUnderShallowEquality(functionType1);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        int int0 = errorFunctionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test1725() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        int int0 = noType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test1826() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[4];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[2], jSTypeArray0);
        int int0 = functionType0.getMinArguments();
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test1827() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[4];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[2], jSTypeArray0);
        int int0 = functionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test1928() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        int int0 = errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test2029() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, (List<JSType>) linkedList0);
        int int0 = functionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test2030() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, (List<JSType>) linkedList0);
        int int0 = functionType0.getMaxArguments();
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test2131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        int int0 = noType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test2232() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0, false);
        ObjectType objectType0 = instanceObjectType0.getImplicitPrototype();
        noType0.setPrototypeBasedOn(objectType0);
        noType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test2333() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.setPrototype((FunctionPrototypeType) null);
    }

    @Test(timeout = 4000)
    public void test2434() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("pvC}?+*iJZ", (Node) null);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test2435() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("pvC}?+*iJZ", (Node) null);
        boolean boolean0 = functionType0.hasUnknownSupertype();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test2436() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("pvC}?+*iJZ", (Node) null);
        boolean boolean0 = functionType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test2537() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0);
        noType0.setInstanceType(functionPrototypeType0);
        boolean boolean0 = noType0.setPrototype(functionPrototypeType0);
    }

    @Test(timeout = 4000)
    public void test2638() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, functionType0, functionType0);
        boolean boolean0 = functionType0.setPrototype(functionPrototypeType0);
    }

    @Test(timeout = 4000)
    public void test2639() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, functionType0, functionType0);
        boolean boolean0 = functionType0.setPrototype(functionPrototypeType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test2740() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.add((ObjectType) functionType0);
        functionType0.setImplementedInterfaces(linkedList0);
        Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
    }

    @Test(timeout = 4000)
    public void test2841() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.add((ObjectType) noObjectType0);
        noObjectType0.setImplementedInterfaces(linkedList0);
        noObjectType0.getAllImplementedInterfaces();
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2942() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getAllImplementedInterfaces();
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test3043() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        errorFunctionType0.setPrototype(functionPrototypeType0);
        JSType jSType0 = errorFunctionType0.getTopMostDefiningType("prototype");
        jSType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test3144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = functionType0.findPropertyType("Unknown class name");
    }

    @Test(timeout = 4000)
    public void test3245() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3346() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.hasOwnDeclaredProperty("prototype");
    }

    @Test(timeout = 4000)
    public void test3447() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        errorFunctionType0.getPropertyType("prototype");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3548() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.getPropertyType("Unknown class name");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3649() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "apply");
        errorFunctionType0.getPropertyType("apply");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3750() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(functionType0);
        boolean boolean0 = functionType0.defineProperty("prototype", jSType0, true, true);
    }

    @Test(timeout = 4000)
    public void test3851() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[8];
        jSTypeArray0[7] = (JSType) booleanType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) booleanType0, jSTypeArray0);
        boolean boolean0 = functionType0.isPropertyTypeInferred("prototype");
    }

    @Test(timeout = 4000)
    public void test3852() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[8];
        jSTypeArray0[7] = (JSType) booleanType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) booleanType0, jSTypeArray0);
        boolean boolean0 = functionType0.isPropertyTypeInferred("prototype");
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test3953() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = functionType0.isPropertyTypeInferred("com.google.javascript.rhino.jstype.FunctionType");
    }

    @Test(timeout = 4000)
    public void test4054() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.defineProperty("com.google.javascript.rhino.jstype.FunctionType", (JSType) null, true, true);
        boolean boolean0 = functionType0.isPropertyTypeInferred("com.google.javascript.rhino.jstype.FunctionType");
    }

    @Test(timeout = 4000)
    public void test4155() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        functionType0.getLeastSupertype(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        functionType0.getLeastSupertype(errorFunctionType0);
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test4157() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        functionType0.getLeastSupertype(errorFunctionType0);
        errorFunctionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test4158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        functionType0.getLeastSupertype(errorFunctionType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test4259() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType0.getLeastSupertype(functionType1);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4260() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType0.getLeastSupertype(functionType1);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test4261() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType0.getLeastSupertype(functionType1);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test4262() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType0.getLeastSupertype(functionType1);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test4363() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        functionType1.getLeastSupertype(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4364() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        functionType1.getLeastSupertype(functionType0);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test4465() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4566() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.getGreatestSubtype(functionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4667() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        errorFunctionType0.getLeastSupertype(functionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4668() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        errorFunctionType0.getLeastSupertype(functionType0);
        errorFunctionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test4769() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        functionType0.getLeastSupertype(errorFunctionType0);
        errorFunctionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test4770() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        functionType0.getLeastSupertype(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4871() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = errorFunctionType0.getGreatestSubtype(functionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4872() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = errorFunctionType0.getGreatestSubtype(functionType0);
        jSType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test4873() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = errorFunctionType0.getGreatestSubtype(functionType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test4974() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getSuperClassConstructor();
    }

    @Test(timeout = 4000)
    public void test5075() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.setPrototypeBasedOn((ObjectType) null);
        boolean boolean0 = noType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test5176() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test5277() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test5378() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, unknownType0);
        boolean boolean0 = noType0.setPrototype(functionPrototypeType0);
        boolean boolean1 = noType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test5480() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("pvC}?+*iJZ", (Node) null);
        functionType0.getTopMostDefiningType("pvC}?+*iJZ");
    }

    @Test(timeout = 4000)
    public void test5581() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getTopMostDefiningType("");
    }

    @Test(timeout = 4000)
    public void test5682() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
        boolean boolean0 = functionType0.isSubtype(noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5683() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
        boolean boolean0 = functionType0.isSubtype(noType0);
    }

    @Test(timeout = 4000)
    public void test5784() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("me", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test5785() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("me", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
    }

    @Test(timeout = 4000)
    public void test5786() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("me", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test5787() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("me", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test5888() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createInterfaceType("Unknown class name", (Node) null);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType0.equals((Object) functionType1);
    }

    @Test(timeout = 4000)
    public void test5889() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createInterfaceType("Unknown class name", (Node) null);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test5890() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createInterfaceType("Unknown class name", (Node) null);
        boolean boolean0 = functionType0.isSubtype(functionType1);
    }

    @Test(timeout = 4000)
    public void test5991() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ".T)>9>dLK3:]ww\"d,d|", (Node) null);
        JSType jSType0 = jSTypeRegistry0.createNullableType(functionType0);
        jSType0.isUnionType();
    }

    @Test(timeout = 4000)
    public void test6092() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) linkedList0);
        String string0 = functionType0.toString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6093() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) linkedList0);
        String string0 = functionType0.toString();
    }

    @Test(timeout = 4000)
    public void test6194() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toString();
    }

    @Test(timeout = 4000)
    public void test6295() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        errorFunctionType0.toString();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6396() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.toString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6497() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[2];
        jSTypeArray0[0] = (JSType) booleanType0;
        jSTypeArray0[1] = (JSType) booleanType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) booleanType0, jSTypeArray0);
        functionType0.toString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6598() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType1.isSubtype(functionType0);
        functionType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test6599() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType1.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test65100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) stringType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType1.isSubtype(functionType0);
        functionType1.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test66101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
    }

    @Test(timeout = 4000)
    public void test66102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        boolean boolean0 = functionType0.isSubtype(functionType1);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test67103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test67104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test68105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, unknownType0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionPrototypeType0, errorFunctionType0);
        JSType.TypePair jSType_TypePair0 = indexedType0.getTypesUnderInequality(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test69106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        boolean boolean0 = errorFunctionType0.isString();
    }

    @Test(timeout = 4000)
    public void test70107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getInstanceType();
    }

    @Test(timeout = 4000)
    public void test71108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Named type with empty name component", (Node) null);
        boolean boolean0 = functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test71109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Named type with empty name component", (Node) null);
        boolean boolean0 = functionType0.hasInstanceType();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test72110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = noType0.getPrototype();
        noType0.setImplicitPrototype(functionPrototypeType0);
    }

    @Test(timeout = 4000)
    public void test73111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSType jSType0 = stringType0.autoboxesTo();
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType("Not declared as a constructor", (Node) null, (Node) null, jSType0);
        jSTypeRegistry0.createNullableType(functionType0);
        boolean boolean0 = functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test74112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "/AQgq");
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "call", 32, 32);
        linkedList0.add((ObjectType) namedType0);
        errorFunctionType0.setImplementedInterfaces(linkedList0);
        EmptyScope emptyScope0 = new EmptyScope();
        errorFunctionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test75113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.add((ObjectType) functionType0);
        functionType0.setImplementedInterfaces(linkedList0);
        EmptyScope emptyScope0 = new EmptyScope();
        FunctionType functionType1 = (FunctionType) functionType0.forceResolve(simpleErrorReporter0, emptyScope0);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test76114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionType functionType0 = noType0.getSuperClassConstructor();
        EmptyScope emptyScope0 = new EmptyScope();
        functionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        noType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test77115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test78116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test79117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        errorFunctionType0.toDebugHashCodeString();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test80118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString("@n;.s?zP-ia6:6AcWr|");
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test81119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noObjectType0.toDebugHashCodeString();
        noObjectType0.hasCachedValues();
    }
}
