/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 07:20:39 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.VoidType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
        functionType0.getLeastSupertype(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
        functionType0.getLeastSupertype(functionType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.getLeastSupertype(noObjectType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "<9n>N'=L&E!o!D)");
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = errorFunctionType0.hasEqualCallType(noType0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isReturnTypeInferred();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        boolean boolean0 = objectType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = new Node(0);
        noType0.setSource(node0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NoType noType0 = new NoType(jSTypeRegistry0);
        List<FunctionType> list0 = noType0.getSubTypes();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString(105, "call", 983, 105);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType("_K=R-AkRE]", node0, (Node) null, (JSType) errorFunctionType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = Node.newString("Not declared as a constructor", 0, 0);
        jSTypeRegistry0.createConstructorType("Unknown class name", node0, node0, (JSType) noType0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, noType0);
        functionType1.getLeastSupertype(functionType0);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newString("com.google.common.base.CharMatcher$13");
        jSTypeRegistry0.createInterfaceType("com.google.common.base.CharMatcher$13", node0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newNumber((double) 1, 1, 1);
        Node node1 = new Node(105, node0, node0, node0, node0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Not declared as a type name", node1);
        functionType0.getAllImplementedInterfaces();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newNumber((double) 1, 1, 1);
        Node node1 = new Node(105, node0, node0, node0, node0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Not declared as a type name", node1);
        functionType0.getAllImplementedInterfaces();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType.forInterface(jSTypeRegistry0, (String) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "): ", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "): ", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "): ", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "): ", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "): ", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "): ", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1522() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        int int0 = errorFunctionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        int int0 = noType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "...[");
        JSType[] jSTypeArray0 = new JSType[2];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) errorFunctionType0, jSTypeArray0);
        int int0 = functionType0.getMinArguments();
    }

    @Test(timeout = 4000)
    public void test1725() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "...[");
        JSType[] jSTypeArray0 = new JSType[2];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) errorFunctionType0, jSTypeArray0);
        int int0 = functionType0.getMinArguments();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test1826() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        int int0 = functionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test1827() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        int int0 = functionType0.getMaxArguments();
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test1928() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test1929() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        int int0 = functionType1.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test1930() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        int int0 = functionType1.getMaxArguments();
        functionType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test2031() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        int int0 = errorFunctionType0.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test2132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("call");
        errorFunctionType0.setPrototypeBasedOn(functionType0);
    }

    @Test(timeout = 4000)
    public void test2233() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.setPrototype((FunctionPrototypeType) null);
    }

    @Test(timeout = 4000)
    public void test2334() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "P! +qvYu]f^uW[k", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("call");
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2335() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "P! +qvYu]f^uW[k", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("call");
        functionType1.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test2336() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "P! +qvYu]f^uW[k", (Node) null);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("call");
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2437() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0);
        noType0.setInstanceType(functionPrototypeType0);
        boolean boolean0 = noType0.setPrototype(functionPrototypeType0);
    }

    @Test(timeout = 4000)
    public void test2538() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) numberType0, (List<JSType>) linkedList0);
        functionType0.getPrototype();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test2639() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "sHRzw#ibyoXSbRZ` @");
        linkedList0.add((ObjectType) errorFunctionType0);
        errorFunctionType0.setImplementedInterfaces(linkedList0);
        errorFunctionType0.getAllImplementedInterfaces();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2740() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "N:/");
        ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.add(objectType0);
        errorFunctionType0.setImplementedInterfaces(linkedList0);
        errorFunctionType0.getAllImplementedInterfaces();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2841() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 0, (-2595));
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) namedType0, (List<JSType>) linkedList0);
        boolean boolean0 = functionType0.hasProperty("prototype");
    }

    @Test(timeout = 4000)
    public void test2842() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 0, (-2595));
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) namedType0, (List<JSType>) linkedList0);
        boolean boolean0 = functionType0.hasProperty("prototype");
        functionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test2943() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        boolean boolean0 = errorFunctionType0.hasProperty("call");
    }

    @Test(timeout = 4000)
    public void test3044() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.getPropertyType("call");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        boolean boolean0 = errorFunctionType0.hasOwnDeclaredProperty("prototype");
    }

    @Test(timeout = 4000)
    public void test3246() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
        errorFunctionType0.getPropertyType("prototype");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3347() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.getPropertyType("Not declared as a type name");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3448() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "apply");
        errorFunctionType0.getPropertyType("apply");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3549() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ">' KazK)9-");
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = errorFunctionType0.defineProperty("prototype", allType0, true, true);
    }

    @Test(timeout = 4000)
    public void test3650() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("prototype");
    }

    @Test(timeout = 4000)
    public void test3751() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("v8\"`Mxq6-1(Lx");
    }

    @Test(timeout = 4000)
    public void test3852() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.defineProperty("v8\"`Mxq6-1(Lx", objectType0, true, true);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("v8\"`Mxq6-1(Lx");
    }

    @Test(timeout = 4000)
    public void test3953() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("call");
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType1.equals((Object) functionType0);
    }

    @Test(timeout = 4000)
    public void test3954() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("call");
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType1.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test3955() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("call");
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3956() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("call");
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType1.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test3957() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = (FunctionType) functionType0.getPropertyType("call");
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType1.isConstructor();
    }

    @Test(timeout = 4000)
    public void test4058() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (List<JSType>) linkedList0);
        functionType0.getTypesUnderShallowEquality(objectType0);
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4059() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (List<JSType>) linkedList0);
        functionType0.getTypesUnderShallowEquality(objectType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (List<JSType>) linkedList0);
        functionType0.setInstanceType(objectType0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4261() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.getLeastSupertype(functionType0);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4362() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType0.getTypesUnderShallowEquality(functionType1);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4363() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType0.getTypesUnderShallowEquality(functionType1);
        noType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test4464() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noObjectType0, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType1.getLeastSupertype(functionType0);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4565() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
        functionType1.getGreatestSubtype(functionType0);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4666() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) linkedList0);
        JSType[] jSTypeArray0 = new JSType[2];
        jSTypeArray0[0] = (JSType) functionType0;
        jSTypeArray0[1] = (JSType) voidType0;
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) voidType0, jSTypeArray0);
        functionType1.getTypesUnderShallowEquality(functionType0);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4767() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.getTypesUnderShallowEquality(objectType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4868() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        errorFunctionType0.getLeastSupertype(objectType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4969() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        JSType.TypePair jSType_TypePair0 = objectType0.getTypesUnderShallowEquality(errorFunctionType0);
        objectType0.getLeastSupertype(jSType_TypePair0.typeA);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4970() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        JSType.TypePair jSType_TypePair0 = objectType0.getTypesUnderShallowEquality(errorFunctionType0);
        objectType0.getLeastSupertype(jSType_TypePair0.typeA);
        errorFunctionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test5071() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.getLeastSupertype(functionType0);
        errorFunctionType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test5072() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.getLeastSupertype(functionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5073() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.getLeastSupertype(functionType0);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test5174() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        NoObjectType noObjectType1 = new NoObjectType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noObjectType1, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, noObjectType0);
        functionType0.getTypesUnderShallowEquality(functionType1);
        noObjectType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5175() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        NoObjectType noObjectType1 = new NoObjectType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noObjectType1, jSTypeArray0);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, noObjectType0);
        functionType0.getTypesUnderShallowEquality(functionType1);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5276() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.getSuperClassConstructor();
    }

    @Test(timeout = 4000)
    public void test5377() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.setPrototypeBasedOn((ObjectType) null);
        boolean boolean0 = noType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test5478() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test5579() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "l)w3v\"xk,t;Lw_7l", (Node) null);
        functionType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test5580() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "l)w3v\"xk,t;Lw_7l", (Node) null);
        boolean boolean0 = functionType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test5581() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "l)w3v\"xk,t;Lw_7l", (Node) null);
        boolean boolean0 = functionType0.hasUnknownSupertype();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test5682() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 105, 0);
        noObjectType0.setPrototypeBasedOn(namedType0);
        boolean boolean0 = noObjectType0.hasUnknownSupertype();
    }

    @Test(timeout = 4000)
    public void test5783() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.getTopMostDefiningType("Not declared as a type name");
    }

    @Test(timeout = 4000)
    public void test5884() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "yyyFd4Z@F", (Node) null);
        functionType0.getTopMostDefiningType("yyyFd4Z@F");
    }

    @Test(timeout = 4000)
    public void test5985() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType("call");
        functionType0.getTopMostDefiningType("Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test6086() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        errorFunctionType0.toString();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6187() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toString();
    }

    @Test(timeout = 4000)
    public void test6288() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        functionType0.toString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6389() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
        String string0 = functionType0.toString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6390() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, (List<JSType>) linkedList0);
        String string0 = functionType0.toString();
    }

    @Test(timeout = 4000)
    public void test6491() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) numberType0, (List<JSType>) linkedList0);
        JSType[] jSTypeArray0 = new JSType[2];
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(functionType0, functionType0);
        jSTypeArray0[0] = (JSType) parameterizedType0;
        jSTypeArray0[1] = (JSType) functionType0;
        FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) numberType0, jSTypeArray0);
        functionType1.toString();
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6592() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "): ", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.setInstanceType(functionType0);
        FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType1, functionType1);
        functionType1.getTypesUnderShallowEquality(functionType2);
        functionType2.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6593() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "): ", (Node) null);
        FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) linkedList0);
        functionType1.setInstanceType(functionType0);
        FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType1, functionType1);
        functionType1.getTypesUnderShallowEquality(functionType2);
        functionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6694() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "apply");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = errorFunctionType1.isSubtype(errorFunctionType0);
        errorFunctionType1.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6695() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "apply");
        ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = errorFunctionType1.isSubtype(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test6796() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType jSType0 = errorFunctionType0.getPropertyType("call");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test6797() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "call");
        JSType jSType0 = errorFunctionType0.getPropertyType("call");
        boolean boolean0 = jSType0.isSubtype(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test6898() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Unknown class name", (Node) null);
        functionType0.hasInstanceType();
    }

    @Test(timeout = 4000)
    public void test6899() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Unknown class name", (Node) null);
        functionType0.getInstanceType();
        functionType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test69100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        Node node0 = new Node(0, 1, 1);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noType0, node0);
        functionType0.getInstanceType();
    }

    @Test(timeout = 4000)
    public void test70101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noObjectType0, noObjectType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test71102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0);
        noType0.setPrototype(functionPrototypeType0);
        noType0.setImplicitPrototype(functionPrototypeType0);
    }

    @Test(timeout = 4000)
    public void test72103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.differsFrom(noType0);
        noType0.setImplicitPrototype(noType0);
    }

    @Test(timeout = 4000)
    public void test73104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        EmptyScope emptyScope0 = new EmptyScope();
        FunctionType functionType1 = (FunctionType) functionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        functionType1.getMaxArguments();
    }

    @Test(timeout = 4000)
    public void test74105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "F,Fbcf C@|=5x40", "F,Fbcf C@|=5x40", (-652), (-1624873763));
        linkedList0.add((ObjectType) namedType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "finally");
        errorFunctionType0.setImplementedInterfaces(linkedList0);
        EmptyScope emptyScope0 = new EmptyScope();
        errorFunctionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test75106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
        linkedList0.add((ObjectType) noType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        errorFunctionType0.setImplementedInterfaces(linkedList0);
        errorFunctionType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test76107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        String string0 = objectType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test77108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, jSTypeArray0);
        String string0 = functionType0.toDebugHashCodeString();
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test77109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, jSTypeArray0);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test78110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test78111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toDebugHashCodeString();
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test79112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.toDebugHashCodeString();
        errorFunctionType0.hasCachedValues();
    }
}
