/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 06:44:37 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.Tracer;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Normalize_ESTest extends Normalize_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = compiler0.parseSyntheticCode("com.googlecommn.base.Predicates$InPredicate", "com.googlecommn.base.Predicates$InPredicate");
        Node node1 = new Node(37, node0);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[1];
        JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        jSTypeArray0[0] = (JSType) objectType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) normalize_VerifyConstants0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Logger logger0 = Tracer.logger;
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        Node node0 = Node.newNumber(0.0, 39, 39);
        normalize_VerifyConstants0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("^(anonymus>::)*", "^(anonymus>::)*");
        Node node1 = new Node(38, node0);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        normalize_VerifyConstants0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        Node node0 = compiler0.parseTestCode("AITI");
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) normalize_VerifyConstants0);
        node0.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        Node node0 = compiler0.parseTestCode("ATI");
        nodeTraversal0.traverseInnerNode(node0, node0, (Scope) null);
        nodeTraversal0.traverseInnerNode(node0, node0, (Scope) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        Node node0 = compiler0.parseTestCode("I");
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) normalize_VerifyConstants0);
        node0.isVarArgs();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(126, "AFR");
        Node node1 = new Node(115, node0, node0);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(126, "i5");
        Node node1 = new Node(116, node0, node0);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(113, "C:`^req->R:MdF%SKX");
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("=rbX{5<F.&x~sU", "JM");
        Node node1 = new Node(105, node0, node0);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(126, "com.google.javascript.jscomp.RemoveConstantExpressions$1");
        Node node1 = new Node(113, node0, node0);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(118, "=");
        Node node1 = new Node(126, node0, node0);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(126, "`e>\"\"\"YV");
        Node node1 = new Node(119, node0, node0);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(126, "i[");
        Node node1 = new Node(120, node0, node0);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(126, "i5");
        Node node1 = new Node(122, node0, node0);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(126, "4JG/@x7bNj}[FmJG^u");
        Node node1 = new Node(124, node0, node0);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = new Node(126);
        node0.addChildToFront(node0);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = new Node(126);
        Node node1 = new Node(20, node0, node0, node0, node0);
        node0.addChildToFront(node1);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("=rbX{5<F&x~sU", "=rbX{5<F&x~sU");
        Node node1 = new Node(118, node0, node0);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("=rbX{5<F&x~sU", "=rbX{5<F&x~sU");
        Node node1 = new Node(118, node0, node0);
        node1.removeChildren();
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(":&2/eh^ ^+p%q", "com.google.javascript.jscomp.mozilla.rhino.ast.Block");
        Node node1 = compiler0.parseSyntheticCode(":&2/eh^ ^+p%q", "com.google.javascript.jscomp.mozilla.rhino.ast.Block");
        Node node2 = new Node(118, node0, node1);
        node0.addChildToBack(node2);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node2, node0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("=rbX{5<F.&x~sU", "=rbX{5<F.&x~sU");
        Node node1 = new Node(105, node0, node0);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node1, node0);
    }
}
