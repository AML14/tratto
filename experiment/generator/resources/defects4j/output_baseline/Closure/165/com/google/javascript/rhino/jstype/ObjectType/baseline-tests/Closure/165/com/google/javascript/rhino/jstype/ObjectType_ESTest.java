/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 23:37:12 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.Visitor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectType_ESTest extends ObjectType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 1, 1);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.defineProperty("", noResolvedType0, true, node0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 1, 1);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.defineProperty("", noResolvedType0, true, node0);
        instanceObjectType0.getPropertyNode("");
        instanceObjectType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 1, 1);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a type name", noResolvedType0, false, node0);
        ObjectType.Property objectType_Property1 = objectType_Property0.getSymbol();
        objectType_Property1.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 1, 1);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a type name", noResolvedType0, false, node0);
        ObjectType.Property objectType_Property1 = objectType_Property0.getSymbol();
        noResolvedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0);
        instanceObjectType0.getPropertyNode("Not declared as a constructor");
        noObjectType0.setSource((Node) null);
        noObjectType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = new Node(0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        instanceObjectType0.defineProperty("Not declared as a type name", noResolvedType0, true, node0);
        boolean boolean0 = instanceObjectType0.defineProperty("Not declared as a type name", noResolvedType0, true, node0);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = new Node(0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        instanceObjectType0.defineProperty("Not declared as a type name", noResolvedType0, true, node0);
        boolean boolean0 = instanceObjectType0.defineProperty("Not declared as a type name", noResolvedType0, true, node0);
        instanceObjectType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 1, 1);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a type name", noResolvedType0, true, node0);
        objectType_Property0.setNode(node0);
        objectType_Property0.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 1, 1);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a type name", noResolvedType0, true, node0);
        objectType_Property0.setNode(node0);
        noResolvedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "S4Qo");
        JSType jSType0 = errorFunctionType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
        jSType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Unknown class name", 1, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, noResolvedType0);
        enumType0.getPossibleToBooleanOutcomes();
        enumType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
        parameterizedType0.getIndexType();
        parameterizedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, noResolvedType0);
        boolean boolean0 = enumType0.defineElement("Named type with empty name component", node0);
        enumType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0813() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, noResolvedType0);
        boolean boolean0 = enumType0.defineElement("Named type with empty name component", node0);
    }

    @Test(timeout = 4000)
    public void test0914() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "R\"ZUYVU>+?} ");
        boolean boolean0 = templateType0.isNativeObjectType();
        templateType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test0915() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "R\"ZUYVU>+?} ");
        boolean boolean0 = templateType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        templateType0.setPropertyJSDocInfo("Unknown class name", jSDocInfo0);
        templateType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test1117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.isString();
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.isString();
        noObjectType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test1219() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getPropertyNames();
        noResolvedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test1320() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Not declared as a constructor", 0, 5);
        namedType0.getOwnerFunction();
        namedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        boolean boolean0 = templateType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1422() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        boolean boolean0 = templateType0.hasReferenceName();
        templateType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test1523() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        indexedType0.getRootNode();
        indexedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test1624() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        boolean boolean0 = templateType0.removeProperty("Not declared as a type name");
        templateType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test1625() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        boolean boolean0 = templateType0.removeProperty("Not declared as a type name");
    }

    @Test(timeout = 4000)
    public void test1726() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ")kx^$");
        templateType0.getOwnPropertyNames();
        templateType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test1827() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "R\"ZUYVU>+?} ");
        templateType0.getParameterType();
        templateType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test1928() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setJSDocInfo((JSDocInfo) null);
        noResolvedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test2029() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.clearCachedValues();
        noType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test2030() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.clearCachedValues();
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        templateType0.getCtorImplementedInterfaces();
        templateType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test2232() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
        unknownType0.getCtorExtendedInterfaces();
        unknownType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test2333() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "qY|g.T{Efmy Xyx%~");
        templateType0.getOwnPropertyJSDocInfo("qY|g.T{Efmy Xyx%~");
        templateType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test2434() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, true);
        instanceObjectType0.visit((Visitor<InstanceObjectType>) null);
    }

    @Test(timeout = 4000)
    public void test2535() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.ObjectType");
        boolean boolean0 = templateType0.isPropertyInExterns("com.google.javascript.rhino.jstype.ObjectType");
        templateType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test2536() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.ObjectType");
        boolean boolean0 = templateType0.isPropertyInExterns("com.google.javascript.rhino.jstype.ObjectType");
    }

    @Test(timeout = 4000)
    public void test2637() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.hasDisplayName();
        noResolvedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test2638() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test2739() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "U|fE<TG0W4E>");
        templateType0.getTypeOfThis();
        templateType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test2840() throws Throwable {
        String string0 = ObjectType.createDelegateSuffix("Z=.31,5wk");
    }

    @Test(timeout = 4000)
    public void test2941() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getParentScope();
        noResolvedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test3042() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, noResolvedType0);
        enumType0.getOwnSlot("Unknown class name");
        enumType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test3143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "R\"ZUYVU>+?} ");
        templateType0.getOwnSlot("R\"ZUYVU>+?} ");
        templateType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test3244() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        objectType0.getJSDocInfo();
        objectType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test3345() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, true);
        boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
    }

    @Test(timeout = 4000)
    public void test3346() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, true);
        boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
        instanceObjectType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test3447() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        Node node0 = new Node(47, 1, 1);
        noResolvedType0.setPrototype(instanceObjectType0, node0);
        boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
        instanceObjectType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test3448() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        Node node0 = new Node(47, 1, 1);
        noResolvedType0.setPrototype(instanceObjectType0, node0);
        boolean boolean0 = instanceObjectType0.detectImplicitPrototypeCycle();
    }

    @Test(timeout = 4000)
    public void test3549() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = new Node(1, 2541, 49);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "QA(p$g2ePQ1LAsPp6g", node0, noResolvedType0);
        String string0 = enumType0.getDisplayName();
    }

    @Test(timeout = 4000)
    public void test3550() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = new Node(1, 2541, 49);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "QA(p$g2ePQ1LAsPp6g", node0, noResolvedType0);
        String string0 = enumType0.getDisplayName();
        enumType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test3651() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, noResolvedType0);
        String string0 = enumType0.getDisplayName();
        enumType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test3652() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, noResolvedType0);
        String string0 = enumType0.getDisplayName();
    }

    @Test(timeout = 4000)
    public void test3753() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        Node node0 = new Node(1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, instanceObjectType0);
        enumType0.testForEquality(enumType0);
    }

    @Test(timeout = 4000)
    public void test3854() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderEquality(objectType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3955() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Not declared as a type name", 1, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Unknown class name", node0, noResolvedType0);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "Named type with empty name component", noResolvedType0);
        enumType0.getTypesUnderInequality(prototypeObjectType0);
        prototypeObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3956() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Not declared as a type name", 1, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Unknown class name", node0, noResolvedType0);
        PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "Named type with empty name component", noResolvedType0);
        enumType0.getTypesUnderInequality(prototypeObjectType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4057() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString(0, "Not declared as a constructor", 1, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, noResolvedType0);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        enumType0.setPropertyJSDocInfo("Unknown class name", jSDocInfo0);
        enumType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test4158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Not declared as a type name", 1, 1);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Unknown class name", node0, noResolvedType0);
        boolean boolean0 = noResolvedType0.defineInferredProperty("Not declared as a constructor", enumType0, node0);
    }

    @Test(timeout = 4000)
    public void test4259() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
        indexedType0.findPropertyType("Unknown class name");
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4360() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.findPropertyType("Not declared as a type name");
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test4461() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Unknown class name", noResolvedType0, false, node0);
        boolean boolean1 = instanceObjectType0.defineProperty("Unknown class name", noResolvedType0, false, node0);
    }

    @Test(timeout = 4000)
    public void test4563() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "/@H8<%");
        boolean boolean0 = templateType0.isImplicitPrototype(templateType0);
    }

    @Test(timeout = 4000)
    public void test4664() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        String string0 = functionType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test4765() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.differsFrom(allType0);
        boolean boolean0 = noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4866() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Unknown class name", noResolvedType0, false, node0);
    }

    @Test(timeout = 4000)
    public void test4867() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
        boolean boolean0 = instanceObjectType0.defineProperty("Unknown class name", noResolvedType0, false, node0);
        ObjectType.Property objectType_Property0 = instanceObjectType0.getSlot("Unknown class name");
        objectType_Property0.getSourceFile();
        objectType_Property0.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test4968() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "8hCR'XRLo`qw");
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, errorFunctionType0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, proxyObjectType0, errorFunctionType0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("8hCR'XRLo`qw", (Node) null, indexedType0);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("8hCR'XRLo`qw", enumType0, false, (Node) null);
        objectType_Property0.getSourceFile();
        objectType_Property0.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test5069() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 1, 1);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a type name", noResolvedType0, true, node0);
        ObjectType.Property objectType_Property1 = objectType_Property0.getDeclaration();
        objectType_Property1.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test5070() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newString("Named type with empty name component", 1, 1);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Not declared as a type name", noResolvedType0, true, node0);
        ObjectType.Property objectType_Property1 = objectType_Property0.getDeclaration();
    }

    @Test(timeout = 4000)
    public void test5171() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "8hCR'XRLo`qw");
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, errorFunctionType0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, proxyObjectType0, errorFunctionType0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("8hCR'XRLo`qw", (Node) null, indexedType0);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("8hCR'XRLo`qw", enumType0, false, (Node) null);
        ObjectType.Property objectType_Property1 = objectType_Property0.getDeclaration();
        objectType_Property0.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test5172() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "8hCR'XRLo`qw");
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, errorFunctionType0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, proxyObjectType0, errorFunctionType0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("8hCR'XRLo`qw", (Node) null, indexedType0);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("8hCR'XRLo`qw", enumType0, false, (Node) null);
        ObjectType.Property objectType_Property1 = objectType_Property0.getDeclaration();
    }

    @Test(timeout = 4000)
    public void test5273() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 1);
        ObjectType.Property objectType_Property0 = new ObjectType.Property("Named type with empty name component", noResolvedType0, false, node0);
        objectType_Property0.isFromExterns();
        objectType_Property0.isTypeInferred();
    }

    @Test(timeout = 4000)
    public void test5374() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType.Property objectType_Property0 = new ObjectType.Property((String) null, noResolvedType0, true, (Node) null);
        boolean boolean0 = objectType_Property0.isFromExterns();
    }

    @Test(timeout = 4000)
    public void test5375() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType.Property objectType_Property0 = new ObjectType.Property((String) null, noResolvedType0, true, (Node) null);
        boolean boolean0 = objectType_Property0.isFromExterns();
        objectType_Property0.isTypeInferred();
    }
}
