/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 05:05:31 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CoalesceVariableNames;
import com.google.javascript.jscomp.CodingConventionAnnotator;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DeadAssignmentsElimination;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.FindExportableNodes;
import com.google.javascript.jscomp.FoldConstants;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.MethodCheck;
import com.google.javascript.jscomp.MoveFunctionDeclarations;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.RemoveConstantExpressions;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FoldConstants_ESTest extends FoldConstants_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("~1^]xH:vR?zrGN");
        Node node1 = new Node(29);
        node1.addChildToFront(node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node1, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("~1^]xH:vR?zrGN");
        Node node1 = new Node(29);
        node1.addChildToFront(node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node1, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.process((Node) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.hasBreakOrContinue((Node) null);
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(661);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = new Node(32, node0, node0, node0, 967, 115);
        foldConstants0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((double) 661, 661, 661);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = new Node(32, node0, node0, node0, 24, 1);
        foldConstants0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
        Node node0 = Node.newString("rfo^0AJV+Bf0iZ5MVW", 2389, 2389);
        Node node1 = Node.newString(32, "rfo^0AJV+Bf0iZ5MVW");
        node1.addChildrenToBack(node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
        nodeTraversal0.traverse(node1);
    }

    @Test(timeout = 4000)
    public void test0067() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((double) 100, 100, 100);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = new Node(26, node0, node0, node0);
        foldConstants0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(89, 89, 89);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = new Node(27, node0, node0, node0, 33, 43);
        foldConstants0.visit(nodeTraversal0, node1, node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((double) 89, 89, 89);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = new Node(27, node0, node0, node0, 33, 43);
        foldConstants0.visit(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((double) 952, 952, 952);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = new Node(30, node0, node0, node0, 3, 16);
        foldConstants0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("JSC_INDEX_OUT_OF_BOUNDS_ERROR", "JSC_INDEX_OUT_OF_BOUNDS_ERROR");
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) foldConstants0);
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("JSCcINDEX_OUT_OFBO!NDS_ERR[", "Array index out of ounds: {0}");
        Node node1 = compiler0.parseSyntheticCode("J$R_", "J$R_");
        Node node2 = new Node(98, node0, node1, node1, 1, 29);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test01213() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("L5h?}~]/eN*3P}UO");
        Node node1 = Node.newNumber((double) 46, 1, 9);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node2 = new Node(114, node0, node1, node1);
        foldConstants0.visit((NodeTraversal) null, node2, node1);
    }

    @Test(timeout = 4000)
    public void test01314() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("4L1nL3wO ok,;%KU?tj");
        Node node1 = Node.newNumber((double) 33, 78, 27);
        Node node2 = new Node(113, node1, node1, node0, 31, 43);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
        foldConstants0.visit(nodeTraversal0, node2, node0);
        node2.getLineno();
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("4L1nL3wO ok,;%KU?tj");
        Node node1 = Node.newNumber((double) 33, 78, 27);
        Node node2 = new Node(113, node1, node1, node0, 31, 43);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
        foldConstants0.visit(nodeTraversal0, node2, node0);
        node2.getCharno();
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        Node node1 = Node.newString("y", 30, 9);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        Node node2 = compiler0.parseSyntheticCode("y", "y");
        Node node3 = new Node(115, node2, node1, node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node3, node1);
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("OBJECT_NUMBER_STRING_BOOLEAN", "OBJECT_NUMBER_STRING_BOOLEAN");
        Node node1 = compiler0.parseSyntheticCode("wgoo7.pro2ide", "OBJECT_NUMBER_STRING_BOOLEAN");
        Node node2 = new Node(101, node0, node1, node1, 9, 29);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("Object", "Object");
        Node node1 = compiler0.parseSyntheticCode("wgoo7.pro2ide", "Object");
        Node node2 = new Node(100, node0, node1, node1, 9, 29);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test01719() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("4L1nL3wO ok,%KU?tj");
        Node node1 = Node.newNumber(1631.3981567077049, 124, 4);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        Node node2 = new Node(9, node1, node0, node0, 1, 43);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node0);
        node2.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test01820() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        Node node1 = Node.newString("", 7, 29);
        Node node2 = new Node(11, node0, node1);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        foldConstants0.visit(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test01921() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        Node node1 = compiler0.parseSyntheticCode("=Z", "Y&g_I3OY");
        Node node2 = new Node(19, node0, node0, node1, 45, 23);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test02022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(63, 63, 63);
        Node node1 = Node.newString("com.google.protobuf.DescriptorProtos$FieldOptions");
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node2 = new Node(20, node0, node0, node1);
        foldConstants0.visit((NodeTraversal) null, node2, (Node) null);
    }

    @Test(timeout = 4000)
    public void test02123() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("4L1nL3wO ok,;%KU?tj");
        Node node1 = Node.newNumber((double) 33, 50, 27);
        Node node2 = new Node(33, node1, node1, node0, 31, 43);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test02224() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("ad LHS for assignent: ", "ad LHS for assignent: ");
        Node node1 = Node.newString("ad LHS for assignent: ", 38, 13);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node2 = new Node(37, node1, node1, node0, 11, (-3));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, (Node) null);
    }

    @Test(timeout = 4000)
    public void test02325() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("JSC_INVALID_GETELEM_INDEX_ERROR");
        Node node1 = Node.newNumber((double) 16, (-2), 15);
        Node node2 = new Node(86, node0, node0, node1, 47, 2);
        CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test02426() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("%{6p[j0 EB|;//V6`U", "%{6p[j0 EB|;//V6`U");
        Node node1 = compiler0.parseSyntheticCode("@_}R^g{|y*S#0", "@_}R^g{|y*S#0");
        Node node2 = new Node(14, node1, node0, node1, node0, 47, 8);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test02527() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("nXvAuOQrc\"CY\"1#(nX*");
        Node node1 = new Node(34, 11, 29);
        Node node2 = new Node(88, node0, node1, node1, 8, 0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node0);
        node2.isOptionalArg();
    }

    @Test(timeout = 4000)
    public void test02628() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = new Node(919);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("aliasExternals", "aliasExternals");
        Node node1 = compiler0.parse(jSSourceFile0);
        Node node2 = new Node(21, node0, node0, node1, 32, 8367);
        foldConstants0.visit(nodeTraversal0, node2, node0);
        node2.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test02729() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("$0", "*@U{7EAQl0\"mjQ");
        Node node1 = new Node((-1431), 0, 9);
        Node node2 = new Node(16, node0, node1, node1, 2, 21);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit((NodeTraversal) null, node2, node0);
    }

    @Test(timeout = 4000)
    public void test02830() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(63, 63, 63);
        Node node1 = Node.newString("com.google.protobuf.DescriptorProtos$FieldOptions");
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node2 = new Node(21, node1, node0, node0, 2, 0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test02931() throws Throwable {
        Compiler compiler0 = new Compiler();
        FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, (ScopeCreator) null);
        Node node0 = Node.newNumber((double) 43, 46, 6);
        Node node1 = Node.newNumber((double) 4);
        Node node2 = new Node(22, node0, node0, node1, 4095, 4095);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test03032() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(63, 63, 63);
        Node node1 = Node.newString("G|hF3j)QgrO");
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node2 = new Node(23, node0, node1);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test03133() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("YP<lKyt1]Px=");
        Node node1 = Node.newNumber((-1122.0114), 31, (-2145755970));
        Node node2 = new Node(14, node1, node0, node0, 32, (-1830));
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test03234() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("4L1nLn3wOok,;%KU?tj");
        Node node1 = Node.newNumber((double) 13, 43, 4);
        Node node2 = new Node(16, node0, node1);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test03335() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("JSC_INVALID_GETELEM_INDEX_ERROR");
        Node node1 = Node.newNumber((double) 16, (-2), 15);
        Node node2 = new Node(12, node0, node0, node1, 47, 2);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test03436() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("4L1nL3wO ok,;%KU?tj");
        Node node1 = Node.newNumber((double) 13, 43, 4);
        Node node2 = new Node(13, node1, node1, node0, 958, 114);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test03537() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(63, 63, 0);
        Node node1 = Node.newString("com.google.protobuf.DescriXtorProtos$FieldOptions");
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node2 = new Node(35, node1, node0, node0, 2, 0);
        CoalesceVariableNames coalesceVariableNames0 = new CoalesceVariableNames(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, coalesceVariableNames0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
        node0.equals((Object) node2);
    }

    @Test(timeout = 4000)
    public void test03638() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("B1],N", "B1],N");
        Node node1 = new Node(31, node0, node0, node0, 21, 9);
        node0.addChildrenToFront(node1);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node0, node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test03639() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("B1],N", "B1],N");
        Node node1 = new Node(31, node0, node0, node0, 21, 9);
        node0.addChildrenToFront(node1);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node0, node1);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test03740() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = compiler0.parseTestCode("JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS");
        foldConstants0.tryFoldBlock(nodeTraversal0, node0, node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test03741() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = compiler0.parseTestCode("JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS");
        foldConstants0.tryFoldBlock(nodeTraversal0, node0, node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test03842() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("A~^]a]", "+im}H+{=X{5<");
        foldConstants0.visit((NodeTraversal) null, node0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test03943() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("nX%?uOQrc\"CY\"1!(nX*", "nX%?uOQrc\"CY\"1!(nX*");
        Node node1 = new Node(132, node0, node0, node0, (-3584), 0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test04044() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        Node node1 = Node.newString("y", 30, 9);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        Node node2 = compiler0.parseSyntheticCode("y", "y");
        Node node3 = new Node(108, node2, node1, node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node3, node1);
    }

    @Test(timeout = 4000)
    public void test04145() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = Node.newNumber((double) 16, (-2), 15);
        Node node2 = new Node(108, node0, node0, node1, 47, 44);
        FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
        Compiler compiler0 = new Compiler();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test04246() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode((String) null, "Unexpected const change.\n  name: ");
        Node node1 = new Node(17, 7, 23);
        Node node2 = new Node(13, node0, node0, node1, (-3), 25);
        foldConstants0.tryFoldHookIf((NodeTraversal) null, node2, node0);
    }

    @Test(timeout = 4000)
    public void test04347() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("JSC_INVLID_GETELEM_IDEk_ERROR");
        Node node1 = Node.newNumber((double) 16, (-2), 15);
        Node node2 = new Node(98, node0, node0, node1, 47, 2);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test04448() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        Node node1 = Node.newString("4", 30, 23);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        Node node2 = compiler0.parseSyntheticCode("4", "4");
        Node node3 = new Node(112, node2, node1, node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryMinimizeIf(nodeTraversal0, node3, node0);
    }

    @Test(timeout = 4000)
    public void test04549() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("Bad LS for assignmen: ", "Bad LS for assignmen: ");
        Node node1 = Node.newString("Bad LS for assignmen: ", 38, 13);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node2 = new Node(26, node1, node0, 48, 21);
        foldConstants0.tryMinimizeIf((NodeTraversal) null, node2, node0);
    }

    @Test(timeout = 4000)
    public void test04650() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = new Node(4);
        Node node1 = new Node(38);
        node0.addChildToFront(node1);
        foldConstants0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test04751() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = new Node(4);
        node0.addChildToFront(node0);
        foldConstants0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test04852() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("Sez'1/_>]a");
        Node node0 = new Node(122, 122, 122);
        SyntheticAst syntheticAst0 = new SyntheticAst("Sez'1/_>]a");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node1 = syntheticAst0.getAstRoot(compiler0);
        node0.addChildrenToBack(node1);
        Node node2 = new Node(4, node0, node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit((NodeTraversal) null, node2, node1);
        node2.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test04953() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((-2.147483648E9));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05054() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("");
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05155() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("com.google.common.coll2c.Immutablet$ArrayImmutabliSet", 45, 82);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node1 = new Node(100);
        foldConstants0.tryFoldAndOr((NodeTraversal) null, node1, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05256() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("4L1nL3wO ok,;%KU?tj");
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        File file0 = MockFile.createTempFile("+8hb[9J(5_f#(~Rb>_J", "@Q|RhYK");
        SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
        JsAst jsAst0 = new JsAst(sourceFile_OnDisk0);
        Node node1 = jsAst0.getAstRoot(compiler0);
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node1, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05357() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("");
        Node node1 = new Node(108, node0, node0, node0, 47, 44);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, syntacticScopeCreator0);
        foldConstants0.tryFoldAndOr(nodeTraversal0, node1, node1, node0, node1);
    }

    @Test(timeout = 4000)
    public void test05458() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("4L1nL3wO ok,;%KU?tj");
        Node node1 = new Node(113, node0, node0, node0, 31, 43);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        File file0 = MockFile.createTempFile("+8hb[9J(5_f#(~Rb>_J", "@Q|RhYK");
        SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
        JsAst jsAst0 = new JsAst(sourceFile_OnDisk0);
        Node node2 = jsAst0.getAstRoot(compiler0);
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node2, node0, node1);
    }

    @Test(timeout = 4000)
    public void test05559() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        Node node1 = Node.newString("j", 30, 39);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        Node node2 = compiler0.parseSyntheticCode("j", "j");
        Node node3 = new Node(115, node2, node1, node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldAndOr(nodeTraversal0, node3, node3, node1, node3);
    }

    @Test(timeout = 4000)
    public void test05660() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        Node node0 = Node.newNumber((double) 834, 834, 834);
        foldConstants0.tryFoldLeftChildAdd(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05761() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((double) 661, 661, 661);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = new Node(21, node0);
        foldConstants0.tryFoldLeftChildAdd(nodeTraversal0, node0, node1, node0, node1);
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test05862() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[4];
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        jSTypeArray0[3] = (JSType) objectType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test05963() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("gAu_4\"", "gAu_4\"");
        Node node1 = Node.newString("gAu_4\"", 38, 13);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node1, node0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test06064() throws Throwable {
        Compiler compiler0 = new Compiler();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        Node node0 = Node.newString(40, "Y&g_I3OY", 40, 40);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test06165() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        Node node0 = Node.newNumber((double) 856, 856, 856);
        Node node1 = new Node(4, node0);
        foldConstants0.tryFoldArithmetic(nodeTraversal0, node1, node0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test06266() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        Node node0 = Node.newNumber((double) 856, 856, 856);
        Node node1 = new Node(21, node0);
        foldConstants0.tryFoldArithmetic(nodeTraversal0, node1, node0, node0, node1);
    }

    @Test(timeout = 4000)
    public void test06367() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        Node node0 = Node.newNumber((double) 856, 856, 856);
        Node node1 = new Node(24, node0);
        foldConstants0.tryFoldArithmetic(nodeTraversal0, node1, node0, node0, node1);
    }

    @Test(timeout = 4000)
    public void test06468() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((double) 100, 100, 100);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldArithmetic(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test06569() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("4L1nL3wO ok,%KU?tj");
        Node node1 = Node.newNumber(1631.3981567077049, 124, 4);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        Node node2 = Node.newNumber((-458.11));
        Node node3 = new Node(9, node1, node2, node2, 1, 43);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node3, node0);
    }

    @Test(timeout = 4000)
    public void test06670() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((-2.1474836492406154E9));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test06771() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber(4.294967296E9);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test06872() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((-2.147483648E9));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test06973() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) (-3568), (-3568), 70);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        Node node1 = Node.newNumber((-3392.08727231292));
        Node node2 = new Node(18, node1, node0, node0, 1936, 49);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06974() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) (-3568), (-3568), 70);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        Node node1 = Node.newNumber((-3392.08727231292));
        Node node2 = new Node(18, node1, node0, node0, 1936, 49);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07075() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((double) 100, 100, 100);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = new Node(27, node0, node0, node0, 33, 43);
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node1, node0);
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test07176() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((-2.147483648937212E9));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test07177() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((-2.147483648937212E9));
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07278() throws Throwable {
        Compiler compiler0 = new Compiler();
        MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber(2.147483647738228E9, 1, 31);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
        foldConstants0.tryFoldShift(nodeTraversal0, (Node) null, node0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07279() throws Throwable {
        Compiler compiler0 = new Compiler();
        MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber(2.147483647738228E9, 1, 31);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
        foldConstants0.tryFoldShift(nodeTraversal0, (Node) null, node0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test07380() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) (-3568), (-3568), 70);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        Node node1 = Node.newNumber((double) 2, 34, 2022);
        Node node2 = new Node(18, node0, node1, node1, 1936, 49);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test07481() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) 661, 661, 661);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test07482() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) 661, 661, 661);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07583() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) (-3568), (-3568), 70);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        Node node1 = Node.newNumber((double) 2, 34, 2022);
        Node node2 = Node.newNumber((-3392.08727231292));
        Node node3 = new Node(18, node2, node1, node1, 1936, 49);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node3, node0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test07584() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) (-3568), (-3568), 70);
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        Node node1 = Node.newNumber((double) 2, 34, 2022);
        Node node2 = Node.newNumber((-3392.08727231292));
        Node node3 = new Node(18, node2, node1, node1, 1936, 49);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.visit(nodeTraversal0, node3, node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test07685() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) 22, 19, (-4658));
        CompilerOptions compilerOptions0 = compiler0.options_;
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test07786() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("Sez'1M/_>]a");
        Node node0 = Node.newString(122, "Sez'1M/_>]a");
        SyntheticAst syntheticAst0 = new SyntheticAst("Sez'1M/_>]a");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node1 = syntheticAst0.getAstRoot(compiler0);
        node0.addChildrenToBack(node1);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldComparison((NodeTraversal) null, node1, node0, node0, node1);
        node1.hasChildren();
    }

    @Test(timeout = 4000)
    public void test07887() throws Throwable {
        Node node0 = Node.newString(122, "O3Sez'1M/_>]a");
        Compiler compiler0 = new Compiler();
        node0.addChildrenToBack(node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldComparison((NodeTraversal) null, node0, node0, node0, node0);
        node0.isNoSideEffectsCall();
    }

    @Test(timeout = 4000)
    public void test07988() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        Node node1 = new Node(38);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node0, node0);
    }

    @Test(timeout = 4000)
    public void test08089() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(41);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test08190() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node0 = Node.newString(42, "t]NA4'fAl[");
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test08291() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(63, 63, 0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node1 = new Node(43, node0, 5, 43);
        foldConstants0.tryFoldComparison((NodeTraversal) null, node0, node1, node1, node1);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test08392() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        Node node0 = Node.newNumber((double) 141, 141, 141);
        Node node1 = new Node(44, node0, node0, node0, 22, 24);
        foldConstants0.tryFoldComparison(nodeTraversal0, node1, node1, node1, node0);
    }

    @Test(timeout = 4000)
    public void test08493() throws Throwable {
        Node node0 = Node.newString(122, "O3Sez'1M/_>]a");
        Compiler compiler0 = new Compiler();
        node0.addChildrenToBack(node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node1 = Node.newString(34, "X*D*{:C3g@WJX6f306N", 1, (-1840));
        foldConstants0.tryFoldComparison((NodeTraversal) null, node0, node0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test08594() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("Sez'1M/_>]a");
        Node node0 = Node.newString(122, "Sez'1M/_>]a");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node1 = new Node(29, node0, node0, 22, 2);
        node0.addChildrenToBack(node1);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldComparison((NodeTraversal) null, node1, node0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test08695() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("0");
        Node node1 = new Node(44);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node1, node1, node0, node0);
    }

    @Test(timeout = 4000)
    public void test08796() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("B1]6,N");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test08897() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("4L1nL3wO ok,;%KU?tj");
        Node node1 = Node.newNumber((double) 13, 43, 4);
        Node node2 = new Node(13, node1, node1, node0, 958, 114);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node2);
        foldConstants0.visit(nodeTraversal0, node2, node0);
    }

    @Test(timeout = 4000)
    public void test08998() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("com.google.javascript.jscomp.CrossModuleMethodMotion$IdGenerator");
        Node node1 = Node.newNumber((-3388.865365999262), 115, (-1780));
        Node node2 = new Node(15, node0, node1, node1, 1109, 44);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        CodingConventionAnnotator codingConventionAnnotator0 = new CodingConventionAnnotator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, codingConventionAnnotator0, (ScopeCreator) null);
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node2);
        foldConstants0.visit(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test09099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) 661, 661, 661);
        Node node1 = new Node(16);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node1, node0, node0, node1);
    }

    @Test(timeout = 4000)
    public void test091100() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) 661, 661, 661);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test092101() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) 661, 661, 661);
        Node node1 = new Node(13);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node1, node0, node0, node1);
    }

    @Test(timeout = 4000)
    public void test093102() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.google.common.collect.ImmutableSet$ArrayImmutableSet", "com.google.common.collect.ImmutableSet$ArrayImmutableSet");
        Node node1 = Node.newNumber((double) 25, 26, 29);
        Node node2 = new Node(15, node0, node1, node1, 38, 44);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        RemoveConstantExpressions.RemoveConstantRValuesCallback removeConstantExpressions_RemoveConstantRValuesCallback0 = new RemoveConstantExpressions.RemoveConstantRValuesCallback();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, removeConstantExpressions_RemoveConstantRValuesCallback0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node2, node1, node1, node0);
    }

    @Test(timeout = 4000)
    public void test094103() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        Node node1 = Node.newString("Unknown class name", 4, 11);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        Node node2 = new Node(38);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node2, node1, node1);
    }

    @Test(timeout = 4000)
    public void test095104() throws Throwable {
        Compiler compiler0 = new Compiler();
        MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
        Node node0 = Node.newString(14, "IsExtension");
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node1 = new Node(33);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
        foldConstants0.tryFoldStringIndexOf(nodeTraversal0, node0, node1, node0, node1);
        node1.isNoSideEffectsCall();
    }

    @Test(timeout = 4000)
    public void test096105() throws Throwable {
        Compiler compiler0 = new Compiler();
        MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
        Node node0 = Node.newString("IsExtension", 14, 14);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node1 = new Node(33);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
        foldConstants0.tryFoldStringIndexOf(nodeTraversal0, node0, node1, node0, node1);
    }

    @Test(timeout = 4000)
    public void test097106() throws Throwable {
        Compiler compiler0 = new Compiler();
        MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
        Node node0 = Node.newString(14, "IsExtension");
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node1 = new Node(33);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
        foldConstants0.tryFoldStringJoin(nodeTraversal0, node1, node1, node0, node1);
    }

    @Test(timeout = 4000)
    public void test098107() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(63, 63, 0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldGetElem((NodeTraversal) null, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test099108() throws Throwable {
        Compiler compiler0 = new Compiler();
        DeadAssignmentsElimination deadAssignmentsElimination0 = new DeadAssignmentsElimination(compiler0);
        Node node0 = Node.newString("", (-2726), 22);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, deadAssignmentsElimination0);
        Node node1 = compiler0.parseSyntheticCode("cKQ:d';dH@*", "");
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldGetProp(nodeTraversal0, node1, node0, node1, node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test100109() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseTestCode("PK");
        foldConstants0.tryFoldRegularExpressionConstructor((NodeTraversal) null, node0, node0);
    }

    @Test(timeout = 4000)
    public void test101110() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("4L1nL3wO ok,;%KU?tj");
        Node node1 = Node.newNumber((double) 33, 78, 27);
        Node node2 = new Node(113, node1, node1, node0, 31, 43);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test102111() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newNumber((double) 704, 650, 650);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        Node node1 = compiler0.parseSyntheticCode("$0", "$0");
        Node node2 = Node.newString("$0");
        Node node3 = new Node(2, node0, node2, node1, 0, 20);
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node3, node2);
    }

    @Test(timeout = 4000)
    public void test103112() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[4];
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        jSTypeArray0[3] = (JSType) objectType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test104113() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = Node.newString("nXvAuOQrc\"CY\"1#(nX*");
        Node node1 = new Node(34, 11, 29);
        Node node2 = new Node(88, node0, node1, node1, 8, 0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node1);
    }

    @Test(timeout = 4000)
    public void test105114() throws Throwable {
        Compiler compiler0 = new Compiler();
        DeadAssignmentsElimination deadAssignmentsElimination0 = new DeadAssignmentsElimination(compiler0);
        Node node0 = Node.newString("", (-2726), 22);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, deadAssignmentsElimination0);
        Node node1 = compiler0.parseSyntheticCode("cKQ:d';dH@*", "");
        Node node2 = new Node(1431655764, node1, node0, node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test106115() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("Sez'1M/_>]a");
        Node node0 = Node.newString("Sez'1M/_>]a", 122, 122);
        Compiler compiler0 = new Compiler(mockPrintStream0);
        String string0 = "v\\u%*[Ze$Si\\";
        Node node1 = Node.newString(29, string0, 9, 29);
        Node node2 = new Node(30, node1, node1, node0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldRegularExpressionConstructor((NodeTraversal) null, node2, node0);
    }

    @Test(timeout = 4000)
    public void test107116() throws Throwable {
        String string0 = "\\u";
        boolean boolean0 = FoldConstants.containsUnicodeEscape(string0);
    }

    @Test(timeout = 4000)
    public void test108117() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("nX%?OQrc\"CY\"1!(nX*", "nX%?OQrc\"CY\"1!(nX*");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldWhile(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test109118() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("4L1nLuwO ok,;%KU?tj");
        Node node1 = compiler0.parseSyntheticCode("4L1nL3wO ok,;%KU?tj", "4L1nLuwO ok,;%KU?tj");
        Node node2 = new Node(113, node1, node1, node0, 31, 43);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.visit(nodeTraversal0, node2, node2);
    }

    @Test(timeout = 4000)
    public void test110119() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("OBJECT_NUMBER_STRING_BOOLEAN", "OBJECT_NUMBER_STRING_BOOLEAN");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryFoldFor(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test111120() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = new Node(63, 63, 63);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        foldConstants0.tryFoldDo((NodeTraversal) null, node0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test112121() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        MethodCheck methodCheck0 = new MethodCheck((AbstractCompiler) null, checkLevel0);
        NodeTraversal.Callback nodeTraversal_Callback0 = methodCheck0.getActingCallback();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
        Node node1 = new Node(114);
        FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
        foldConstants0.tryFoldDo(nodeTraversal0, node1, node0);
    }

    @Test(timeout = 4000)
    public void test113122() throws Throwable {
        Compiler compiler0 = new Compiler();
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node0 = compiler0.parseSyntheticCode("OBJECT_NUMBER_STRING_BOOLEAN", "OBJECT_NUMBER_STRING_BOOLEAN");
        Node node1 = new Node(100, node0, node0, node0, 9, 29);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test114123() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("");
        Node node1 = new Node(101, node0, node0, node0, 49, 42);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test114124() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("");
        Node node1 = new Node(101, node0, node0, node0, 49, 42);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
        TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
        foldConstants0.tryMinimizeCondition(nodeTraversal0, node1, node0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test115125() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("Bad LS for assignmen: ");
        Node node1 = Node.newString("Bad LS for assignmen: ", 38, 13);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node2 = new Node(26, node1, node0, 48, 21);
        foldConstants0.tryMinimizeIf((NodeTraversal) null, node2, node0);
    }

    @Test(timeout = 4000)
    public void test116126() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("Bad LS for assignmen: ", "Bad LS for assignmen: ");
        Node node1 = Node.newString("Bad LS for assignmen: ", 38, 13);
        FoldConstants foldConstants0 = new FoldConstants(compiler0);
        Node node2 = new Node(26, node1, node0, 48, 21);
        node0.addChildrenToBack(node2);
        foldConstants0.tryMinimizeIf((NodeTraversal) null, node2, node0);
    }
}
