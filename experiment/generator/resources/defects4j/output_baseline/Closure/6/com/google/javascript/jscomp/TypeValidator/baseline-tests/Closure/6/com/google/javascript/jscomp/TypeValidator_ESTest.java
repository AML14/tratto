/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 03 22:07:08 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckAccidentalSemicolon;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckRegExp;
import com.google.javascript.jscomp.ClosureRewriteClass;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.FindExportableNodes;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.InlineProperties;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.NameReferenceGraph;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.StrictWarningsGuard;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.rhino.head.ast.XmlRef");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0);
        typeValidator0.expectValidTypeofName(nodeTraversal0, node0, "com.google.javascript.rhino.head.ast.XmlRef");
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        VarCheck varCheck0 = new VarCheck(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
        typeValidator0.expectNumber(nodeTraversal0, node0, functionType0, "<uFh0B%Mqok 5Qm'4g");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("s4A[XTD");
        InlineProperties inlineProperties0 = new InlineProperties(compiler0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSType[] jSTypeArray0 = new JSType[0];
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeArray0);
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        DiagnosticType diagnosticType0 = StrictWarningsGuard.UNRAISABLE_WARNING;
        String[] stringArray0 = new String[0];
        JSError jSError0 = JSError.make("Unknown class name", node0, checkLevel0, diagnosticType0, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
        String string0 = typeValidator_TypeMismatch0.toString();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("[n]A.97h/d,n");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType0, "Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("#M!Td_9QdzpvwM;W[C");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        typeValidator0.expectObject((NodeTraversal) null, node0, jSType0, (String) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.rhino.head.ast.XmlRef");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
        TightenTypes tightenTypes0 = new TightenTypes(compiler0);
        JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, "M^dJr9 2rjR");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, "F~\"8!okd");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("(hH 20;-Q7>&-");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
        FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0);
        typeValidator0.expectAnyObject(nodeTraversal0, node0, enumType0, "|Jf*");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.rhino.head.ast.XmlRef");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0);
        typeValidator0.expectAnyObject(nodeTraversal0, node0, noType0, "Not declared as a constructor");
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        typeValidator0.expectAnyObject(nodeTraversal0, (Node) null, jSType0, "Q#");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        typeValidator0.expectString(nodeTraversal0, node0, jSType0, "Not declared as a type name");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
        typeValidator0.expectString(nodeTraversal0, node0, functionType0, "Not declared as a constructor");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
        typeValidator0.expectString(nodeTraversal0, node0, functionType0, "Not declared as a constructor");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        typeValidator0.expectNumber((NodeTraversal) null, node0, jSType0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        typeValidator0.expectBitwiseable((NodeTraversal) null, node0, jSType0, "Unknown class name");
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, functionType0, "{y7~Is4<)*NTI*");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, functionType0, "{y7~Is4<)*NTI*");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("(hH s0;Q7>&-");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
        CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.brokenClosureRequiresLevel);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0, (ScopeCreator) null);
        typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType1, "w!");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
        typeValidator0.expectStringOrNumber(nodeTraversal0, (Node) null, jSType0, "Not declared as a type name");
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A [XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        typeValidator0.expectStringOrNumber(nodeTraversal0, node0, objectType0, "Named type with empty name component");
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A [XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        typeValidator0.expectStringOrNumber(nodeTraversal0, node0, objectType0, "Named type with empty name component");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseAllType();
        typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, "~h._4LX.92H3-vo)4` ");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("ohH 2;Q7>&-");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined((NodeTraversal) null, node0, jSType0, "Named type with empty name component", jSType0);
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
        NameReferenceGraph nameReferenceGraph0 = new NameReferenceGraph(compiler0);
        NameReferenceGraph.Name nameReferenceGraph_Name0 = nameReferenceGraph0.WINDOW;
        JSType jSType0 = nameReferenceGraph_Name0.getType();
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, "|Tgv|~lM<z;x+Lk&ln", jSType0);
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("s4A[XTD", node0, jSType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, enumType0, "Not declared as a constructor", enumType0);
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
        JSType jSType2 = modificationVisitor0.caseBooleanType();
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType1, "Unknown class name", jSType2);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
        JSType jSType2 = modificationVisitor0.caseBooleanType();
        boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType1, "Unknown class name", jSType2);
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, (Node) null, jSType0, jSType0);
        jSType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("s4A[XTD", node0, jSType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType0, enumType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2630() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
        JSType jSType2 = modificationVisitor0.caseBooleanType();
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType1, jSType2);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test2731() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, jSType0, node0, "Unknown class name");
    }

    @Test(timeout = 4000)
    public void test2832() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("sA[XD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, jSType0, node0, "Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test2933() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.rhino.head.ast.XmlRef");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
        JSType[] jSTypeArray0 = new JSType[7];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, false, jSTypeArray0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, functionType0, node0, "Unknown class name");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2934() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.rhino.head.ast.XmlRef");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
        JSType[] jSTypeArray0 = new JSType[7];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, false, jSTypeArray0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, functionType0, node0, "Unknown class name");
    }

    @Test(timeout = 4000)
    public void test3035() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, enumType0, node0, "Named type with empty name component");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3036() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, enumType0, node0, "Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test3137() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("4\">e:P9G%oD*");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        EnumType enumType1 = jSTypeRegistry0.createEnumType("4\">e:P9G%oD*", node0, jSType0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType1, enumType0, node0, "");
    }

    @Test(timeout = 4000)
    public void test3138() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("4\">e:P9G%oD*");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        EnumType enumType1 = jSTypeRegistry0.createEnumType("4\">e:P9G%oD*", node0, jSType0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType1, enumType0, node0, "");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3239() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, jSType0, "Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test3340() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s`4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, jSType0, "Not declared as a constructor");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3341() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s`4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, jSType0, "Not declared as a constructor");
    }

    @Test(timeout = 4000)
    public void test3442() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, enumType0, "");
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3443() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, enumType0, "");
    }

    @Test(timeout = 4000)
    public void test3544() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("(hH 20;-Q7>&-");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        NullType nullType0 = (NullType) modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("5_0^ EnV;", node0, nullType0);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, noType0, "Not declared as a type name");
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3545() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("(hH 20;-Q7>&-");
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        NullType nullType0 = (NullType) modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("5_0^ EnV;", node0, nullType0);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, noType0, "Not declared as a type name");
    }

    @Test(timeout = 4000)
    public void test3646() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, jSType0, node0, 40);
        nodeTraversal0.getLineNumber();
    }

    @Test(timeout = 4000)
    public void test3747() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("ohH 2;Q7>&-");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        JSType jSType1 = modificationVisitor0.caseNoType();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, jSType1, node0, 1);
    }

    @Test(timeout = 4000)
    public void test3848() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        typeValidator0.expectCanOverride(nodeTraversal0, node0, jSType0, jSType0, "Z\"]|+*^8;", jSType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3949() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (Node) null);
        typeValidator0.expectCanOverride(nodeTraversal0, (Node) null, functionType0, jSType0, "variable {0} redefined with type {1}, original definition at {2}:{3} with type {4}", functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test3950() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (Node) null);
        typeValidator0.expectCanOverride(nodeTraversal0, (Node) null, functionType0, jSType0, "variable {0} redefined with type {1}, original definition at {2}:{3} with type {4}", functionType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test4051() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A [XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4052() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A [XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, typedScopeCreator0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test4153() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("ohH 2;Q7>&-");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        NoType noType0 = (NoType) modificationVisitor0.caseNoType();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, typedScopeCreator0);
        typeValidator0.expectSuperType(nodeTraversal0, node0, noType0, noType0);
    }

    @Test(timeout = 4000)
    public void test4254() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("#M!Td_9QdzpvwM;W[C");
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("unknown type: {0}", node0, jSType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, enumType0);
    }

    @Test(timeout = 4000)
    public void test4355() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4356() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_TYPE;
        ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test4457() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        typeValidator0.expectCanCast(nodeTraversal0, node0, enumType0, enumType0);
    }

    @Test(timeout = 4000)
    public void test4558() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        typeValidator0.expectCanCast(nodeTraversal0, node0, enumType0, jSType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test4659() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
        typeValidator0.expectCanCast(nodeTraversal0, node0, enumType0, objectType0);
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4660() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
        typeValidator0.expectCanCast(nodeTraversal0, node0, enumType0, objectType0);
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test4761() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.rhino.head.ast.XmlRef");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        InputId inputId0 = node0.getInputId();
        CompilerInput compilerInput0 = compiler0.getInput(inputId0);
        Scope.Var scope_Var0 = mock(Scope.Var.class, new ViolatedAssumptionAnswer());
        doReturn((Scope) null).when(scope_Var0).getScope();
        doReturn(jSType0).when(scope_Var0).getType();
        typeValidator0.expectUndeclaredVariable("Named type with empty name component", compilerInput0, node0, node0, scope_Var0, "Not declared as a constructor", jSType0);
    }

    @Test(timeout = 4000)
    public void test4862() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.rhino.head.ast.XmlRef");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        InputId inputId0 = node0.getInputId();
        CompilerInput compilerInput0 = compiler0.getInput(inputId0);
        Scope.Var scope_Var0 = mock(Scope.Var.class, new ViolatedAssumptionAnswer());
        doReturn((JSType) null).when(scope_Var0).getType();
        doReturn((String) null).when(scope_Var0).toString();
        GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
        JSType jSType0 = globalNamespace0.getTypeOfThis();
        Scope.Var scope_Var1 = typeValidator0.expectUndeclaredVariable("com.google.javascript.rhino.head.ast.XmlRef", compilerInput0, node0, node0, scope_Var0, "com.google.javascript.rhino.head.ast.XmlRef", jSType0);
        scope_Var1.getName();
    }

    @Test(timeout = 4000)
    public void test4963() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("ta}F&nIMbeOlqI:e,(");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        InputId inputId0 = node0.getInputId();
        CompilerInput compilerInput0 = compiler0.getInput(inputId0);
        Scope.Var scope_Var0 = mock(Scope.Var.class, new ViolatedAssumptionAnswer());
        doReturn(jSType0).when(scope_Var0).getType();
        doReturn((String) null).when(scope_Var0).toString();
        Scope.Var scope_Var1 = typeValidator0.expectUndeclaredVariable("Named type with empty name component", compilerInput0, node0, node0, scope_Var0, "com.google.common.collect.ImmutableSetMultimap$SortedKeyBuilderMultimap", (JSType) null);
        scope_Var1.getInputName();
    }

    @Test(timeout = 4000)
    public void test5064() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.rhino.head.ast.XmlRef");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
        JSType[] jSTypeArray0 = new JSType[7];
        jSTypeArray0[0] = jSType0;
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, false, jSTypeArray0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, jSType0, "g}anvg/coPorL5");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5065() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.rhino.head.ast.XmlRef");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
        JSType[] jSTypeArray0 = new JSType[7];
        jSTypeArray0[0] = jSType0;
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, false, jSTypeArray0);
        boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, jSType0, "g}anvg/coPorL5");
    }

    @Test(timeout = 4000)
    public void test5166() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.rhino.head.ast.XmlRef");
        TypeValidator typeValidator0 = new TypeValidator(compiler0);
        String string0 = typeValidator0.getReadableJSTypeName(node0, false);
    }

    @Test(timeout = 4000)
    public void test5267() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
        typeValidator0.setShouldReport(false);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (Node) null);
        JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, (Node) null, functionType0, jSType1, node0, "e1!r`,AKpl?T");
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5268() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
        NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
        typeValidator0.setShouldReport(false);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (Node) null);
        JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
        boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, (Node) null, functionType0, jSType1, node0, "e1!r`,AKpl?T");
    }

    @Test(timeout = 4000)
    public void test5369() throws Throwable {
        Compiler compiler0 = new Compiler();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, (JSError) null);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(compiler0);
    }

    @Test(timeout = 4000)
    public void test5470() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        String[] stringArray0 = new String[8];
        JSError jSError0 = JSError.make(node0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumElementType0, jSType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
    }

    @Test(timeout = 4000)
    public void test5571() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("(hH 20;-Q7>&-");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        String[] stringArray0 = new String[8];
        JSError jSError0 = JSError.make((String) null, 0, 1, compilerOptions0.checkUnreachableCode, syntacticScopeCreator0.VAR_MULTIPLY_DECLARED_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumElementType0, enumType0, jSError0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(enumType0, enumElementType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
    }

    @Test(timeout = 4000)
    public void test5672() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        String[] stringArray0 = new String[8];
        JSError jSError0 = JSError.make(node0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumElementType0, jSType0, jSError0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(enumElementType0, enumType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5673() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        String[] stringArray0 = new String[8];
        JSError jSError0 = JSError.make(node0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumElementType0, jSType0, jSError0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(enumElementType0, enumType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
    }

    @Test(timeout = 4000)
    public void test5774() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        String[] stringArray0 = new String[8];
        JSError jSError0 = JSError.make(node0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumElementType0, jSType0, jSError0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(enumElementType0, enumElementType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5775() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("s4A[XTD");
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        String[] stringArray0 = new String[8];
        JSError jSError0 = JSError.make(node0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumElementType0, jSType0, jSError0);
        TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(enumElementType0, enumElementType0, jSError0);
        boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
    }
}
