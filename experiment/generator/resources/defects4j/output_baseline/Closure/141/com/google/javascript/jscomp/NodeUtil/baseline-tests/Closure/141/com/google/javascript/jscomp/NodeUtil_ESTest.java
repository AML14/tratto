/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 06:50:26 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.rhino.FunctionNode;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 40, 40);
        boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
        functionNode0.getFunctionName();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 40, 40);
        boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
        functionNode0.getCharno();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 40, 40);
        boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 40, 40);
        boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0004() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 40, 40);
        boolean boolean0 = NodeUtil.isVarArgsFunction(functionNode0);
        functionNode0.getLineno();
    }

    @Test(timeout = 4000)
    public void test0015() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        NodeUtil.getPrototypePropertyName(node0);
    }

    @Test(timeout = 4000)
    public void test0026() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test0037() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.containsCall(node0);
    }

    @Test(timeout = 4000)
    public void test0038() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.containsCall(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0049() throws Throwable {
        NodeUtil.containsFunctionDeclaration((Node) null);
    }

    @Test(timeout = 4000)
    public void test00510() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.containsTypeInOuterScope(node0, 10);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test00511() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.containsTypeInOuterScope(node0, 10);
    }

    @Test(timeout = 4000)
    public void test00612() throws Throwable {
        Node node0 = new Node(106, 2546, 106);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test00713() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isNodeTypeReferenced(node0, 26);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test00714() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isNodeTypeReferenced(node0, 26);
    }

    @Test(timeout = 4000)
    public void test00815() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 7);
    }

    @Test(timeout = 4000)
    public void test00816() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 7);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test00917() throws Throwable {
        Node node0 = Node.newString(74, "kjG`uQN$");
        int int0 = NodeUtil.getNameReferenceCount(node0, "kjG`uQN$");
    }

    @Test(timeout = 4000)
    public void test01018() throws Throwable {
        NodeUtil.getFunctionBody((Node) null);
    }

    @Test(timeout = 4000)
    public void test01119() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.referencesThis(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test01120() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.referencesThis(node0);
    }

    @Test(timeout = 4000)
    public void test01221() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test01222() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
    }

    @Test(timeout = 4000)
    public void test01223() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test01324() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 90, 8292);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test01325() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 90, 8292);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test01326() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 90, 8292);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test01327() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("undefined", 90, 8292);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test01428() throws Throwable {
        Node node0 = Node.newNumber(0.0, (-1374), (-1374));
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test01529() throws Throwable {
        Node node0 = Node.newString(";&i@aFpy");
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test01630() throws Throwable {
        Node node0 = Node.newString(41, "$$constant");
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test01731() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test01832() throws Throwable {
        Node node0 = new Node(44);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test01933() throws Throwable {
        Node node0 = Node.newString("?85");
        Node node1 = new Node(47, node0, node0, node0, 1013, 9);
        boolean boolean0 = NodeUtil.getBooleanValue(node1);
    }

    @Test(timeout = 4000)
    public void test02034() throws Throwable {
        Node node0 = new Node(63, 63, 63);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02135() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02236() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test02237() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02338() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02439() throws Throwable {
        Node node0 = Node.newString("");
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02540() throws Throwable {
        Node node0 = Node.newNumber(2281.19352130022);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02641() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 65279, 99);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test02642() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 65279, 99);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02643() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("NaN", 65279, 99);
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test02744() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Infinity", 26, (-3866));
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02745() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Infinity", 26, (-3866));
        boolean boolean0 = NodeUtil.getBooleanValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test02846() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("UNKNOWN_TYPE", 126, 126);
        NodeUtil.getBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02947() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("<5Lec>rRW sIYTLuKR`", (-4024), (-4024));
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03048() throws Throwable {
        Node node0 = new Node(44);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03149() throws Throwable {
        Node node0 = Node.newNumber((double) 43);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03250() throws Throwable {
        Node node0 = Node.newString("iatH");
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03351() throws Throwable {
        Node node0 = new Node(15);
        Node node1 = new Node(41, node0);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test03452() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03553() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03654() throws Throwable {
        Node node0 = new Node(108, 121, 125);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03755() throws Throwable {
        Node node0 = Node.newNumber(1312.17994775, 97, 97);
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test03856() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("REGEXP_TYPE", 65500, 65500);
        Node node1 = new Node(1, node0, node0, node0, node0);
        NodeUtil.getFunctionName(node1, node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test03957() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro9Mtotype", 115, 115);
        String string0 = NodeUtil.getFunctionName(node0, node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test03958() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro9Mtotype", 115, 115);
        String string0 = NodeUtil.getFunctionName(node0, node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03959() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro9Mtotype", 115, 115);
        String string0 = NodeUtil.getFunctionName(node0, node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test03960() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro9Mtotype", 115, 115);
        String string0 = NodeUtil.getFunctionName(node0, node0);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test03961() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".pro9Mtotype", 115, 115);
        String string0 = NodeUtil.getFunctionName(node0, node0);
    }

    @Test(timeout = 4000)
    public void test04062() throws Throwable {
        Node node0 = Node.newNumber((-751.64));
        Node node1 = NodeUtil.newVarNode("CwCrk$?)C&kUh&", node0);
        String string0 = NodeUtil.getFunctionName(node1, node0);
    }

    @Test(timeout = 4000)
    public void test04064() throws Throwable {
        Node node0 = Node.newNumber((-751.64));
        Node node1 = NodeUtil.newVarNode("CwCrk$?)C&kUh&", node0);
        String string0 = NodeUtil.getFunctionName(node1, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test04065() throws Throwable {
        Node node0 = Node.newNumber((-751.64));
        Node node1 = NodeUtil.newVarNode("CwCrk$?)C&kUh&", node0);
        String string0 = NodeUtil.getFunctionName(node1, node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test04166() throws Throwable {
        Node node0 = new Node(29);
        NodeUtil.isImmutableValue(node0);
    }

    @Test(timeout = 4000)
    public void test04267() throws Throwable {
        Node node0 = new Node(93, 93, 93);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("th8", linkedList0, node0, 2, 1);
        node0.addChildrenToFront(functionNode0);
        functionNode0.getCharno();
    }

    @Test(timeout = 4000)
    public void test04268() throws Throwable {
        Node node0 = new Node(93, 93, 93);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("th8", linkedList0, node0, 2, 1);
        node0.addChildrenToFront(functionNode0);
        functionNode0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04269() throws Throwable {
        Node node0 = new Node(93, 93, 93);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("th8", linkedList0, node0, 2, 1);
        node0.addChildrenToFront(functionNode0);
        functionNode0.getFunctionName();
    }

    @Test(timeout = 4000)
    public void test04270() throws Throwable {
        Node node0 = new Node(93, 93, 93);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("th8", linkedList0, node0, 2, 1);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test04371() throws Throwable {
        Node node0 = Node.newString("stig", (-60), (-1912371727));
        Node node1 = NodeUtil.newName("NaN", node0, "O`J");
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
    }

    @Test(timeout = 4000)
    public void test04372() throws Throwable {
        Node node0 = Node.newString("stig", (-60), (-1912371727));
        Node node1 = NodeUtil.newName("NaN", node0, "O`J");
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test04473() throws Throwable {
        Node node0 = Node.newString("-");
        Node node1 = new Node(96, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test04574() throws Throwable {
        Node node0 = new Node(41, 41, 41);
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
    }

    @Test(timeout = 4000)
    public void test04675() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
    }

    @Test(timeout = 4000)
    public void test04776() throws Throwable {
        Node node0 = new Node(111, 111, 111);
        Node node1 = new Node(44, node0, node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
    }

    @Test(timeout = 4000)
    public void test04877() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isImmutableValue(node0);
    }

    @Test(timeout = 4000)
    public void test04978() throws Throwable {
        Node node0 = new Node(665);
        Node node1 = NodeUtil.newName("undefined", node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
    }

    @Test(timeout = 4000)
    public void test04979() throws Throwable {
        Node node0 = new Node(665);
        Node node1 = NodeUtil.newName("undefined", node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        node1.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test05080() throws Throwable {
        Node node0 = Node.newString(115, "5Z~p\"!~", 115, 115);
        Node node1 = NodeUtil.newName("Infinity", node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
    }

    @Test(timeout = 4000)
    public void test05081() throws Throwable {
        Node node0 = Node.newString(115, "5Z~p\"!~", 115, 115);
        Node node1 = NodeUtil.newName("Infinity", node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test05082() throws Throwable {
        Node node0 = Node.newString(115, "5Z~p\"!~", 115, 115);
        Node node1 = NodeUtil.newName("Infinity", node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test05183() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("-", 96, 96);
        Node node1 = new Node(96, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test05184() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("-", 96, 96);
        Node node1 = new Node(96, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test05185() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("-", 96, 96);
        Node node1 = new Node(96, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test05186() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("-", 96, 96);
        Node node1 = new Node(96, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test05287() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
    }

    @Test(timeout = 4000)
    public void test05388() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 25, 25);
        node0.addChildrenToFront(functionNode0);
        functionNode0.getFunctionName();
    }

    @Test(timeout = 4000)
    public void test05389() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 25, 25);
        node0.addChildrenToFront(functionNode0);
        functionNode0.getLineno();
    }

    @Test(timeout = 4000)
    public void test05390() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 25, 25);
        node0.addChildrenToFront(functionNode0);
        functionNode0.getCharno();
    }

    @Test(timeout = 4000)
    public void test05391() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 25, 25);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isLiteralValue(node0);
    }

    @Test(timeout = 4000)
    public void test05492() throws Throwable {
        Node node0 = Node.newNumber((double) 63);
        Node node1 = new Node(63, node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1);
    }

    @Test(timeout = 4000)
    public void test05593() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = new Node(9, 111, 49);
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test05694() throws Throwable {
        Node node0 = new Node(37);
        Locale locale0 = Locale.JAPANESE;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    }

    @Test(timeout = 4000)
    public void test05795() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = new Node(10, 10, 10);
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test05896() throws Throwable {
        Node node0 = new Node(11);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test05997() throws Throwable {
        Node node0 = new Node(12, 12, 12);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test06098() throws Throwable {
        Node node0 = new Node(13);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test06199() throws Throwable {
        Node node0 = new Node(14);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test062100() throws Throwable {
        Node node0 = new Node(15);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test063101() throws Throwable {
        Node node0 = new Node(16);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test064102() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = new Node(17);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test065103() throws Throwable {
        Node node0 = new Node(18, 1923, 18);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test066104() throws Throwable {
        Node node0 = new Node(19);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test067105() throws Throwable {
        Node node0 = new Node(20);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test068106() throws Throwable {
        Node node0 = new Node(21, 21, 21);
        Charset charset0 = Charset.defaultCharset();
        Set<String> set0 = charset0.aliases();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    }

    @Test(timeout = 4000)
    public void test069107() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = new Node(22, 22, 22);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test070108() throws Throwable {
        Node node0 = new Node(23);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test071109() throws Throwable {
        Node node0 = new Node(72);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node1 = new Node(24, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test072110() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = new Node(25, 25, 25);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test073111() throws Throwable {
        Node node0 = new Node(26);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test074112() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = new Node(27, 108, 27);
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test075113() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = new Node(28);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test076114() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test077115() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test078116() throws Throwable {
        Node node0 = new Node(31);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test079117() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test080118() throws Throwable {
        Node node0 = new Node(34);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test081119() throws Throwable {
        Node node0 = new Node(35);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test082120() throws Throwable {
        Node node0 = new Node(36, 36, 36);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test083121() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("second new child has existing parent", 96, 96);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test083122() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("second new child has existing parent", 96, 96);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test083123() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("second new child has existing parent", 96, 96);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test084124() throws Throwable {
        Node node0 = Node.newNumber(2506.184938);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test085125() throws Throwable {
        Node node0 = new Node(40, 40, 40);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test086126() throws Throwable {
        Locale locale0 = Locale.TRADITIONAL_CHINESE;
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(41, nodeArray0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    }

    @Test(timeout = 4000)
    public void test087127() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test088128() throws Throwable {
        Node node0 = new Node(43);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test089129() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = new Node(44, 44, 80);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test090130() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test091131() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = Node.newString(33, "j", 13, 42);
        node1.addChildToBack(node0);
        Locale locale0 = Locale.JAPANESE;
        Set<String> set0 = locale0.getUnicodeLocaleAttributes();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    }

    @Test(timeout = 4000)
    public void test092132() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("<e1K.gD2*cW$*");
        Node node0 = NodeUtil.newQualifiedNameNode("<e1K.gD2*cW$*", 9, 2);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test092133() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("<e1K.gD2*cW$*");
        Node node0 = NodeUtil.newQualifiedNameNode("<e1K.gD2*cW$*", 9, 2);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test092134() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("<e1K.gD2*cW$*");
        Node node0 = NodeUtil.newQualifiedNameNode("<e1K.gD2*cW$*", 9, 2);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test092135() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("<e1K.gD2*cW$*");
        Node node0 = NodeUtil.newQualifiedNameNode("<e1K.gD2*cW$*", 9, 2);
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test093136() throws Throwable {
        Node node0 = new Node(125);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test094137() throws Throwable {
        Node node0 = new Node(132, (-1412), 31);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test095138() throws Throwable {
        Node node0 = new Node(125);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test096139() throws Throwable {
        Node node0 = new Node(9);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test097140() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
    }

    @Test(timeout = 4000)
    public void test098141() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
    }

    @Test(timeout = 4000)
    public void test099142() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
    }

    @Test(timeout = 4000)
    public void test100143() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
    }

    @Test(timeout = 4000)
    public void test101144() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
    }

    @Test(timeout = 4000)
    public void test102145() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
    }

    @Test(timeout = 4000)
    public void test103146() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
    }

    @Test(timeout = 4000)
    public void test104147() throws Throwable {
        Node node0 = new Node(17);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test105148() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
    }

    @Test(timeout = 4000)
    public void test106149() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
    }

    @Test(timeout = 4000)
    public void test107150() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
    }

    @Test(timeout = 4000)
    public void test108151() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
    }

    @Test(timeout = 4000)
    public void test109152() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
    }

    @Test(timeout = 4000)
    public void test110153() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
    }

    @Test(timeout = 4000)
    public void test111154() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
    }

    @Test(timeout = 4000)
    public void test112155() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
    }

    @Test(timeout = 4000)
    public void test113156() throws Throwable {
        Node node0 = new Node(26);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test114157() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
    }

    @Test(timeout = 4000)
    public void test115158() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
    }

    @Test(timeout = 4000)
    public void test116159() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test117160() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    }

    @Test(timeout = 4000)
    public void test118161() throws Throwable {
        Node node0 = new Node(31, 2, 2);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test119162() throws Throwable {
        Node node0 = new Node(32);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test120163() throws Throwable {
        Node node0 = new Node(33);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test121164() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test122165() throws Throwable {
        Node node0 = new Node(35);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test123166() throws Throwable {
        Node node0 = new Node(36);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test124167() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
    }

    @Test(timeout = 4000)
    public void test125168() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
    }

    @Test(timeout = 4000)
    public void test126169() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(39);
    }

    @Test(timeout = 4000)
    public void test127170() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(40);
    }

    @Test(timeout = 4000)
    public void test128171() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
    }

    @Test(timeout = 4000)
    public void test129172() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
    }

    @Test(timeout = 4000)
    public void test130173() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(43);
    }

    @Test(timeout = 4000)
    public void test131174() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
    }

    @Test(timeout = 4000)
    public void test132175() throws Throwable {
        Node node0 = new Node(45);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test133176() throws Throwable {
        Node node0 = new Node(46, 46, 46);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test134177() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    }

    @Test(timeout = 4000)
    public void test135178() throws Throwable {
        Node node0 = new Node(48);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test136179() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
    }

    @Test(timeout = 4000)
    public void test137180() throws Throwable {
        Node node0 = new Node(50, 8198, 8198);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test138181() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
    }

    @Test(timeout = 4000)
    public void test139182() throws Throwable {
        Node node0 = new Node(52);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test140183() throws Throwable {
        Node node0 = new Node(53, 53, 53);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test141184() throws Throwable {
        Node node0 = new Node(54);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test142185() throws Throwable {
        Node node0 = new Node(55, 55, 55);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test143186() throws Throwable {
        Node node0 = new Node(56);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test144187() throws Throwable {
        Node node0 = new Node(57, 57, 57);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test145188() throws Throwable {
        Node node0 = new Node(58);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test146189() throws Throwable {
        Node node0 = new Node(59);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test147190() throws Throwable {
        Node node0 = new Node(60, 60, 60);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test148191() throws Throwable {
        Node node0 = new Node(61, 61, 61);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test149192() throws Throwable {
        Node node0 = new Node(62);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test150193() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
    }

    @Test(timeout = 4000)
    public void test151194() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
    }

    @Test(timeout = 4000)
    public void test152195() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test153196() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test154197() throws Throwable {
        Node node0 = Node.newString(67, "(:X:|9=2_{3Nb, zov", 77, 77);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test155198() throws Throwable {
        Node node0 = new Node(68);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test156199() throws Throwable {
        Node node0 = new Node(69, 69, 69);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test157200() throws Throwable {
        Node node0 = new Node(70);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test158201() throws Throwable {
        Node node0 = new Node(71);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test159202() throws Throwable {
        Node node0 = new Node(72, 72, 72);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test160203() throws Throwable {
        Node node0 = new Node(73, 73, 73);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test161204() throws Throwable {
        Node node0 = new Node(74, 74, 74);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test162205() throws Throwable {
        Node node0 = new Node(75);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test163206() throws Throwable {
        Node node0 = new Node(76);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test164207() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(77);
    }

    @Test(timeout = 4000)
    public void test165208() throws Throwable {
        Node node0 = new Node(78, 78, 78);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test166209() throws Throwable {
        Node node0 = new Node(79);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test167210() throws Throwable {
        Node node0 = new Node(80);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test168211() throws Throwable {
        Node node0 = new Node(81, 81, 81);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test169212() throws Throwable {
        Node node0 = new Node(82);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test170213() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(83);
    }

    @Test(timeout = 4000)
    public void test171214() throws Throwable {
        Node node0 = new Node(84);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test172215() throws Throwable {
        Node node0 = new Node(85);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test173216() throws Throwable {
        Node node0 = new Node(86);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test174217() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test175218() throws Throwable {
        Node node0 = new Node(88);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test176219() throws Throwable {
        Node node0 = new Node(89, 89, 89);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test177220() throws Throwable {
        Node node0 = new Node(90, 90, 90);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test178221() throws Throwable {
        Node node0 = new Node(91);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test179222() throws Throwable {
        Node node0 = new Node(92);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test180223() throws Throwable {
        Node node0 = new Node(94);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test181224() throws Throwable {
        Node node0 = new Node(97, 97, 97);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test182225() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    }

    @Test(timeout = 4000)
    public void test183226() throws Throwable {
        Node node0 = new Node(99);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test184227() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
    }

    @Test(timeout = 4000)
    public void test185228() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    }

    @Test(timeout = 4000)
    public void test186229() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test187230() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test188231() throws Throwable {
        Node node0 = new Node(104);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test189232() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    }

    @Test(timeout = 4000)
    public void test190233() throws Throwable {
        Node node0 = new Node(107);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test191234() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
    }

    @Test(timeout = 4000)
    public void test192235() throws Throwable {
        Node node0 = new Node(109);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test193236() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
    }

    @Test(timeout = 4000)
    public void test194237() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test195238() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test196239() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test197240() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test198241() throws Throwable {
        Node node0 = new Node(116);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test199242() throws Throwable {
        Node node0 = new Node(117);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test200243() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
    }

    @Test(timeout = 4000)
    public void test201244() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test202245() throws Throwable {
        Node node0 = new Node(121);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test203246() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test204247() throws Throwable {
        Node node0 = new Node(128, 128, 128);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test205248() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test206249() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test207250() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test208251() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test209252() throws Throwable {
        Node node0 = new Node(43);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test210253() throws Throwable {
        Node node0 = new Node(44, 44, 44);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test211254() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test212255() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test213256() throws Throwable {
        Node node0 = new Node(51, 51, (-1542));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test214257() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test215258() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test216259() throws Throwable {
        Node node0 = new Node(83);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test217260() throws Throwable {
        Node node0 = new Node(98);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test218261() throws Throwable {
        Node node0 = new Node(100);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test219262() throws Throwable {
        Node node0 = new Node(101);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test220263() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test221264() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test222265() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test223266() throws Throwable {
        Node node0 = new Node(123, 123, 123);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test224267() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test225268() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test226269() throws Throwable {
        Node node0 = new Node(126);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test227270() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test228271() throws Throwable {
        Node node0 = new Node(129);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test229272() throws Throwable {
        Node node0 = new Node(111);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test229273() throws Throwable {
        Node node0 = new Node(111);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test230274() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test231275() throws Throwable {
        Node node0 = new Node(125);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("ak7@j&'.a", linkedList0, node0, 9, 46);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(functionNode0);
    }

    @Test(timeout = 4000)
    public void test231276() throws Throwable {
        Node node0 = new Node(125);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("ak7@j&'.a", linkedList0, node0, 9, 46);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(functionNode0);
        functionNode0.getCharno();
    }

    @Test(timeout = 4000)
    public void test231277() throws Throwable {
        Node node0 = new Node(125);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("ak7@j&'.a", linkedList0, node0, 9, 46);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(functionNode0);
        functionNode0.getLineno();
    }

    @Test(timeout = 4000)
    public void test231278() throws Throwable {
        Node node0 = new Node(125);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("ak7@j&'.a", linkedList0, node0, 9, 46);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(functionNode0);
        functionNode0.getFunctionName();
    }

    @Test(timeout = 4000)
    public void test232279() throws Throwable {
        Node node0 = new Node(37);
        node0.setIsNoSideEffectsCall();
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test233280() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        Node node1 = new Node(95, node0, node0, 3161, 1);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test234281() throws Throwable {
        Node node0 = new Node(72);
        NodeUtil.constructorCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test235282() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        node0.setIsNoSideEffectsCall();
        boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test236283() throws Throwable {
        Node node0 = new Node(30, 30, 30);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test237284() throws Throwable {
        Node node0 = new Node(30);
        Node node1 = NodeUtil.newName("VIB7xvFE:N&2P;", node0, "VIB7xvFE:N&2P;");
        node0.addChildToBack(node1);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test237285() throws Throwable {
        Node node0 = new Node(30);
        Node node1 = NodeUtil.newName("VIB7xvFE:N&2P;", node0, "VIB7xvFE:N&2P;");
        node0.addChildToBack(node1);
        boolean boolean0 = NodeUtil.constructorCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test238286() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        NodeUtil.functionCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test239287() throws Throwable {
        Node node0 = new Node(37);
        node0.setIsNoSideEffectsCall();
        boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test240288() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = NodeUtil.newQualifiedNameNode("5ryiY", 1, 38);
        node0.addChildToFront(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test240289() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = NodeUtil.newQualifiedNameNode("5ryiY", 1, 38);
        node0.addChildToFront(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test240290() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = NodeUtil.newQualifiedNameNode("5ryiY", 1, 38);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test241291() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        Node node1 = Node.newString(33, "j", 13, 42);
        node1.addChildToBack(node0);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.functionCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test242292() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test243293() throws Throwable {
        Node node0 = new Node(97, 1718, 1718);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test244294() throws Throwable {
        Node node0 = new Node(31);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test245295() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test246296() throws Throwable {
        Node node0 = Node.newString("ZbJUD]E?Xf2");
        Node node1 = NodeUtil.newQualifiedNameNode("ZbJUD]E?Xf2", node0, "ZbJUD]E?Xf2");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test246297() throws Throwable {
        Node node0 = Node.newString("ZbJUD]E?Xf2");
        Node node1 = NodeUtil.newQualifiedNameNode("ZbJUD]E?Xf2", node0, "ZbJUD]E?Xf2");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
        node1.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test247298() throws Throwable {
        Node node0 = Node.newString(49, "Unknown class name", 31, 25);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test248299() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test249300() throws Throwable {
        Node node0 = new Node(103);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test250301() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test251302() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test252303() throws Throwable {
        Node node0 = new Node(31);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test253304() throws Throwable {
        Node node0 = new Node(32);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test254305() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("com.googl.commn.collect.Iterables", node0, "com.googl.commn.collect.Iterables");
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test254306() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("com.googl.commn.collect.Iterables", node0, "com.googl.commn.collect.Iterables");
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
    }

    @Test(timeout = 4000)
    public void test254307() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("com.googl.commn.collect.Iterables", node0, "com.googl.commn.collect.Iterables");
        boolean boolean0 = NodeUtil.canBeSideEffected(node1);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test255308() throws Throwable {
        Node node0 = new Node(34);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test256309() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test257310() throws Throwable {
        Node node0 = new Node(36, 36, 36);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test258311() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test259312() throws Throwable {
        Node node0 = new Node(38);
        node0.putIntProp(43, 43);
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test260313() throws Throwable {
        Node node0 = new Node(36);
        Node node1 = NodeUtil.newName("", node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("");
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test260314() throws Throwable {
        Node node0 = new Node(36);
        Node node1 = NodeUtil.newName("", node0);
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        linkedHashSet0.add("");
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test261315() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test262316() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("K", node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test262317() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("K", node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test262318() throws Throwable {
        LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("K", node0);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test263319() throws Throwable {
        int int0 = NodeUtil.precedence(4);
    }

    @Test(timeout = 4000)
    public void test264320() throws Throwable {
        int int0 = NodeUtil.precedence(10);
    }

    @Test(timeout = 4000)
    public void test265321() throws Throwable {
        NodeUtil.precedence(5);
    }

    @Test(timeout = 4000)
    public void test266322() throws Throwable {
        NodeUtil.precedence(6);
    }

    @Test(timeout = 4000)
    public void test267323() throws Throwable {
        NodeUtil.precedence(7);
    }

    @Test(timeout = 4000)
    public void test268324() throws Throwable {
        NodeUtil.precedence(8);
    }

    @Test(timeout = 4000)
    public void test269325() throws Throwable {
        int int0 = NodeUtil.precedence(9);
    }

    @Test(timeout = 4000)
    public void test270326() throws Throwable {
        int int0 = NodeUtil.precedence(11);
    }

    @Test(timeout = 4000)
    public void test271327() throws Throwable {
        int int0 = NodeUtil.precedence(12);
    }

    @Test(timeout = 4000)
    public void test272328() throws Throwable {
        int int0 = NodeUtil.precedence(13);
    }

    @Test(timeout = 4000)
    public void test273329() throws Throwable {
        int int0 = NodeUtil.precedence(14);
    }

    @Test(timeout = 4000)
    public void test274330() throws Throwable {
        int int0 = NodeUtil.precedence(15);
    }

    @Test(timeout = 4000)
    public void test275331() throws Throwable {
        int int0 = NodeUtil.precedence(16);
    }

    @Test(timeout = 4000)
    public void test276332() throws Throwable {
        int int0 = NodeUtil.precedence(17);
    }

    @Test(timeout = 4000)
    public void test277333() throws Throwable {
        int int0 = NodeUtil.precedence(18);
    }

    @Test(timeout = 4000)
    public void test278334() throws Throwable {
        int int0 = NodeUtil.precedence(19);
    }

    @Test(timeout = 4000)
    public void test279335() throws Throwable {
        int int0 = NodeUtil.precedence(20);
    }

    @Test(timeout = 4000)
    public void test280336() throws Throwable {
        int int0 = NodeUtil.precedence(21);
    }

    @Test(timeout = 4000)
    public void test281337() throws Throwable {
        int int0 = NodeUtil.precedence(22);
    }

    @Test(timeout = 4000)
    public void test282338() throws Throwable {
        int int0 = NodeUtil.precedence(23);
    }

    @Test(timeout = 4000)
    public void test283339() throws Throwable {
        int int0 = NodeUtil.precedence(24);
    }

    @Test(timeout = 4000)
    public void test284340() throws Throwable {
        int int0 = NodeUtil.precedence(25);
    }

    @Test(timeout = 4000)
    public void test285341() throws Throwable {
        int int0 = NodeUtil.precedence(26);
    }

    @Test(timeout = 4000)
    public void test286342() throws Throwable {
        int int0 = NodeUtil.precedence(27);
    }

    @Test(timeout = 4000)
    public void test287343() throws Throwable {
        int int0 = NodeUtil.precedence(28);
    }

    @Test(timeout = 4000)
    public void test288344() throws Throwable {
        int int0 = NodeUtil.precedence(29);
    }

    @Test(timeout = 4000)
    public void test289345() throws Throwable {
        int int0 = NodeUtil.precedence(30);
    }

    @Test(timeout = 4000)
    public void test290346() throws Throwable {
        int int0 = NodeUtil.precedence(31);
    }

    @Test(timeout = 4000)
    public void test291347() throws Throwable {
        int int0 = NodeUtil.precedence(32);
    }

    @Test(timeout = 4000)
    public void test292348() throws Throwable {
        int int0 = NodeUtil.precedence(33);
    }

    @Test(timeout = 4000)
    public void test293349() throws Throwable {
        NodeUtil.precedence(34);
    }

    @Test(timeout = 4000)
    public void test294350() throws Throwable {
        int int0 = NodeUtil.precedence(35);
    }

    @Test(timeout = 4000)
    public void test295351() throws Throwable {
        NodeUtil.precedence(36);
    }

    @Test(timeout = 4000)
    public void test296352() throws Throwable {
        int int0 = NodeUtil.precedence(37);
    }

    @Test(timeout = 4000)
    public void test297353() throws Throwable {
        int int0 = NodeUtil.precedence(38);
    }

    @Test(timeout = 4000)
    public void test298354() throws Throwable {
        int int0 = NodeUtil.precedence(39);
    }

    @Test(timeout = 4000)
    public void test299355() throws Throwable {
        int int0 = NodeUtil.precedence(40);
    }

    @Test(timeout = 4000)
    public void test300356() throws Throwable {
        int int0 = NodeUtil.precedence(41);
    }

    @Test(timeout = 4000)
    public void test301357() throws Throwable {
        int int0 = NodeUtil.precedence(42);
    }

    @Test(timeout = 4000)
    public void test302358() throws Throwable {
        int int0 = NodeUtil.precedence(43);
    }

    @Test(timeout = 4000)
    public void test303359() throws Throwable {
        int int0 = NodeUtil.precedence(44);
    }

    @Test(timeout = 4000)
    public void test304360() throws Throwable {
        int int0 = NodeUtil.precedence(45);
    }

    @Test(timeout = 4000)
    public void test305361() throws Throwable {
        int int0 = NodeUtil.precedence(46);
    }

    @Test(timeout = 4000)
    public void test306362() throws Throwable {
        int int0 = NodeUtil.precedence(47);
    }

    @Test(timeout = 4000)
    public void test307363() throws Throwable {
        NodeUtil.precedence(48);
    }

    @Test(timeout = 4000)
    public void test308364() throws Throwable {
        NodeUtil.precedence(49);
    }

    @Test(timeout = 4000)
    public void test309365() throws Throwable {
        NodeUtil.precedence(50);
    }

    @Test(timeout = 4000)
    public void test310366() throws Throwable {
        int int0 = NodeUtil.precedence(51);
    }

    @Test(timeout = 4000)
    public void test311367() throws Throwable {
        int int0 = NodeUtil.precedence(52);
    }

    @Test(timeout = 4000)
    public void test312368() throws Throwable {
        NodeUtil.precedence(53);
    }

    @Test(timeout = 4000)
    public void test313369() throws Throwable {
        NodeUtil.precedence(54);
    }

    @Test(timeout = 4000)
    public void test314370() throws Throwable {
        NodeUtil.precedence(55);
    }

    @Test(timeout = 4000)
    public void test315371() throws Throwable {
        NodeUtil.precedence(56);
    }

    @Test(timeout = 4000)
    public void test316372() throws Throwable {
        NodeUtil.precedence(57);
    }

    @Test(timeout = 4000)
    public void test317373() throws Throwable {
        NodeUtil.precedence(58);
    }

    @Test(timeout = 4000)
    public void test318374() throws Throwable {
        NodeUtil.precedence(59);
    }

    @Test(timeout = 4000)
    public void test319375() throws Throwable {
        NodeUtil.precedence(60);
    }

    @Test(timeout = 4000)
    public void test320376() throws Throwable {
        NodeUtil.precedence(61);
    }

    @Test(timeout = 4000)
    public void test321377() throws Throwable {
        NodeUtil.precedence(62);
    }

    @Test(timeout = 4000)
    public void test322378() throws Throwable {
        int int0 = NodeUtil.precedence(63);
    }

    @Test(timeout = 4000)
    public void test323379() throws Throwable {
        int int0 = NodeUtil.precedence(64);
    }

    @Test(timeout = 4000)
    public void test324380() throws Throwable {
        int int0 = NodeUtil.precedence(65);
    }

    @Test(timeout = 4000)
    public void test325381() throws Throwable {
        NodeUtil.precedence(66);
    }

    @Test(timeout = 4000)
    public void test326382() throws Throwable {
        NodeUtil.precedence(67);
    }

    @Test(timeout = 4000)
    public void test327383() throws Throwable {
        NodeUtil.precedence(68);
    }

    @Test(timeout = 4000)
    public void test328384() throws Throwable {
        NodeUtil.precedence(69);
    }

    @Test(timeout = 4000)
    public void test329385() throws Throwable {
        NodeUtil.precedence(70);
    }

    @Test(timeout = 4000)
    public void test330386() throws Throwable {
        NodeUtil.precedence(71);
    }

    @Test(timeout = 4000)
    public void test331387() throws Throwable {
        NodeUtil.precedence(72);
    }

    @Test(timeout = 4000)
    public void test332388() throws Throwable {
        NodeUtil.precedence(73);
    }

    @Test(timeout = 4000)
    public void test333389() throws Throwable {
        NodeUtil.precedence(74);
    }

    @Test(timeout = 4000)
    public void test334390() throws Throwable {
        NodeUtil.precedence(75);
    }

    @Test(timeout = 4000)
    public void test335391() throws Throwable {
        NodeUtil.precedence((byte) 76);
    }

    @Test(timeout = 4000)
    public void test336392() throws Throwable {
        NodeUtil.precedence(77);
    }

    @Test(timeout = 4000)
    public void test337393() throws Throwable {
        NodeUtil.precedence(78);
    }

    @Test(timeout = 4000)
    public void test338394() throws Throwable {
        NodeUtil.precedence(79);
    }

    @Test(timeout = 4000)
    public void test339395() throws Throwable {
        NodeUtil.precedence(80);
    }

    @Test(timeout = 4000)
    public void test340396() throws Throwable {
        NodeUtil.precedence(81);
    }

    @Test(timeout = 4000)
    public void test341397() throws Throwable {
        NodeUtil.precedence(82);
    }

    @Test(timeout = 4000)
    public void test342398() throws Throwable {
        int int0 = NodeUtil.precedence(83);
    }

    @Test(timeout = 4000)
    public void test343399() throws Throwable {
        NodeUtil.precedence(84);
    }

    @Test(timeout = 4000)
    public void test344400() throws Throwable {
        int int0 = NodeUtil.precedence(85);
    }

    @Test(timeout = 4000)
    public void test345401() throws Throwable {
        int int0 = NodeUtil.precedence(86);
    }

    @Test(timeout = 4000)
    public void test346402() throws Throwable {
        int int0 = NodeUtil.precedence(87);
    }

    @Test(timeout = 4000)
    public void test347403() throws Throwable {
        int int0 = NodeUtil.precedence(88);
    }

    @Test(timeout = 4000)
    public void test348404() throws Throwable {
        int int0 = NodeUtil.precedence(89);
    }

    @Test(timeout = 4000)
    public void test349405() throws Throwable {
        int int0 = NodeUtil.precedence(90);
    }

    @Test(timeout = 4000)
    public void test350406() throws Throwable {
        int int0 = NodeUtil.precedence(91);
    }

    @Test(timeout = 4000)
    public void test351407() throws Throwable {
        int int0 = NodeUtil.precedence(92);
    }

    @Test(timeout = 4000)
    public void test352408() throws Throwable {
        int int0 = NodeUtil.precedence(93);
    }

    @Test(timeout = 4000)
    public void test353409() throws Throwable {
        int int0 = NodeUtil.precedence(94);
    }

    @Test(timeout = 4000)
    public void test354410() throws Throwable {
        int int0 = NodeUtil.precedence(95);
    }

    @Test(timeout = 4000)
    public void test355411() throws Throwable {
        int int0 = NodeUtil.precedence(96);
    }

    @Test(timeout = 4000)
    public void test356412() throws Throwable {
        int int0 = NodeUtil.precedence(97);
    }

    @Test(timeout = 4000)
    public void test357413() throws Throwable {
        int int0 = NodeUtil.precedence(98);
    }

    @Test(timeout = 4000)
    public void test358414() throws Throwable {
        NodeUtil.precedence(99);
    }

    @Test(timeout = 4000)
    public void test359415() throws Throwable {
        int int0 = NodeUtil.precedence(100);
    }

    @Test(timeout = 4000)
    public void test360416() throws Throwable {
        int int0 = NodeUtil.precedence(101);
    }

    @Test(timeout = 4000)
    public void test361417() throws Throwable {
        int int0 = NodeUtil.precedence(102);
    }

    @Test(timeout = 4000)
    public void test362418() throws Throwable {
        int int0 = NodeUtil.precedence(103);
    }

    @Test(timeout = 4000)
    public void test363419() throws Throwable {
        NodeUtil.precedence(104);
    }

    @Test(timeout = 4000)
    public void test364420() throws Throwable {
        int int0 = NodeUtil.precedence(105);
    }

    @Test(timeout = 4000)
    public void test365421() throws Throwable {
        NodeUtil.precedence(106);
    }

    @Test(timeout = 4000)
    public void test366422() throws Throwable {
        NodeUtil.precedence(107);
    }

    @Test(timeout = 4000)
    public void test367423() throws Throwable {
        int int0 = NodeUtil.precedence(108);
    }

    @Test(timeout = 4000)
    public void test368424() throws Throwable {
        NodeUtil.precedence(109);
    }

    @Test(timeout = 4000)
    public void test369425() throws Throwable {
        NodeUtil.precedence(110);
    }

    @Test(timeout = 4000)
    public void test370426() throws Throwable {
        NodeUtil.precedence(111);
    }

    @Test(timeout = 4000)
    public void test371427() throws Throwable {
        NodeUtil.precedence(112);
    }

    @Test(timeout = 4000)
    public void test372428() throws Throwable {
        NodeUtil.precedence(113);
    }

    @Test(timeout = 4000)
    public void test373429() throws Throwable {
        NodeUtil.precedence(114);
    }

    @Test(timeout = 4000)
    public void test374430() throws Throwable {
        NodeUtil.precedence(115);
    }

    @Test(timeout = 4000)
    public void test375431() throws Throwable {
        NodeUtil.precedence(116);
    }

    @Test(timeout = 4000)
    public void test376432() throws Throwable {
        NodeUtil.precedence(117);
    }

    @Test(timeout = 4000)
    public void test377433() throws Throwable {
        NodeUtil.precedence(118);
    }

    @Test(timeout = 4000)
    public void test378434() throws Throwable {
        NodeUtil.precedence(119);
    }

    @Test(timeout = 4000)
    public void test379435() throws Throwable {
        NodeUtil.precedence(120);
    }

    @Test(timeout = 4000)
    public void test380436() throws Throwable {
        NodeUtil.precedence(121);
    }

    @Test(timeout = 4000)
    public void test381437() throws Throwable {
        int int0 = NodeUtil.precedence(122);
    }

    @Test(timeout = 4000)
    public void test382438() throws Throwable {
        NodeUtil.precedence(123);
    }

    @Test(timeout = 4000)
    public void test383439() throws Throwable {
        int int0 = NodeUtil.precedence(124);
    }

    @Test(timeout = 4000)
    public void test384440() throws Throwable {
        NodeUtil.precedence((-2093));
    }

    @Test(timeout = 4000)
    public void test385441() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(9);
    }

    @Test(timeout = 4000)
    public void test386442() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
    }

    @Test(timeout = 4000)
    public void test387443() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(11);
    }

    @Test(timeout = 4000)
    public void test388444() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(23);
    }

    @Test(timeout = 4000)
    public void test389445() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(100);
    }

    @Test(timeout = 4000)
    public void test390446() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(74);
    }

    @Test(timeout = 4000)
    public void test391447() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test392448() throws Throwable {
        Node node0 = new Node(77);
        NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test393449() throws Throwable {
        Node node0 = new Node(88);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test394450() throws Throwable {
        Node node0 = new Node(89);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test395451() throws Throwable {
        Node node0 = new Node(90);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test396452() throws Throwable {
        Node node0 = new Node(91, 91, 90);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test397453() throws Throwable {
        Node node0 = new Node(92);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test398454() throws Throwable {
        Node node0 = new Node(93, 93, 93);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test399455() throws Throwable {
        Node node0 = new Node(94, 94, 94);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test400456() throws Throwable {
        Node node0 = new Node(95);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test401457() throws Throwable {
        Node node0 = new Node(96);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test402458() throws Throwable {
        Node node0 = new Node(97, 1718, 1718);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test403459() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
    }

    @Test(timeout = 4000)
    public void test404460() throws Throwable {
        Node node0 = new Node(130);
        boolean boolean0 = NodeUtil.isExpressionNode(node0);
    }

    @Test(timeout = 4000)
    public void test405461() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = Node.newString(33, "j", 13, 42);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
    }

    @Test(timeout = 4000)
    public void test406462() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        boolean boolean0 = NodeUtil.isGet(node0);
    }

    @Test(timeout = 4000)
    public void test407463() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
    }

    @Test(timeout = 4000)
    public void test408464() throws Throwable {
        Node node0 = new Node(77);
        Node node1 = NodeUtil.newQualifiedNameNode(".prototype", node0, ".prototype");
        Node node2 = NodeUtil.getPrototypeClassName(node1);
    }

    @Test(timeout = 4000)
    public void test408465() throws Throwable {
        Node node0 = new Node(77);
        Node node1 = NodeUtil.newQualifiedNameNode(".prototype", node0, ".prototype");
        Node node2 = NodeUtil.getPrototypeClassName(node1);
        node2.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test409466() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
    }

    @Test(timeout = 4000)
    public void test410467() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isNew(node0);
    }

    @Test(timeout = 4000)
    public void test411468() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.isNew(node0);
    }

    @Test(timeout = 4000)
    public void test412469() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newName(">>=Oh38f3Z<hEGe<", node0, ">>=Oh38f3Z<hEGe<");
        Node node2 = new Node(30, node0, node1, node0, node1);
        Node node3 = NodeUtil.getAssignedValue(node1);
    }

    @Test(timeout = 4000)
    public void test413470() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("VDFq_J#>ulR_GA", 89, 1221);
        Node node1 = new Node(118, node0);
        Node node2 = NodeUtil.getAssignedValue(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test413471() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("VDFq_J#>ulR_GA", 89, 1221);
        Node node1 = new Node(118, node0);
        Node node2 = NodeUtil.getAssignedValue(node0);
    }

    @Test(timeout = 4000)
    public void test413472() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("VDFq_J#>ulR_GA", 89, 1221);
        Node node1 = new Node(118, node0);
        Node node2 = NodeUtil.getAssignedValue(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test414473() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isVarDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test415474() throws Throwable {
        Node node0 = new Node(117);
        Node node1 = NodeUtil.newQualifiedNameNode("@", 12, 1);
        node0.addChildrenToFront(node1);
        boolean boolean0 = NodeUtil.isVarDeclaration(node1);
    }

    @Test(timeout = 4000)
    public void test415475() throws Throwable {
        Node node0 = new Node(117);
        Node node1 = NodeUtil.newQualifiedNameNode("@", 12, 1);
        node0.addChildrenToFront(node1);
        boolean boolean0 = NodeUtil.isVarDeclaration(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test415476() throws Throwable {
        Node node0 = new Node(117);
        Node node1 = NodeUtil.newQualifiedNameNode("@", 12, 1);
        node0.addChildrenToFront(node1);
        boolean boolean0 = NodeUtil.isVarDeclaration(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test416477() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newVarNode("", node0);
        Node node2 = NodeUtil.newQualifiedNameNode("", node1, "");
        node1.addChildToFront(node2);
        boolean boolean0 = NodeUtil.isVarDeclaration(node2);
    }

    @Test(timeout = 4000)
    public void test416478() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = NodeUtil.newVarNode("", node0);
        Node node2 = NodeUtil.newQualifiedNameNode("", node1, "");
        node1.addChildToFront(node2);
        boolean boolean0 = NodeUtil.isVarDeclaration(node2);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test417479() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isString(node0);
    }

    @Test(timeout = 4000)
    public void test418480() throws Throwable {
        Node node0 = Node.newString("undgfined", 108, 34);
        boolean boolean0 = NodeUtil.isString(node0);
    }

    @Test(timeout = 4000)
    public void test419481() throws Throwable {
        Node node0 = new Node(121);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test420482() throws Throwable {
        Node node0 = Node.newString(86, "}9 #'w!Aq|", 95, 3165);
        Node node1 = NodeUtil.newExpr(node0);
        NodeUtil.isPrototypePropertyDeclaration(node1);
    }

    @Test(timeout = 4000)
    public void test421483() throws Throwable {
        Node node0 = Node.newNumber((double) 43);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprAssign(node1);
    }

    @Test(timeout = 4000)
    public void test421484() throws Throwable {
        Node node0 = Node.newNumber((double) 43);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprAssign(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test422485() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        boolean boolean0 = NodeUtil.isAssign(node0);
    }

    @Test(timeout = 4000)
    public void test423486() throws Throwable {
        Node node0 = Node.newString((-1830), "!=", (-1830), (-1830));
        boolean boolean0 = NodeUtil.isExprCall(node0);
    }

    @Test(timeout = 4000)
    public void test424487() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = NodeUtil.newExpr(node0);
        boolean boolean0 = NodeUtil.isExprCall(node1);
    }

    @Test(timeout = 4000)
    public void test425488() throws Throwable {
        Node node0 = new Node(73, 73, 73);
        boolean boolean0 = NodeUtil.isForIn(node0);
    }

    @Test(timeout = 4000)
    public void test426489() throws Throwable {
        Node node0 = Node.newString(115, "5Z~p\"!~", 115, 115);
        boolean boolean0 = NodeUtil.isForIn(node0);
    }

    @Test(timeout = 4000)
    public void test427490() throws Throwable {
        Node node0 = Node.newString(115, "5Z~p\"!~", 115, 115);
        Node node1 = NodeUtil.newName("5Z~p\"!~", node0, "5Z~p\"!~");
        node0.addChildrenToFront(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test427491() throws Throwable {
        Node node0 = Node.newString(115, "5Z~p\"!~", 115, 115);
        Node node1 = NodeUtil.newName("5Z~p\"!~", node0, "5Z~p\"!~");
        node0.addChildrenToFront(node1);
        Node node2 = Node.newString("5Z~p\"!~", 40, 29);
        node0.addChildToBack(node2);
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isForIn(node0);
    }

    @Test(timeout = 4000)
    public void test428492() throws Throwable {
        Node node0 = new Node(121);
        node0.setType(113);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
    }

    @Test(timeout = 4000)
    public void test429493() throws Throwable {
        Node node0 = new Node(121);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
    }

    @Test(timeout = 4000)
    public void test430494() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
    }

    @Test(timeout = 4000)
    public void test431495() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isLoopStructure(node0);
    }

    @Test(timeout = 4000)
    public void test432496() throws Throwable {
        Node node0 = Node.newString(113, "rzt~p0s");
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test433497() throws Throwable {
        Node node0 = new Node(115);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test434498() throws Throwable {
        Node node0 = Node.newString(114, "bM(~_-_iESpMr", 114, 114);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test435499() throws Throwable {
        Node node0 = new Node(110);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test436500() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test437501() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test438502() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        Node node1 = new Node(108, node0, node0, node0, 1964, 85);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
    }

    @Test(timeout = 4000)
    public void test439503() throws Throwable {
        Node node0 = new Node(110);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test440504() throws Throwable {
        Node node0 = Node.newString(111, "bM(~_-_iESpMr", 111, 111);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test441505() throws Throwable {
        Node node0 = new Node(112, 112, 112);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test442506() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test443507() throws Throwable {
        Node node0 = Node.newString(114, "bM(~_-_iESpMr");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test444508() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(115, node0, node0);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
    }

    @Test(timeout = 4000)
    public void test445509() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test446510() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Z", 133, 133);
        Node node1 = new Node(120, node0, node0, node0);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
    }

    @Test(timeout = 4000)
    public void test446511() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Z", 133, 133);
        Node node1 = new Node(120, node0, node0, node0);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test446512() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Z", 133, 133);
        Node node1 = new Node(120, node0, node0, node0);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test447513() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(126, node0, node0);
        boolean boolean0 = NodeUtil.isControlStructure(node1);
    }

    @Test(timeout = 4000)
    public void test448514() throws Throwable {
        Node node0 = new Node(106, 106, 106);
        node0.setType(77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test449515() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(108, (-563), 47);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    }

    @Test(timeout = 4000)
    public void test450516() throws Throwable {
        Node node0 = new Node(111);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test451517() throws Throwable {
        Node node0 = new Node(112, 112, 112);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test452518() throws Throwable {
        Node node0 = new Node(113, 113, 113);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test453519() throws Throwable {
        Node node0 = new Node(114, 114, 114);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test454520() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test455521() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test456522() throws Throwable {
        Node node0 = new Node(126);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test457523() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        Node node1 = new Node(119, node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    }

    @Test(timeout = 4000)
    public void test458524() throws Throwable {
        Node node0 = new Node((-2705), (byte) (-13), (-1600));
        Node node1 = new Node(114, node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    }

    @Test(timeout = 4000)
    public void test459525() throws Throwable {
        Node node0 = new Node(108, 108, 2734);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test460526() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test461527() throws Throwable {
        Node node0 = new Node(106, 106, 106);
        node0.setType(77);
        Node node1 = NodeUtil.newName("rztO~p0s", node0, "rztO~p0s");
        node0.addChildrenToFront(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test461528() throws Throwable {
        Node node0 = new Node(106, 106, 106);
        node0.setType(77);
        Node node1 = NodeUtil.newName("rztO~p0s", node0, "rztO~p0s");
        node0.addChildrenToFront(node1);
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test462529() throws Throwable {
        Node node0 = new Node(120);
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test463530() throws Throwable {
        Node node0 = new Node(110);
        Node node1 = new Node(110, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node1, node0);
    }

    @Test(timeout = 4000)
    public void test464531() throws Throwable {
        Node node0 = new Node(108, 121, 125);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test465532() throws Throwable {
        Node node0 = Node.newString(115, "5Z~p\"!~", 115, 115);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test466533() throws Throwable {
        Node node0 = new Node(109);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test467534() throws Throwable {
        Node node0 = new Node(110);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test468535() throws Throwable {
        Node node0 = new Node(111);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test469536() throws Throwable {
        Node node0 = new Node(112, 112, 112);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test470537() throws Throwable {
        Node node0 = new Node(113, 37, 113);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test471538() throws Throwable {
        Node node0 = new Node(114);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test472539() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test473540() throws Throwable {
        Node node0 = Node.newString(115, "5Z~p\"!~", 115, 115);
        Node node1 = NodeUtil.newName("5Z~p\"!~", node0, "5Z~p\"!~");
        node0.addChildrenToFront(node1);
        Node node2 = Node.newString("5Z~p\"!~", 40, 29);
        node0.addChildToBack(node2);
        node0.addChildrenToBack(node0);
        Node node3 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test474541() throws Throwable {
        Node node0 = Node.newString(115, "5Z~p\"!~", 115, 115);
        Node node1 = Node.newString((-554), "C");
        node0.addChildrenToFront(node1);
        Node node2 = NodeUtil.newName("5Z~p\"!~", node0, "5Z~p\"!~");
        node0.addChildrenToFront(node2);
        Node node3 = Node.newString("5Z~p\"!~", 40, 29);
        node0.addChildToBack(node3);
        node0.addChildrenToBack(node0);
        Node node4 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test475542() throws Throwable {
        Node node0 = Node.newString(132, "undgfined");
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test476543() throws Throwable {
        Node node0 = new Node(111);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test477544() throws Throwable {
        Node node0 = new Node(125);
        node0.addChildToBack(node0);
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test478545() throws Throwable {
        Node node0 = new Node(105, 103, 103);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test479546() throws Throwable {
        Node node0 = new Node(126);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.isFunctionAnonymous(node0);
    }

    @Test(timeout = 4000)
    public void test480547() throws Throwable {
        Node node0 = new Node(125);
        Node node1 = new Node(132, (-1412), 31);
        node1.addChildToBack(node0);
        boolean boolean0 = NodeUtil.isStatement(node0);
    }

    @Test(timeout = 4000)
    public void test481548() throws Throwable {
        Node node0 = new Node(112, 112, 112);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test482549() throws Throwable {
        Node node0 = Node.newNumber((double) 72);
        Node node1 = NodeUtil.newName("", node0);
        boolean boolean0 = NodeUtil.isReferenceName(node1);
    }

    @Test(timeout = 4000)
    public void test483550() throws Throwable {
        Node node0 = Node.newString(116, "oS", 116, 116);
        Node node1 = NodeUtil.newQualifiedNameNode("oS", node0, "oS");
        node0.addChildrenToFront(node1);
        boolean boolean0 = NodeUtil.isReferenceName(node1);
    }

    @Test(timeout = 4000)
    public void test483551() throws Throwable {
        Node node0 = Node.newString(116, "oS", 116, 116);
        Node node1 = NodeUtil.newQualifiedNameNode("oS", node0, "oS");
        node0.addChildrenToFront(node1);
        boolean boolean0 = NodeUtil.isReferenceName(node1);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test483552() throws Throwable {
        Node node0 = Node.newString(116, "oS", 116, 116);
        Node node1 = NodeUtil.newQualifiedNameNode("oS", node0, "oS");
        node0.addChildrenToFront(node1);
        boolean boolean0 = NodeUtil.isReferenceName(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test484553() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("JSR", node0, "JSR");
        node0.addChildrenToFront(node1);
        boolean boolean0 = NodeUtil.isReferenceName(node1);
    }

    @Test(timeout = 4000)
    public void test485554() throws Throwable {
        boolean boolean0 = NodeUtil.isLabelName((Node) null);
    }

    @Test(timeout = 4000)
    public void test486555() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isLabelName(node0);
    }

    @Test(timeout = 4000)
    public void test487556() throws Throwable {
        Node node0 = new Node(117);
        Node node1 = NodeUtil.newQualifiedNameNode("@", 12, 1);
        node0.addChildrenToFront(node1);
        boolean boolean0 = NodeUtil.isReferenceName(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test487557() throws Throwable {
        Node node0 = new Node(117);
        Node node1 = NodeUtil.newQualifiedNameNode("@", 12, 1);
        node0.addChildrenToFront(node1);
        boolean boolean0 = NodeUtil.isReferenceName(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test487558() throws Throwable {
        Node node0 = new Node(117);
        Node node1 = NodeUtil.newQualifiedNameNode("@", 12, 1);
        node0.addChildrenToFront(node1);
        boolean boolean0 = NodeUtil.isReferenceName(node1);
    }

    @Test(timeout = 4000)
    public void test488559() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        node0.setType(77);
        boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
    }

    @Test(timeout = 4000)
    public void test489560() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        node0.setType(77);
        Node node1 = NodeUtil.newName("AiD,'e~S~8<Dk", node0, "AiD,'e~S~8<Dk");
        node0.addChildrenToFront(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test489561() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        node0.setType(77);
        Node node1 = NodeUtil.newName("AiD,'e~S~8<Dk", node0, "AiD,'e~S~8<Dk");
        node0.addChildrenToFront(node1);
        Node node2 = new Node(7, 29, 24);
        node0.addChildToBack(node2);
        node0.addChildrenToBack(node0);
        boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
    }

    @Test(timeout = 4000)
    public void test490562() throws Throwable {
        Node node0 = Node.newString(115, "5B~p\"!s", 115, 115);
        node0.setType(77);
        Node node1 = NodeUtil.newName("5B~p\"!s", node0, "5B~p\"!s");
        node0.addChildrenToFront(node1);
        Node node2 = Node.newString("5B~p\"!s", 40, 29);
        node0.addChildToBack(node2);
        node0.addChildrenToBack(node0);
        NodeUtil.removeChild(node0, node2);
    }

    @Test(timeout = 4000)
    public void test491563() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("S{stFDph!", node0);
        NodeUtil.removeChild(node1, node0);
    }

    @Test(timeout = 4000)
    public void test492564() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newVarNode("S{stFDph!", node0);
        node1.addChildToBack(node1);
        NodeUtil.removeChild(node1, node0);
    }

    @Test(timeout = 4000)
    public void test493565() throws Throwable {
        Node node0 = new Node(125);
        Node node1 = new Node(3220);
        NodeUtil.removeChild(node1, node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test494566() throws Throwable {
        Node node0 = new Node(126);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test495567() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = new Node(126, node0, node0);
        NodeUtil.removeChild(node1, node0);
    }

    @Test(timeout = 4000)
    public void test496568() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test497569() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test498570() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        Node node1 = new Node(40, node0, node0, node0, 49, 45);
        boolean boolean0 = NodeUtil.tryMergeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test499571() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isCall(node0);
    }

    @Test(timeout = 4000)
    public void test500572() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = NodeUtil.isCall(node0);
    }

    @Test(timeout = 4000)
    public void test501573() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        NodeUtil.isVarArgsFunction(node0);
    }

    @Test(timeout = 4000)
    public void test502574() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isThis(node0);
    }

    @Test(timeout = 4000)
    public void test503575() throws Throwable {
        Node node0 = new Node(42);
        boolean boolean0 = NodeUtil.isThis(node0);
    }

    @Test(timeout = 4000)
    public void test504576() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test505577() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminEted.re.it", linkedList0, node0, 34, 40);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
        functionNode0.getFunctionName();
    }

    @Test(timeout = 4000)
    public void test505578() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminEted.re.it", linkedList0, node0, 34, 40);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    }

    @Test(timeout = 4000)
    public void test505579() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminEted.re.it", linkedList0, node0, 34, 40);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
        functionNode0.getCharno();
    }

    @Test(timeout = 4000)
    public void test505580() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminEted.re.it", linkedList0, node0, 34, 40);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
        functionNode0.getLineno();
    }

    @Test(timeout = 4000)
    public void test506581() throws Throwable {
        Node node0 = new Node(125);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("ak7@j&'.a", linkedList0, node0, 9, 46);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
    }

    @Test(timeout = 4000)
    public void test506582() throws Throwable {
        Node node0 = new Node(125);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("ak7@j&'.a", linkedList0, node0, 9, 46);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
        functionNode0.getFunctionName();
    }

    @Test(timeout = 4000)
    public void test506583() throws Throwable {
        Node node0 = new Node(125);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("ak7@j&'.a", linkedList0, node0, 9, 46);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
        functionNode0.getCharno();
    }

    @Test(timeout = 4000)
    public void test506584() throws Throwable {
        Node node0 = new Node(125);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("ak7@j&'.a", linkedList0, node0, 9, 46);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(functionNode0);
        functionNode0.getLineno();
    }

    @Test(timeout = 4000)
    public void test507585() throws Throwable {
        Node node0 = new Node(117);
        boolean boolean0 = NodeUtil.isAnonymousFunction(node0);
    }

    @Test(timeout = 4000)
    public void test508586() throws Throwable {
        Node node0 = new Node(125);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("ak7@j&'.a", linkedList0, node0, 2056, 426);
        NodeUtil.isAnonymousFunction(functionNode0);
    }

    @Test(timeout = 4000)
    public void test509587() throws Throwable {
        Node node0 = new Node(125);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("ak7@j&'.a", linkedList0, node0, 2056, 426);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
        functionNode0.getCharno();
    }

    @Test(timeout = 4000)
    public void test509588() throws Throwable {
        Node node0 = new Node(125);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("ak7@j&'.a", linkedList0, node0, 2056, 426);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    }

    @Test(timeout = 4000)
    public void test509589() throws Throwable {
        Node node0 = new Node(125);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("ak7@j&'.a", linkedList0, node0, 2056, 426);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
        functionNode0.getFunctionName();
    }

    @Test(timeout = 4000)
    public void test509590() throws Throwable {
        Node node0 = new Node(125);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("ak7@j&'.a", linkedList0, node0, 2056, 426);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
        functionNode0.getLineno();
    }

    @Test(timeout = 4000)
    public void test510591() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 40, 40);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
        functionNode0.getLineno();
    }

    @Test(timeout = 4000)
    public void test510592() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 40, 40);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
    }

    @Test(timeout = 4000)
    public void test510593() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 40, 40);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
        functionNode0.getFunctionName();
    }

    @Test(timeout = 4000)
    public void test510594() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 40, 40);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.isAnonymousFunction(functionNode0);
        functionNode0.getCharno();
    }

    @Test(timeout = 4000)
    public void test511595() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
    }

    @Test(timeout = 4000)
    public void test512596() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = Node.newString(33, "j", 13, 42);
        node1.addChildToBack(node0);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
    }

    @Test(timeout = 4000)
    public void test513597() throws Throwable {
        Node node0 = new Node(86);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
    }

    @Test(timeout = 4000)
    public void test514598() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = NodeUtil.isLhs(node0, node0);
    }

    @Test(timeout = 4000)
    public void test515599() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    }

    @Test(timeout = 4000)
    public void test516600() throws Throwable {
        Node node0 = Node.newString("MbtwtLoi");
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    }

    @Test(timeout = 4000)
    public void test517604() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("msg.unterminated.re.lit", linkedList0, node0, 25, 25);
        node0.addChildrenToFront(functionNode0);
        Node node1 = Node.newString("msg.unterminated.re.lit");
        boolean boolean0 = NodeUtil.isObjectLitKey(node1, node0);
    }

    @Test(timeout = 4000)
    public void test518605() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(9);
    }

    @Test(timeout = 4000)
    public void test519606() throws Throwable {
        String string0 = NodeUtil.opToStr(19);
    }

    @Test(timeout = 4000)
    public void test520607() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(10);
    }

    @Test(timeout = 4000)
    public void test521608() throws Throwable {
        String string0 = NodeUtil.opToStr(11);
    }

    @Test(timeout = 4000)
    public void test522609() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(12);
    }

    @Test(timeout = 4000)
    public void test523610() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(13);
    }

    @Test(timeout = 4000)
    public void test524611() throws Throwable {
        String string0 = NodeUtil.opToStr(14);
    }

    @Test(timeout = 4000)
    public void test525612() throws Throwable {
        String string0 = NodeUtil.opToStr(15);
    }

    @Test(timeout = 4000)
    public void test526613() throws Throwable {
        String string0 = NodeUtil.opToStr(16);
    }

    @Test(timeout = 4000)
    public void test527614() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(17);
    }

    @Test(timeout = 4000)
    public void test528615() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(18);
    }

    @Test(timeout = 4000)
    public void test529616() throws Throwable {
        String string0 = NodeUtil.opToStr(20);
    }

    @Test(timeout = 4000)
    public void test530617() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(21);
    }

    @Test(timeout = 4000)
    public void test531618() throws Throwable {
        String string0 = NodeUtil.opToStr(22);
    }

    @Test(timeout = 4000)
    public void test532619() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(23);
    }

    @Test(timeout = 4000)
    public void test533620() throws Throwable {
        String string0 = NodeUtil.opToStr(24);
    }

    @Test(timeout = 4000)
    public void test534621() throws Throwable {
        String string0 = NodeUtil.opToStr(25);
    }

    @Test(timeout = 4000)
    public void test535622() throws Throwable {
        String string0 = NodeUtil.opToStr(26);
    }

    @Test(timeout = 4000)
    public void test536623() throws Throwable {
        String string0 = NodeUtil.opToStr(27);
    }

    @Test(timeout = 4000)
    public void test537624() throws Throwable {
        String string0 = NodeUtil.opToStr(28);
    }

    @Test(timeout = 4000)
    public void test538625() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
    }

    @Test(timeout = 4000)
    public void test539627() throws Throwable {
        NodeUtil.opToStrNoFail(30);
    }

    @Test(timeout = 4000)
    public void test540628() throws Throwable {
        NodeUtil.opToStrNoFail(31);
    }

    @Test(timeout = 4000)
    public void test541629() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(32);
    }

    @Test(timeout = 4000)
    public void test542630() throws Throwable {
        NodeUtil.opToStrNoFail(33);
    }

    @Test(timeout = 4000)
    public void test543631() throws Throwable {
        NodeUtil.opToStrNoFail(34);
    }

    @Test(timeout = 4000)
    public void test544632() throws Throwable {
        NodeUtil.opToStrNoFail(35);
    }

    @Test(timeout = 4000)
    public void test545633() throws Throwable {
        String string0 = NodeUtil.opToStr(36);
    }

    @Test(timeout = 4000)
    public void test546634() throws Throwable {
        String string0 = NodeUtil.opToStr(37);
    }

    @Test(timeout = 4000)
    public void test547635() throws Throwable {
        NodeUtil.opToStrNoFail(38);
    }

    @Test(timeout = 4000)
    public void test548636() throws Throwable {
        NodeUtil.opToStrNoFail(39);
    }

    @Test(timeout = 4000)
    public void test549637() throws Throwable {
        NodeUtil.opToStrNoFail(40);
    }

    @Test(timeout = 4000)
    public void test550638() throws Throwable {
        NodeUtil.opToStrNoFail(41);
    }

    @Test(timeout = 4000)
    public void test551639() throws Throwable {
        String string0 = NodeUtil.opToStr(42);
    }

    @Test(timeout = 4000)
    public void test552640() throws Throwable {
        String string0 = NodeUtil.opToStr(43);
    }

    @Test(timeout = 4000)
    public void test553641() throws Throwable {
        NodeUtil.opToStrNoFail(44);
    }

    @Test(timeout = 4000)
    public void test554642() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
    }

    @Test(timeout = 4000)
    public void test555643() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(46);
    }

    @Test(timeout = 4000)
    public void test556644() throws Throwable {
        String string0 = NodeUtil.opToStr(47);
    }

    @Test(timeout = 4000)
    public void test557645() throws Throwable {
        String string0 = NodeUtil.opToStr(48);
    }

    @Test(timeout = 4000)
    public void test558646() throws Throwable {
        NodeUtil.opToStrNoFail(49);
    }

    @Test(timeout = 4000)
    public void test559647() throws Throwable {
        NodeUtil.opToStrNoFail(50);
    }

    @Test(timeout = 4000)
    public void test560648() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(51);
    }

    @Test(timeout = 4000)
    public void test561649() throws Throwable {
        String string0 = NodeUtil.opToStr(52);
    }

    @Test(timeout = 4000)
    public void test562650() throws Throwable {
        NodeUtil.opToStrNoFail(53);
    }

    @Test(timeout = 4000)
    public void test563651() throws Throwable {
        String string0 = NodeUtil.opToStr(54);
    }

    @Test(timeout = 4000)
    public void test564652() throws Throwable {
        String string0 = NodeUtil.opToStr(55);
    }

    @Test(timeout = 4000)
    public void test565653() throws Throwable {
        NodeUtil.opToStrNoFail(56);
    }

    @Test(timeout = 4000)
    public void test566654() throws Throwable {
        String string0 = NodeUtil.opToStr(57);
    }

    @Test(timeout = 4000)
    public void test567655() throws Throwable {
        NodeUtil.opToStrNoFail(58);
    }

    @Test(timeout = 4000)
    public void test568656() throws Throwable {
        NodeUtil.opToStrNoFail(59);
    }

    @Test(timeout = 4000)
    public void test569657() throws Throwable {
        NodeUtil.opToStrNoFail(60);
    }

    @Test(timeout = 4000)
    public void test570658() throws Throwable {
        String string0 = NodeUtil.opToStr(61);
    }

    @Test(timeout = 4000)
    public void test571659() throws Throwable {
        NodeUtil.opToStrNoFail(62);
    }

    @Test(timeout = 4000)
    public void test572660() throws Throwable {
        NodeUtil.opToStrNoFail(63);
    }

    @Test(timeout = 4000)
    public void test573661() throws Throwable {
        NodeUtil.opToStrNoFail(64);
    }

    @Test(timeout = 4000)
    public void test574662() throws Throwable {
        NodeUtil.opToStrNoFail(65);
    }

    @Test(timeout = 4000)
    public void test575663() throws Throwable {
        NodeUtil.opToStrNoFail(66);
    }

    @Test(timeout = 4000)
    public void test576664() throws Throwable {
        NodeUtil.opToStrNoFail(67);
    }

    @Test(timeout = 4000)
    public void test577665() throws Throwable {
        NodeUtil.opToStrNoFail(68);
    }

    @Test(timeout = 4000)
    public void test578666() throws Throwable {
        String string0 = NodeUtil.opToStr(69);
    }

    @Test(timeout = 4000)
    public void test579667() throws Throwable {
        NodeUtil.opToStrNoFail(70);
    }

    @Test(timeout = 4000)
    public void test580668() throws Throwable {
        NodeUtil.opToStrNoFail(71);
    }

    @Test(timeout = 4000)
    public void test581669() throws Throwable {
        NodeUtil.opToStrNoFail(72);
    }

    @Test(timeout = 4000)
    public void test582670() throws Throwable {
        NodeUtil.opToStrNoFail(73);
    }

    @Test(timeout = 4000)
    public void test583671() throws Throwable {
        String string0 = NodeUtil.opToStr(74);
    }

    @Test(timeout = 4000)
    public void test584672() throws Throwable {
        NodeUtil.opToStrNoFail(75);
    }

    @Test(timeout = 4000)
    public void test585673() throws Throwable {
        String string0 = NodeUtil.opToStr(76);
    }

    @Test(timeout = 4000)
    public void test586674() throws Throwable {
        NodeUtil.opToStrNoFail(77);
    }

    @Test(timeout = 4000)
    public void test587675() throws Throwable {
        String string0 = NodeUtil.opToStr(78);
    }

    @Test(timeout = 4000)
    public void test588676() throws Throwable {
        String string0 = NodeUtil.opToStr(79);
    }

    @Test(timeout = 4000)
    public void test589677() throws Throwable {
        String string0 = NodeUtil.opToStr(80);
    }

    @Test(timeout = 4000)
    public void test590678() throws Throwable {
        NodeUtil.opToStrNoFail(81);
    }

    @Test(timeout = 4000)
    public void test591679() throws Throwable {
        NodeUtil.opToStrNoFail(82);
    }

    @Test(timeout = 4000)
    public void test592680() throws Throwable {
        String string0 = NodeUtil.opToStr(83);
    }

    @Test(timeout = 4000)
    public void test593681() throws Throwable {
        String string0 = NodeUtil.opToStr(84);
    }

    @Test(timeout = 4000)
    public void test594682() throws Throwable {
        String string0 = NodeUtil.opToStr(85);
    }

    @Test(timeout = 4000)
    public void test595683() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(86);
    }

    @Test(timeout = 4000)
    public void test596684() throws Throwable {
        String string0 = NodeUtil.opToStr(87);
    }

    @Test(timeout = 4000)
    public void test597685() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(88);
    }

    @Test(timeout = 4000)
    public void test598686() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(89);
    }

    @Test(timeout = 4000)
    public void test599687() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(90);
    }

    @Test(timeout = 4000)
    public void test600688() throws Throwable {
        String string0 = NodeUtil.opToStr(91);
    }

    @Test(timeout = 4000)
    public void test601689() throws Throwable {
        String string0 = NodeUtil.opToStr(92);
    }

    @Test(timeout = 4000)
    public void test602690() throws Throwable {
        String string0 = NodeUtil.opToStr(93);
    }

    @Test(timeout = 4000)
    public void test603691() throws Throwable {
        String string0 = NodeUtil.opToStr(94);
    }

    @Test(timeout = 4000)
    public void test604692() throws Throwable {
        String string0 = NodeUtil.opToStr(95);
    }

    @Test(timeout = 4000)
    public void test605693() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(96);
    }

    @Test(timeout = 4000)
    public void test606694() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(97);
    }

    @Test(timeout = 4000)
    public void test607695() throws Throwable {
        NodeUtil.opToStrNoFail(98);
    }

    @Test(timeout = 4000)
    public void test608696() throws Throwable {
        String string0 = NodeUtil.opToStr(99);
    }

    @Test(timeout = 4000)
    public void test609697() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(100);
    }

    @Test(timeout = 4000)
    public void test610698() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(101);
    }

    @Test(timeout = 4000)
    public void test611699() throws Throwable {
        NodeUtil.opToStrNoFail(102);
    }

    @Test(timeout = 4000)
    public void test612700() throws Throwable {
        NodeUtil.opToStrNoFail(103);
    }

    @Test(timeout = 4000)
    public void test613701() throws Throwable {
        NodeUtil.opToStrNoFail(104);
    }

    @Test(timeout = 4000)
    public void test614702() throws Throwable {
        String string0 = NodeUtil.opToStr(105);
    }

    @Test(timeout = 4000)
    public void test615703() throws Throwable {
        NodeUtil.opToStrNoFail(106);
    }

    @Test(timeout = 4000)
    public void test616704() throws Throwable {
        String string0 = NodeUtil.opToStr(107);
    }

    @Test(timeout = 4000)
    public void test617705() throws Throwable {
        NodeUtil.opToStrNoFail(108);
    }

    @Test(timeout = 4000)
    public void test618706() throws Throwable {
        String string0 = NodeUtil.opToStr(109);
    }

    @Test(timeout = 4000)
    public void test619707() throws Throwable {
        String string0 = NodeUtil.opToStr(110);
    }

    @Test(timeout = 4000)
    public void test620708() throws Throwable {
        NodeUtil.opToStrNoFail(111);
    }

    @Test(timeout = 4000)
    public void test621709() throws Throwable {
        String string0 = NodeUtil.opToStr(112);
    }

    @Test(timeout = 4000)
    public void test622710() throws Throwable {
        String string0 = NodeUtil.opToStr(113);
    }

    @Test(timeout = 4000)
    public void test623711() throws Throwable {
        NodeUtil.opToStrNoFail(114);
    }

    @Test(timeout = 4000)
    public void test624712() throws Throwable {
        NodeUtil.opToStrNoFail(115);
    }

    @Test(timeout = 4000)
    public void test625713() throws Throwable {
        String string0 = NodeUtil.opToStr(116);
    }

    @Test(timeout = 4000)
    public void test626714() throws Throwable {
        NodeUtil.opToStrNoFail(117);
    }

    @Test(timeout = 4000)
    public void test627715() throws Throwable {
        NodeUtil.opToStrNoFail(118);
    }

    @Test(timeout = 4000)
    public void test628716() throws Throwable {
        String string0 = NodeUtil.opToStr((byte) 119);
    }

    @Test(timeout = 4000)
    public void test629717() throws Throwable {
        String string0 = NodeUtil.opToStr(120);
    }

    @Test(timeout = 4000)
    public void test630718() throws Throwable {
        NodeUtil.opToStrNoFail(121);
    }

    @Test(timeout = 4000)
    public void test631719() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(122);
    }

    @Test(timeout = 4000)
    public void test632720() throws Throwable {
        String string0 = NodeUtil.opToStr(764);
    }

    @Test(timeout = 4000)
    public void test633721() throws Throwable {
        Node node0 = NodeUtil.newVarNode("", (Node) null);
        NodeUtil.redeclareVarsInsideBranch(node0);
    }

    @Test(timeout = 4000)
    public void test634722() throws Throwable {
        Node node0 = new Node(77);
        NodeUtil.copyNameAnnotations(node0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test635723() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        linkedList0.add(node0);
        NodeUtil.newFunctionNode("msg.unterminted.re.it", linkedList0, node0, 34, 40);
    }

    @Test(timeout = 4000)
    public void test636724() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("Math");
    }

    @Test(timeout = 4000)
    public void test637725() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName(">>>=");
    }

    @Test(timeout = 4000)
    public void test638726() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("interface");
    }

    @Test(timeout = 4000)
    public void test639727() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Infinity", 29, 29);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test639728() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("Infinity", 29, 29);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test640729() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("second new child has existing parent", 96, 96);
        Node node1 = new Node(96, node0, node0, node0, node0);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test640730() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("second new child has existing parent", 96, 96);
        Node node1 = new Node(96, node0, node0, node0, node0);
        NodeUtil.redeclareVarsInsideBranch(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test641731() throws Throwable {
        Node node0 = new Node(125);
        Node node1 = NodeUtil.newVarNode("S{stFDph!", node0);
        node0.addChildToBack(node1);
        // Undeclared exception!
        NodeUtil.redeclareVarsInsideBranch(node1);
    }

    @Test(timeout = 4000)
    public void test642732() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("9", 56, 56);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test642733() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("9", 56, 56);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test642734() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode("9", 56, 56);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test643735() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test644736() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".prototype.", 89, 33);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test644737() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".prototype.", 89, 33);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test644738() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".prototype.", 89, 33);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test644739() throws Throwable {
        Node node0 = NodeUtil.newQualifiedNameNode(".prototype.", 89, 33);
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test645740() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("com.googl.commn.collect.Iterables", node0, "com.googl.commn.collect.Iterables");
        Node node2 = NodeUtil.getPrototypeClassName(node1);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test645741() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("com.googl.commn.collect.Iterables", node0, "com.googl.commn.collect.Iterables");
        Node node2 = NodeUtil.getPrototypeClassName(node1);
    }

    @Test(timeout = 4000)
    public void test645742() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("com.googl.commn.collect.Iterables", node0, "com.googl.commn.collect.Iterables");
        Node node2 = NodeUtil.getPrototypeClassName(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test645743() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        Node node1 = NodeUtil.newQualifiedNameNode("com.googl.commn.collect.Iterables", node0, "com.googl.commn.collect.Iterables");
        Node node2 = NodeUtil.getPrototypeClassName(node1);
        node1.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test646744() throws Throwable {
        Node node0 = new Node(3674, (-986), 3674);
        Node node1 = NodeUtil.newQualifiedNameNode("cases", node0, "EoSBc8");
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "EoSBc8");
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test646745() throws Throwable {
        Node node0 = new Node(3674, (-986), 3674);
        Node node1 = NodeUtil.newQualifiedNameNode("cases", node0, "EoSBc8");
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "EoSBc8");
    }

    @Test(timeout = 4000)
    public void test647746() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test648747() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(48);
        boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test649748() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        boolean boolean0 = NodeUtil.containsType(node0, 39);
    }

    @Test(timeout = 4000)
    public void test650749() throws Throwable {
        Node[] nodeArray0 = new Node[2];
        Node node0 = Node.newString((-5426), "H:f");
        Node node1 = NodeUtil.newName("H:f", node0);
        nodeArray0[1] = node1;
        int int0 = NodeUtil.getNameReferenceCount(nodeArray0[1], "H:f");
    }

    @Test(timeout = 4000)
    public void test651750() throws Throwable {
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(90);
        Node node0 = new Node(90, 90, 90);
        Node node1 = NodeUtil.newQualifiedNameNode("Nf\"sYV", 8192, 1);
        node0.addChildToFront(node1);
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test652751() throws Throwable {
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(90);
        Node node0 = new Node(90, 90, 90);
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test653752() throws Throwable {
        Node node0 = new Node(47);
        NodeUtil.hasFinally(node0);
    }

    @Test(timeout = 4000)
    public void test654753() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.hasFinally(node0);
    }

    @Test(timeout = 4000)
    public void test655754() throws Throwable {
        Node node0 = new Node(77);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        node0.addChildrenToFront(node1);
        LinkedList<Node> linkedList1 = new LinkedList<Node>();
        Node node2 = new Node((-1), 2, (-1));
        node0.addChildToBack(node2);
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("C'Q)FG,hx*m2XE", linkedList1, node0, 2, 1);
        node0.addChildrenToFront(functionNode0);
        functionNode0.getCharno();
    }

    @Test(timeout = 4000)
    public void test655755() throws Throwable {
        Node node0 = new Node(77);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        node0.addChildrenToFront(node1);
        LinkedList<Node> linkedList1 = new LinkedList<Node>();
        Node node2 = new Node((-1), 2, (-1));
        node0.addChildToBack(node2);
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("C'Q)FG,hx*m2XE", linkedList1, node0, 2, 1);
        node0.addChildrenToFront(functionNode0);
        functionNode0.getFunctionName();
    }

    @Test(timeout = 4000)
    public void test655756() throws Throwable {
        Node node0 = new Node(77);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        node0.addChildrenToFront(node1);
        LinkedList<Node> linkedList1 = new LinkedList<Node>();
        Node node2 = new Node((-1), 2, (-1));
        node0.addChildToBack(node2);
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("C'Q)FG,hx*m2XE", linkedList1, node0, 2, 1);
        node0.addChildrenToFront(functionNode0);
        functionNode0.getLineno();
    }

    @Test(timeout = 4000)
    public void test655757() throws Throwable {
        Node node0 = new Node(77);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        node0.addChildrenToFront(node1);
        LinkedList<Node> linkedList1 = new LinkedList<Node>();
        Node node2 = new Node((-1), 2, (-1));
        node0.addChildToBack(node2);
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("C'Q)FG,hx*m2XE", linkedList1, node0, 2, 1);
        node0.addChildrenToFront(functionNode0);
        boolean boolean0 = NodeUtil.hasFinally(node0);
    }

    @Test(timeout = 4000)
    public void test656758() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test657759() throws Throwable {
        Node node0 = new Node(77);
        NodeUtil.getCatchBlock(node0);
    }

    @Test(timeout = 4000)
    public void test658760() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test659761() throws Throwable {
        Node node0 = new Node(125);
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test660762() throws Throwable {
        Node node0 = new Node(125);
        node0.addChildToBack(node0);
        boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    }

    @Test(timeout = 4000)
    public void test661763() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        NodeUtil.getFnParameters(node0);
    }

    @Test(timeout = 4000)
    public void test662764() throws Throwable {
        Node node0 = new Node(115);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("y", linkedList0, node0, 27, 46);
        Node node1 = NodeUtil.getFnParameters(functionNode0);
        functionNode0.getFunctionName();
    }

    @Test(timeout = 4000)
    public void test662765() throws Throwable {
        Node node0 = new Node(115);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("y", linkedList0, node0, 27, 46);
        Node node1 = NodeUtil.getFnParameters(functionNode0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test662766() throws Throwable {
        Node node0 = new Node(115);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("y", linkedList0, node0, 27, 46);
        Node node1 = NodeUtil.getFnParameters(functionNode0);
        functionNode0.getLineno();
    }

    @Test(timeout = 4000)
    public void test662767() throws Throwable {
        Node node0 = new Node(115);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("y", linkedList0, node0, 27, 46);
        Node node1 = NodeUtil.getFnParameters(functionNode0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test662768() throws Throwable {
        Node node0 = new Node(115);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("y", linkedList0, node0, 27, 46);
        Node node1 = NodeUtil.getFnParameters(functionNode0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test662769() throws Throwable {
        Node node0 = new Node(115);
        LinkedList<Node> linkedList0 = new LinkedList<Node>();
        FunctionNode functionNode0 = NodeUtil.newFunctionNode("y", linkedList0, node0, 27, 46);
        Node node1 = NodeUtil.getFnParameters(functionNode0);
        functionNode0.getCharno();
    }

    @Test(timeout = 4000)
    public void test663770() throws Throwable {
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test664771() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test665772() throws Throwable {
        Node node0 = new Node(117, 117, 117);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.setJSDocInfo(jSDocInfo0);
        JSDocInfo jSDocInfo1 = NodeUtil.getInfoForNameNode(node0);
        jSDocInfo1.getVisibility();
    }

    @Test(timeout = 4000)
    public void test666773() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode();
        node0.addChildrenToBack(node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test667774() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        node0.addChildrenToBack(node0);
        JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    }

    @Test(timeout = 4000)
    public void test668775() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        String string0 = NodeUtil.getSourceName(node0);
    }
}
