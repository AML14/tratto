/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 03 22:44:54 GMT 2023
 */
package com.google.javascript.jscomp.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ChainableReverseAbstractInterpreter_ESTest extends ChainableReverseAbstractInterpreter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
        jSType1.getDisplayName();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseUnknownType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
        jSType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NO_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
        jSType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNullType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
        jSType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
        jSType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(functionType0, functionType0);
        ParameterizedType parameterizedType1 = (ParameterizedType) semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(parameterizedType0);
        parameterizedType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
        jSType1.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        JSType jSType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(objectType0, (JSType) objectType0, (List<JSType>) linkedList0);
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
        jSType1.isAllType();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
        JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType1);
        jSType2.isResolved();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "function", true);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        Node node0 = Node.newString("com.google.common.base.Predicates$CompositionPredicate", 1, 3586);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter$RestrictByTypeOfResultVisitor", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "Not declared as a type name", true);
        jSType1.isNoType();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) null, (JSType) null);
        JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(parameterizedType0, "Not declared as a constructor", false);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Not declared as a type name", false);
        jSType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseAllType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Unknown class name", true);
        jSType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = semanticReverseAbstractInterpreter0.getFirst();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = new Node(496);
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
        FlowScope flowScope0 = closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        JSType jSType1 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType0, "P]I7G7D~`h");
        JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType1);
        jSType2.isNullType();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) null, (JSType) null);
        JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(parameterizedType0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseUnknownType();
        UnknownType unknownType0 = (UnknownType) semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
        unknownType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseAllType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
        jSType1.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
        jSType1.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseBooleanType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
        jSType1.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
        jSType1.isRecordType();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
        semanticReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = new Node((-359));
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        semanticReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter0);
        FlowScope flowScope0 = semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, (FlowScope) null, false);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        Node node0 = Node.newNumber((double) 33);
        Node node1 = new Node(33, node0, node0, 49, 48);
        JSType jSType0 = semanticReverseAbstractInterpreter0.getTypeIfRefinable(node1, (FlowScope) null);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = new Node((-359));
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        JSType jSType0 = semanticReverseAbstractInterpreter0.getTypeIfRefinable(node0, (FlowScope) null);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = new Node(38, 38, 38);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
        semanticReverseAbstractInterpreter0.getTypeIfRefinable(node0, (FlowScope) null);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = new Node(33);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = new Node(38);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        Node node0 = Node.newString("Unknown class name");
        semanticReverseAbstractInterpreter0.declareNameInScope((FlowScope) null, node0, objectType0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        Node node0 = new Node(33, 33, 33);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("@geXDYjahV", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        Node node0 = Node.newNumber((-2801.9986874646775));
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseStringType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = Node.newNumber((-2801.9986874646775));
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
        JSType jSType0 = modificationVisitor0.caseStringType();
        EnumType enumType0 = jSTypeRegistry1.createEnumType("Named type with empty name component", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(enumElementType0);
        jSType1.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
        Node.newNumber(0.0);
        UnionType unionType0 = mock(UnionType.class, new ViolatedAssumptionAnswer());
        doReturn((Iterable) null).when(unionType0).getAlternates();
        modificationVisitor0.caseUnionType(unionType0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        Node node0 = Node.newString("Unknown class name", 0, 1);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, objectType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(enumElementType0);
        jSType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
        JSType jSType0 = modificationVisitor0.caseStringType();
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", (Node) null, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(enumElementType0);
        jSType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        Node node0 = Node.newString("Unknown class name", 0, 1);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", node0, objectType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(enumElementType0, "Unknown class name", false);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        Node node0 = Node.newString(0, "WB@ur8'6S^h");
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", node0, jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        JSType jSType1 = jSTypeRegistry0.createOptionalNullableType(enumElementType0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType1, "Unknown class name", false);
        jSType2.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createNamedType("Named type with empty name component", "Unknown class name", 1, 1);
        UnknownType unknownType0 = (UnknownType) semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Named type with empty name component", false);
        unknownType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "undefined", true);
        jSType1.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "object", true);
        jSType1.isEnumType();
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNoObjectType();
        ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "function", false);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, "Unknown class name", false);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(objectType0, "function", false);
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(objectType0, "function", true);
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined((JSType) null);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull((JSType) null);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
        semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "number", true);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
        JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, (String) null, false);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
        JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "function", true);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
        semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "^+1[0&,kz", true);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
        JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "boolean", true);
        jSType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, (JSTypeRegistry) null);
        semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult((JSType) null, "string", true);
    }
}
