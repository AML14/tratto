/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 03 22:19:07 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "-", nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.isNameReferenced(node0, "-", nodeUtil_BooleanResultPredicate0);
        node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(34);
        Node node0 = new Node(34);
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        Node node0 = Node.newString("T7Sy92eFqD%ux5K;;_", (-1466), (-2593));
        NodeUtil.getArgumentForCallOrNew(node0, 48);
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        NodeUtil.containsFunction((Node) null);
    }

    @Test(timeout = 4000)
    public void test0045() throws Throwable {
        Node node0 = new Node(26);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test0056() throws Throwable {
        Node node0 = new Node(147);
        boolean boolean0 = NodeUtil.isFunctionObjectCall(node0);
    }

    @Test(timeout = 4000)
    public void test0067() throws Throwable {
        Node node0 = new Node(104, 88, (-2908));
        boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity");
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.isGetProp();
    }

    @Test(timeout = 4000)
    public void test0079() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity");
        NodeUtil.redeclareVarsInsideBranch(node0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        Node node0 = new Node(151);
        NodeUtil.getPrototypePropertyName(node0);
    }

    @Test(timeout = 4000)
    public void test00911() throws Throwable {
        Node node0 = new Node(26);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test01012() throws Throwable {
        Node node0 = new Node(79, 79, 79);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.functionCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        NodeUtil.getCatchBlock((Node) null);
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
        Node node0 = new Node((-12), 184, 147);
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, ".", node0, ".");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.stripTypePrefixes);
    }

    @Test(timeout = 4000)
    public void test01316() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
        Node node0 = new Node((-12), 184, 147);
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, ".", node0, ".");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.stripTypePrefixes);
        node1.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test01317() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
        Node node0 = new Node((-12), 184, 147);
        Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, ".", node0, ".");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.stripTypePrefixes);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test01418() throws Throwable {
        Node node0 = new Node(70);
        NodeUtil.getArgumentForFunction(node0, 41);
    }

    @Test(timeout = 4000)
    public void test01519() throws Throwable {
        Node node0 = new Node(163);
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        NodeUtil.newName(jqueryCodingConvention0, (String) null, node0, (String) null);
    }

    @Test(timeout = 4000)
    public void test01620() throws Throwable {
        Node node0 = new Node(85, 85, 85);
        NodeUtil.isVarArgsFunction(node0);
    }

    @Test(timeout = 4000)
    public void test01721() throws Throwable {
        Node node0 = Node.newString(421, "8B|=1yD;.lXT(FYG");
        int int0 = NodeUtil.getNameReferenceCount(node0, "=J\"Ls-x;");
    }

    @Test(timeout = 4000)
    public void test01822() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test01923() throws Throwable {
        Node node0 = new Node(30);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test02024() throws Throwable {
        Node node0 = Node.newString("B-c5o");
        NodeUtil.constructorCallHasSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test02125() throws Throwable {
        Node node0 = new Node(65256);
        NodeUtil.getFunctionBody(node0);
    }

    @Test(timeout = 4000)
    public void test02226() throws Throwable {
        Node node0 = new Node(21);
        boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
    }

    @Test(timeout = 4000)
    public void test02327() throws Throwable {
        NodeUtil.getFunctionParameters((Node) null);
    }

    @Test(timeout = 4000)
    public void test02428() throws Throwable {
        Node node0 = new Node(116);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test02529() throws Throwable {
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        Node node0 = Node.newString(42, "6wY", 103, 41);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test02630() throws Throwable {
        Node node0 = new Node(63);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02731() throws Throwable {
        Node node0 = new Node(99, 99, 99);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02832() throws Throwable {
        Node node0 = new Node(64);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test02933() throws Throwable {
        Node node0 = new Node(85);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03034() throws Throwable {
        Node node0 = new Node(86);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03135() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03236() throws Throwable {
        Node node0 = new Node(101);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03337() throws Throwable {
        Node node0 = new Node((-425));
        Node node1 = NodeUtil.newUndefinedNode(node0);
        NodeUtil.getImpureBooleanValue(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test03338() throws Throwable {
        Node node0 = new Node((-425));
        Node node1 = NodeUtil.newUndefinedNode(node0);
        NodeUtil.getImpureBooleanValue(node1);
    }

    @Test(timeout = 4000)
    public void test03439() throws Throwable {
        Node node0 = new Node(26);
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03540() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "?hpb1*keojrpMe(fr7");
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03641() throws Throwable {
        Node node0 = Node.newNumber((double) 0, 139, 111);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03742() throws Throwable {
        Node node0 = Node.newString("infinity");
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03843() throws Throwable {
        Node node0 = new Node(41);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test03944() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test04045() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        NodeUtil.getImpureBooleanValue(node0);
        node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test04046() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        NodeUtil.getImpureBooleanValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        Node node0 = new Node(47, 2076, 16);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test04248() throws Throwable {
        Node node0 = Node.newString(63, "!ESQQnJgD/{Vz+32GL", 110, 4367);
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test04349() throws Throwable {
        Node node0 = new Node(64, 111, 94);
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test04450() throws Throwable {
        Node node0 = new Node(148);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        NodeUtil.getPureBooleanValue(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test04451() throws Throwable {
        Node node0 = new Node(148);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        NodeUtil.getPureBooleanValue(node1);
    }

    @Test(timeout = 4000)
    public void test04552() throws Throwable {
        Node node0 = Node.newString("");
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test04653() throws Throwable {
        Node node0 = Node.newNumber((double) 159, (-1696), 1068);
        NodeUtil.getImpureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test04754() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(35, node0, node0, node0, node0);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test04856() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+u)C");
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test04957() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.arrayToString(node1);
        node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test04958() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test05060() throws Throwable {
        Node node0 = Node.newString("freeze", (-30), (-30));
        String string0 = NodeUtil.getStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05161() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = new Node(41, node0, node0, (-2394), 8233);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05162() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = new Node(41, node0, node0, (-2394), 8233);
        String string0 = NodeUtil.getStringValue(node1);
        node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test05263() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = new Node(35, node0, node0, node0, node0);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test05365() throws Throwable {
        Node node0 = new Node(63);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test05467() throws Throwable {
        Node node0 = Node.newString(9, ")UCvX{#oj6),g,7i5_", 154, 9);
        Node node1 = new Node(64, node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test05569() throws Throwable {
        Node node0 = new Node(151, 151, 151);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05571() throws Throwable {
        Node node0 = new Node(151, 151, 151);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getStringValue(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test05672() throws Throwable {
        Node node0 = new Node(154);
        NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05773() throws Throwable {
        Node node0 = new Node(143);
        Node node1 = new Node(10, node0, node0, node0, node0);
        String string0 = NodeUtil.arrayToString(node1);
    }

    @Test(timeout = 4000)
    public void test05874() throws Throwable {
        Node node0 = Node.newNumber(758.720087545682, 4095, 2);
        String string0 = NodeUtil.getArrayElementStringValue(node0);
    }

    @Test(timeout = 4000)
    public void test05975() throws Throwable {
        Node node0 = new Node(151, 151, 151);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test05977() throws Throwable {
        Node node0 = new Node(151, 151, 151);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test06078() throws Throwable {
        Node node0 = new Node(26);
        NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06179() throws Throwable {
        Node node0 = Node.newString(137, "z'4h4d6", 102, 137);
        Node node1 = new Node(29, node0, node0, 22, 15);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06280() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06381() throws Throwable {
        Node node0 = Node.newNumber(1.0, (-4121), (-4121));
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06482() throws Throwable {
        Node node0 = Node.newString("infinity");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06583() throws Throwable {
        Node node0 = new Node(41, 50, 31);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06684() throws Throwable {
        Node node0 = new Node(43);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06785() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test06886() throws Throwable {
        Node node0 = new Node(154);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test06988() throws Throwable {
        Node node0 = new Node(173);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test07089() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString(154, ")UCvX{#oj6),g,7i5_", 154, 154);
        Node node1 = NodeUtil.newName(googleCodingConvention0, "undefined", node0);
        Double double0 = NodeUtil.getNumberValue(node1);
    }

    @Test(timeout = 4000)
    public void test07191() throws Throwable {
        Node node0 = new Node(29);
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test07292() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("<=");
    }

    @Test(timeout = 4000)
    public void test07394() throws Throwable {
        Node node0 = Node.newString("-&<&");
        Double double0 = NodeUtil.getNumberValue(node0);
    }

    @Test(timeout = 4000)
    public void test07496() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("+)}L*R");
    }

    @Test(timeout = 4000)
    public void test07598() throws Throwable {
        Double double0 = NodeUtil.getStringNumberValue("-infinity");
    }

    @Test(timeout = 4000)
    public void test07699() throws Throwable {
        String string0 = NodeUtil.trimJsWhiteSpace("Strings used more than once:\n");
    }

    @Test(timeout = 4000)
    public void test077100() throws Throwable {
        String string0 = NodeUtil.trimJsWhiteSpace(" *YZs8%zfr-m)/>*`:");
    }

    @Test(timeout = 4000)
    public void test078101() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(9);
    }

    @Test(timeout = 4000)
    public void test079102() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(12);
    }

    @Test(timeout = 4000)
    public void test080103() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(13);
    }

    @Test(timeout = 4000)
    public void test081104() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(8233);
    }

    @Test(timeout = 4000)
    public void test082105() throws Throwable {
        NodeUtil.isStrWhiteSpaceChar(8200);
    }

    @Test(timeout = 4000)
    public void test083106() throws Throwable {
        Node node0 = new Node(126);
        String string0 = NodeUtil.getNearestFunctionName(node0);
    }

    @Test(timeout = 4000)
    public void test084107() throws Throwable {
        Node node0 = new Node(26);
        NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test085108() throws Throwable {
        Node node0 = new Node(50, 50, 50);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test086109() throws Throwable {
        Node node0 = new Node(143);
        Node node1 = new Node(29, node0);
        boolean boolean0 = NodeUtil.isImmutableValue(node1);
    }

    @Test(timeout = 4000)
    public void test087110() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity");
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test088111() throws Throwable {
        Node node0 = new Node(156);
        Node node1 = new Node(39, node0, 1, 53);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test089112() throws Throwable {
        Node node0 = Node.newString("_or{c/h!jMM6", 85, 85);
        Node node1 = new Node(87, node0, node0, 46, 48);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test090113() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+u)C");
        Node node1 = new Node(41, node0, node0, node0, node0);
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test091114() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        NodeUtil.evaluatesToLocalValue(node0);
        node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test091115() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        NodeUtil.evaluatesToLocalValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test092116() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        NodeUtil.evaluatesToLocalValue(node0);
        node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test092117() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        NodeUtil.evaluatesToLocalValue(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test093118() throws Throwable {
        Node node0 = new Node((-266));
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
    }

    @Test(timeout = 4000)
    public void test094119() throws Throwable {
        Node node0 = Node.newString(8200, ".infinity", 738, 738);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "Infinity", node0);
        boolean boolean0 = NodeUtil.isImmutableValue(node1);
    }

    @Test(timeout = 4000)
    public void test095120() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        Node node1 = new Node(12, node0, 44, 44);
        boolean boolean0 = NodeUtil.isSymmetricOperation(node1);
    }

    @Test(timeout = 4000)
    public void test096121() throws Throwable {
        Node node0 = new Node(1220);
        Node node1 = new Node(45, node0, node0, node0);
        boolean boolean0 = NodeUtil.isSymmetricOperation(node1);
    }

    @Test(timeout = 4000)
    public void test097122() throws Throwable {
        Node node0 = Node.newString(46, "JSCompiler_returnArg", 109, 32);
        ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
        reorderConstantExpression0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test098123() throws Throwable {
        Node node0 = new Node(26);
        ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
        Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
        node1.isFalse();
    }

    @Test(timeout = 4000)
    public void test099124() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.JsMessage$1");
        Node node1 = new Node(15, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isRelationalOperation(node1);
    }

    @Test(timeout = 4000)
    public void test099125() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.JsMessage$1");
        Node node1 = new Node(15, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isRelationalOperation(node1);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test100126() throws Throwable {
        Node node0 = Node.newString(16, "JSCompiler_returnArg", 38, 43);
        ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
        reorderConstantExpression0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test101127() throws Throwable {
        int int0 = NodeUtil.getInverseOperator(14);
    }

    @Test(timeout = 4000)
    public void test102128() throws Throwable {
        int int0 = NodeUtil.getInverseOperator(1431);
    }

    @Test(timeout = 4000)
    public void test103129() throws Throwable {
        int int0 = NodeUtil.getInverseOperator(15);
    }

    @Test(timeout = 4000)
    public void test104130() throws Throwable {
        int int0 = NodeUtil.getInverseOperator(16);
    }

    @Test(timeout = 4000)
    public void test105131() throws Throwable {
        int int0 = NodeUtil.getInverseOperator(17);
    }

    @Test(timeout = 4000)
    public void test106132() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    }

    @Test(timeout = 4000)
    public void test107133() throws Throwable {
        Node node0 = new Node(64, 111, 94);
        boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    }

    @Test(timeout = 4000)
    public void test108134() throws Throwable {
        Node node0 = new Node(91);
        Node node1 = new Node(105, node0, node0, 46, 48);
        boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
    }

    @Test(timeout = 4000)
    public void test109135() throws Throwable {
        Node node0 = new Node(91);
        Node node1 = new Node(105, node0, node0, 46, 48);
        NodeUtil.isLiteralValue(node1, true);
    }

    @Test(timeout = 4000)
    public void test110136() throws Throwable {
        Node node0 = Node.newString(9, ")UCvX{#oj6),g,7i5_");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test111137() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test111138() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
        node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test112139() throws Throwable {
        Node node0 = new Node(11);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
    }

    @Test(timeout = 4000)
    public void test113140() throws Throwable {
        Node node0 = new Node(154);
        Node node1 = new Node(12, node0, node0, node0, node0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    }

    @Test(timeout = 4000)
    public void test114141() throws Throwable {
        Node node0 = new Node(137, 137, 137);
        Node node1 = new Node(15, node0);
        Stack<String> stack0 = new Stack<String>();
        TreeSet<String> treeSet0 = new TreeSet<String>(stack0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    }

    @Test(timeout = 4000)
    public void test115142() throws Throwable {
        Node node0 = new Node(17, 82, 1988);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test116143() throws Throwable {
        Node node0 = new Node(19);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test117144() throws Throwable {
        Node node0 = Node.newString(21, "o}6GuzK3\"DgaN\"IJ", (-3315), 240);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test118145() throws Throwable {
        Node node0 = new Node(23, 61, 1988);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        NodeUtil.isValidDefineValue(node0, set0);
    }

    @Test(timeout = 4000)
    public void test119146() throws Throwable {
        Node node0 = new Node(25, 1, 55);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test120147() throws Throwable {
        Node node0 = new Node(26);
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test121148() throws Throwable {
        Node node0 = new Node(28);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
    }

    @Test(timeout = 4000)
    public void test122149() throws Throwable {
        Node node0 = Node.newString(29, ">>>=");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test123150() throws Throwable {
        Node node0 = new Node(30);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test124151() throws Throwable {
        Node node0 = new Node(25, (-4024), (-4024));
        Node node1 = new Node(31, node0);
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test125152() throws Throwable {
        Node node0 = new Node(68);
        Node node1 = new Node(32, node0, node0, node0, node0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    }

    @Test(timeout = 4000)
    public void test126153() throws Throwable {
        Node node0 = new Node(34);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
    }

    @Test(timeout = 4000)
    public void test127154() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ">>>=");
        Node node1 = new Node(36, node0, node0, node0, node0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    }

    @Test(timeout = 4000)
    public void test128155() throws Throwable {
        Node node0 = new Node(37);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNamePrefixes);
    }

    @Test(timeout = 4000)
    public void test129156() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ">=");
        HashSet<String> hashSet0 = new HashSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test130157() throws Throwable {
        Node node0 = Node.newNumber((double) (-1340));
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test131158() throws Throwable {
        Node node0 = Node.newString("$]/CD");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test132159() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "+u)C");
        Node node1 = new Node(41, node0, node0, node0, node0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    }

    @Test(timeout = 4000)
    public void test133160() throws Throwable {
        Node node0 = new Node(42, 55, 12);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test134161() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test134162() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test135163() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.JsMessage$1");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        treeSet0.add("com.google.javascript.jscomp.JsMessage$1");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test135164() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.JsMessage$1");
        TreeSet<String> treeSet0 = new TreeSet<String>();
        treeSet0.add("com.google.javascript.jscomp.JsMessage$1");
        boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
        node0.isName();
    }

    @Test(timeout = 4000)
    public void test136165() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity");
        boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    }

    @Test(timeout = 4000)
    public void test137166() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
    }

    @Test(timeout = 4000)
    public void test138167() throws Throwable {
        Node node0 = new Node(143);
        Node node1 = new Node(10, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test139168() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
    }

    @Test(timeout = 4000)
    public void test140169() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
    }

    @Test(timeout = 4000)
    public void test141170() throws Throwable {
        Node node0 = new Node(13);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test142171() throws Throwable {
        Node node0 = new Node(14);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test143172() throws Throwable {
        Node node0 = new Node(137, 137, 137);
        Node node1 = new Node(15, node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test144173() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
    }

    @Test(timeout = 4000)
    public void test145174() throws Throwable {
        Node node0 = new Node(17, 17, 17);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test146175() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = new Node(18, node0, 45, 36);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test147176() throws Throwable {
        Node node0 = new Node(19);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test148177() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
    }

    @Test(timeout = 4000)
    public void test149178() throws Throwable {
        Node node0 = new Node(21);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test150179() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
    }

    @Test(timeout = 4000)
    public void test151180() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
    }

    @Test(timeout = 4000)
    public void test152181() throws Throwable {
        Node node0 = Node.newString(24, "yp5X");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test153182() throws Throwable {
        Node node0 = new Node(25, 25, 25);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test154183() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
    }

    @Test(timeout = 4000)
    public void test155184() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
    }

    @Test(timeout = 4000)
    public void test156185() throws Throwable {
        Node node0 = Node.newString("-&<&");
        Node node1 = new Node(29, node0);
        boolean boolean0 = NodeUtil.isSimpleOperator(node1);
    }

    @Test(timeout = 4000)
    public void test157186() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    }

    @Test(timeout = 4000)
    public void test158187() throws Throwable {
        Node node0 = new Node(156, 16, 16);
        Node node1 = new Node(31, node0, 29, 52);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test159188() throws Throwable {
        Node node0 = new Node(32, 2365, 2365);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test160189() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.JsMessage$1");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test160190() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.JsMessage$1");
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test161191() throws Throwable {
        Node node0 = new Node(34);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test162192() throws Throwable {
        Node node0 = new Node(36);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test163193() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
    }

    @Test(timeout = 4000)
    public void test164194() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
    }

    @Test(timeout = 4000)
    public void test165195() throws Throwable {
        Node node0 = Node.newString("%M:`&`W4n");
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test166196() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
    }

    @Test(timeout = 4000)
    public void test167197() throws Throwable {
        Node node0 = new Node(1220);
        Node node1 = new Node(45, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test168198() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = new Node(46, node0, 4, 4095);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test168199() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = new Node(46, node0, 4, 4095);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test169200() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    }

    @Test(timeout = 4000)
    public void test170201() throws Throwable {
        Node node0 = new Node(48);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test171202() throws Throwable {
        Node node0 = new Node(139, 139, 139);
        Node node1 = new Node(49, node0, node0);
        Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
        NodeUtil.evaluatesToLocalValue(node1, predicate0);
    }

    @Test(timeout = 4000)
    public void test172203() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
    }

    @Test(timeout = 4000)
    public void test173204() throws Throwable {
        Node node0 = new Node(52, (-820), 52);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test174205() throws Throwable {
        Node node0 = new Node(53);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test175206() throws Throwable {
        Node node0 = Node.newString("d_I&9AJW][", 64, 64);
        Node node1 = new Node(54, node0, node0, 45, 8);
        PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
        boolean boolean0 = peepholeReplaceKnownMethods0.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test176207() throws Throwable {
        Node node0 = new Node(55);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test177208() throws Throwable {
        Node node0 = new Node(56, 12, 56);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test178209() throws Throwable {
        Node node0 = new Node(57, 118, 57);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test179210() throws Throwable {
        Node node0 = new Node(58);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test180211() throws Throwable {
        Node node0 = new Node(61);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test181212() throws Throwable {
        Node node0 = new Node(62);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test182213() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
    }

    @Test(timeout = 4000)
    public void test183214() throws Throwable {
        Node node0 = Node.newString(26, ")UCvX{#oj6),g,7i5_");
        Node node1 = new Node(64, node0);
        boolean boolean0 = NodeUtil.isSimpleOperator(node1);
    }

    @Test(timeout = 4000)
    public void test184215() throws Throwable {
        Node node0 = new Node(65);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test185216() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test186217() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test187218() throws Throwable {
        Node node0 = new Node(69);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test188219() throws Throwable {
        Node node0 = new Node(70);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test189220() throws Throwable {
        Node node0 = new Node(71);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test190221() throws Throwable {
        Node node0 = new Node(72);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test191222() throws Throwable {
        Node node0 = new Node(74);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test192223() throws Throwable {
        Node node0 = new Node(75, 75, 75);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test193224() throws Throwable {
        Node node0 = new Node(76);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test194225() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test195226() throws Throwable {
        Node node0 = new Node(78, 78, 78);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test196227() throws Throwable {
        Node node0 = new Node(80);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test197228() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(81);
    }

    @Test(timeout = 4000)
    public void test198229() throws Throwable {
        Node node0 = new Node(82);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test199230() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test200231() throws Throwable {
        Node node0 = new Node(85);
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        boolean boolean0 = peepholeRemoveDeadCode0.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test201232() throws Throwable {
        Node node0 = new Node(86);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test202233() throws Throwable {
        Node node0 = new Node(48);
        Node node1 = new Node(88, node0, 1, 43);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test203234() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(89);
    }

    @Test(timeout = 4000)
    public void test204235() throws Throwable {
        Node node0 = new Node(90, 98, 98);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test205236() throws Throwable {
        Node node0 = new Node(91);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test206237() throws Throwable {
        Node node0 = Node.newString(92, "variable {0} is undeclared", (-9), 92);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test207238() throws Throwable {
        Node node0 = new Node(93, 93, 93);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test208239() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(94);
    }

    @Test(timeout = 4000)
    public void test209240() throws Throwable {
        Node node0 = new Node(95);
        NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test210241() throws Throwable {
        Node node0 = new Node(96, 96, 96);
        NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test211242() throws Throwable {
        Node node0 = new Node(35);
        Node node1 = new Node(97, node0, 88, 1861);
        NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test212243() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    }

    @Test(timeout = 4000)
    public void test213244() throws Throwable {
        Node node0 = new Node(99, 99, 99);
        PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
        boolean boolean0 = peepholeReplaceKnownMethods0.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test214245() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    }

    @Test(timeout = 4000)
    public void test215246() throws Throwable {
        Node node0 = new Node(102, 98, 98);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test216247() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test217248() throws Throwable {
        Node node0 = Node.newString(104, "variable {0} is undeclared", 92, 92);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, predicate0);
    }

    @Test(timeout = 4000)
    public void test218249() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    }

    @Test(timeout = 4000)
    public void test219250() throws Throwable {
        Node node0 = new Node(106, 106, 106);
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        boolean boolean0 = peepholeFoldWithTypes0.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test220251() throws Throwable {
        Node node0 = new Node(107, (-1779), (-1779));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test221252() throws Throwable {
        Node node0 = new Node(108, 2287, 2287);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test222253() throws Throwable {
        Node node0 = new Node(109, (-1750), (-1750));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test223254() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
    }

    @Test(timeout = 4000)
    public void test224255() throws Throwable {
        Node node0 = new Node(112, 2165, (-1687));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test225256() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test226257() throws Throwable {
        Node node0 = new Node(114, 113, 279);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test227258() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test228259() throws Throwable {
        Node node0 = new Node(117);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test229260() throws Throwable {
        boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
    }

    @Test(timeout = 4000)
    public void test230261() throws Throwable {
        Node node0 = new Node(66);
        Node node1 = new Node(120, node0, node0, 17, 42);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchDeclaration0);
    }

    @Test(timeout = 4000)
    public void test231262() throws Throwable {
        Node node0 = new Node(121);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test232263() throws Throwable {
        Node node0 = Node.newString(9, ")UCvX{#oj6),g,7i5_", 154, 9);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test232264() throws Throwable {
        Node node0 = Node.newString(9, ")UCvX{#oj6),g,7i5_", 154, 9);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test232265() throws Throwable {
        Node node0 = Node.newString(9, ")UCvX{#oj6),g,7i5_", 154, 9);
        Node node1 = NodeUtil.newUndefinedNode(node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test233266() throws Throwable {
        Node node0 = new Node((-4107), (-4107), (-4107));
        Node node1 = new Node(30, node0, 36, 2);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test234267() throws Throwable {
        Node node0 = new Node(36, 103, (-1459145716));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test235268() throws Throwable {
        Node node0 = new Node(156);
        Node node1 = new Node(37, node0, node0, node0);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test236269() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("null");
        PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
        peepholeRemoveDeadCode0.optimizeSubtree(node0);
    }

    @Test(timeout = 4000)
    public void test237270() throws Throwable {
        Node node0 = new Node(84);
        Node node1 = new Node(42, node0, (-519), 37);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test238271() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
        boolean boolean0 = peepholeReplaceKnownMethods0.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test239272() throws Throwable {
        Node node0 = new Node(154);
        Node node1 = new Node(47, node0, node0, 55, 55);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test240273() throws Throwable {
        Node node0 = new Node(49);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test241274() throws Throwable {
        Node node0 = new Node(50, 50, 50);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test242275() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test243276() throws Throwable {
        Node node0 = new Node(65);
        PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
        boolean boolean0 = peepholeReplaceKnownMethods0.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test244277() throws Throwable {
        Node node0 = new Node(71);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test245278() throws Throwable {
        Node node0 = new Node(74);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test246279() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = new Node(76, node0, 1, 41);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test247280() throws Throwable {
        Node node0 = new Node(77, 77, 97);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test248281() throws Throwable {
        Vector<JSType> vector0 = new Vector<JSType>();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test249282() throws Throwable {
        Node node0 = new Node(59);
        Node node1 = new Node(100, node0, 3406, 1394);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test250283() throws Throwable {
        Node node0 = new Node(101);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test251284() throws Throwable {
        Node node0 = new Node(104, (-1408), (-1716));
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test252285() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test253286() throws Throwable {
        Node node0 = new Node(110, 957, 957);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test254287() throws Throwable {
        Node node0 = new Node(111, 102, 137);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test255288() throws Throwable {
        Node node0 = new Node(116, 116, 116);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test256289() throws Throwable {
        Node node0 = new Node(4, 190, 4);
        Node node1 = NodeUtil.newVarNode("function", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.isVar();
    }

    @Test(timeout = 4000)
    public void test256290() throws Throwable {
        Node node0 = new Node(4, 190, 4);
        Node node1 = NodeUtil.newVarNode("function", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test256291() throws Throwable {
        Node node0 = new Node(4, 190, 4);
        Node node1 = NodeUtil.newVarNode("function", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test256292() throws Throwable {
        Node node0 = new Node(4, 190, 4);
        Node node1 = NodeUtil.newVarNode("function", node0);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test257293() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test258294() throws Throwable {
        Node node0 = new Node(120);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test259295() throws Throwable {
        Node node0 = new Node(124);
        PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
        boolean boolean0 = peepholeReplaceKnownMethods0.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test260296() throws Throwable {
        Node node0 = new Node(125, 2371, 2371);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test261297() throws Throwable {
        Node node0 = Node.newString(126, ")UCvX{#oj6),g,7i5_", 61, 131);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test262298() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test263299() throws Throwable {
        Node node0 = new Node(128);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test264300() throws Throwable {
        Node node0 = new Node(131);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test265301() throws Throwable {
        Node node0 = new Node(132, 2371, 2371);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test266302() throws Throwable {
        Node node0 = new Node(133);
        boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test267303() throws Throwable {
        Node node0 = new Node(134);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test268304() throws Throwable {
        Node node0 = new Node(135);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test269305() throws Throwable {
        Node node0 = new Node(126, 126, 126);
        Node node1 = new Node(136, node0, 43, 55);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test270306() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = new Node(138, node0, 45, 36);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    }

    @Test(timeout = 4000)
    public void test271307() throws Throwable {
        Node node0 = new Node(139, 139, 139);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test272308() throws Throwable {
        Node node0 = new Node(143);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test273309() throws Throwable {
        Node node0 = new Node(144, 144, 144);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test274310() throws Throwable {
        Node node0 = new Node(145);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test275311() throws Throwable {
        Node node0 = new Node(147);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test276312() throws Throwable {
        Node node0 = new Node(148);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test277313() throws Throwable {
        Node node0 = new Node(150);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test278314() throws Throwable {
        Node node0 = new Node(151);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test279315() throws Throwable {
        Node node0 = new Node(152);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test280316() throws Throwable {
        Node node0 = new Node(153, 153, 153);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test281317() throws Throwable {
        Node node0 = new Node(154);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test282318() throws Throwable {
        Node node0 = new Node(64, 111, 94);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test283319() throws Throwable {
        Node node0 = new Node(64, 111, 94);
        node0.addChildToFront(node0);
        NodeUtil.getPureBooleanValue(node0);
    }

    @Test(timeout = 4000)
    public void test284320() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    }

    @Test(timeout = 4000)
    public void test285321() throws Throwable {
        Node node0 = new Node(119, 145, 119);
        Node node1 = new Node(30, node0, 51, 42);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test286322() throws Throwable {
        Node node0 = new Node(96, 96, 96);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test287323() throws Throwable {
        Node node0 = new Node(31);
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        boolean boolean0 = peepholeFoldWithTypes0.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test288324() throws Throwable {
        Node node0 = new Node(105);
        Node[] nodeArray0 = new Node[0];
        Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    }

    @Test(timeout = 4000)
    public void test289325() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity");
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test290326() throws Throwable {
        Node node0 = new Node(49);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test291327() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test292328() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    }

    @Test(timeout = 4000)
    public void test293329() throws Throwable {
        Node node0 = new Node(30, 35, 0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, compilerOptions0.stripNameSuffixes);
    }

    @Test(timeout = 4000)
    public void test294330() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, compilerOptions0.stripNamePrefixes);
    }

    @Test(timeout = 4000)
    public void test295331() throws Throwable {
        Node node0 = new Node(37, 16, 8232);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node0, compilerOptions0.stripTypes);
    }

    @Test(timeout = 4000)
    public void test296332() throws Throwable {
        Node node0 = new Node(105);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        NodeUtil.canBeSideEffected(node0, compilerOptions0.stripTypes);
    }

    @Test(timeout = 4000)
    public void test297333() throws Throwable {
        Node node0 = new Node(70);
        Node node1 = new Node(31, node0, node0, 12, 47);
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, (Set<String>) null);
    }

    @Test(timeout = 4000)
    public void test298334() throws Throwable {
        Node node0 = new Node(3);
        Node node1 = NodeUtil.newVarNode(".", node0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.aliasableStrings);
        node1.isName();
    }

    @Test(timeout = 4000)
    public void test298335() throws Throwable {
        Node node0 = new Node(3);
        Node node1 = NodeUtil.newVarNode(".", node0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.aliasableStrings);
    }

    @Test(timeout = 4000)
    public void test298336() throws Throwable {
        Node node0 = new Node(3);
        Node node1 = NodeUtil.newVarNode(".", node0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.aliasableStrings);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test299337() throws Throwable {
        int int0 = NodeUtil.precedence(9);
    }

    @Test(timeout = 4000)
    public void test300338() throws Throwable {
        int int0 = NodeUtil.precedence(103);
    }

    @Test(timeout = 4000)
    public void test301339() throws Throwable {
        int int0 = NodeUtil.precedence(10);
    }

    @Test(timeout = 4000)
    public void test302340() throws Throwable {
        int int0 = NodeUtil.precedence(11);
    }

    @Test(timeout = 4000)
    public void test303341() throws Throwable {
        int int0 = NodeUtil.precedence(12);
    }

    @Test(timeout = 4000)
    public void test304342() throws Throwable {
        int int0 = NodeUtil.precedence(13);
    }

    @Test(timeout = 4000)
    public void test305343() throws Throwable {
        int int0 = NodeUtil.precedence(14);
    }

    @Test(timeout = 4000)
    public void test306344() throws Throwable {
        int int0 = NodeUtil.precedence(15);
    }

    @Test(timeout = 4000)
    public void test307345() throws Throwable {
        int int0 = NodeUtil.precedence(16);
    }

    @Test(timeout = 4000)
    public void test308346() throws Throwable {
        int int0 = NodeUtil.precedence(17);
    }

    @Test(timeout = 4000)
    public void test309347() throws Throwable {
        int int0 = NodeUtil.precedence(18);
    }

    @Test(timeout = 4000)
    public void test310348() throws Throwable {
        int int0 = NodeUtil.precedence(19);
    }

    @Test(timeout = 4000)
    public void test311349() throws Throwable {
        int int0 = NodeUtil.precedence(20);
    }

    @Test(timeout = 4000)
    public void test312350() throws Throwable {
        int int0 = NodeUtil.precedence(21);
    }

    @Test(timeout = 4000)
    public void test313351() throws Throwable {
        int int0 = NodeUtil.precedence(22);
    }

    @Test(timeout = 4000)
    public void test314352() throws Throwable {
        int int0 = NodeUtil.precedence(23);
    }

    @Test(timeout = 4000)
    public void test315353() throws Throwable {
        int int0 = NodeUtil.precedence(24);
    }

    @Test(timeout = 4000)
    public void test316354() throws Throwable {
        int int0 = NodeUtil.precedence(25);
    }

    @Test(timeout = 4000)
    public void test317355() throws Throwable {
        int int0 = NodeUtil.precedence(26);
    }

    @Test(timeout = 4000)
    public void test318356() throws Throwable {
        int int0 = NodeUtil.precedence(27);
    }

    @Test(timeout = 4000)
    public void test319357() throws Throwable {
        int int0 = NodeUtil.precedence(28);
    }

    @Test(timeout = 4000)
    public void test320358() throws Throwable {
        int int0 = NodeUtil.precedence(29);
    }

    @Test(timeout = 4000)
    public void test321359() throws Throwable {
        int int0 = NodeUtil.precedence(30);
    }

    @Test(timeout = 4000)
    public void test322360() throws Throwable {
        int int0 = NodeUtil.precedence(31);
    }

    @Test(timeout = 4000)
    public void test323361() throws Throwable {
        int int0 = NodeUtil.precedence(32);
    }

    @Test(timeout = 4000)
    public void test324362() throws Throwable {
        int int0 = NodeUtil.precedence(33);
    }

    @Test(timeout = 4000)
    public void test325363() throws Throwable {
        NodeUtil.precedence(34);
    }

    @Test(timeout = 4000)
    public void test326364() throws Throwable {
        int int0 = NodeUtil.precedence(35);
    }

    @Test(timeout = 4000)
    public void test327365() throws Throwable {
        NodeUtil.precedence(36);
    }

    @Test(timeout = 4000)
    public void test328366() throws Throwable {
        int int0 = NodeUtil.precedence(37);
    }

    @Test(timeout = 4000)
    public void test329367() throws Throwable {
        int int0 = NodeUtil.precedence(38);
    }

    @Test(timeout = 4000)
    public void test330368() throws Throwable {
        int int0 = NodeUtil.precedence(39);
    }

    @Test(timeout = 4000)
    public void test331369() throws Throwable {
        int int0 = NodeUtil.precedence(40);
    }

    @Test(timeout = 4000)
    public void test332370() throws Throwable {
        int int0 = NodeUtil.precedence(41);
    }

    @Test(timeout = 4000)
    public void test333371() throws Throwable {
        int int0 = NodeUtil.precedence(42);
    }

    @Test(timeout = 4000)
    public void test334372() throws Throwable {
        int int0 = NodeUtil.precedence(43);
    }

    @Test(timeout = 4000)
    public void test335373() throws Throwable {
        int int0 = NodeUtil.precedence(44);
    }

    @Test(timeout = 4000)
    public void test336374() throws Throwable {
        int int0 = NodeUtil.precedence(45);
    }

    @Test(timeout = 4000)
    public void test337375() throws Throwable {
        int int0 = NodeUtil.precedence(46);
    }

    @Test(timeout = 4000)
    public void test338376() throws Throwable {
        int int0 = NodeUtil.precedence(47);
    }

    @Test(timeout = 4000)
    public void test339377() throws Throwable {
        NodeUtil.precedence(48);
    }

    @Test(timeout = 4000)
    public void test340378() throws Throwable {
        NodeUtil.precedence(49);
    }

    @Test(timeout = 4000)
    public void test341379() throws Throwable {
        NodeUtil.precedence(50);
    }

    @Test(timeout = 4000)
    public void test342380() throws Throwable {
        int int0 = NodeUtil.precedence(51);
    }

    @Test(timeout = 4000)
    public void test343381() throws Throwable {
        int int0 = NodeUtil.precedence(52);
    }

    @Test(timeout = 4000)
    public void test344382() throws Throwable {
        NodeUtil.precedence(53);
    }

    @Test(timeout = 4000)
    public void test345383() throws Throwable {
        NodeUtil.precedence(54);
    }

    @Test(timeout = 4000)
    public void test346384() throws Throwable {
        NodeUtil.precedence(55);
    }

    @Test(timeout = 4000)
    public void test347385() throws Throwable {
        NodeUtil.precedence(57);
    }

    @Test(timeout = 4000)
    public void test348386() throws Throwable {
        NodeUtil.precedence(58);
    }

    @Test(timeout = 4000)
    public void test349387() throws Throwable {
        NodeUtil.precedence(59);
    }

    @Test(timeout = 4000)
    public void test350388() throws Throwable {
        NodeUtil.precedence(61);
    }

    @Test(timeout = 4000)
    public void test351389() throws Throwable {
        NodeUtil.precedence(62);
    }

    @Test(timeout = 4000)
    public void test352390() throws Throwable {
        int int0 = NodeUtil.precedence(63);
    }

    @Test(timeout = 4000)
    public void test353391() throws Throwable {
        int int0 = NodeUtil.precedence(64);
    }

    @Test(timeout = 4000)
    public void test354392() throws Throwable {
        NodeUtil.precedence(65);
    }

    @Test(timeout = 4000)
    public void test355393() throws Throwable {
        NodeUtil.precedence(66);
    }

    @Test(timeout = 4000)
    public void test356394() throws Throwable {
        NodeUtil.precedence(67);
    }

    @Test(timeout = 4000)
    public void test357395() throws Throwable {
        NodeUtil.precedence(68);
    }

    @Test(timeout = 4000)
    public void test358396() throws Throwable {
        NodeUtil.precedence(69);
    }

    @Test(timeout = 4000)
    public void test359397() throws Throwable {
        NodeUtil.precedence(70);
    }

    @Test(timeout = 4000)
    public void test360398() throws Throwable {
        NodeUtil.precedence(71);
    }

    @Test(timeout = 4000)
    public void test361399() throws Throwable {
        NodeUtil.precedence(72);
    }

    @Test(timeout = 4000)
    public void test362400() throws Throwable {
        NodeUtil.precedence(74);
    }

    @Test(timeout = 4000)
    public void test363401() throws Throwable {
        NodeUtil.precedence(75);
    }

    @Test(timeout = 4000)
    public void test364402() throws Throwable {
        NodeUtil.precedence(76);
    }

    @Test(timeout = 4000)
    public void test365403() throws Throwable {
        NodeUtil.precedence(77);
    }

    @Test(timeout = 4000)
    public void test366404() throws Throwable {
        NodeUtil.precedence(79);
    }

    @Test(timeout = 4000)
    public void test367405() throws Throwable {
        NodeUtil.precedence(80);
    }

    @Test(timeout = 4000)
    public void test368406() throws Throwable {
        NodeUtil.precedence(81);
    }

    @Test(timeout = 4000)
    public void test369407() throws Throwable {
        NodeUtil.precedence(82);
    }

    @Test(timeout = 4000)
    public void test370408() throws Throwable {
        NodeUtil.precedence(83);
    }

    @Test(timeout = 4000)
    public void test371409() throws Throwable {
        NodeUtil.precedence(84);
    }

    @Test(timeout = 4000)
    public void test372410() throws Throwable {
        int int0 = NodeUtil.precedence(85);
    }

    @Test(timeout = 4000)
    public void test373411() throws Throwable {
        int int0 = NodeUtil.precedence(86);
    }

    @Test(timeout = 4000)
    public void test374412() throws Throwable {
        int int0 = NodeUtil.precedence(87);
    }

    @Test(timeout = 4000)
    public void test375413() throws Throwable {
        int int0 = NodeUtil.precedence(88);
    }

    @Test(timeout = 4000)
    public void test376414() throws Throwable {
        int int0 = NodeUtil.precedence(89);
    }

    @Test(timeout = 4000)
    public void test377415() throws Throwable {
        int int0 = NodeUtil.precedence(90);
    }

    @Test(timeout = 4000)
    public void test378416() throws Throwable {
        int int0 = NodeUtil.precedence(91);
    }

    @Test(timeout = 4000)
    public void test379417() throws Throwable {
        int int0 = NodeUtil.precedence(92);
    }

    @Test(timeout = 4000)
    public void test380418() throws Throwable {
        int int0 = NodeUtil.precedence(93);
    }

    @Test(timeout = 4000)
    public void test381419() throws Throwable {
        int int0 = NodeUtil.precedence(94);
    }

    @Test(timeout = 4000)
    public void test382420() throws Throwable {
        int int0 = NodeUtil.precedence(95);
    }

    @Test(timeout = 4000)
    public void test383421() throws Throwable {
        int int0 = NodeUtil.precedence(96);
    }

    @Test(timeout = 4000)
    public void test384422() throws Throwable {
        int int0 = NodeUtil.precedence(97);
    }

    @Test(timeout = 4000)
    public void test385423() throws Throwable {
        int int0 = NodeUtil.precedence(98);
    }

    @Test(timeout = 4000)
    public void test386424() throws Throwable {
        NodeUtil.precedence(99);
    }

    @Test(timeout = 4000)
    public void test387425() throws Throwable {
        int int0 = NodeUtil.precedence(100);
    }

    @Test(timeout = 4000)
    public void test388426() throws Throwable {
        int int0 = NodeUtil.precedence(101);
    }

    @Test(timeout = 4000)
    public void test389427() throws Throwable {
        int int0 = NodeUtil.precedence(102);
    }

    @Test(timeout = 4000)
    public void test390428() throws Throwable {
        NodeUtil.precedence(104);
    }

    @Test(timeout = 4000)
    public void test391429() throws Throwable {
        int int0 = NodeUtil.precedence(105);
    }

    @Test(timeout = 4000)
    public void test392430() throws Throwable {
        NodeUtil.precedence(106);
    }

    @Test(timeout = 4000)
    public void test393431() throws Throwable {
        NodeUtil.precedence(107);
    }

    @Test(timeout = 4000)
    public void test394432() throws Throwable {
        NodeUtil.precedence(108);
    }

    @Test(timeout = 4000)
    public void test395433() throws Throwable {
        NodeUtil.precedence(109);
    }

    @Test(timeout = 4000)
    public void test396434() throws Throwable {
        NodeUtil.precedence(110);
    }

    @Test(timeout = 4000)
    public void test397435() throws Throwable {
        NodeUtil.precedence(111);
    }

    @Test(timeout = 4000)
    public void test398436() throws Throwable {
        NodeUtil.precedence(112);
    }

    @Test(timeout = 4000)
    public void test399437() throws Throwable {
        NodeUtil.precedence(113);
    }

    @Test(timeout = 4000)
    public void test400438() throws Throwable {
        NodeUtil.precedence(114);
    }

    @Test(timeout = 4000)
    public void test401439() throws Throwable {
        NodeUtil.precedence(115);
    }

    @Test(timeout = 4000)
    public void test402440() throws Throwable {
        NodeUtil.precedence(116);
    }

    @Test(timeout = 4000)
    public void test403441() throws Throwable {
        NodeUtil.precedence(117);
    }

    @Test(timeout = 4000)
    public void test404442() throws Throwable {
        NodeUtil.precedence(118);
    }

    @Test(timeout = 4000)
    public void test405443() throws Throwable {
        NodeUtil.precedence(119);
    }

    @Test(timeout = 4000)
    public void test406444() throws Throwable {
        NodeUtil.precedence(120);
    }

    @Test(timeout = 4000)
    public void test407445() throws Throwable {
        NodeUtil.precedence(121);
    }

    @Test(timeout = 4000)
    public void test408446() throws Throwable {
        int int0 = NodeUtil.precedence(122);
    }

    @Test(timeout = 4000)
    public void test409447() throws Throwable {
        NodeUtil.precedence(123);
    }

    @Test(timeout = 4000)
    public void test410448() throws Throwable {
        int int0 = NodeUtil.precedence(124);
    }

    @Test(timeout = 4000)
    public void test411449() throws Throwable {
        NodeUtil.precedence(125);
    }

    @Test(timeout = 4000)
    public void test412450() throws Throwable {
        NodeUtil.precedence(126);
    }

    @Test(timeout = 4000)
    public void test413451() throws Throwable {
        NodeUtil.precedence(127);
    }

    @Test(timeout = 4000)
    public void test414452() throws Throwable {
        NodeUtil.precedence(128);
    }

    @Test(timeout = 4000)
    public void test415453() throws Throwable {
        NodeUtil.precedence(129);
    }

    @Test(timeout = 4000)
    public void test416454() throws Throwable {
        NodeUtil.precedence(130);
    }

    @Test(timeout = 4000)
    public void test417455() throws Throwable {
        NodeUtil.precedence(131);
    }

    @Test(timeout = 4000)
    public void test418456() throws Throwable {
        NodeUtil.precedence(132);
    }

    @Test(timeout = 4000)
    public void test419457() throws Throwable {
        NodeUtil.precedence(133);
    }

    @Test(timeout = 4000)
    public void test420458() throws Throwable {
        NodeUtil.precedence(134);
    }

    @Test(timeout = 4000)
    public void test421459() throws Throwable {
        NodeUtil.precedence(135);
    }

    @Test(timeout = 4000)
    public void test422460() throws Throwable {
        NodeUtil.precedence(136);
    }

    @Test(timeout = 4000)
    public void test423461() throws Throwable {
        NodeUtil.precedence(137);
    }

    @Test(timeout = 4000)
    public void test424462() throws Throwable {
        NodeUtil.precedence(138);
    }

    @Test(timeout = 4000)
    public void test425463() throws Throwable {
        NodeUtil.precedence(139);
    }

    @Test(timeout = 4000)
    public void test426464() throws Throwable {
        NodeUtil.precedence(140);
    }

    @Test(timeout = 4000)
    public void test427465() throws Throwable {
        NodeUtil.precedence(141);
    }

    @Test(timeout = 4000)
    public void test428466() throws Throwable {
        NodeUtil.precedence(142);
    }

    @Test(timeout = 4000)
    public void test429467() throws Throwable {
        NodeUtil.precedence(143);
    }

    @Test(timeout = 4000)
    public void test430468() throws Throwable {
        NodeUtil.precedence(144);
    }

    @Test(timeout = 4000)
    public void test431469() throws Throwable {
        NodeUtil.precedence(145);
    }

    @Test(timeout = 4000)
    public void test432470() throws Throwable {
        NodeUtil.precedence(146);
    }

    @Test(timeout = 4000)
    public void test433471() throws Throwable {
        NodeUtil.precedence(147);
    }

    @Test(timeout = 4000)
    public void test434472() throws Throwable {
        NodeUtil.precedence(148);
    }

    @Test(timeout = 4000)
    public void test435473() throws Throwable {
        NodeUtil.precedence(149);
    }

    @Test(timeout = 4000)
    public void test436474() throws Throwable {
        NodeUtil.precedence(150);
    }

    @Test(timeout = 4000)
    public void test437475() throws Throwable {
        NodeUtil.precedence(151);
    }

    @Test(timeout = 4000)
    public void test438476() throws Throwable {
        NodeUtil.precedence(152);
    }

    @Test(timeout = 4000)
    public void test439477() throws Throwable {
        int int0 = NodeUtil.precedence(154);
    }

    @Test(timeout = 4000)
    public void test440478() throws Throwable {
        NodeUtil.precedence(4);
    }

    @Test(timeout = 4000)
    public void test441479() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "49Xi}");
        boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
    }

    @Test(timeout = 4000)
    public void test442480() throws Throwable {
        Node node0 = new Node(31);
        Node node1 = new Node(41, node0);
        String string0 = NodeUtil.getArrayElementStringValue(node1);
    }

    @Test(timeout = 4000)
    public void test443481() throws Throwable {
        Node node0 = new Node(85);
        NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test444482() throws Throwable {
        Node node0 = new Node(86);
        NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test445483() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test446484() throws Throwable {
        Node node0 = new Node(100);
        NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test447485() throws Throwable {
        Node node0 = new Node(16, 16, 16);
        Node node1 = new Node(101, node0, 51, 16);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test448486() throws Throwable {
        Node node0 = new Node(85);
        Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
        NodeUtil.anyResultsMatch(node0, predicate0);
    }

    @Test(timeout = 4000)
    public void test449487() throws Throwable {
        Node node0 = new Node(86);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.anyResultsMatch(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test450488() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        NodeUtil.anyResultsMatch(node0, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test451489() throws Throwable {
        Node node0 = new Node(100, 16, 113);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.anyResultsMatch(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test452490() throws Throwable {
        Node node0 = new Node(159, 16, 16);
        Node node1 = new Node(101, node0, 51, 16);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.anyResultsMatch(node1, nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test453491() throws Throwable {
        Node node0 = new Node(156, 16, (-937));
        Node node1 = new Node(101, node0, 51, 16);
        Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
        boolean boolean0 = NodeUtil.anyResultsMatch(node1, predicate0);
    }

    @Test(timeout = 4000)
    public void test454492() throws Throwable {
        Node node0 = new Node(9, 113, 9);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test455493() throws Throwable {
        Node node0 = new Node(11);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test456494() throws Throwable {
        Node node0 = new Node(18);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test457495() throws Throwable {
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        Node node0 = Node.newString(19, "8B|=1yD;.lXT(FYG.", 19, 2853);
        boolean boolean0 = nodeUtil_NumbericResultPredicate0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test458496() throws Throwable {
        Node node0 = new Node(63);
        Node node1 = new Node(20, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test459497() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(23, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test459498() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(23, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test460499() throws Throwable {
        Node node0 = new Node(25, 1, 31);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test461500() throws Throwable {
        Node node0 = new Node(28, 28, 28);
        boolean boolean0 = NodeUtil.mayBeString(node0, false);
    }

    @Test(timeout = 4000)
    public void test462501() throws Throwable {
        Node node0 = new Node(3644, (-937), 3644);
        Node node1 = new Node(29, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test463502() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity");
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test464503() throws Throwable {
        Node node0 = Node.newNumber(0.0, 79, 80);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test465504() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test466505() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    }

    @Test(timeout = 4000)
    public void test467506() throws Throwable {
        Node node0 = new Node(21);
        Node node1 = NodeUtil.newVarNode(",[F\"q", node0);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test467507() throws Throwable {
        Node node0 = new Node(21);
        Node node1 = NodeUtil.newVarNode(",[F\"q", node0);
        node0.addChildToFront(node1);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test468508() throws Throwable {
        Node node0 = new Node(101);
        Node node1 = new Node(12, node0, 44, 44);
        boolean boolean0 = NodeUtil.isBooleanResult(node1);
    }

    @Test(timeout = 4000)
    public void test469509() throws Throwable {
        Node node0 = new Node((-2432));
        Node node1 = new Node(13, node0, 40, (-223));
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test470510() throws Throwable {
        Node node0 = new Node(14);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test471511() throws Throwable {
        Node node0 = new Node(137, 137, 137);
        Node node1 = new Node(15, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test472512() throws Throwable {
        Node node0 = new Node(17, 2371, 2371);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        int int0 = NodeUtil.getCount(node0, nodeUtil_BooleanResultPredicate0, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test473513() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = new Node(18, node0);
        boolean boolean0 = NodeUtil.isBooleanResult(node1);
    }

    @Test(timeout = 4000)
    public void test474514() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(23, node0);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
        node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test474515() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(23, node0);
        boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    }

    @Test(timeout = 4000)
    public void test475516() throws Throwable {
        Node node0 = Node.newString(24, "y5X");
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test476517() throws Throwable {
        Node node0 = new Node(25, 2, 31);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test477518() throws Throwable {
        Node node0 = new Node(28);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test478519() throws Throwable {
        Node node0 = Node.newString("-&<&");
        Node node1 = new Node(29, node0);
        boolean boolean0 = NodeUtil.isBooleanResult(node1);
    }

    @Test(timeout = 4000)
    public void test479520() throws Throwable {
        Node node0 = new Node(74);
        Node node1 = new Node(31, node0, node0, 12, 47);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test480521() throws Throwable {
        Node node0 = new Node(32, 2365, 2365);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        int int0 = NodeUtil.getCount(node0, nodeUtil_BooleanResultPredicate0, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test481522() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.JsMessage$1");
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test481523() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.JsMessage$1");
        boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    }

    @Test(timeout = 4000)
    public void test482524() throws Throwable {
        Node node0 = new Node(34);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test483525() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test484526() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ">>>=");
        Node node1 = new Node(36, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isBooleanResult(node1);
    }

    @Test(timeout = 4000)
    public void test485527() throws Throwable {
        Node node0 = new Node(173);
        Node node1 = new Node(37, node0, node0, node0);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test486528() throws Throwable {
        Node node0 = Node.newNumber(1.0, (-4121), (-4121));
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 38, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test487529() throws Throwable {
        Node node0 = Node.newString("_or{c/h!jMM6", 85, 85);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test488530() throws Throwable {
        Node node0 = new Node((-2385), 17, 112);
        Node node1 = new Node(41, node0);
        boolean boolean0 = NodeUtil.mayBeString(node1);
    }

    @Test(timeout = 4000)
    public void test489531() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(42, node0);
        boolean boolean0 = NodeUtil.isBooleanResult(node1);
    }

    @Test(timeout = 4000)
    public void test489532() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(42, node0);
        boolean boolean0 = NodeUtil.isBooleanResult(node1);
        node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test490533() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test491534() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(45, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
        node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test491535() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(45, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test492536() throws Throwable {
        Node node0 = Node.newString(46, "JSCompiler_returnArg", 109, 32);
        boolean boolean0 = NodeUtil.isBooleanResult(node0);
    }

    @Test(timeout = 4000)
    public void test493537() throws Throwable {
        Node node0 = new Node(47, 2076, 16);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 118, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test494538() throws Throwable {
        Node node0 = new Node(3, 3, 3);
        Node node1 = new Node(48, node0, 54, 8);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test495539() throws Throwable {
        Node node0 = new Node(49, 31, 51);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 16, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test496540() throws Throwable {
        Node node0 = new Node(50, 50, 50);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test497541() throws Throwable {
        Node node0 = new Node(0, 0, 1551);
        Node node1 = new Node(51, node0, node0, node0, node0, 1866, 14);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
        boolean boolean0 = nodeUtil_BooleanResultPredicate0.apply(node1);
    }

    @Test(timeout = 4000)
    public void test498542() throws Throwable {
        Node node0 = new Node((-1305), (-1305), (-1305));
        Node node1 = new Node(52, node0);
        boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    }

    @Test(timeout = 4000)
    public void test499543() throws Throwable {
        Node node0 = new Node(122, 122, 122);
        boolean boolean0 = NodeUtil.mayBeString(node0);
    }

    @Test(timeout = 4000)
    public void test500544() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(9);
    }

    @Test(timeout = 4000)
    public void test501545() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(32);
    }

    @Test(timeout = 4000)
    public void test502546() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(23);
    }

    @Test(timeout = 4000)
    public void test503547() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(100);
    }

    @Test(timeout = 4000)
    public void test504548() throws Throwable {
        boolean boolean0 = NodeUtil.isAssociative(101);
    }

    @Test(timeout = 4000)
    public void test505549() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(9);
    }

    @Test(timeout = 4000)
    public void test506550() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(24);
    }

    @Test(timeout = 4000)
    public void test507551() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(10);
    }

    @Test(timeout = 4000)
    public void test508552() throws Throwable {
        boolean boolean0 = NodeUtil.isCommutative(23);
    }

    @Test(timeout = 4000)
    public void test509553() throws Throwable {
        Node node0 = new Node(89);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test510554() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test511555() throws Throwable {
        Node node0 = new Node(88, 88, 88);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test512556() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test512557() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        node0.setType(92);
        int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    }

    @Test(timeout = 4000)
    public void test513558() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = NodeUtil.referencesThis(node0);
    }

    @Test(timeout = 4000)
    public void test514559() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.DefaultPassConfig$60", "j:Q:");
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test515560() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("null");
        ExploitAssigns exploitAssigns0 = new ExploitAssigns();
        Node node1 = exploitAssigns0.optimizeSubtree(node0);
        node1.isEmpty();
    }

    @Test(timeout = 4000)
    public void test516561() throws Throwable {
        Node node0 = new Node(76);
        boolean boolean0 = NodeUtil.isExprCall(node0);
    }

    @Test(timeout = 4000)
    public void test517562() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        boolean boolean0 = NodeUtil.isForIn(node0);
    }

    @Test(timeout = 4000)
    public void test518563() throws Throwable {
        Node node0 = Node.newString("m");
        Node node1 = new Node(113, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
    }

    @Test(timeout = 4000)
    public void test519564() throws Throwable {
        Node node0 = new Node(156);
        Node node1 = new Node(39, node0, 1, 53);
        boolean boolean0 = NodeUtil.isWithinLoop(node0);
    }

    @Test(timeout = 4000)
    public void test520565() throws Throwable {
        Node node0 = Node.newString("m");
        Node node1 = new Node(113, node0, node0, node0, node0);
        Node node2 = NodeUtil.getLoopCodeBlock(node1);
        node2.isObjectLit();
    }

    @Test(timeout = 4000)
    public void test521566() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test522567() throws Throwable {
        Node node0 = new Node(115, 115, 115);
        Node node1 = NodeUtil.getLoopCodeBlock(node0);
    }

    @Test(timeout = 4000)
    public void test523568() throws Throwable {
        Node node0 = new Node(77);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test524569() throws Throwable {
        Node node0 = new Node(108, (-2447), (-937));
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test525570() throws Throwable {
        Node node0 = new Node(110, 957, 957);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test526571() throws Throwable {
        Node node0 = new Node(112, (-937), (-1687));
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test527572() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test528573() throws Throwable {
        Node node0 = new Node(115);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test529574() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test530575() throws Throwable {
        Node node0 = Node.newString(120, "F");
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test531576() throws Throwable {
        Node node0 = Node.newString(126, ")UCvX{#oj6),g,7i5_", 61, 131);
        boolean boolean0 = NodeUtil.isControlStructure(node0);
    }

    @Test(timeout = 4000)
    public void test532577() throws Throwable {
        Node node0 = new Node(77, 77, 77);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test533578() throws Throwable {
        Node node0 = new Node(108);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test534579() throws Throwable {
        Node node0 = new Node(112);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test535580() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test536581() throws Throwable {
        Node node0 = Node.newString(126, ")UCvX{#oj6),g,7i5_", 61, 131);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test537582() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        NodeUtil.isControlStructureCodeBlock(node0, node0);
    }

    @Test(timeout = 4000)
    public void test538583() throws Throwable {
        Node node0 = new Node(115, 26, 838);
        boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
    }

    @Test(timeout = 4000)
    public void test539584() throws Throwable {
        Node node0 = new Node(43, 43, 43);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test540585() throws Throwable {
        Node node0 = new Node(112, 2165, (-1687));
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test541586() throws Throwable {
        Node node0 = new Node(113);
        Node node1 = NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test542587() throws Throwable {
        Node node0 = new Node(115);
        NodeUtil.getConditionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test543588() throws Throwable {
        Node node0 = new Node(139);
        Node node1 = new Node(125, node0, node0, node0);
        boolean boolean0 = NodeUtil.isStatementBlock(node1);
    }

    @Test(timeout = 4000)
    public void test544589() throws Throwable {
        Node node0 = new Node(125, 2371, 2371);
        boolean boolean0 = NodeUtil.isStatementParent(node0);
    }

    @Test(timeout = 4000)
    public void test545590() throws Throwable {
        Node node0 = new Node(132, 2371, 2371);
        boolean boolean0 = NodeUtil.isStatementParent(node0);
    }

    @Test(timeout = 4000)
    public void test546591() throws Throwable {
        Node node0 = new Node(112, (-1687), (-1687));
        Node node1 = new Node(55, node0, node0, 1, 4113);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test547592() throws Throwable {
        Node node0 = new Node(32, 2365, 2365);
        boolean boolean0 = NodeUtil.isReferenceName(node0);
    }

    @Test(timeout = 4000)
    public void test548593() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString(154, "", 154, 154);
        Node node1 = NodeUtil.newName(googleCodingConvention0, "", node0);
        boolean boolean0 = NodeUtil.isReferenceName(node1);
    }

    @Test(timeout = 4000)
    public void test549594() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = Node.newString("qD Q46J`b", (-9), (-9));
        Node node1 = NodeUtil.newName(googleCodingConvention0, "qD Q46J`b", node0);
        boolean boolean0 = NodeUtil.isReferenceName(node1);
    }

    @Test(timeout = 4000)
    public void test550595() throws Throwable {
        Node node0 = new Node(156, 16, (-914));
        Node node1 = new Node(101, node0, 51, 16);
        Compiler compiler0 = new Compiler();
        Node node2 = compiler0.parseTestCode("779/J)");
        NodeUtil.removeChild(node2, node0);
    }

    @Test(timeout = 4000)
    public void test551596() throws Throwable {
        Node node0 = new Node(85);
        Node node1 = new Node(76, node0, 1, 41);
        NodeUtil.removeChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test552597() throws Throwable {
        Node node0 = new Node(77, 8199, 8199);
        NodeUtil.maybeAddFinally(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test552598() throws Throwable {
        Node node0 = new Node(77, 8199, 8199);
        NodeUtil.maybeAddFinally(node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test553599() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(53, node0, (-824), 55);
        boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test554600() throws Throwable {
        Node node0 = Node.newString("d_I&9AJW][", 64, 64);
        boolean boolean0 = NodeUtil.isBleedingFunctionName(node0);
    }

    @Test(timeout = 4000)
    public void test555601() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "f");
        NodeUtil.isBleedingFunctionName(node0);
    }

    @Test(timeout = 4000)
    public void test556602() throws Throwable {
        Node node0 = new Node(58);
        boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
    }

    @Test(timeout = 4000)
    public void test557603() throws Throwable {
        Node node0 = Node.newString(63, "!ESQQnJgD/{Vz+32GL", 110, 4367);
        Node node1 = new Node(37, node0, node0, 39, (-31));
        boolean boolean0 = NodeUtil.isObjectCallMethod(node1, "!ESQQnJgD/{Vz+32GL");
    }

    @Test(timeout = 4000)
    public void test558604() throws Throwable {
        Node node0 = new Node(86, 86, 86);
        boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
    }

    @Test(timeout = 4000)
    public void test559605() throws Throwable {
        Node node0 = new Node(3);
        Node node1 = NodeUtil.newVarNode(".", node0);
        boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test559606() throws Throwable {
        Node node0 = new Node(3);
        Node node1 = NodeUtil.newVarNode(".", node0);
        boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node1);
    }

    @Test(timeout = 4000)
    public void test560607() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "M4aU*3HqbT!8cIf");
        boolean boolean0 = NodeUtil.isLValue(node0);
    }

    @Test(timeout = 4000)
    public void test561608() throws Throwable {
        Node node0 = new Node(8257);
        NodeUtil.isLValue(node0);
    }

    @Test(timeout = 4000)
    public void test562609() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(35, node0);
        boolean boolean0 = NodeUtil.isLValue(node1);
        node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test562610() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(35, node0);
        boolean boolean0 = NodeUtil.isLValue(node1);
    }

    @Test(timeout = 4000)
    public void test563611() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ".%");
        Node node1 = new Node(19, node0, node0, 40, 1675);
        boolean boolean0 = NodeUtil.isLValue(node0);
    }

    @Test(timeout = 4000)
    public void test563612() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ".%");
        Node node1 = new Node(19, node0, node0, 40, 1675);
        boolean boolean0 = NodeUtil.isLValue(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test564613() throws Throwable {
        Node node0 = new Node(147);
        boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    }

    @Test(timeout = 4000)
    public void test565614() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        Node node1 = new Node(49, node0, node0, 1545, 49);
        NodeUtil.getBestLValueName(node0);
    }

    @Test(timeout = 4000)
    public void test566615() throws Throwable {
        Node node0 = new Node(147);
        NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test567616() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test568617() throws Throwable {
        Node node0 = new Node(154);
        NodeUtil.getObjectLitKeyName(node0);
    }

    @Test(timeout = 4000)
    public void test569618() throws Throwable {
        Node node0 = new Node(116, 116, 116);
        JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test570619() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseVoidType();
        Node node0 = new Node(105);
        JSType jSType1 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, jSType0);
        jSType1.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test571620() throws Throwable {
        Node node0 = new Node(147, 2588, 2588);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    }

    @Test(timeout = 4000)
    public void test572621() throws Throwable {
        Node node0 = new Node(58, 1099, 1099);
        boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    }

    @Test(timeout = 4000)
    public void test573622() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(9);
    }

    @Test(timeout = 4000)
    public void test574623() throws Throwable {
        String string0 = NodeUtil.opToStr(45);
    }

    @Test(timeout = 4000)
    public void test575624() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(10);
    }

    @Test(timeout = 4000)
    public void test576625() throws Throwable {
        String string0 = NodeUtil.opToStr(11);
    }

    @Test(timeout = 4000)
    public void test577626() throws Throwable {
        String string0 = NodeUtil.opToStr(12);
    }

    @Test(timeout = 4000)
    public void test578627() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(13);
    }

    @Test(timeout = 4000)
    public void test579628() throws Throwable {
        String string0 = NodeUtil.opToStr(14);
    }

    @Test(timeout = 4000)
    public void test580629() throws Throwable {
        String string0 = NodeUtil.opToStr(15);
    }

    @Test(timeout = 4000)
    public void test581630() throws Throwable {
        String string0 = NodeUtil.opToStr(16);
    }

    @Test(timeout = 4000)
    public void test582631() throws Throwable {
        String string0 = NodeUtil.opToStr(17);
    }

    @Test(timeout = 4000)
    public void test583632() throws Throwable {
        String string0 = NodeUtil.opToStr(18);
    }

    @Test(timeout = 4000)
    public void test584633() throws Throwable {
        String string0 = NodeUtil.opToStr(19);
    }

    @Test(timeout = 4000)
    public void test585634() throws Throwable {
        String string0 = NodeUtil.opToStr(20);
    }

    @Test(timeout = 4000)
    public void test586635() throws Throwable {
        String string0 = NodeUtil.opToStr(21);
    }

    @Test(timeout = 4000)
    public void test587636() throws Throwable {
        String string0 = NodeUtil.opToStr(22);
    }

    @Test(timeout = 4000)
    public void test588637() throws Throwable {
        String string0 = NodeUtil.opToStr(23);
    }

    @Test(timeout = 4000)
    public void test589638() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(24);
    }

    @Test(timeout = 4000)
    public void test590639() throws Throwable {
        String string0 = NodeUtil.opToStr(25);
    }

    @Test(timeout = 4000)
    public void test591640() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(26);
    }

    @Test(timeout = 4000)
    public void test592641() throws Throwable {
        String string0 = NodeUtil.opToStr(27);
    }

    @Test(timeout = 4000)
    public void test593642() throws Throwable {
        String string0 = NodeUtil.opToStr(28);
    }

    @Test(timeout = 4000)
    public void test594643() throws Throwable {
        String string0 = NodeUtil.opToStr(29);
    }

    @Test(timeout = 4000)
    public void test595645() throws Throwable {
        NodeUtil.opToStrNoFail(30);
    }

    @Test(timeout = 4000)
    public void test596646() throws Throwable {
        String string0 = NodeUtil.opToStr(31);
    }

    @Test(timeout = 4000)
    public void test597647() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(32);
    }

    @Test(timeout = 4000)
    public void test598648() throws Throwable {
        String string0 = NodeUtil.opToStr(33);
    }

    @Test(timeout = 4000)
    public void test599649() throws Throwable {
        String string0 = NodeUtil.opToStr(34);
    }

    @Test(timeout = 4000)
    public void test600650() throws Throwable {
        String string0 = NodeUtil.opToStr(35);
    }

    @Test(timeout = 4000)
    public void test601651() throws Throwable {
        NodeUtil.opToStrNoFail(36);
    }

    @Test(timeout = 4000)
    public void test602652() throws Throwable {
        String string0 = NodeUtil.opToStr(37);
    }

    @Test(timeout = 4000)
    public void test603653() throws Throwable {
        String string0 = NodeUtil.opToStr(38);
    }

    @Test(timeout = 4000)
    public void test604654() throws Throwable {
        NodeUtil.opToStrNoFail(39);
    }

    @Test(timeout = 4000)
    public void test605655() throws Throwable {
        String string0 = NodeUtil.opToStr(40);
    }

    @Test(timeout = 4000)
    public void test606656() throws Throwable {
        String string0 = NodeUtil.opToStr(41);
    }

    @Test(timeout = 4000)
    public void test607657() throws Throwable {
        String string0 = NodeUtil.opToStr(42);
    }

    @Test(timeout = 4000)
    public void test608658() throws Throwable {
        String string0 = NodeUtil.opToStr(43);
    }

    @Test(timeout = 4000)
    public void test609659() throws Throwable {
        String string0 = NodeUtil.opToStr(44);
    }

    @Test(timeout = 4000)
    public void test610660() throws Throwable {
        String string0 = NodeUtil.opToStr(46);
    }

    @Test(timeout = 4000)
    public void test611661() throws Throwable {
        String string0 = NodeUtil.opToStr(47);
    }

    @Test(timeout = 4000)
    public void test612662() throws Throwable {
        NodeUtil.opToStrNoFail(48);
    }

    @Test(timeout = 4000)
    public void test613663() throws Throwable {
        String string0 = NodeUtil.opToStr(49);
    }

    @Test(timeout = 4000)
    public void test614664() throws Throwable {
        String string0 = NodeUtil.opToStr(50);
    }

    @Test(timeout = 4000)
    public void test615665() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(51);
    }

    @Test(timeout = 4000)
    public void test616666() throws Throwable {
        String string0 = NodeUtil.opToStr(52);
    }

    @Test(timeout = 4000)
    public void test617667() throws Throwable {
        String string0 = NodeUtil.opToStr(53);
    }

    @Test(timeout = 4000)
    public void test618668() throws Throwable {
        String string0 = NodeUtil.opToStr(54);
    }

    @Test(timeout = 4000)
    public void test619669() throws Throwable {
        NodeUtil.opToStrNoFail(55);
    }

    @Test(timeout = 4000)
    public void test620670() throws Throwable {
        String string0 = NodeUtil.opToStr(56);
    }

    @Test(timeout = 4000)
    public void test621671() throws Throwable {
        String string0 = NodeUtil.opToStr(57);
    }

    @Test(timeout = 4000)
    public void test622672() throws Throwable {
        String string0 = NodeUtil.opToStr(58);
    }

    @Test(timeout = 4000)
    public void test623673() throws Throwable {
        String string0 = NodeUtil.opToStr(59);
    }

    @Test(timeout = 4000)
    public void test624674() throws Throwable {
        NodeUtil.opToStrNoFail('<');
    }

    @Test(timeout = 4000)
    public void test625675() throws Throwable {
        String string0 = NodeUtil.opToStr(61);
    }

    @Test(timeout = 4000)
    public void test626676() throws Throwable {
        NodeUtil.opToStrNoFail(62);
    }

    @Test(timeout = 4000)
    public void test627677() throws Throwable {
        String string0 = NodeUtil.opToStr(63);
    }

    @Test(timeout = 4000)
    public void test628678() throws Throwable {
        NodeUtil.opToStrNoFail(64);
    }

    @Test(timeout = 4000)
    public void test629679() throws Throwable {
        String string0 = NodeUtil.opToStr(65);
    }

    @Test(timeout = 4000)
    public void test630680() throws Throwable {
        NodeUtil.opToStrNoFail(66);
    }

    @Test(timeout = 4000)
    public void test631681() throws Throwable {
        String string0 = NodeUtil.opToStr(67);
    }

    @Test(timeout = 4000)
    public void test632682() throws Throwable {
        String string0 = NodeUtil.opToStr(68);
    }

    @Test(timeout = 4000)
    public void test633683() throws Throwable {
        String string0 = NodeUtil.opToStr(70);
    }

    @Test(timeout = 4000)
    public void test634684() throws Throwable {
        String string0 = NodeUtil.opToStr(71);
    }

    @Test(timeout = 4000)
    public void test635685() throws Throwable {
        NodeUtil.opToStrNoFail(72);
    }

    @Test(timeout = 4000)
    public void test636686() throws Throwable {
        String string0 = NodeUtil.opToStr(73);
    }

    @Test(timeout = 4000)
    public void test637687() throws Throwable {
        String string0 = NodeUtil.opToStr(74);
    }

    @Test(timeout = 4000)
    public void test638688() throws Throwable {
        String string0 = NodeUtil.opToStr(75);
    }

    @Test(timeout = 4000)
    public void test639689() throws Throwable {
        String string0 = NodeUtil.opToStr(76);
    }

    @Test(timeout = 4000)
    public void test640690() throws Throwable {
        String string0 = NodeUtil.opToStr(77);
    }

    @Test(timeout = 4000)
    public void test641691() throws Throwable {
        String string0 = NodeUtil.opToStr(78);
    }

    @Test(timeout = 4000)
    public void test642692() throws Throwable {
        NodeUtil.opToStrNoFail(79);
    }

    @Test(timeout = 4000)
    public void test643693() throws Throwable {
        String string0 = NodeUtil.opToStr(80);
    }

    @Test(timeout = 4000)
    public void test644694() throws Throwable {
        String string0 = NodeUtil.opToStr(81);
    }

    @Test(timeout = 4000)
    public void test645695() throws Throwable {
        String string0 = NodeUtil.opToStr(83);
    }

    @Test(timeout = 4000)
    public void test646696() throws Throwable {
        String string0 = NodeUtil.opToStr(84);
    }

    @Test(timeout = 4000)
    public void test647697() throws Throwable {
        String string0 = NodeUtil.opToStr(85);
    }

    @Test(timeout = 4000)
    public void test648698() throws Throwable {
        String string0 = NodeUtil.opToStr(86);
    }

    @Test(timeout = 4000)
    public void test649699() throws Throwable {
        String string0 = NodeUtil.opToStr(87);
    }

    @Test(timeout = 4000)
    public void test650700() throws Throwable {
        String string0 = NodeUtil.opToStr(88);
    }

    @Test(timeout = 4000)
    public void test651701() throws Throwable {
        String string0 = NodeUtil.opToStr(89);
    }

    @Test(timeout = 4000)
    public void test652702() throws Throwable {
        String string0 = NodeUtil.opToStr(90);
    }

    @Test(timeout = 4000)
    public void test653703() throws Throwable {
        String string0 = NodeUtil.opToStr(91);
    }

    @Test(timeout = 4000)
    public void test654704() throws Throwable {
        String string0 = NodeUtil.opToStr(92);
    }

    @Test(timeout = 4000)
    public void test655705() throws Throwable {
        String string0 = NodeUtil.opToStr(93);
    }

    @Test(timeout = 4000)
    public void test656706() throws Throwable {
        String string0 = NodeUtil.opToStrNoFail(94);
    }

    @Test(timeout = 4000)
    public void test657707() throws Throwable {
        String string0 = NodeUtil.opToStr(95);
    }

    @Test(timeout = 4000)
    public void test658708() throws Throwable {
        String string0 = NodeUtil.opToStr(96);
    }

    @Test(timeout = 4000)
    public void test659709() throws Throwable {
        String string0 = NodeUtil.opToStr(97);
    }

    @Test(timeout = 4000)
    public void test660710() throws Throwable {
        String string0 = NodeUtil.opToStr(98);
    }

    @Test(timeout = 4000)
    public void test661711() throws Throwable {
        String string0 = NodeUtil.opToStr(99);
    }

    @Test(timeout = 4000)
    public void test662712() throws Throwable {
        String string0 = NodeUtil.opToStr(100);
    }

    @Test(timeout = 4000)
    public void test663713() throws Throwable {
        String string0 = NodeUtil.opToStr(101);
    }

    @Test(timeout = 4000)
    public void test664714() throws Throwable {
        NodeUtil.opToStrNoFail(102);
    }

    @Test(timeout = 4000)
    public void test665715() throws Throwable {
        String string0 = NodeUtil.opToStr(103);
    }

    @Test(timeout = 4000)
    public void test666716() throws Throwable {
        String string0 = NodeUtil.opToStr(104);
    }

    @Test(timeout = 4000)
    public void test667717() throws Throwable {
        String string0 = NodeUtil.opToStr(105);
    }

    @Test(timeout = 4000)
    public void test668718() throws Throwable {
        String string0 = NodeUtil.opToStr(106);
    }

    @Test(timeout = 4000)
    public void test669719() throws Throwable {
        NodeUtil.opToStrNoFail(107);
    }

    @Test(timeout = 4000)
    public void test670720() throws Throwable {
        String string0 = NodeUtil.opToStr(108);
    }

    @Test(timeout = 4000)
    public void test671721() throws Throwable {
        String string0 = NodeUtil.opToStr(109);
    }

    @Test(timeout = 4000)
    public void test672722() throws Throwable {
        String string0 = NodeUtil.opToStr(110);
    }

    @Test(timeout = 4000)
    public void test673723() throws Throwable {
        NodeUtil.opToStrNoFail(111);
    }

    @Test(timeout = 4000)
    public void test674724() throws Throwable {
        NodeUtil.opToStrNoFail(112);
    }

    @Test(timeout = 4000)
    public void test675725() throws Throwable {
        String string0 = NodeUtil.opToStr(113);
    }

    @Test(timeout = 4000)
    public void test676726() throws Throwable {
        String string0 = NodeUtil.opToStr(114);
    }

    @Test(timeout = 4000)
    public void test677727() throws Throwable {
        String string0 = NodeUtil.opToStr(115);
    }

    @Test(timeout = 4000)
    public void test678728() throws Throwable {
        String string0 = NodeUtil.opToStr(116);
    }

    @Test(timeout = 4000)
    public void test679729() throws Throwable {
        String string0 = NodeUtil.opToStr(117);
    }

    @Test(timeout = 4000)
    public void test680730() throws Throwable {
        String string0 = NodeUtil.opToStr(118);
    }

    @Test(timeout = 4000)
    public void test681731() throws Throwable {
        String string0 = NodeUtil.opToStr(119);
    }

    @Test(timeout = 4000)
    public void test682732() throws Throwable {
        String string0 = NodeUtil.opToStr(120);
    }

    @Test(timeout = 4000)
    public void test683733() throws Throwable {
        String string0 = NodeUtil.opToStr(121);
    }

    @Test(timeout = 4000)
    public void test684734() throws Throwable {
        String string0 = NodeUtil.opToStr(122);
    }

    @Test(timeout = 4000)
    public void test685735() throws Throwable {
        String string0 = NodeUtil.opToStr(7);
    }

    @Test(timeout = 4000)
    public void test686736() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "infinity");
        Node node1 = NodeUtil.newVarNode("checkType", node0);
        NodeUtil.redeclareVarsInsideBranch(node1);
    }

    @Test(timeout = 4000)
    public void test687737() throws Throwable {
        Node node0 = new Node(35, 35, 35);
        NodeUtil.copyNameAnnotations(node0, node0);
        node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test688738() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "@\rS8TDI/YY=");
        NodeUtil.getRootOfQualifiedName(node0);
        node0.isGetProp();
    }

    @Test(timeout = 4000)
    public void test688739() throws Throwable {
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "@\rS8TDI/YY=");
        NodeUtil.getRootOfQualifiedName(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test689740() throws Throwable {
        Node node0 = new Node(14);
        NodeUtil.getRootOfQualifiedName(node0);
    }

    @Test(timeout = 4000)
    public void test690741() throws Throwable {
        Node node0 = Node.newString(738, "T&(Gf3*l{c", 18, 1425);
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        Node node1 = NodeUtil.newName(googleCodingConvention0, "PROPERTY", node0);
        node1.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test691742() throws Throwable {
        boolean boolean0 = NodeUtil.isValidPropertyName("function");
    }

    @Test(timeout = 4000)
    public void test692743() throws Throwable {
        boolean boolean0 = NodeUtil.isValidQualifiedName("PROPERTY");
    }

    @Test(timeout = 4000)
    public void test693744() throws Throwable {
        boolean boolean0 = NodeUtil.isValidQualifiedName("UTF-16LE.");
    }

    @Test(timeout = 4000)
    public void test694745() throws Throwable {
        boolean boolean0 = NodeUtil.isValidQualifiedName(".~]LIvezO*_.`e");
    }

    @Test(timeout = 4000)
    public void test695746() throws Throwable {
        boolean boolean0 = NodeUtil.isValidQualifiedName("j:Q:");
    }

    @Test(timeout = 4000)
    public void test696747() throws Throwable {
        Node node0 = new Node(88, 88, 88);
        boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    }

    @Test(timeout = 4000)
    public void test697748() throws Throwable {
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ">>>=");
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test698749() throws Throwable {
        Node node0 = new Node((-4935));
        boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    }

    @Test(timeout = 4000)
    public void test699750() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.JsMessage$1");
        Node node1 = NodeUtil.getPrototypeClassName(node0);
    }

    @Test(timeout = 4000)
    public void test699751() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.JsMessage$1");
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test699752() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.JsMessage$1");
        Node node1 = NodeUtil.getPrototypeClassName(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test700753() throws Throwable {
        Node node0 = NodeUtil.newUndefinedNode((Node) null);
    }

    @Test(timeout = 4000)
    public void test701754() throws Throwable {
        Node node0 = NodeUtil.newVarNode("3", (Node) null);
    }

    @Test(timeout = 4000)
    public void test702755() throws Throwable {
        Node node0 = new Node(3);
        Node node1 = NodeUtil.newVarNode(".", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, ".");
    }

    @Test(timeout = 4000)
    public void test702756() throws Throwable {
        Node node0 = new Node(3);
        Node node1 = NodeUtil.newVarNode(".", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, ".");
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test703757() throws Throwable {
        Node node0 = new Node(151);
        Node node1 = NodeUtil.newVarNode("Oa{PJ<iJ[:0G", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "mEw.9s7x!(Y");
    }

    @Test(timeout = 4000)
    public void test703758() throws Throwable {
        Node node0 = new Node(151);
        Node node1 = NodeUtil.newVarNode("Oa{PJ<iJ[:0G", node0);
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "mEw.9s7x!(Y");
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test704759() throws Throwable {
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(63);
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.allResultsMatch(node0, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test705760() throws Throwable {
        Node node0 = Node.newString(154, ")UCvX{#oj6),g,7i5_", 154, 154);
        NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
        boolean boolean0 = NodeUtil.anyResultsMatch(node0, nodeUtil_MatchDeclaration0);
    }

    @Test(timeout = 4000)
    public void test706761() throws Throwable {
        Node node0 = new Node(105);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = nodeUtil_MatchShallowStatement0.apply(node0);
    }

    @Test(timeout = 4000)
    public void test707762() throws Throwable {
        Node node0 = new Node(112);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        int int0 = NodeUtil.getCount(node0, nodeUtil_MatchShallowStatement0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test708763() throws Throwable {
        Node node0 = Node.newString("8B|=1yD;.lXT(FYG");
        Node node1 = NodeUtil.newUndefinedNode(node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "o!k%l5%Ho,?S3t'muH)", nodeUtil_MatchShallowStatement0);
    }

    @Test(timeout = 4000)
    public void test708764() throws Throwable {
        Node node0 = Node.newString("8B|=1yD;.lXT(FYG");
        Node node1 = NodeUtil.newUndefinedNode(node0);
        NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
        boolean boolean0 = NodeUtil.isNameReferenced(node1, "o!k%l5%Ho,?S3t'muH)", nodeUtil_MatchShallowStatement0);
        node1.isVoid();
    }

    @Test(timeout = 4000)
    public void test709765() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        Node node1 = NodeUtil.newVarNode(".infinity", node0);
        Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
        int int0 = NodeUtil.getCount(node1, predicate0, predicate0);
    }

    @Test(timeout = 4000)
    public void test709766() throws Throwable {
        Node node0 = new Node(119, 119, 119);
        Node node1 = NodeUtil.newVarNode(".infinity", node0);
        Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
        int int0 = NodeUtil.getCount(node1, predicate0, predicate0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test710767() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_BooleanResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test711768() throws Throwable {
        Node node0 = new Node(28);
        Node node1 = new Node(52, node0, node0, node0, node0, 50, 1);
        Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, predicate0);
    }

    @Test(timeout = 4000)
    public void test712769() throws Throwable {
        Node node0 = Node.newString("-&<&");
        GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
        boolean boolean0 = NodeUtil.isConstantByConvention(googleCodingConvention0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test713770() throws Throwable {
        SyntheticAst syntheticAst0 = new SyntheticAst("_Vg'G\u0005-XxY5s$");
        Compiler compiler0 = new Compiler();
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
        peepholeFoldWithTypes0.error(compiler0.MOTION_ITERATIONS_ERROR, node0);
    }

    @Test(timeout = 4000)
    public void test714771() throws Throwable {
        Node node0 = new Node(22);
        String string0 = NodeUtil.getSourceName(node0);
    }

    @Test(timeout = 4000)
    public void test715772() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "v>>@cg", "E");
        StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
        staticSourceFile0.getName();
    }

    @Test(timeout = 4000)
    public void test716773() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        NodeUtil.getSourceFile(node0);
        node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test716774() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        NodeUtil.getSourceFile(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test717775() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ".%");
        NodeUtil.getInputId(node0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test717776() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ".%");
        NodeUtil.getInputId(node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test718777() throws Throwable {
        Node node0 = new Node((-971));
        Node[] nodeArray0 = new Node[1];
        NodeUtil.newCallNode(node0, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test719778() throws Throwable {
        Node node0 = new Node(31);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
    }

    @Test(timeout = 4000)
    public void test720779() throws Throwable {
        Node node0 = new Node(32, 1436, 37);
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test721780() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.JsMessage$1");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
        node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test721781() throws Throwable {
        JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
        Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "com.google.javascript.jscomp.JsMessage$1");
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test722782() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(35, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    }

    @Test(timeout = 4000)
    public void test722783() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(35, node0, node0, node0, node0);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test723784() throws Throwable {
        Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
        Node node0 = Node.newString(45, "6wY", 45, 1966);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
    }

    @Test(timeout = 4000)
    public void test724785() throws Throwable {
        Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
        Node node0 = Node.newString(47, "6wY", 3, 62);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
    }

    @Test(timeout = 4000)
    public void test725786() throws Throwable {
        NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(51);
        Node node0 = new Node(51);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
    }

    @Test(timeout = 4000)
    public void test726787() throws Throwable {
        Node node0 = new Node(52, (-804), 52);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test727788() throws Throwable {
        Node node0 = new Node(53);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test728789() throws Throwable {
        Node node0 = new Node(54, 55, (-1536));
        NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test729790() throws Throwable {
        Node node0 = new Node(55, 55, 55);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test730791() throws Throwable {
        Node node0 = new Node(59);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test731792() throws Throwable {
        Node node0 = Node.newString(61, "/=", 61, 61);
        Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
        NodeUtil.evaluatesToLocalValue(node0, predicate0);
    }

    @Test(timeout = 4000)
    public void test732793() throws Throwable {
        Node node0 = new Node(62);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test733794() throws Throwable {
        Node node0 = new Node(63);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test734795() throws Throwable {
        Node node0 = new Node(64, 111, 94);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test735796() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
        NodeUtil.evaluatesToLocalValue(node0, predicate0);
    }

    @Test(timeout = 4000)
    public void test736797() throws Throwable {
        Node node0 = new Node(68, 68, 68);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test737798() throws Throwable {
        Node node0 = new Node(69);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test738799() throws Throwable {
        Node node0 = new Node(70);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test739800() throws Throwable {
        Node node0 = new Node(72, 72, (-139));
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test740801() throws Throwable {
        Node node0 = new Node(80);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test741802() throws Throwable {
        Node node0 = new Node(82);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test742803() throws Throwable {
        Node node0 = new Node(84);
        Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
        NodeUtil.evaluatesToLocalValue(node0, predicate0);
    }

    @Test(timeout = 4000)
    public void test743804() throws Throwable {
        Node node0 = new Node(85);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test744805() throws Throwable {
        Node node0 = new Node(86);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
    }

    @Test(timeout = 4000)
    public void test745806() throws Throwable {
        Node node0 = new Node(87, 87, 87);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test746807() throws Throwable {
        Node node0 = new Node(88);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test747808() throws Throwable {
        Node node0 = new Node(90);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test748809() throws Throwable {
        Node node0 = new Node(91);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test749810() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        node0.setType(92);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test750811() throws Throwable {
        Node node0 = new Node(96, 96, 96);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test751812() throws Throwable {
        Node node0 = new Node(98);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test752813() throws Throwable {
        Node node0 = new Node(99, 99, 99);
        NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test753814() throws Throwable {
        Node node0 = new Node(101);
        NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    }

    @Test(timeout = 4000)
    public void test754815() throws Throwable {
        Node node0 = new Node(102);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test755816() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test756817() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test757818() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = NodeUtil.newName(closureCodingConvention0, "p", node0);
        Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, predicate0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test757819() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
        Node node1 = NodeUtil.newName(closureCodingConvention0, "p", node0);
        Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, predicate0);
    }

    @Test(timeout = 4000)
    public void test758820() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    }

    @Test(timeout = 4000)
    public void test759821() throws Throwable {
        Node node0 = new Node(3812, 3812, (-613));
        node0.addSuppression("$\"QjR(}5jt@%1");
        JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
        jSDocInfo0.getSourceName();
    }

    @Test(timeout = 4000)
    public void test760822() throws Throwable {
        Node node0 = new Node(32, 2365, 2365);
        JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
    }

    @Test(timeout = 4000)
    public void test761823() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(35, node0, node0, node0, node0);
        NodeUtil.getBestJSDocInfo(node0);
        node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test761824() throws Throwable {
        Node node0 = NodeUtil.booleanNode(false);
        Node node1 = new Node(35, node0, node0, node0, node0);
        NodeUtil.getBestJSDocInfo(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test762825() throws Throwable {
        Node node0 = new Node((-1687));
        NodeUtil.newVarNode("Y", node0);
        NodeUtil.getBestJSDocInfo(node0);
        node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test762826() throws Throwable {
        Node node0 = new Node((-1687));
        NodeUtil.newVarNode("Y", node0);
        NodeUtil.getBestJSDocInfo(node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test763827() throws Throwable {
        Node node0 = new Node(91);
        Node node1 = new Node(105, node0, node0, 46, 48);
        JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
    }

    @Test(timeout = 4000)
    public void test764828() throws Throwable {
        Node node0 = new Node(139);
        Node node1 = new Node(125, node0, node0, node0);
        Node node2 = NodeUtil.getBestLValue(node0);
    }

    @Test(timeout = 4000)
    public void test765829() throws Throwable {
        Node node0 = new Node(127, 127, 127);
        Node node1 = new Node(12, node0, 44, 44);
        Node node2 = NodeUtil.getRValueOfLValue(node0);
    }

    @Test(timeout = 4000)
    public void test766830() throws Throwable {
        Node node0 = NodeUtil.getBestLValueOwner((Node) null);
    }

    @Test(timeout = 4000)
    public void test767831() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = NodeUtil.getBestLValueOwner(node0);
    }

    @Test(timeout = 4000)
    public void test768832() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = new Node(0, node0, node0, node0, node0);
        NodeUtil.getBestLValueOwner(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test768833() throws Throwable {
        Node node0 = NodeUtil.booleanNode(true);
        Node node1 = new Node(0, node0, node0, node0, node0);
        NodeUtil.getBestLValueOwner(node0);
        node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test769834() throws Throwable {
        String string0 = NodeUtil.getBestLValueName((Node) null);
    }

    @Test(timeout = 4000)
    public void test770835() throws Throwable {
        Node node0 = new Node(88, 88, 88);
        String string0 = NodeUtil.getBestLValueName(node0);
    }

    @Test(timeout = 4000)
    public void test771836() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        Node node1 = new Node(26, node0, node0, node0, node0, 48, 4095);
        String string0 = NodeUtil.getBestLValueName(node0);
    }

    @Test(timeout = 4000)
    public void test772837() throws Throwable {
        Node node0 = new Node(88, 88, 88);
        Node node1 = new Node(55, node0, node0);
        boolean boolean0 = NodeUtil.isExpressionResultUsed(node0);
    }

    @Test(timeout = 4000)
    public void test773838() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        NodeUtil.newExpr(node0);
        NodeUtil.isExecutedExactlyOnce(node0);
    }

    @Test(timeout = 4000)
    public void test774839() throws Throwable {
        Node node0 = new Node(98, 98, 98);
        node0.addChildToFront(node0);
        // Undeclared exception!
        NodeUtil.isExecutedExactlyOnce(node0);
    }

    @Test(timeout = 4000)
    public void test775840() throws Throwable {
        Node node0 = new Node(105);
        node0.addChildToFront(node0);
        boolean boolean0 = NodeUtil.isExecutedExactlyOnce(node0);
    }

    @Test(timeout = 4000)
    public void test776841() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[0];
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        Node node1 = NodeUtil.numberNode(Double.NEGATIVE_INFINITY, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test777842() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = NodeUtil.numberNode(Double.NaN, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test778843() throws Throwable {
        Node node0 = NodeUtil.numberNode(Double.POSITIVE_INFINITY, (Node) null);
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test778844() throws Throwable {
        Node node0 = NodeUtil.numberNode(Double.POSITIVE_INFINITY, (Node) null);
    }

    @Test(timeout = 4000)
    public void test779845() throws Throwable {
        Node node0 = Node.newString("&%HC^\"wA:p", 15, 9);
        Node node1 = NodeUtil.numberNode(9, node0);
        node1.isNumber();
    }

    @Test(timeout = 4000)
    public void test779846() throws Throwable {
        Node node0 = Node.newString("&%HC^\"wA:p", 15, 9);
        Node node1 = NodeUtil.numberNode(9, node0);
        node1.getCharno();
    }
}
