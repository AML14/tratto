/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 31 06:29:11 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Function;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCommandLineRunner;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.PhaseOptimizer;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.VariableMap;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ResourceBundle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AbstractCommandLineRunner_ESTest extends AbstractCommandLineRunner_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "qnH@O@Rg";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        commandLineRunner0.initOptionsFromFlags(compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "qnH@O@Rg";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Compiler compiler0 = commandLineRunner0.getCompiler();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        commandLineRunner0.createJsModules(list0, list0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
        CompilerOptions.TweakProcessing compilerOptions_TweakProcessing0 = CompilerOptions.TweakProcessing.STRIP;
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setTweakProcessing(compilerOptions_TweakProcessing0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
        List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setTweak(list0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setSourceMapDetailLevel(sourceMap_DetailLevel0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
        SourceMap.Format sourceMap_Format0 = SourceMap.Format.EXPERIMENTIAL;
        AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setSourceMapFormat(sourceMap_Format0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = " from module ";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
        commandLineRunner0.setRunOptions(compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("NU(TMkCa");
        linkedList0.add(jSSourceFile0);
        Supplier<List<JSSourceFile>> supplier0 = (Supplier<List<JSSourceFile>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
        doReturn(linkedList0, linkedList0).when(supplier0).get();
        commandLineRunner0.enableTestMode(supplier0, supplier0, (Supplier<List<JSModule>>) null, (Function<Integer, Boolean>) null);
        commandLineRunner0.run();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "qnH@O@Rg";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        List<JSSourceFile> list1 = commandLineRunner0.createInputs(list0, false);
        list1.size();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        String[] stringArray0 = new String[0];
        ArrayList<String> arrayList0 = new ArrayList<String>();
        arrayList0.add("-");
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        List<JSSourceFile> list0 = commandLineRunner0.createInputs(arrayList0, true);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        String[] stringArray0 = new String[0];
        ArrayList<String> arrayList0 = new ArrayList<String>();
        arrayList0.add("-");
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        commandLineRunner0.createInputs(arrayList0, false);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        Supplier<List<JSModule>> supplier0 = (Supplier<List<JSModule>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(supplier0).get();
        Function<Integer, Boolean> function0 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
        commandLineRunner0.enableTestMode((Supplier<List<JSSourceFile>>) null, (Supplier<List<JSSourceFile>>) null, supplier0, function0);
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        List<JSModule> list1 = commandLineRunner0.createJsModules(list0, list0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        commandLineRunner0.createJsModules((List<String>) null, (List<String>) null);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        LinkedList<String> linkedList0 = new LinkedList<String>();
        commandLineRunner0.createJsModules(linkedList0, linkedList0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        String[] stringArray0 = new String[0];
        JSModule jSModule0 = new JSModule("}QEjGXC2%_l");
        List<String> list0 = jSModule0.getProvides();
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        commandLineRunner0.createJsModules(list0, (List<String>) null);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        String[] stringArray0 = new String[0];
        ArrayList<String> arrayList0 = new ArrayList<String>();
        arrayList0.add("Z:c_lk|)=");
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        commandLineRunner0.createJsModules(arrayList0, arrayList0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        commandLineRunner0.checkModuleName(">");
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        AbstractCommandLineRunner.parseModuleWrappers((List<String>) null, linkedList0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        String[] stringArray0 = new String[0];
        JSError[] jSErrorArray0 = new JSError[0];
        MockPrintStream mockPrintStream0 = new MockPrintStream("j|A,z]Ypxx4pY(+Ur1W");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Result result0 = new Result(jSErrorArray0, jSErrorArray0, "j|A,z]Ypxx4pY(+Ur1W", (VariableMap) null, (VariableMap) null, (VariableMap) null, (FunctionInformationMap) null, (SourceMap) null, "j|A,z]Ypxx4pY(+Ur1W");
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = compiler0.options;
        commandLineRunner0.processResults(result0, linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        JSModule jSModule0 = new JSModule("XhKqF;P[:N");
        List<String> list0 = jSModule0.getProvides();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        linkedList0.add(jSModule0);
        AbstractCommandLineRunner.parseModuleWrappers(list0, linkedList0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        AbstractCommandLineRunner.parseModuleWrappers(list0, linkedList0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        Compiler compiler0 = new Compiler();
        AbstractCommandLineRunner.writeOutput((Appendable) null, compiler0, (String) null, "", "// Input %num%");
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        StringBuilder stringBuilder0 = new StringBuilder();
        Compiler compiler0 = new Compiler();
        AbstractCommandLineRunner.writeOutput(stringBuilder0, compiler0, "ECMASCRIPT5_STRICT", "ECMASCRIPT5_STRICT", "");
        stringBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        StringBuilder stringBuilder0 = new StringBuilder();
        AbstractCommandLineRunner.writeOutput(stringBuilder0, (Compiler) null, "casearray", "casearray", "casearray");
        stringBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        JSError[] jSErrorArray0 = new JSError[0];
        MockPrintStream mockPrintStream0 = new MockPrintStream("j|A,z]Ypxx4pY(+Ur1W");
        Result result0 = new Result(jSErrorArray0, jSErrorArray0, "kYt7=&y0K/?[6b#sx", (VariableMap) null, (VariableMap) null, (VariableMap) null, (FunctionInformationMap) null, (SourceMap) null, "{ ");
        String[] stringArray0 = new String[9];
        stringArray0[0] = "{ ";
        stringArray0[1] = "{ ";
        stringArray0[2] = "j|A,z]Ypxx4pY(+Ur1W";
        stringArray0[3] = "j|A,z]Ypxx4pY(+Ur1W";
        stringArray0[4] = "kYt7=&y0K/?[6b#sx";
        stringArray0[5] = "j|A,z]Ypxx4pY(+Ur1W";
        stringArray0[6] = "{ ";
        stringArray0[7] = "{ ";
        stringArray0[8] = "{ ";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
        int int0 = commandLineRunner0.processResults(result0, linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, (PrintStream) null, (PrintStream) null);
        Supplier<List<JSSourceFile>> supplier0 = (Supplier<List<JSSourceFile>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null, (Object) null).when(supplier0).get();
        commandLineRunner0.enableTestMode(supplier0, supplier0, (Supplier<List<JSModule>>) null, (Function<Integer, Boolean>) null);
        commandLineRunner0.run();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        String string0 = commandLineRunner0.expandManifest((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        OutputStream outputStream0 = commandLineRunner0.filenameToOutputStream("VwmI67V5f11$l");
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        OutputStream outputStream0 = commandLineRunner0.filenameToOutputStream((String) null);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ArrayList<String> arrayList0 = new ArrayList<String>();
        arrayList0.add("");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        AbstractCommandLineRunner.createDefineOrTweakReplacements(arrayList0, compilerOptions0, false);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        ArrayList<String> arrayList0 = new ArrayList<String>();
        arrayList0.add("7m=$i4^t");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        AbstractCommandLineRunner.createDefineOrTweakReplacements(arrayList0, compilerOptions0, true);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        String[] stringArray0 = new String[0];
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
        AbstractCommandLineRunner.createDefineOrTweakReplacements(list0, compilerOptions0, true);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
        CompilerOptions compilerOptions0 = new CompilerOptions();
        AbstractCommandLineRunner.createDefineOrTweakReplacements(list0, compilerOptions0, false);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        ArrayList<String> arrayList0 = new ArrayList<String>();
        arrayList0.add("Z:c_lk|)=");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        AbstractCommandLineRunner.createDefineOrTweakReplacements(arrayList0, compilerOptions0, false);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        JSModule jSModule0 = new JSModule("Xh7KqF;c[:N");
        MockPrintStream mockPrintStream0 = new MockPrintStream("Xh7KqF;c[:N");
        String[] stringArray0 = new String[1];
        stringArray0[0] = "Xh7KqF;c[:N";
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
        JSModule jSModule1 = new JSModule("?RJ]oX");
        JSModule[] jSModuleArray0 = new JSModule[5];
        jSModuleArray0[0] = jSModule1;
        jSModuleArray0[1] = jSModule0;
        jSModuleArray0[2] = jSModule1;
        jSModuleArray0[3] = jSModule0;
        jSModuleArray0[4] = jSModule1;
        JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
        commandLineRunner0.printModuleGraphManifestTo(jSModuleGraph0, mockPrintStream0);
        commandLineRunner0.shouldRunCompiler();
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        String[] stringArray0 = new String[0];
        CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
        MockPrintStream mockPrintStream0 = new MockPrintStream("8N<21uc");
        JSModule jSModule0 = new JSModule("8N<21uc");
        JSModule[] jSModuleArray0 = new JSModule[3];
        jSModuleArray0[0] = jSModule0;
        jSModuleArray0[1] = jSModule0;
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("8N<21uc");
        jSModule0.addFirst(jSSourceFile0);
        jSModuleArray0[2] = jSModule0;
        JSModuleGraph jSModuleGraph0 = new JSModuleGraph(jSModuleArray0);
        commandLineRunner0.printModuleGraphManifestTo(jSModuleGraph0, mockPrintStream0);
        commandLineRunner0.shouldRunCompiler();
    }
}
