/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 31 06:32:10 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.DiagnosticType;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DiagnosticGroups_ESTest extends DiagnosticGroups_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroups.registerGroup("", diagnosticTypeArray0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        DiagnosticGroups diagnosticGroups0 = new DiagnosticGroups();
        Map<String, DiagnosticGroup> map0 = diagnosticGroups0.getRegisteredGroups();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        DiagnosticGroup diagnosticGroup0 = DiagnosticGroups.CONSTANT_PROPERTY;
        DiagnosticGroup diagnosticGroup1 = DiagnosticGroups.registerGroup("", diagnosticGroup0);
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[1];
        DiagnosticGroups.registerGroup("DiagnosticGroup<deprecated>", diagnosticGroupArray0);
    }
}
