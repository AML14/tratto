/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 03 23:18:50 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AnalyzePrototypeProperties;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.CombinedCompilerPass;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import java.io.File;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        compiler0.compileModules((List<SourceFile>) linkedList0, (List<JSModule>) arrayList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSource((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSource();
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Node node0 = Node.newString("P\"DXNvWV_57W");
        compiler0.toSource(compiler_CodeBuilder0, 1459, node0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.disableThreads();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test0067() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        compiler0.disableThreads();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test0078() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule[] jSModuleArray0 = new JSModule[0];
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.init((JSSourceFile[]) null, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.resetUniqueNameId();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test00910() throws Throwable {
        Level level0 = Level.WARNING;
        Compiler.setLoggingLevel(level0);
        level0.toString();
    }

    @Test(timeout = 4000)
    public void test01011() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getCssRenamingMap();
    }

    @Test(timeout = 4000)
    public void test01112() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    }

    @Test(timeout = 4000)
    public void test01113() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test01214() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        compiler0.setState(compiler_IntermediateState0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test01315() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.init((JSSourceFile[]) null, (JSSourceFile[]) null, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test01416() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        SymbolTable symbolTable0 = compiler0.buildKnownSymbolTable();
        SymbolTable symbolTable1 = compiler0.buildKnownSymbolTable();
        symbolTable1.equals((Object) symbolTable0);
    }

    @Test(timeout = 4000)
    public void test01517() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.rebuildInputsFromModules();
    }

    @Test(timeout = 4000)
    public void test01618() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.computeCFG();
    }

    @Test(timeout = 4000)
    public void test01719() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getPropertyMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test01820() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.processDefines();
    }

    @Test(timeout = 4000)
    public void test01921() throws Throwable {
        Compiler.runCallableWithLargeStack((Callable<Scope.Var>) null);
    }

    @Test(timeout = 4000)
    public void test02022() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.languageMode();
    }

    @Test(timeout = 4000)
    public void test02123() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setCssRenamingMap((CssRenamingMap) null);
    }

    @Test(timeout = 4000)
    public void test02224() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02325() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getVariableMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02426() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getFunctionalInformationMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02527() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.recordFunctionInformation();
    }

    @Test(timeout = 4000)
    public void test02628() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02629() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        compiler0.getAstDotGraph();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02730() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("N.R", "PassConfigs must eventually delegate to the DefaultPassConfig");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test02831() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getModuleGraph();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test02932() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((SourceFile) null, (SourceFile) null, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test03033() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getSourceMap();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03134() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test03235() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getInputsForTesting();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03336() throws Throwable {
        Compiler compiler0 = new Compiler();
        CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
        compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03437() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getInputsById();
    }

    @Test(timeout = 4000)
    public void test03538() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setHasRegExpGlobalReferences(true);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test03639() throws Throwable {
        Compiler compiler0 = null;
        compiler0 = new Compiler((ErrorManager) null);
    }

    @Test(timeout = 4000)
    public void test03740() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile((JSSourceFile) null, (JSModule[]) null, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test03841() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getMessages();
    }

    @Test(timeout = 4000)
    public void test03942() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getExternsForTesting();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test04043() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.removeTryCatchFinally();
    }

    @Test(timeout = 4000)
    public void test04144() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getTopScope();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test04245() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
    }

    @Test(timeout = 4000)
    public void test04346() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        String string0 = compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test04447() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
    }

    @Test(timeout = 4000)
    public void test04548() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
    }

    @Test(timeout = 4000)
    public void test04649() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test04750() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.parseTestCode("");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test04851() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("!(L6");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = compiler0.parseSyntheticCode("base", "base");
        node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test04852() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("!(L6");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = compiler0.parseSyntheticCode("base", "base");
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test04853() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("!(L6");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        Node node0 = compiler0.parseSyntheticCode("base", "base");
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test04954() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        compilerOptions0.checkGlobalThisLevel = checkLevel0;
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test04955() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        CheckLevel checkLevel0 = CheckLevel.WARNING;
        compilerOptions0.checkGlobalThisLevel = checkLevel0;
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05056() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05057() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compilerOptions0.sourceMapOutputPath = "com.google.javascript.jscomp.Compiler$IntermediateState";
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05158() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05259() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        JSModule jSModule0 = new JSModule("-0CBeX'");
        arrayList0.add(jSModule0);
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);
        compiler0.ensureLibraryInjected((String) null);
    }

    @Test(timeout = 4000)
    public void test05360() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) linkedList0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05461() throws Throwable {
        Compiler.runCallable((Callable<AnalyzePrototypeProperties>) null, false, true);
    }

    @Test(timeout = 4000)
    public void test05562() throws Throwable {
        Callable<AnalyzePrototypeProperties> callable0 = (Callable<AnalyzePrototypeProperties>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        AnalyzePrototypeProperties analyzePrototypeProperties0 = Compiler.runCallable(callable0, false, true);
    }

    @Test(timeout = 4000)
    public void test05663() throws Throwable {
        Compiler.runCallable((Callable<AnalyzePrototypeProperties>) null, false, false);
    }

    @Test(timeout = 4000)
    public void test05764() throws Throwable {
        Compiler compiler0 = new Compiler();
        CleanupPasses cleanupPasses0 = new CleanupPasses((CompilerOptions) null);
        compiler0.setPassConfig(cleanupPasses0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test05865() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.getPassConfig();
        compiler0.setPassConfig(passConfig0);
    }

    @Test(timeout = 4000)
    public void test05966() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("\"(|N@HT5v6B*(m$qj");
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        vector0.add(sourceFile0);
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.check();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06067() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06068() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<SourceFile> stack0 = new Stack<SourceFile>();
        compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);
        compiler0.stripCode(compilerOptions0.stripTypePrefixes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripNameSuffixes);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test06169() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);
        compiler0.startPass("Dp4}");
        compiler0.optimize();
    }

    @Test(timeout = 4000)
    public void test06270() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.endPass();
    }

    @Test(timeout = 4000)
    public void test06371() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.reportCodeChange();
        compiler0.stripCode(compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripNameSuffixes, compilerOptions0.stripNamePrefixes);
    }

    @Test(timeout = 4000)
    public void test06472() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("JSC_OPTIMIZE_LOOP_ERROR");
        compiler0.areNodesEqualForInlining(node0, node0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06473() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("JSC_OPTIMIZE_LOOP_ERROR");
        compiler0.areNodesEqualForInlining(node0, node0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test06574() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("gq*rw<");
        InputId inputId0 = node0.getInputId();
        compiler0.removeExternInput(inputId0);
    }

    @Test(timeout = 4000)
    public void test06675() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test06676() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
        compiler0.getSynthesizedExternsInput();
        CompilerInput compilerInput0 = compiler0.getSynthesizedExternsInput();
        compilerInput0.isExtern();
    }

    @Test(timeout = 4000)
    public void test06777() throws Throwable {
        Compiler compiler0 = new Compiler();
        File file0 = MockFile.createTempFile("yG0aF>#M}rSP y", "yG0aF>#M}rSP y");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[3];
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("yG0aF>#M}rSP y", sourceFile_Generator0);
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        Charset charset0 = Charset.defaultCharset();
        JSSourceFile jSSourceFile1 = JSSourceFile.fromFile(file0, charset0);
        jSSourceFileArray0[2] = jSSourceFile1;
        JSModule[] jSModuleArray0 = new JSModule[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        SourceFile sourceFile0 = SourceFile.fromFile(file0, charset0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test06878() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("ye=Tg(?A|a\"?3!9");
        File file0 = MockFile.createTempFile("ye=Tg(?A|a\"?3!9", "ye=Tg(?A|a\"?3!9");
        Charset charset0 = Charset.defaultCharset();
        SourceFile sourceFile0 = SourceFile.fromFile(file0, charset0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.addNewScript(jsAst0);
    }

    @Test(timeout = 4000)
    public void test06979() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
        Charset charset0 = Charset.defaultCharset();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("com.google.javascript.jscomp.Compiler$2", charset0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addNewScript(jsAst0);
        JsAst jsAst1 = new JsAst(jSSourceFile0);
        compiler0.replaceScript(jsAst1);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test07080() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getDegenerateModuleGraph();
    }

    @Test(timeout = 4000)
    public void test07181() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(")/?cz%S:D+^?uv", ")/?cz%S:D+^?uv");
        node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test07182() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(")/?cz%S:D+^?uv", ")/?cz%S:D+^?uv");
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test07183() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(")/?cz%S:D+^?uv", ")/?cz%S:D+^?uv");
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    }

    @Test(timeout = 4000)
    public void test07184() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(")/?cz%S:D+^?uv", ")/?cz%S:D+^?uv");
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07185() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode(")/?cz%S:D+^?uv", ")/?cz%S:D+^?uv");
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test07286() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getTypeValidator();
    }

    @Test(timeout = 4000)
    public void test07387() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07488() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test07489() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.processAMDAndCommonJSModules();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07590() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("q5");
        compiler0.parseTestCode("q5");
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07591() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("q5");
        compiler0.parseTestCode("q5");
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test07692() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("Node tree inequality:\nTree1:\n");
    }

    @Test(timeout = 4000)
    public void test07793() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("\u0005q2\")~x3");
    }

    @Test(timeout = 4000)
    public void test07894() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("(b&`n\"K&gHsATfMT<");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("lDb?p$J4@s");
    }

    @Test(timeout = 4000)
    public void test07995() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("(b&`n\"K&gHsATfMT<");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("");
    }

    @Test(timeout = 4000)
    public void test08096() throws Throwable {
        Compiler compiler0 = new Compiler();
        SourceFile sourceFile0 = SourceFile.fromFile("\"(|N@HT5v6B*(m$qj");
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        vector0.add(sourceFile0);
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.optimize();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test08197() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("u?/==");
        boolean boolean0 = compiler0.isInliningForbidden();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test08198() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("u?/==");
        boolean boolean0 = compiler0.isInliningForbidden();
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test08199() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("u?/==");
        boolean boolean0 = compiler0.isInliningForbidden();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test081100() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("u?/==");
        boolean boolean0 = compiler0.isInliningForbidden();
    }

    @Test(timeout = 4000)
    public void test082102() throws Throwable {
        Compiler compiler0 = new Compiler();
        Vector<SourceFile> vector0 = new Vector<SourceFile>();
        CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
        compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);
        boolean boolean0 = compiler0.acceptEcmaScript5();
    }

    @Test(timeout = 4000)
    public void test083103() throws Throwable {
        Compiler compiler0 = new Compiler();
        Charset charset0 = Charset.defaultCharset();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("msg.no.bracket.arg", charset0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        jsAst0.getAstRoot(compiler0);
    }

    @Test(timeout = 4000)
    public void test084104() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("k9YE}RV!ie:u;R\"");
        Stack<NodeTraversal.Callback> stack0 = new Stack<NodeTraversal.Callback>();
        CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, stack0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, combinedCompilerPass0);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        String[] stringArray0 = new String[2];
        JSError jSError0 = nodeTraversal0.makeError(node0, checkLevel0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
        compiler0.report(jSError0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test084105() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("k9YE}RV!ie:u;R\"");
        Stack<NodeTraversal.Callback> stack0 = new Stack<NodeTraversal.Callback>();
        CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, stack0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, combinedCompilerPass0);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        String[] stringArray0 = new String[2];
        JSError jSError0 = nodeTraversal0.makeError(node0, checkLevel0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
        compiler0.report(jSError0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test084106() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("k9YE}RV!ie:u;R\"");
        Stack<NodeTraversal.Callback> stack0 = new Stack<NodeTraversal.Callback>();
        CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, stack0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, combinedCompilerPass0);
        CheckLevel checkLevel0 = CheckLevel.OFF;
        String[] stringArray0 = new String[2];
        JSError jSError0 = nodeTraversal0.makeError(node0, checkLevel0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
        compiler0.report(jSError0);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test085107() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.throwInternalError("JSC_DUPLICATE_EXTERN_INPUT", (Exception) null);
    }

    @Test(timeout = 4000)
    public void test086108() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("computeCFG");
        compiler0.check();
    }

    @Test(timeout = 4000)
    public void test087110() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.setIdeMode(true);
        compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test088111() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getSourceLine((String) null, 30);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test089112() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("I$Mkr9p qGlln");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[3];
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("yG0aF>#M}rSP y", sourceFile_Generator0);
        jSSourceFileArray0[0] = jSSourceFile0;
        jSSourceFileArray0[1] = jSSourceFile0;
        jSSourceFileArray0[2] = jSSourceFileArray0[1];
        JSModule[] jSModuleArray0 = new JSModule[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test090113() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("RT-");
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.compile((List<SourceFile>) null, (List<SourceFile>) null, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test091114() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getSourceRegion("only arrays or objects can be accessed", (-1));
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test092115() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("ye=Tg(?A|a\"?3!9");
        compiler0.getSourceRegion("externExports", 37);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test092116() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("ye=Tg(?A|a\"?3!9");
        compiler0.getSourceRegion("externExports", 37);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test092117() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("ye=Tg(?A|a\"?3!9");
        compiler0.getSourceRegion("externExports", 37);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test093118() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("y1e=Tg(?A|a\"?3!9");
        Charset charset0 = Charset.defaultCharset();
        SourceFile sourceFile0 = SourceFile.fromFile(" a?C~,+xZNxDR96r", charset0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.getSourceRegion(" a?C~,+xZNxDR96r", 29);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test093119() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("y1e=Tg(?A|a\"?3!9");
        Charset charset0 = Charset.defaultCharset();
        SourceFile sourceFile0 = SourceFile.fromFile(" a?C~,+xZNxDR96r", charset0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.getSourceRegion(" a?C~,+xZNxDR96r", 29);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test093120() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("y1e=Tg(?A|a\"?3!9");
        Charset charset0 = Charset.defaultCharset();
        SourceFile sourceFile0 = SourceFile.fromFile(" a?C~,+xZNxDR96r", charset0);
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.getSourceRegion(" a?C~,+xZNxDR96r", 29);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test094121() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule(".\"(jp%ACHm7%:3oY]");
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test095122() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("RnC");
        compiler0.ensureLibraryInjected("RnC");
    }

    @Test(timeout = 4000)
    public void test096123() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        LinkedList<JSModule> linkedList1 = new LinkedList<JSModule>();
        compiler0.compileModules((List<SourceFile>) linkedList0, (List<JSModule>) linkedList1, compilerOptions0);
        compiler0.getNodeForCodeInsertion((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test097124() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("Km}F{qw=jI#5'G*L");
        File file0 = MockFile.createTempFile("Km}F{qw=jI#5'G*L", "recordFunctionInformation");
        Charset charset0 = Charset.defaultCharset();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0, charset0);
        CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);
        jSModule0.addFirst(compilerInput0);
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test098125() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getAstDotGraph();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test099126() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);
        ErrorManager errorManager0 = compiler0.getErrorManager();
        errorManager0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test100127() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
    }

    @Test(timeout = 4000)
    public void test100128() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test100129() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test101130() throws Throwable {
        Compiler compiler0 = new Compiler();
        HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        SyntheticAst syntheticAst0 = new SyntheticAst("Tn'EF,tKqF)");
        Node node0 = syntheticAst0.getAstRoot(compiler0);
        compiler0.updateGlobalVarReferences(hashMap0, node0);
    }

    @Test(timeout = 4000)
    public void test102131() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newNumber((double) 32, 32, 32);
        compiler0.updateGlobalVarReferences((Map<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>) null, node0);
    }

    @Test(timeout = 4000)
    public void test103133() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setProgress(271.7341093);
        compiler0.getProgress();
    }

    @Test(timeout = 4000)
    public void test104134() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setProgress((-2.147483648E9));
        compiler0.getProgress();
    }
}
