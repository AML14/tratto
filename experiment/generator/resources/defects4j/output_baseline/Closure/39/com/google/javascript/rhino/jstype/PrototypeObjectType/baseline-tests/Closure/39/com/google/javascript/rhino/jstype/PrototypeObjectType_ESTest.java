/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 02:00:02 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.HashMap;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PrototypeObjectType_ESTest extends PrototypeObjectType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, recordType0);
        boolean boolean0 = indexedType0.matchesObjectContext();
        indexedType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, recordType0);
        boolean boolean0 = indexedType0.matchesObjectContext();
        indexedType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, recordType0);
        boolean boolean0 = indexedType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.canBeCalled();
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.canBeCalled();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "v-bwxk+4%tE`lkM32");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("v-bwxk+4%tE`lkM32", jSDocInfo0);
        int int0 = errorFunctionType0.getPropertiesCount();
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "v-bwxk+4%tE`lkM32");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("v-bwxk+4%tE`lkM32", jSDocInfo0);
        int int0 = errorFunctionType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "v-bwxk+4%tE`lkM32");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Named type with empty name component", 3336, 3336);
        errorFunctionType0.setImplicitPrototype(namedType0);
        errorFunctionType0.setPropertyJSDocInfo("v-bwxk+4%tE`lkM32", jSDocInfo0);
        int int0 = errorFunctionType0.getPropertiesCount();
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "v-bwxk+4%tE`lkM32");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Named type with empty name component", 3336, 3336);
        errorFunctionType0.setImplicitPrototype(namedType0);
        errorFunctionType0.setPropertyJSDocInfo("v-bwxk+4%tE`lkM32", jSDocInfo0);
        int int0 = errorFunctionType0.getPropertiesCount();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
        hashMap0.put("a^vr(A?hM>", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
        hashMap0.put("a^vr(A?hM>", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        jSTypeRegistry0.createRecordType(hashMap0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
        hashMap0.put("a^vr(A?hM>", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        jSTypeRegistry0.createRecordType(hashMap0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0512() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ", ...");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo(", ...", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.defineProperty(", ...", (JSType) null, true, (Node) null);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ", ...");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo(", ...", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.defineProperty(", ...", (JSType) null, true, (Node) null);
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "toString");
        boolean boolean0 = errorFunctionType0.isPropertyTypeDeclared("Yf:&&rzG(+6ub~50(");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test0615() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "toString");
        boolean boolean0 = errorFunctionType0.isPropertyTypeDeclared("Yf:&&rzG(+6ub~50(");
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, (Node) null);
        hashMap0.put("Not declared as a type name", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        Set<String> set0 = recordType0.getPropertyNames();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, (Node) null);
        hashMap0.put("Not declared as a type name", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        Set<String> set0 = recordType0.getPropertyNames();
        set0.contains("Not declared as a type name");
    }

    @Test(timeout = 4000)
    public void test0718() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, (Node) null);
        hashMap0.put("Not declared as a type name", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        Set<String> set0 = recordType0.getPropertyNames();
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test0819() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "toString");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("toString", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("toString");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "toString");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("toString", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("toString");
    }

    @Test(timeout = 4000)
    public void test0921() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "toString");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("Yf:&&rzG(+6ub~50(");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test0922() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "toString");
        boolean boolean0 = errorFunctionType0.isPropertyTypeInferred("Yf:&&rzG(+6ub~50(");
    }

    @Test(timeout = 4000)
    public void test1023() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isPropertyInExterns("Named type with empty name component");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1024() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isPropertyInExterns("Named type with empty name component");
    }

    @Test(timeout = 4000)
    public void test1025() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.isPropertyInExterns("Named type with empty name component");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "AApvF hS+1;U");
        boolean boolean0 = errorFunctionType0.defineDeclaredProperty("", (JSType) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test1127() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "AApvF hS+1;U");
        boolean boolean0 = errorFunctionType0.defineDeclaredProperty("", (JSType) null, (Node) null);
        errorFunctionType0.isPropertyInExterns("");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1228() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        boolean boolean0 = errorFunctionType0.defineDeclaredProperty("String", errorFunctionType0, (Node) null);
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(errorFunctionType0);
        boolean boolean1 = errorFunctionType0.defineProperty("String", jSType_TypePair0.typeB, false, (Node) null);
    }

    @Test(timeout = 4000)
    public void test1229() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        boolean boolean0 = errorFunctionType0.defineDeclaredProperty("String", errorFunctionType0, (Node) null);
        JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(errorFunctionType0);
        boolean boolean1 = errorFunctionType0.defineProperty("String", jSType_TypePair0.typeB, false, (Node) null);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1331() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ",W0f6m~5KbMlm$-|");
        boolean boolean0 = errorFunctionType0.removeProperty(",W0f6m~5KbMlm$-|");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1332() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ",W0f6m~5KbMlm$-|");
        boolean boolean0 = errorFunctionType0.removeProperty(",W0f6m~5KbMlm$-|");
    }

    @Test(timeout = 4000)
    public void test1433() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("String", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.removeProperty("String");
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1434() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("String", jSDocInfo0);
        boolean boolean0 = errorFunctionType0.removeProperty("String");
    }

    @Test(timeout = 4000)
    public void test1535() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        indexedType0.getPropertyNode("Unknown class name");
        indexedType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1536() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
        indexedType0.getPropertyNode("Unknown class name");
        indexedType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1637() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "SHNE");
        Node node0 = Node.newString("Named type with empty name component");
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, errorFunctionType0);
        boolean boolean0 = enumType0.defineProperty("", errorFunctionType0, false, node0);
    }

    @Test(timeout = 4000)
    public void test1638() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "SHNE");
        Node node0 = Node.newString("Named type with empty name component");
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, errorFunctionType0);
        boolean boolean0 = enumType0.defineProperty("", errorFunctionType0, false, node0);
        Node node1 = enumType0.getPropertyNode("");
    }

    @Test(timeout = 4000)
    public void test1639() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "SHNE");
        Node node0 = Node.newString("Named type with empty name component");
        EnumType enumType0 = jSTypeRegistry0.createEnumType("", node0, errorFunctionType0);
        boolean boolean0 = enumType0.defineProperty("", errorFunctionType0, false, node0);
        Node node1 = enumType0.getPropertyNode("");
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test1740() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.getOwnPropertyJSDocInfo("Not declared as a type name");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1741() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.getOwnPropertyJSDocInfo("Not declared as a type name");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1842() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "}");
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getOwnPropertyJSDocInfo("Not declared as a constructor");
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test1843() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "}");
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        recordType0.getOwnPropertyJSDocInfo("Not declared as a constructor");
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test1944() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Yf:&&rzG(+6ub~50(");
        errorFunctionType0.setPropertyJSDocInfo("Yf:&&rzG(+6ub~50(", (JSDocInfo) null);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1945() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Yf:&&rzG(+6ub~50(");
        errorFunctionType0.setPropertyJSDocInfo("Yf:&&rzG(+6ub~50(", (JSDocInfo) null);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test2046() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "vsg_G*!u^op@[q~d");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("vsg_G*!u^op@[q~d", jSDocInfo0);
        errorFunctionType0.setPropertyJSDocInfo("vsg_G*!u^op@[q~d", jSDocInfo0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.setPropertyJSDocInfo("{...}", jSDocInfo0);
        recordType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2248() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test2249() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2350() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2351() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test2352() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
        recordType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test2453() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        Node node0 = Node.newString("Unknown class name", 843, (-521));
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, recordType0, true);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "Date", (Node) null, arrowType0, recordType0, "Date", true, true);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test2454() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        Node node0 = Node.newString("Unknown class name", 843, (-521));
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, recordType0, true);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "Date", (Node) null, arrowType0, recordType0, "Date", true, true);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2455() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        Node node0 = Node.newString("Unknown class name", 843, (-521));
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, recordType0, true);
        FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "Date", (Node) null, arrowType0, recordType0, "Date", true, true);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2556() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesInt32Context();
    }

    @Test(timeout = 4000)
    public void test2557() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesInt32Context();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2658() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test2659() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        boolean boolean0 = instanceObjectType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test2760() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("valueOf", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2761() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, (Node) null);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        hashMap0.put("valueOf", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test2862() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test2863() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2964() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test2965() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3066() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test3067() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3168() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.matchesStringContext();
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test3169() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        boolean boolean0 = jSType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test3270() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesStringContext();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3271() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
        boolean boolean0 = instanceObjectType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test3372() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, (Node) null);
        hashMap0.put("toString", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test3373() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, (Node) null);
        hashMap0.put("toString", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        boolean boolean0 = recordType0.matchesStringContext();
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3474() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "v-bwxk+4%tE`lkM32");
        boolean boolean0 = errorFunctionType0.matchesStringContext();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test3475() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "v-bwxk+4%tE`lkM32");
        boolean boolean0 = errorFunctionType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test3576() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        boolean boolean0 = functionType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test3677() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "v-bwxk+4%tE`lkM32");
        JSType jSType0 = errorFunctionType0.unboxesTo();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test3678() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "v-bwxk+4%tE`lkM32");
        JSType jSType0 = errorFunctionType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test3779() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        JSType jSType0 = instanceObjectType0.unboxesTo();
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test3780() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        JSType jSType0 = instanceObjectType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test3881() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
        BooleanType booleanType1 = (BooleanType) instanceObjectType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test3882() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
        BooleanType booleanType1 = (BooleanType) instanceObjectType0.unboxesTo();
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test3983() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        JSType jSType1 = jSType0.unboxesTo();
        jSType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test3984() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        JSType jSType1 = jSType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test4085() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        errorFunctionType0.toStringHelper(true);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test4186() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
        hashMap0.put("a^vr(A?hM>", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test4288() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
        hashMap0.put("a^vr(A?hM>", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
        hashMap0.put("Named type with empty name component", recordTypeBuilder_RecordProperty0);
        RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
        hashMap0.put("Not declared as a constructor", recordTypeBuilder_RecordProperty1);
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        String string0 = recordType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test4390() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("\"AhCaX0 >)0-", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        instanceObjectType0.isNullable();
        instanceObjectType0.setImplicitPrototype(functionType0);
    }

    @Test(timeout = 4000)
    public void test4491() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType[] jSTypeArray0 = new JSType[1];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) recordType0, jSTypeArray0);
        recordType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test4492() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        JSType[] jSTypeArray0 = new JSType[1];
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) recordType0, jSTypeArray0);
        recordType0.setOwnerFunction(functionType0);
        String string0 = recordType0.toStringHelper(false);
    }

    @Test(timeout = 4000)
    public void test4593() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(errorFunctionType0, errorFunctionType0);
        boolean boolean0 = errorFunctionType0.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test4594() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(errorFunctionType0, errorFunctionType0);
        boolean boolean0 = errorFunctionType0.isSubtype(functionType0);
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test4695() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isString();
    }

    @Test(timeout = 4000)
    public void test4696() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
        boolean boolean0 = errorFunctionType0.isString();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test4797() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("yi=!DH/M-[<#k=cS", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    }

    @Test(timeout = 4000)
    public void test4798() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("yi=!DH/M-[<#k=cS", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
        instanceObjectType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test4799() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("yi=!DH/M-[<#k=cS", (Node) null);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
        instanceObjectType0.isNativeObjectType();
    }

    @Test(timeout = 4000)
    public void test48100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "{...}", (Node) null);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        functionType0.setPrototypeBasedOn(unknownType0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
        instanceObjectType0.hasReferenceName();
    }

    @Test(timeout = 4000)
    public void test48101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "{...}", (Node) null);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        functionType0.setPrototypeBasedOn(unknownType0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
    }

    @Test(timeout = 4000)
    public void test48102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "{...}", (Node) null);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        functionType0.setPrototypeBasedOn(unknownType0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
        boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
        instanceObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test49103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`Ec", (Node) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        errorFunctionType0.getSuperClassConstructor();
        errorFunctionType0.setPrototypeBasedOn((ObjectType) functionType0, (Node) null);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test49104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("`Ec", (Node) null);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        errorFunctionType0.getSuperClassConstructor();
        errorFunctionType0.setPrototypeBasedOn((ObjectType) functionType0, (Node) null);
        functionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test50105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSType[] jSTypeArray0 = new JSType[0];
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, true, jSTypeArray0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        recordType0.setOwnerFunction(functionType0);
        recordType0.setOwnerFunction(functionType0);
    }

    @Test(timeout = 4000)
    public void test51106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "String");
        errorFunctionType0.getCtorImplementedInterfaces();
        errorFunctionType0.isNominalConstructor();
    }

    @Test(timeout = 4000)
    public void test52107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "j>u8@RdqZf:u[+K");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("j>u8@RdqZf:u[+K", jSDocInfo0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test52108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "j>u8@RdqZf:u[+K");
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        errorFunctionType0.setPropertyJSDocInfo("j>u8@RdqZf:u[+K", jSDocInfo0);
        JSType.safeResolve(errorFunctionType0, simpleErrorReporter0, errorFunctionType0);
        errorFunctionType0.isNominalConstructor();
    }
}
