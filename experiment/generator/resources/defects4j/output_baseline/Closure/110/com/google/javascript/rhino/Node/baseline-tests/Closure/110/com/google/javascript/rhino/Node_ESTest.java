/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 22:28:14 GMT 2023
 */
package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Node_ESTest extends Node_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        node0.siblings();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        node0.siblings();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        Node node0 = Node.newNumber((double) 154, 154, 154);
        node0.putProp(40, node0.NO_SIDE_EFFECTS);
        Node node1 = node0.useSourceInfoIfMissingFrom(node0);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        Node node0 = Node.newNumber((double) 154, 154, 154);
        node0.putProp(40, node0.NO_SIDE_EFFECTS);
        Node node1 = node0.useSourceInfoIfMissingFrom(node0);
        node1.isNumber();
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        Node node0 = new Node((-4248), (-4248), 51);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        Set<String> set0 = jSDocInfo0.getSuppressions();
        node0.setDirectives(set0);
        node0.getExistingIntProp(48);
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        Node[] nodeArray0 = new Node[0];
        Node node0 = new Node(46, nodeArray0);
        Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
        node_FileLevelJsDocBuilder0.append("!");
        node0.putProp(4095, "!");
        node_FileLevelJsDocBuilder0.append(",n");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        Node node0 = Node.newString(",n");
        node0.setQuotedString();
        node0.getDouble();
    }

    @Test(timeout = 4000)
    public void test0057() throws Throwable {
        Node node0 = Node.newString("DEBUGGER");
        boolean boolean0 = node0.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test0058() throws Throwable {
        Node node0 = Node.newString("DEBUGGER");
        boolean boolean0 = node0.isQuotedString();
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test0059() throws Throwable {
        Node node0 = Node.newString("DEBUGGER");
        boolean boolean0 = node0.isQuotedString();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test00610() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
        node0.setSideEffectFlags(node_SideEffectFlags0);
        node0.getDouble();
    }

    @Test(timeout = 4000)
    public void test00711() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
        node_SideEffectFlags0.setMutatesGlobalState();
        node_SideEffectFlags0.areAllFlagsSet();
    }

    @Test(timeout = 4000)
    public void test00812() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-67));
        Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
        node_SideEffectFlags1.valueOf();
    }

    @Test(timeout = 4000)
    public void test00913() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2862);
        node_SideEffectFlags0.setMutatesArguments();
        node_SideEffectFlags0.valueOf();
    }

    @Test(timeout = 4000)
    public void test01014() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
        node_SideEffectFlags0.clearSideEffectFlags();
        node_SideEffectFlags0.valueOf();
    }

    @Test(timeout = 4000)
    public void test01115() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
        node_SideEffectFlags0.setAllFlags();
        node_SideEffectFlags0.valueOf();
    }

    @Test(timeout = 4000)
    public void test01216() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
        Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
        node_SideEffectFlags1.valueOf();
    }

    @Test(timeout = 4000)
    public void test01317() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
        Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
        node_SideEffectFlags1.areAllFlagsSet();
    }

    @Test(timeout = 4000)
    public void test01418() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        boolean boolean0 = node0.isEquivalentToTyped(node0);
    }

    @Test(timeout = 4000)
    public void test01419() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        boolean boolean0 = node0.isEquivalentToTyped(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test01420() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        boolean boolean0 = node0.isEquivalentToTyped(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test01421() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        boolean boolean0 = node0.isEquivalentToTyped(node0);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test01522() throws Throwable {
        Node node0 = Node.newNumber((-476.30970638241644));
        node0.setDouble((-476.30970638241644));
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test01523() throws Throwable {
        Node node0 = Node.newNumber((-476.30970638241644));
        node0.setDouble((-476.30970638241644));
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test01624() throws Throwable {
        Node node0 = Node.newString(",n");
        InputId inputId0 = new InputId(",n");
        node0.setInputId(inputId0);
        node0.getDouble();
    }

    @Test(timeout = 4000)
    public void test01725() throws Throwable {
        Node node0 = new Node(172, 172, 172);
        node0.srcref((Node) null);
    }

    @Test(timeout = 4000)
    public void test01826() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        node0.setWasEmptyNode(true);
        node0.isStringKey();
    }

    @Test(timeout = 4000)
    public void test01827() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        node0.setWasEmptyNode(true);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test01928() throws Throwable {
        Node.newString((String) null, (-1920), (-1920));
    }

    @Test(timeout = 4000)
    public void test02029() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        node0.addChildrenToBack(node0);
        Node node1 = null;
        node1 = new Node(57, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test02130() throws Throwable {
        Node node0 = Node.newString("Y_AxCFe^0");
        node0.getInputId();
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test02131() throws Throwable {
        Node node0 = Node.newString("Y_AxCFe^0");
        node0.getInputId();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test02232() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        node0.isSyntheticBlock();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test02233() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        node0.isSyntheticBlock();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test02334() throws Throwable {
        Node node0 = Node.newNumber((double) 105, 105, 105);
        Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
        Node node2 = null;
        node2 = new Node(4, node1, node1, node0);
    }

    @Test(timeout = 4000)
    public void test02435() throws Throwable {
        Node node0 = new Node(36);
        node0.setSourceEncodedPosition(36);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test02536() throws Throwable {
        Node node0 = new Node((-856), (-856), (-856));
        node0.getAncestors();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test02537() throws Throwable {
        Node node0 = new Node((-856), (-856), (-856));
        node0.getAncestors();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test02638() throws Throwable {
        Node node0 = new Node(155);
        boolean boolean0 = node0.isLocalResultCall();
    }

    @Test(timeout = 4000)
    public void test02639() throws Throwable {
        Node node0 = new Node(155);
        boolean boolean0 = node0.isLocalResultCall();
        node0.isCast();
    }

    @Test(timeout = 4000)
    public void test02740() throws Throwable {
        Node node0 = new Node(29);
        boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test02741() throws Throwable {
        Node node0 = new Node(29);
        boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
    }

    @Test(timeout = 4000)
    public void test02742() throws Throwable {
        Node node0 = new Node(29);
        boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test02843() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        node0.setIsSyntheticBlock(false);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test02844() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        node0.setIsSyntheticBlock(false);
        node0.isThrow();
    }

    @Test(timeout = 4000)
    public void test02945() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = node0.isQuotedString();
    }

    @Test(timeout = 4000)
    public void test02946() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = node0.isQuotedString();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test02947() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = node0.isQuotedString();
        node0.isWhile();
    }

    @Test(timeout = 4000)
    public void test03048() throws Throwable {
        Node node0 = new Node(1370, 1370, 1370);
        Node node1 = new Node(50, node0, 2, 42);
        Node node2 = node1.copyInformationFrom(node0);
        node1.addChildToFront(node2);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test03149() throws Throwable {
        Node node0 = new Node(112, 2761, (-18));
        Node node1 = node0.srcrefTree(node0);
        node1.isDefaultCase();
    }

    @Test(timeout = 4000)
    public void test03150() throws Throwable {
        Node node0 = new Node(112, 2761, (-18));
        Node node1 = node0.srcrefTree(node0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test03251() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        node0.wasEmptyNode();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test03252() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        node0.wasEmptyNode();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03353() throws Throwable {
        Node node0 = new Node((-3765), (-3765), (-3765));
        boolean boolean0 = node0.isNoSideEffectsCall();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03354() throws Throwable {
        Node node0 = new Node((-3765), (-3765), (-3765));
        boolean boolean0 = node0.isNoSideEffectsCall();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test03355() throws Throwable {
        Node node0 = new Node((-3765), (-3765), (-3765));
        boolean boolean0 = node0.isNoSideEffectsCall();
    }

    @Test(timeout = 4000)
    public void test03456() throws Throwable {
        Node node0 = Node.newString("g(k9Afw/rYOkc_Q.]J");
        boolean boolean0 = node0.isOnlyModifiesThisCall();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03457() throws Throwable {
        Node node0 = Node.newString("g(k9Afw/rYOkc_Q.]J");
        boolean boolean0 = node0.isOnlyModifiesThisCall();
    }

    @Test(timeout = 4000)
    public void test03458() throws Throwable {
        Node node0 = Node.newString("g(k9Afw/rYOkc_Q.]J");
        boolean boolean0 = node0.isOnlyModifiesThisCall();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test03559() throws Throwable {
        Node node0 = new Node(112, 2761, (-18));
        node0.getDirectives();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test03560() throws Throwable {
        Node node0 = new Node(112, 2761, (-18));
        node0.getDirectives();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03661() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        node0.setChangeTime(1636);
        int int0 = node0.getChangeTime();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test03662() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        node0.setChangeTime(1636);
        int int0 = node0.getChangeTime();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03663() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        node0.setChangeTime(1636);
        int int0 = node0.getChangeTime();
    }

    @Test(timeout = 4000)
    public void test03764() throws Throwable {
        Node node0 = Node.newString(29, "YPZnfVon", 29, 29);
        int int0 = node0.getSourcePosition();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test03765() throws Throwable {
        Node node0 = Node.newString(29, "YPZnfVon", 29, 29);
        int int0 = node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test03866() throws Throwable {
        Node node0 = Node.newNumber((-1558.774296069));
        int int0 = node0.getLength();
    }

    @Test(timeout = 4000)
    public void test03867() throws Throwable {
        Node node0 = Node.newNumber((-1558.774296069));
        int int0 = node0.getLength();
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test03868() throws Throwable {
        Node node0 = Node.newNumber((-1558.774296069));
        int int0 = node0.getLength();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test03969() throws Throwable {
        Node node0 = new Node(154);
        node0.setCharno(154);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test03970() throws Throwable {
        Node node0 = new Node(154);
        node0.setCharno(154);
        node0.isStringKey();
    }

    @Test(timeout = 4000)
    public void test04071() throws Throwable {
        Node node0 = new Node(37);
        node0.setQuotedString();
    }

    @Test(timeout = 4000)
    public void test04172() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isEquivalentTo(node0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test04173() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isEquivalentTo(node0);
    }

    @Test(timeout = 4000)
    public void test04174() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isEquivalentTo(node0);
        node0.isStringKey();
    }

    @Test(timeout = 4000)
    public void test04175() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isEquivalentTo(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test04276() throws Throwable {
        Node node0 = new Node(154);
        node0.setLength(154);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test04377() throws Throwable {
        Node node0 = new Node((-72));
        node0.setSourceFileForTesting("1dB~TH'");
        Node node1 = node0.useSourceInfoIfMissingFrom(node0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test04378() throws Throwable {
        Node node0 = new Node((-72));
        node0.setSourceFileForTesting("1dB~TH'");
        Node node1 = node0.useSourceInfoIfMissingFrom(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test04479() throws Throwable {
        Node node0 = Node.newNumber((-1558.774296069));
        int int0 = node0.getSourceOffset();
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test04480() throws Throwable {
        Node node0 = Node.newNumber((-1558.774296069));
        int int0 = node0.getSourceOffset();
    }

    @Test(timeout = 4000)
    public void test04481() throws Throwable {
        Node node0 = Node.newNumber((-1558.774296069));
        int int0 = node0.getSourceOffset();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04582() throws Throwable {
        Node node0 = Node.newNumber((-1558.774296069));
        node0.setLineno(31);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test04683() throws Throwable {
        Node node0 = new Node(2771, 2771, 2771);
        Node node1 = new Node(56, node0, node0, 15, 4);
        Node node2 = null;
        node2 = new Node(52, node1, node0, node1, 4095, 49);
    }

    @Test(timeout = 4000)
    public void test04784() throws Throwable {
        Node node0 = Node.newNumber((-460.9471936));
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.setJSDocInfo(jSDocInfo0);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test04885() throws Throwable {
        Node node0 = new Node(31);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.putProp(31, jSDocInfo0);
        node0.getDouble();
    }

    @Test(timeout = 4000)
    public void test04986() throws Throwable {
        Node node0 = Node.newString("}m\"{${/lQS0b5f\"'V");
        node0.putProp(32, "}m\"{${/lQS0b5f\"'V");
        node0.getDouble();
    }

    @Test(timeout = 4000)
    public void test05087() throws Throwable {
        Node node0 = Node.newString("!");
        node0.putProp(33, "!");
        node0.toStringTree();
    }

    @Test(timeout = 4000)
    public void test05188() throws Throwable {
        Node node0 = Node.newString("Object#Element");
        JSDocInfo jSDocInfo0 = new JSDocInfo(false);
        node0.putProp(34, jSDocInfo0);
        node0.toStringTree();
    }

    @Test(timeout = 4000)
    public void test05289() throws Throwable {
        Node node0 = Node.newString("}m\"{${/lQS0b5f\"'V");
        node0.putProp(35, "}m\"{${/lQS0b5f\"'V");
        node0.toStringTree();
    }

    @Test(timeout = 4000)
    public void test05390() throws Throwable {
        Node node0 = new Node(29);
        node0.setIsSyntheticBlock(true);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test05491() throws Throwable {
        Node node0 = Node.newString("setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt ");
        node0.putProp(39, "setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt ");
        node0.toStringTree();
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test05492() throws Throwable {
        Node node0 = Node.newString("setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt ");
        node0.putProp(39, "setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt ");
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test05593() throws Throwable {
        Node node0 = Node.newNumber((double) 154, 154, 154);
        node0.putProp(40, node0.INFERRED_FUNCTION);
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test05594() throws Throwable {
        Node node0 = Node.newNumber((double) 154, 154, 154);
        node0.putProp(40, node0.INFERRED_FUNCTION);
        node0.toStringTree();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test05595() throws Throwable {
        Node node0 = Node.newNumber((double) 154, 154, 154);
        node0.putProp(40, node0.INFERRED_FUNCTION);
        node0.toStringTree();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test05696() throws Throwable {
        Node node0 = new Node(154);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.putProp(41, jSDocInfo0);
        node0.toStringTree();
    }

    @Test(timeout = 4000)
    public void test05797() throws Throwable {
        Node node0 = Node.newString("Y_AxDCFX^0");
        node0.putProp(43, "Y_AxDCFX^0");
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test05798() throws Throwable {
        Node node0 = Node.newString("Y_AxDCFX^0");
        node0.putProp(43, "Y_AxDCFX^0");
        node0.toStringTree();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test05899() throws Throwable {
        Node node0 = new Node(44);
        node0.putProp(44, "g(k9Afw/rYOkc_Q.]J");
        node0.toStringTree();
    }

    @Test(timeout = 4000)
    public void test059100() throws Throwable {
        Node node0 = new Node(45);
        Object object0 = new Object();
        node0.putProp(45, object0);
        node0.toStringTree();
    }

    @Test(timeout = 4000)
    public void test060101() throws Throwable {
        Node node0 = new Node(46);
        node0.putProp(46, "\\}Gw?L y~f)");
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test060102() throws Throwable {
        Node node0 = new Node(46);
        node0.putProp(46, "\\}Gw?L y~f)");
        node0.toStringTree();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test061103() throws Throwable {
        Node node0 = Node.newString("}m\"{${/lQS0b5f\"'V");
        node0.putProp(47, "}m\"{${/lQS0b5f\"'V");
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test061104() throws Throwable {
        Node node0 = Node.newString("}m\"{${/lQS0b5f\"'V");
        node0.putProp(47, "}m\"{${/lQS0b5f\"'V");
        node0.toStringTree();
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test062105() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        HashSet<String> hashSet0 = new HashSet<String>();
        node0.setDirectives(hashSet0);
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test062106() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        HashSet<String> hashSet0 = new HashSet<String>();
        node0.setDirectives(hashSet0);
        node0.toStringTree();
        node0.isStringKey();
    }

    @Test(timeout = 4000)
    public void test062107() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        HashSet<String> hashSet0 = new HashSet<String>();
        node0.setDirectives(hashSet0);
        node0.toStringTree();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test063108() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        node0.putProp(49, "incrdecr");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test063109() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        node0.putProp(49, "incrdecr");
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test063110() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        node0.putProp(49, "incrdecr");
        node0.toStringTree();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test064111() throws Throwable {
        Node node0 = Node.newString("D/;@/@0NG/H<^E4+T");
        node0.putProp(50, "D/;@/@0NG/H<^E4+T");
        node0.toStringTree();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test064112() throws Throwable {
        Node node0 = Node.newString("D/;@/@0NG/H<^E4+T");
        node0.putProp(50, "D/;@/@0NG/H<^E4+T");
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test065113() throws Throwable {
        Node node0 = new Node(105, 105, 105);
        node0.setSourceFileForTesting("W");
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test066114() throws Throwable {
        Node node0 = Node.newString("Y_AxFe^0");
        node0.putProp(54, node0);
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test066115() throws Throwable {
        Node node0 = Node.newString("Y_AxFe^0");
        node0.putProp(54, node0);
        node0.toStringTree();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test067116() throws Throwable {
        Node node0 = Node.newString("setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got ");
        node0.putProp(55, "setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got ");
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test067117() throws Throwable {
        Node node0 = Node.newString("setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got ");
        node0.putProp(55, "setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got ");
        node0.toStringTree();
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test068118() throws Throwable {
        Node node0 = new Node(13);
        node0.setChangeTime((-135));
        node0.getDouble();
    }

    @Test(timeout = 4000)
    public void test069119() throws Throwable {
        Node node0 = Node.newString("!");
        node0.putProp(57, "!");
        node0.toStringTree();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test069120() throws Throwable {
        Node node0 = Node.newString("!");
        node0.putProp(57, "!");
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test070121() throws Throwable {
        Node node0 = Node.newString("}m\"{${/lQS0b5f\"'V");
        node0.putProp(2, "}m\"{${/lQS0b5f\"'V");
        node0.toStringTree();
    }

    @Test(timeout = 4000)
    public void test071122() throws Throwable {
        Node node0 = Node.newNumber((double) 105, 105, 105);
        Node node1 = new Node(39);
        node0.checkTreeEqualsImpl(node1);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test071123() throws Throwable {
        Node node0 = Node.newNumber((double) 105, 105, 105);
        Node node1 = new Node(39);
        node0.checkTreeEqualsImpl(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test071124() throws Throwable {
        Node node0 = Node.newNumber((double) 105, 105, 105);
        Node node1 = new Node(39);
        node0.checkTreeEqualsImpl(node1);
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test071125() throws Throwable {
        Node node0 = Node.newNumber((double) 105, 105, 105);
        Node node1 = new Node(39);
        node0.checkTreeEqualsImpl(node1);
        node1.isNumber();
    }

    @Test(timeout = 4000)
    public void test072126() throws Throwable {
        Node node0 = Node.newNumber((-471.31165337815554));
        Node node1 = Node.newNumber((double) 50);
        node0.isEquivalentTo(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test072127() throws Throwable {
        Node node0 = Node.newNumber((-471.31165337815554));
        Node node1 = Node.newNumber((double) 50);
        node0.isEquivalentTo(node1);
        node1.isNumber();
    }

    @Test(timeout = 4000)
    public void test072128() throws Throwable {
        Node node0 = Node.newNumber((-471.31165337815554));
        Node node1 = Node.newNumber((double) 50);
        node0.isEquivalentTo(node1);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test073129() throws Throwable {
        Node.newString((String) null);
    }

    @Test(timeout = 4000)
    public void test074130() throws Throwable {
        Node node0 = Node.newString("D%Dv*");
        node0.setString("D%Dv*");
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test074131() throws Throwable {
        Node node0 = Node.newString("D%Dv*");
        node0.setString("D%Dv*");
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test075132() throws Throwable {
        Node node0 = Node.newString(": ");
        node0.setString((String) null);
    }

    @Test(timeout = 4000)
    public void test076133() throws Throwable {
        Node node0 = Node.newString("!", 119, 385);
        Node node1 = Node.newNumber((double) 49, 57, 38);
        String string0 = node0.checkTreeEquals(node1);
    }

    @Test(timeout = 4000)
    public void test076134() throws Throwable {
        Node node0 = Node.newString("!", 119, 385);
        Node node1 = Node.newNumber((double) 49, 57, 38);
        String string0 = node0.checkTreeEquals(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test076136() throws Throwable {
        Node node0 = Node.newString("!", 119, 385);
        Node node1 = Node.newNumber((double) 49, 57, 38);
        String string0 = node0.checkTreeEquals(node1);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test076137() throws Throwable {
        Node node0 = Node.newString("!", 119, 385);
        Node node1 = Node.newNumber((double) 49, 57, 38);
        String string0 = node0.checkTreeEquals(node1);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test077138() throws Throwable {
        Node node0 = Node.newString("Y_ACFe^0");
        Node node1 = Node.newString("JrUO:U.h");
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test077139() throws Throwable {
        Node node0 = Node.newString("Y_ACFe^0");
        Node node1 = Node.newString("JrUO:U.h");
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    }

    @Test(timeout = 4000)
    public void test077140() throws Throwable {
        Node node0 = Node.newString("Y_ACFe^0");
        Node node1 = Node.newString("JrUO:U.h");
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test077141() throws Throwable {
        Node node0 = Node.newString("Y_ACFe^0");
        Node node1 = Node.newString("JrUO:U.h");
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test078142() throws Throwable {
        Node node0 = new Node((-894));
        Node node1 = new Node(53, node0, node0, node0, 12, 31);
        Node node2 = null;
        node2 = new Node(39, node0);
    }

    @Test(timeout = 4000)
    public void test079143() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        Node node1 = new Node(48, node0, 53, 37);
        Node node2 = null;
        node2 = new Node(32, node0, node1);
    }

    @Test(timeout = 4000)
    public void test080144() throws Throwable {
        Node node0 = Node.newNumber((double) 112, 112, 112);
        Node node1 = new Node(112, node0, node0, node0, node0);
        Node node2 = null;
        node2 = new Node(52, node1, node0, 54, 38);
    }

    @Test(timeout = 4000)
    public void test081145() throws Throwable {
        Node node0 = new Node((-2748), 37, 37);
        Node node1 = new Node((-2748), node0, node0, node0);
        Node node2 = null;
        node2 = new Node(30, node0, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test082146() throws Throwable {
        Node node0 = new Node((-475), (-475), (-475));
        Node node1 = new Node((-475), node0, node0);
        Node node2 = null;
        node2 = new Node((-475), node1, node0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test083147() throws Throwable {
        Node node0 = Node.newString("new child has existing parent");
        Node node1 = new Node(47, node0, node0);
        Node node2 = null;
        node2 = new Node(38, node1, node1, node0, node0);
    }

    @Test(timeout = 4000)
    public void test084148() throws Throwable {
        Node node0 = Node.newString("synh_tc");
        Node node1 = new Node(4095, node0, node0, 52, 30);
        Node node2 = null;
        node2 = new Node(4095, node1, node1, node1, node0);
    }

    @Test(timeout = 4000)
    public void test085149() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        Node[] nodeArray0 = new Node[3];
        nodeArray0[0] = node0;
        nodeArray0[1] = node0;
        Node node1 = null;
        node1 = new Node(54, nodeArray0);
    }

    @Test(timeout = 4000)
    public void test086150() throws Throwable {
        Node node0 = Node.newNumber((double) 105, 105, 105);
        Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
        Node[] nodeArray0 = new Node[2];
        nodeArray0[0] = node0;
        Node node2 = null;
        node2 = new Node(2, nodeArray0, 46, 2);
    }

    @Test(timeout = 4000)
    public void test087151() throws Throwable {
        Node node0 = new Node(154);
        Node[] nodeArray0 = new Node[2];
        nodeArray0[0] = node0;
        nodeArray0[1] = node0;
        Node node1 = null;
        node1 = new Node(32, nodeArray0, 57, 1);
    }

    @Test(timeout = 4000)
    public void test088152() throws Throwable {
        Node node0 = new Node((-1454));
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test088153() throws Throwable {
        Node node0 = new Node((-1454));
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test088154() throws Throwable {
        Node node0 = new Node((-1454));
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node0;
        Node node1 = new Node(1, nodeArray0, 29, 29);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test088155() throws Throwable {
        Node node0 = new Node((-1454));
        Node[] nodeArray0 = new Node[1];
        nodeArray0[0] = node0;
        Node node1 = new Node(1, nodeArray0, 29, 29);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test089156() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.hasChildren();
        node0.isVar();
    }

    @Test(timeout = 4000)
    public void test089157() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test089158() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.hasChildren();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test090159() throws Throwable {
        Node node0 = Node.newNumber(23.15297892960499);
        Node node1 = new Node(85, node0, node0);
        boolean boolean0 = node1.hasChildren();
    }

    @Test(timeout = 4000)
    public void test090160() throws Throwable {
        Node node0 = Node.newNumber(23.15297892960499);
        Node node1 = new Node(85, node0, node0);
        boolean boolean0 = node1.hasChildren();
        node1.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test090161() throws Throwable {
        Node node0 = Node.newNumber(23.15297892960499);
        Node node1 = new Node(85, node0, node0);
        boolean boolean0 = node1.hasChildren();
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test090162() throws Throwable {
        Node node0 = Node.newNumber(23.15297892960499);
        Node node1 = new Node(85, node0, node0);
        boolean boolean0 = node1.hasChildren();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test090163() throws Throwable {
        Node node0 = Node.newNumber(23.15297892960499);
        Node node1 = new Node(85, node0, node0);
        boolean boolean0 = node1.hasChildren();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test090164() throws Throwable {
        Node node0 = Node.newNumber(23.15297892960499);
        Node node1 = new Node(85, node0, node0);
        boolean boolean0 = node1.hasChildren();
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test091165() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = modificationVisitor0.caseStringType();
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, jSType0, jSType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        node0.replaceChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test092166() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        Node node1 = new Node(0, node0);
        node1.removeChild((Node) null);
    }

    @Test(timeout = 4000)
    public void test093167() throws Throwable {
        Node node0 = Node.newString("Object#Element", (-3331), (-3331));
        Node node1 = node0.getChildAtIndex((-3331));
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test093168() throws Throwable {
        Node node0 = Node.newString("Object#Element", (-3331), (-3331));
        Node node1 = node0.getChildAtIndex((-3331));
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test093169() throws Throwable {
        Node node0 = Node.newString("Object#Element", (-3331), (-3331));
        Node node1 = node0.getChildAtIndex((-3331));
    }

    @Test(timeout = 4000)
    public void test094170() throws Throwable {
        Node node0 = Node.newString("ALWAYS_TRUE");
        node0.getChildAtIndex(310);
    }

    @Test(timeout = 4000)
    public void test095171() throws Throwable {
        Node node0 = Node.newString("FUANCTION_PROTOTYPE");
        node0.addChildrenToFront(node0);
        int int0 = node0.getIndexOfChild(node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test095172() throws Throwable {
        Node node0 = Node.newString("FUANCTION_PROTOTYPE");
        node0.addChildrenToFront(node0);
        int int0 = node0.getIndexOfChild(node0);
    }

    @Test(timeout = 4000)
    public void test096173() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ImmutableList<JSType> immutableList0 = ImmutableList.of();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        Node node1 = new Node(924, node0, node0, node0, node0);
        int int0 = node1.getIndexOfChild(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test096174() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ImmutableList<JSType> immutableList0 = ImmutableList.of();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        Node node1 = new Node(924, node0, node0, node0, node0);
        int int0 = node1.getIndexOfChild(node1);
    }

    @Test(timeout = 4000)
    public void test096175() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ImmutableList<JSType> immutableList0 = ImmutableList.of();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        Node node1 = new Node(924, node0, node0, node0, node0);
        int int0 = node1.getIndexOfChild(node1);
        node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test096176() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        ImmutableList<JSType> immutableList0 = ImmutableList.of();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        Node node1 = new Node(924, node0, node0, node0, node0);
        int int0 = node1.getIndexOfChild(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test097177() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
    }

    @Test(timeout = 4000)
    public void test097178() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
        Node node2 = new Node(148, node1, node0);
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test097179() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
        Node node2 = new Node(148, node1, node0);
        node2.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test097180() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
        Node node2 = new Node(148, node1, node0);
        node2.isSetterDef();
    }

    @Test(timeout = 4000)
    public void test097181() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
        Node node2 = new Node(148, node1, node0);
        node2.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test097182() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
        Node node2 = new Node(148, node1, node0);
        Node node3 = node1.getLastSibling();
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test097183() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
        Node node2 = new Node(148, node1, node0);
        Node node3 = node1.getLastSibling();
        node3.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test097184() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
        Node node2 = new Node(148, node1, node0);
        Node node3 = node1.getLastSibling();
    }

    @Test(timeout = 4000)
    public void test098185() throws Throwable {
        Node node0 = new Node((-1718), (-1718), (-1718));
        Node node1 = new Node((-1718), node0, node0, node0, node0);
        node1.addChildToFront(node0);
    }

    @Test(timeout = 4000)
    public void test099186() throws Throwable {
        Node node0 = Node.newNumber((-1558.774296069));
        Node node1 = Node.newString(36, "no next sibling.", 31, 36);
        Node node2 = new Node(18, node0, node0, node1, 49, 53);
        Node node3 = node2.removeChildren();
        node3.addChildToFront(node3);
    }

    @Test(timeout = 4000)
    public void test100187() throws Throwable {
        Node node0 = new Node((-3791));
        Node node1 = new Node(57, node0);
        node1.addChildToBack(node0);
    }

    @Test(timeout = 4000)
    public void test101188() throws Throwable {
        Node node0 = new Node(34);
        Node node1 = new Node(48, node0, node0, node0, 54, 4095);
        node1.addChildrenToFront(node0);
    }

    @Test(timeout = 4000)
    public void test102189() throws Throwable {
        Node node0 = new Node(2635, 3033, 3033);
        Node node1 = new Node(1303, node0, node0, node0, node0);
        node1.addChildrenToFront(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test103190() throws Throwable {
        Node node0 = Node.newString("5.");
        node0.addChildBefore((Node) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test104191() throws Throwable {
        Node node0 = Node.newString("5.");
        node0.addChildBefore(node0, node0);
    }

    @Test(timeout = 4000)
    public void test105192() throws Throwable {
        Node node0 = Node.newString("FUNCKzON)^PR]]OTYP");
        Node node1 = new Node(12, node0, node0, node0, 51, 2);
        node1.addChildBefore(node0, node0);
    }

    @Test(timeout = 4000)
    public void test106193() throws Throwable {
        Node node0 = Node.newString("FUNCKzON)^PR]]OTYP");
        Node node1 = new Node(51, 2, 51);
        Node node2 = new Node(12, node0, node1, node0, 51, 2);
        node2.addChildBefore(node1, node0);
    }

    @Test(timeout = 4000)
    public void test107194() throws Throwable {
        Node node0 = Node.newNumber(3292.378991876403);
        Node node1 = new Node(4095, node0, node0, node0);
        node1.addChildBefore(node1, node0);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test108195() throws Throwable {
        Node node0 = Node.newNumber(3292.378991876403);
        Node node1 = Node.newNumber(4217.053478921, 2, 29);
        Node node2 = new Node(4095, node0, node0, node1);
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test108196() throws Throwable {
        Node node0 = Node.newNumber(3292.378991876403);
        Node node1 = Node.newNumber(4217.053478921, 2, 29);
        Node node2 = new Node(4095, node0, node0, node1);
        node2.addChildBefore(node2, node1);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test109197() throws Throwable {
        Node node0 = new Node((-3752), (-3752), (-3752));
        Node node1 = new Node(103, 30, 42);
        Node node2 = new Node(392, node0, node1, node1, node1, 2545, 52);
        node1.addChildAfter(node0, node2);
    }

    @Test(timeout = 4000)
    public void test110198() throws Throwable {
        Node node0 = Node.newNumber((double) (-1881));
        node0.addChildrenAfter(node0, node0);
    }

    @Test(timeout = 4000)
    public void test111199() throws Throwable {
        Node node0 = new Node((-2411));
        Node node1 = new Node(39, node0, node0);
        node1.addChildrenToBack(node0);
    }

    @Test(timeout = 4000)
    public void test112200() throws Throwable {
        Node node0 = new Node(38);
        node0.addChildrenToBack(node0);
        Node node1 = Node.newString("b^hA");
        node0.addChildrenToBack(node1);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test113201() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Object#Key");
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) templateType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        node0.addChildrenAfter(node0, (Node) null);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test114202() throws Throwable {
        Node node0 = new Node(25, 25, 97);
        Node node1 = Node.newString(4095, "8[7b(OV4q;6!`9vOqV");
        Node node2 = new Node(97, node0, node1, 3777, 110);
        node2.removeFirstChild();
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test115203() throws Throwable {
        Node node0 = Node.newString("YimPZnfCVFn");
        Node node1 = Node.newString(47, "YimPZnfCVFn");
        Node node2 = new Node(54, node0, node1, node1, 56, 42);
        node2.replaceChild(node1, node0);
    }

    @Test(timeout = 4000)
    public void test116204() throws Throwable {
        Node node0 = new Node(65536);
        Node node1 = new Node(37, node0, node0);
        node1.replaceChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test117205() throws Throwable {
        Node node0 = Node.newString("Node tree inequality:\nTree1:\n");
        Node node1 = new Node(40, node0, node0);
        Node node2 = new Node((-3384), node1, 37, 4095);
        node2.getCharno();
    }

    @Test(timeout = 4000)
    public void test117206() throws Throwable {
        Node node0 = Node.newString("Node tree inequality:\nTree1:\n");
        Node node1 = new Node(40, node0, node0);
        Node node2 = new Node((-3384), node1, 37, 4095);
        node1.replaceChild(node0, node2);
        node2.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test117207() throws Throwable {
        Node node0 = Node.newString("Node tree inequality:\nTree1:\n");
        Node node1 = new Node(40, node0, node0);
        Node node2 = new Node((-3384), node1, 37, 4095);
        node1.replaceChild(node0, node2);
        node2.getLineno();
    }

    @Test(timeout = 4000)
    public void test118208() throws Throwable {
        Node node0 = Node.newString("Node tree inequality:\nTree1:\n");
        Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
        Node node2 = new Node(40, node0, node1);
        Node node3 = new Node((-3384), node2, 37, 4095);
        node2.replaceChild(node0, node3);
        node3.getCharno();
    }

    @Test(timeout = 4000)
    public void test118209() throws Throwable {
        Node node0 = Node.newString("Node tree inequality:\nTree1:\n");
        Node node1 = Node.newString("Node tree inequality:\nTree1:\n");
        Node node2 = new Node(40, node0, node1);
        Node node3 = new Node((-3384), node2, 37, 4095);
        node2.replaceChild(node0, node3);
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test119210() throws Throwable {
        Node node0 = Node.newString("DEBUGGER");
        node0.replaceChildAfter(node0, node0);
    }

    @Test(timeout = 4000)
    public void test120211() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = new Node(48, node0, node0, node0);
        node1.replaceChildAfter(node0, node0);
    }

    @Test(timeout = 4000)
    public void test121212() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = new Node(4);
        Node node2 = new Node(48, node1, node1, node0);
        node2.replaceChildAfter(node0, node1);
    }

    @Test(timeout = 4000)
    public void test122213() throws Throwable {
        Node node0 = new Node((-856));
        Node node1 = new Node(12, node0, node0, node0);
        node1.replaceChildAfter(node0, node1);
    }

    @Test(timeout = 4000)
    public void test123214() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        node0.setOptionalArg(true);
        node0.clonePropsFrom(node0);
    }

    @Test(timeout = 4000)
    public void test124215() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        Node node1 = node0.clonePropsFrom(node0);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test124216() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        Node node1 = node0.clonePropsFrom(node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test125217() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        JSType jSType0 = modificationVisitor0.caseFunctionType(functionType0);
        jSType0.getPossibleToBooleanOutcomes();
    }

    @Test(timeout = 4000)
    public void test126218() throws Throwable {
        Node node0 = Node.newNumber((double) 31);
        node0.getExistingIntProp(4);
    }

    @Test(timeout = 4000)
    public void test127219() throws Throwable {
        Node node0 = new Node(39, 39, 39);
        node0.toStringTree();
    }

    @Test(timeout = 4000)
    public void test128220() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        node0.setDouble(118);
    }

    @Test(timeout = 4000)
    public void test129221() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(39, node0, node0, node0, 39, 52);
        node1.setDouble(29);
    }

    @Test(timeout = 4000)
    public void test130222() throws Throwable {
        Node node0 = new Node(40);
        node0.getString();
    }

    @Test(timeout = 4000)
    public void test131223() throws Throwable {
        Node node0 = new Node(40, 102, 119);
        node0.setString("com.google.common.collect.Platform");
    }

    @Test(timeout = 4000)
    public void test132224() throws Throwable {
        Node node0 = new Node(51, 38, 51);
        node0.setString("!");
    }

    @Test(timeout = 4000)
    public void test133225() throws Throwable {
        Node node0 = new Node(51, 38, 51);
        Node node1 = new Node(38, node0, node0);
        node1.setString("!");
    }

    @Test(timeout = 4000)
    public void test134226() throws Throwable {
        Node node0 = Node.newNumber((double) 105, 105, 105);
        Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
        String string0 = node1.toStringTree();
    }

    @Test(timeout = 4000)
    public void test134227() throws Throwable {
        Node node0 = Node.newNumber((double) 105, 105, 105);
        Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
        String string0 = node1.toStringTree();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test134228() throws Throwable {
        Node node0 = Node.newNumber((double) 105, 105, 105);
        Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
        String string0 = node1.toStringTree();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test134229() throws Throwable {
        Node node0 = Node.newNumber((double) 105, 105, 105);
        Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
        String string0 = node1.toStringTree();
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test134230() throws Throwable {
        Node node0 = Node.newNumber((double) 105, 105, 105);
        Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
        String string0 = node1.toStringTree();
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test135231() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        String string0 = node0.toString(false, false, false);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test135232() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        String string0 = node0.toString(false, false, false);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test135233() throws Throwable {
        Node node0 = Node.newNumber(0.0);
        String string0 = node0.toString(false, false, false);
    }

    @Test(timeout = 4000)
    public void test136234() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
        JSType[] jSTypeArray0 = new JSType[6];
        jSTypeArray0[0] = (JSType) templateType0;
        jSTypeArray0[5] = (JSType) templateType0;
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
        node0.toStringTree();
    }

    @Test(timeout = 4000)
    public void test137235() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Object#Key");
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) templateType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        node0.toStringTree();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test137236() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Object#Key");
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) templateType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        node0.toStringTree();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test138237() throws Throwable {
        Node node0 = Node.newString(122, "prev is not a child of this node.");
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("prev is not a child of this node.", false);
        node0.setStaticSourceFile(simpleSourceFile0);
        String string0 = node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test138238() throws Throwable {
        Node node0 = Node.newString(122, "prev is not a child of this node.");
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("prev is not a child of this node.", false);
        node0.setStaticSourceFile(simpleSourceFile0);
        String string0 = node0.getSourceFileName();
        node0.isVoid();
    }

    @Test(timeout = 4000)
    public void test139239() throws Throwable {
        Node node0 = new Node(118);
        node0.getSourceFileName();
        node0.isVar();
    }

    @Test(timeout = 4000)
    public void test139240() throws Throwable {
        Node node0 = new Node(118);
        node0.getSourceFileName();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test140241() throws Throwable {
        Node node0 = new Node(2747, 2747, 2747);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("<invalid>", false);
        node0.setStaticSourceFile(simpleSourceFile0);
        node0.isFromExterns();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test140242() throws Throwable {
        Node node0 = new Node(2747, 2747, 2747);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("<invalid>", false);
        node0.setStaticSourceFile(simpleSourceFile0);
        node0.isFromExterns();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test141243() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        node0.isFromExterns();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test141244() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        node0.isFromExterns();
        node0.isStringKey();
    }

    @Test(timeout = 4000)
    public void test142245() throws Throwable {
        Node node0 = new Node((-3377), (-2084), (-3377));
        node0.setSourceFileForTesting("`J");
        int int0 = node0.getSourceOffset();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test142246() throws Throwable {
        Node node0 = new Node((-3377), (-2084), (-3377));
        node0.setSourceFileForTesting("`J");
        int int0 = node0.getSourceOffset();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test142247() throws Throwable {
        Node node0 = new Node((-3377), (-2084), (-3377));
        node0.setSourceFileForTesting("`J");
        int int0 = node0.getSourceOffset();
    }

    @Test(timeout = 4000)
    public void test143248() throws Throwable {
        Node node0 = new Node(154, 1648, 1648);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Ju?o$?[fjA%S8'! O", false);
        node0.setStaticSourceFile(simpleSourceFile0);
        int int0 = node0.getSourceOffset();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test143249() throws Throwable {
        Node node0 = new Node(154, 1648, 1648);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Ju?o$?[fjA%S8'! O", false);
        node0.setStaticSourceFile(simpleSourceFile0);
        int int0 = node0.getSourceOffset();
    }

    @Test(timeout = 4000)
    public void test143250() throws Throwable {
        Node node0 = new Node(154, 1648, 1648);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Ju?o$?[fjA%S8'! O", false);
        node0.setStaticSourceFile(simpleSourceFile0);
        int int0 = node0.getSourceOffset();
        node0.isStringKey();
    }

    @Test(timeout = 4000)
    public void test144251() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        node0.setLineno(33);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test144252() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        node0.setLineno(33);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test145253() throws Throwable {
        Node node0 = new Node(130);
        Node node1 = new Node(130, node0, node0, node0, node0, 43, 52);
        node1.setSourceEncodedPositionForTree(53);
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test145254() throws Throwable {
        Node node0 = new Node(130);
        Node node1 = new Node(130, node0, node0, node0, node0, 43, 52);
        node1.setSourceEncodedPositionForTree(53);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test146255() throws Throwable {
        Node node0 = new Node(47, 47, 751619276);
        boolean boolean0 = node0.isRegExp();
    }

    @Test(timeout = 4000)
    public void test146256() throws Throwable {
        Node node0 = new Node(47, 47, 751619276);
        boolean boolean0 = node0.isRegExp();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test147257() throws Throwable {
        Node node0 = new Node(1389);
        node0.children();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test147258() throws Throwable {
        Node node0 = new Node(1389);
        node0.children();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test148259() throws Throwable {
        Node node0 = Node.newString("79AK `an~");
        node0.getAncestor((-1671));
    }

    @Test(timeout = 4000)
    public void test149260() throws Throwable {
        Node node0 = Node.newString("}m\"{${/l7jQS0b5f\"'V");
        Node node1 = node0.getAncestor(0);
    }

    @Test(timeout = 4000)
    public void test149261() throws Throwable {
        Node node0 = Node.newString("}m\"{${/l7jQS0b5f\"'V");
        Node node1 = node0.getAncestor(0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test149262() throws Throwable {
        Node node0 = Node.newString("}m\"{${/l7jQS0b5f\"'V");
        Node node1 = node0.getAncestor(0);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test150263() throws Throwable {
        Node node0 = new Node(102);
        Node node1 = node0.getAncestor(102);
    }

    @Test(timeout = 4000)
    public void test150264() throws Throwable {
        Node node0 = new Node(102);
        Node node1 = node0.getAncestor(102);
        node0.isInc();
    }

    @Test(timeout = 4000)
    public void test151265() throws Throwable {
        Node node0 = new Node(113);
        Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        node_AncestorIterable0.forEach(consumer0);
        node0.isWhile();
    }

    @Test(timeout = 4000)
    public void test151266() throws Throwable {
        Node node0 = new Node(113);
        Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        node_AncestorIterable0.forEach(consumer0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test151267() throws Throwable {
        Node node0 = new Node(113);
        Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        node_AncestorIterable0.forEach(consumer0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test152268() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = node0.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test152269() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = node0.hasOneChild();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test152270() throws Throwable {
        Node node0 = new Node(47);
        boolean boolean0 = node0.hasOneChild();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test153271() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(16, node0, node0, node0, node0, 53, 53);
        boolean boolean0 = node1.hasOneChild();
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test153272() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(16, node0, node0, node0, node0, 53, 53);
        boolean boolean0 = node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test153273() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(16, node0, node0, node0, node0, 53, 53);
        boolean boolean0 = node1.hasOneChild();
        node0.isGetProp();
    }

    @Test(timeout = 4000)
    public void test153274() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(16, node0, node0, node0, node0, 53, 53);
        boolean boolean0 = node1.hasOneChild();
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test154275() throws Throwable {
        Node node0 = new Node((-29));
        Node node1 = new Node(38);
        Node node2 = new Node(1023, node1, node0, 2411, 2411);
        node2.hasOneChild();
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test154276() throws Throwable {
        Node node0 = new Node((-29));
        Node node1 = new Node(38);
        Node node2 = new Node(1023, node1, node0, 2411, 2411);
        node2.hasOneChild();
        node2.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test154277() throws Throwable {
        Node node0 = new Node((-29));
        Node node1 = new Node(38);
        Node node2 = new Node(1023, node1, node0, 2411, 2411);
        node2.hasOneChild();
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test154278() throws Throwable {
        Node node0 = new Node((-29));
        Node node1 = new Node(38);
        Node node2 = new Node(1023, node1, node0, 2411, 2411);
        node2.hasOneChild();
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test154279() throws Throwable {
        Node node0 = new Node((-29));
        Node node1 = new Node(38);
        Node node2 = new Node(1023, node1, node0, 2411, 2411);
        node2.hasOneChild();
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test155280() throws Throwable {
        Node node0 = Node.newString("!", 119, 385);
        node0.hasMoreThanOneChild();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test155281() throws Throwable {
        Node node0 = Node.newString("!", 119, 385);
        node0.hasMoreThanOneChild();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test156282() throws Throwable {
        JSType[] jSTypeArray0 = new JSType[2];
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        boolean boolean0 = node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test156283() throws Throwable {
        JSType[] jSTypeArray0 = new JSType[2];
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        boolean boolean0 = node0.hasMoreThanOneChild();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test156284() throws Throwable {
        JSType[] jSTypeArray0 = new JSType[2];
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
        boolean boolean0 = node0.hasMoreThanOneChild();
        node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test157285() throws Throwable {
        Node node0 = new Node(76);
        node0.addChildrenToBack(node0);
        boolean boolean0 = node0.hasMoreThanOneChild();
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test157286() throws Throwable {
        Node node0 = new Node(76);
        node0.addChildrenToBack(node0);
        boolean boolean0 = node0.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test158287() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseStringType();
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = jSType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        boolean boolean0 = node0.hasChild(node0);
    }

    @Test(timeout = 4000)
    public void test158288() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseStringType();
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = jSType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        boolean boolean0 = node0.hasChild(node0);
        node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test158289() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseStringType();
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = jSType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        boolean boolean0 = node0.hasChild(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test158290() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseStringType();
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = jSType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        boolean boolean0 = node0.hasChild(node0);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test159291() throws Throwable {
        Node node0 = Node.newNumber((-474.9454345372132));
        node0.addChildToFront(node0);
        boolean boolean0 = node0.hasChild(node0);
        node0.hasChildren();
    }

    @Test(timeout = 4000)
    public void test159292() throws Throwable {
        Node node0 = Node.newNumber((-474.9454345372132));
        node0.addChildToFront(node0);
        boolean boolean0 = node0.hasChild(node0);
    }

    @Test(timeout = 4000)
    public void test160293() throws Throwable {
        Node node0 = Node.newString(125, "!y/5/Afx");
        String string0 = node0.checkTreeEquals(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test160294() throws Throwable {
        Node node0 = Node.newString(125, "!y/5/Afx");
        String string0 = node0.checkTreeEquals(node0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test160295() throws Throwable {
        Node node0 = Node.newString(125, "!y/5/Afx");
        String string0 = node0.checkTreeEquals(node0);
        node0.isBlock();
    }

    @Test(timeout = 4000)
    public void test160296() throws Throwable {
        Node node0 = Node.newString(125, "!y/5/Afx");
        String string0 = node0.checkTreeEquals(node0);
    }

    @Test(timeout = 4000)
    public void test161297() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        Node node1 = new Node(52, node0, node0, 12, 0);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test161298() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        Node node1 = new Node(52, node0, node0, 12, 0);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test161299() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        Node node1 = new Node(52, node0, node0, 12, 0);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test161300() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        Node node1 = new Node(52, node0, node0, 12, 0);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
        node1.isInstanceOf();
    }

    @Test(timeout = 4000)
    public void test161301() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        Node node1 = new Node(52, node0, node0, 12, 0);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    }

    @Test(timeout = 4000)
    public void test161302() throws Throwable {
        Node node0 = new Node(65, 65, 65);
        Node node1 = new Node(52, node0, node0, 12, 0);
        Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test162303() throws Throwable {
        Node node0 = Node.newNumber((double) (-894), (-894), (-894));
        Node node1 = new Node((-894), node0, node0, node0, node0);
        Node node2 = new Node((-894), node1, 56, 57);
        node2.checkTreeEqualsImpl(node1);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test162304() throws Throwable {
        Node node0 = Node.newNumber((double) (-894), (-894), (-894));
        Node node1 = new Node((-894), node0, node0, node0, node0);
        Node node2 = new Node((-894), node1, 56, 57);
        node2.checkTreeEqualsImpl(node1);
        node2.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test162305() throws Throwable {
        Node node0 = Node.newNumber((double) (-894), (-894), (-894));
        Node node1 = new Node((-894), node0, node0, node0, node0);
        Node node2 = new Node((-894), node1, 56, 57);
        node2.checkTreeEqualsImpl(node1);
        node1.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test162306() throws Throwable {
        Node node0 = Node.newNumber((double) (-894), (-894), (-894));
        Node node1 = new Node((-894), node0, node0, node0, node0);
        Node node2 = new Node((-894), node1, 56, 57);
        node2.checkTreeEqualsImpl(node1);
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test162307() throws Throwable {
        Node node0 = Node.newNumber((double) (-894), (-894), (-894));
        Node node1 = new Node((-894), node0, node0, node0, node0);
        Node node2 = new Node((-894), node1, 56, 57);
        node2.checkTreeEqualsImpl(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test162308() throws Throwable {
        Node node0 = Node.newNumber((double) (-894), (-894), (-894));
        Node node1 = new Node((-894), node0, node0, node0, node0);
        Node node2 = new Node((-894), node1, 56, 57);
        node2.checkTreeEqualsImpl(node1);
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test163309() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    }

    @Test(timeout = 4000)
    public void test163310() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test163311() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test163312() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
        FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
        Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
        Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test164313() throws Throwable {
        Node node0 = new Node(29);
        Node node1 = new Node(29, node0, node0, node0, 43, 53);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test164314() throws Throwable {
        Node node0 = new Node(29);
        Node node1 = new Node(29, node0, node0, node0, 43, 53);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test164315() throws Throwable {
        Node node0 = new Node(29);
        Node node1 = new Node(29, node0, node0, node0, 43, 53);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    }

    @Test(timeout = 4000)
    public void test164316() throws Throwable {
        Node node0 = new Node(29);
        Node node1 = new Node(29, node0, node0, node0, 43, 53);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test165317() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test165318() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
    }

    @Test(timeout = 4000)
    public void test165319() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test165320() throws Throwable {
        Node node0 = new Node(102, 102, 102);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
        node0.isInc();
    }

    @Test(timeout = 4000)
    public void test166321() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test166322() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    }

    @Test(timeout = 4000)
    public void test166323() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test166324() throws Throwable {
        Node node0 = new Node(103, 103, 103);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test167325() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    }

    @Test(timeout = 4000)
    public void test167326() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test167327() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test167328() throws Throwable {
        Node node0 = new Node(37);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test168329() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(95, node0, node0, node0, node0);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test168330() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(95, node0, node0, node0, node0);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test168331() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(95, node0, node0, node0, node0);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test168332() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(95, node0, node0, node0, node0);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
    }

    @Test(timeout = 4000)
    public void test168333() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(95, node0, node0, node0, node0);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node0.isFunction();
    }

    @Test(timeout = 4000)
    public void test169334() throws Throwable {
        Node node0 = Node.newNumber((double) (-885), (-885), (-885));
        Node node1 = new Node(15, node0, node0, 38, 50);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
    }

    @Test(timeout = 4000)
    public void test169335() throws Throwable {
        Node node0 = Node.newNumber((double) (-885), (-885), (-885));
        Node node1 = new Node(15, node0, node0, 38, 50);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test169336() throws Throwable {
        Node node0 = Node.newNumber((double) (-885), (-885), (-885));
        Node node1 = new Node(15, node0, node0, 38, 50);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test169337() throws Throwable {
        Node node0 = Node.newNumber((double) (-885), (-885), (-885));
        Node node1 = new Node(15, node0, node0, 38, 50);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test169338() throws Throwable {
        Node node0 = Node.newNumber((double) (-885), (-885), (-885));
        Node node1 = new Node(15, node0, node0, 38, 50);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test169339() throws Throwable {
        Node node0 = Node.newNumber((double) (-885), (-885), (-885));
        Node node1 = new Node(15, node0, node0, 38, 50);
        boolean boolean0 = node1.isEquivalentToShallow(node1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test170340() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Object#Element");
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) templateType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        boolean boolean0 = node0.isEquivalentToTyped(node1);
        node1.getChildCount();
    }

    @Test(timeout = 4000)
    public void test170341() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Object#Element");
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) templateType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        boolean boolean0 = node0.isEquivalentToTyped(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test170342() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Object#Element");
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) templateType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
        boolean boolean0 = node0.isEquivalentToTyped(node1);
    }

    @Test(timeout = 4000)
    public void test171343() throws Throwable {
        Node node0 = new Node(38, 38, 38);
        node0.getQualifiedName();
    }

    @Test(timeout = 4000)
    public void test172344() throws Throwable {
        Node node0 = Node.newString("n");
        node0.setType(38);
        node0.getQualifiedName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test173345() throws Throwable {
        Node node0 = Node.newString("");
        node0.setType(38);
        node0.getQualifiedName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test174346() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        Node node1 = new Node(42, node0, node0);
        node0.addChildrenToBack(node1);
        node0.getQualifiedName();
    }

    @Test(timeout = 4000)
    public void test175347() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(16, node0, node0, node0, node0);
        node0.addChildrenToBack(node1);
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test175348() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(16, node0, node0, node0, node0);
        node0.addChildrenToBack(node1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test175349() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(16, node0, node0, node0, node0);
        node0.addChildrenToBack(node1);
        node0.getQualifiedName();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test175350() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(16, node0, node0, node0, node0);
        node0.addChildrenToBack(node1);
        node0.getQualifiedName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test176351() throws Throwable {
        Node node0 = new Node(33, 18, 18);
        node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test177352() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        node0.isQualifiedName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test177353() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        node0.isQualifiedName();
        node0.isNew();
    }

    @Test(timeout = 4000)
    public void test178354() throws Throwable {
        Node node0 = Node.newString("");
        node0.isName();
    }

    @Test(timeout = 4000)
    public void test178355() throws Throwable {
        Node node0 = Node.newString("");
        node0.setType(38);
        node0.isQualifiedName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test179356() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        boolean boolean0 = node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test179357() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        boolean boolean0 = node0.isQualifiedName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test180358() throws Throwable {
        Node node0 = Node.newString("FUNCTONPROTTYPE");
        node0.isName();
    }

    @Test(timeout = 4000)
    public void test180359() throws Throwable {
        Node node0 = Node.newString("FUNCTONPROTTYPE");
        node0.setType(38);
        boolean boolean0 = node0.isQualifiedName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test180360() throws Throwable {
        Node node0 = Node.newString("FUNCTONPROTTYPE");
        node0.setType(38);
        boolean boolean0 = node0.isQualifiedName();
    }

    @Test(timeout = 4000)
    public void test181361() throws Throwable {
        Node node0 = new Node(33, 33, 33);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test182362() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        node0.isUnscopedQualifiedName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test182363() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        node0.isUnscopedQualifiedName();
        node0.isNew();
    }

    @Test(timeout = 4000)
    public void test183364() throws Throwable {
        Node node0 = new Node(38);
        node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test184365() throws Throwable {
        Node node0 = Node.newString("4");
        node0.isName();
    }

    @Test(timeout = 4000)
    public void test184366() throws Throwable {
        Node node0 = Node.newString("4");
        node0.setType(38);
        boolean boolean0 = node0.isUnscopedQualifiedName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test184367() throws Throwable {
        Node node0 = Node.newString("4");
        node0.setType(38);
        boolean boolean0 = node0.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test185369() throws Throwable {
        Node node0 = Node.newString("");
        node0.setType(38);
        node0.isUnscopedQualifiedName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test186370() throws Throwable {
        Node node0 = new Node(29, 29, 29);
        node0.detachFromParent();
    }

    @Test(timeout = 4000)
    public void test187371() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(16, node0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test187372() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(16, node0);
        node1.hasChildren();
    }

    @Test(timeout = 4000)
    public void test187373() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(16, node0);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test187374() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(16, node0);
        Node node2 = node0.detachFromParent();
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test187375() throws Throwable {
        Node node0 = new Node(33);
        Node node1 = new Node(16, node0);
        Node node2 = node0.detachFromParent();
        node2.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test188376() throws Throwable {
        Node node0 = new Node(0, 0, 0);
        node0.removeFirstChild();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test188377() throws Throwable {
        Node node0 = new Node(0, 0, 0);
        node0.removeFirstChild();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test189378() throws Throwable {
        Node node0 = new Node(2792, 2792, 2792);
        Node node1 = new Node(56, node0, node0, 15, 4);
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test189379() throws Throwable {
        Node node0 = new Node(2792, 2792, 2792);
        Node node1 = new Node(56, node0, node0, 15, 4);
        node1.detachChildren();
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test190380() throws Throwable {
        Node node0 = Node.newString("}m\"{${/l7jQS0b5f\"'V");
        node0.removeChildAfter(node0);
    }

    @Test(timeout = 4000)
    public void test191381() throws Throwable {
        Node node0 = Node.newString("synh_U");
        Node node1 = new Node(56, node0, node0, node0);
        node1.removeChildAfter(node0);
    }

    @Test(timeout = 4000)
    public void test192382() throws Throwable {
        Node node0 = Node.newString("synh_U");
        Node node1 = Node.newString(57, "synh_U", 12, 0);
        Node node2 = new Node(56, node1, node0, node1);
        node2.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test192383() throws Throwable {
        Node node0 = Node.newString("synh_U");
        Node node1 = Node.newString(57, "synh_U", 12, 0);
        Node node2 = new Node(56, node1, node0, node1);
        node2.removeChildAfter(node0);
        node2.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test193384() throws Throwable {
        Node node0 = Node.newString("synh_U");
        Node node1 = Node.newString(57, "synh_U", 12, 0);
        Node node2 = new Node(56, node1, node0, node1);
        node2.getChildCount();
    }

    @Test(timeout = 4000)
    public void test193385() throws Throwable {
        Node node0 = Node.newString("synh_U");
        Node node1 = Node.newString(57, "synh_U", 12, 0);
        Node node2 = new Node(56, node1, node0, node1);
        node2.removeChildren();
        node2.removeChildAfter(node0);
        node1.getCharno();
    }

    @Test(timeout = 4000)
    public void test194386() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
        Node node2 = new Node((-1695), node0, node1, 57, 31);
        Node node3 = node2.cloneTree();
        node3.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test194387() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
        Node node2 = new Node((-1695), node0, node1, 57, 31);
        Node node3 = node2.cloneTree();
        node3.getType();
    }

    @Test(timeout = 4000)
    public void test194388() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
        Node node2 = new Node((-1695), node0, node1, 57, 31);
        Node node3 = node2.cloneTree();
        node2.hasChildren();
    }

    @Test(timeout = 4000)
    public void test194389() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
        Node node2 = new Node((-1695), node0, node1, 57, 31);
        Node node3 = node2.cloneTree();
        node1.isString();
    }

    @Test(timeout = 4000)
    public void test194390() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
        Node node2 = new Node((-1695), node0, node1, 57, 31);
        Node node3 = node2.cloneTree();
        node3.getChildCount();
    }

    @Test(timeout = 4000)
    public void test194391() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        Node node1 = node0.cloneNode();
        Node node2 = new Node((-1695), node0, node1, 57, 31);
        Node node3 = node2.cloneTree();
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test195392() throws Throwable {
        Node node0 = new Node(2747, 2747, 2747);
        SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("<invalid>", false);
        node0.setStaticSourceFile(simpleSourceFile0);
        node0.replaceChild(node0, node0);
    }

    @Test(timeout = 4000)
    public void test196393() throws Throwable {
        Node node0 = Node.newNumber(3292.378991876403);
        Node node1 = new Node(4095, node0, node0, node0);
        node1.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test196394() throws Throwable {
        Node node0 = Node.newNumber(3292.378991876403);
        Node node1 = new Node(4095, node0, node0, node0);
        Node node2 = node1.copyInformationFromForTree(node0);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test196395() throws Throwable {
        Node node0 = Node.newNumber(3292.378991876403);
        Node node1 = new Node(4095, node0, node0, node0);
        Node node2 = node1.copyInformationFromForTree(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test196396() throws Throwable {
        Node node0 = Node.newNumber(3292.378991876403);
        Node node1 = new Node(4095, node0, node0, node0);
        Node node2 = node1.copyInformationFromForTree(node0);
        node2.getCharno();
    }

    @Test(timeout = 4000)
    public void test197397() throws Throwable {
        Node node0 = new Node((-894));
        Node node1 = new Node(53, node0, node0, node0, 12, 31);
        node1.useSourceInfoFromForTree(node0);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test198398() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(95, node0, node0, node0, node0);
        Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
        node2.getType();
    }

    @Test(timeout = 4000)
    public void test198399() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(95, node0, node0, node0, node0);
        Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
        node2.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test198400() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(95, node0, node0, node0, node0);
        Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test198401() throws Throwable {
        Node node0 = new Node(105);
        Node node1 = new Node(95, node0, node0, node0, node0);
        Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
        node2.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test199402() throws Throwable {
        Node node0 = new Node(619, 619, 619);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.setJSDocInfo(jSDocInfo0);
        node0.addSuppression("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test199403() throws Throwable {
        Node node0 = new Node(619, 619, 619);
        JSDocInfo jSDocInfo0 = new JSDocInfo();
        node0.setJSDocInfo(jSDocInfo0);
        node0.addSuppression("setIsNoSideEffectsCall only supports CALL and NEW nodes, got ");
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test200404() throws Throwable {
        Node node0 = new Node(61);
        node0.addSuppression((String) null);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test201405() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test201406() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        node0.setSideEffectFlags(119);
        boolean boolean0 = node0.mayMutateArguments();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test201407() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        node0.setSideEffectFlags(119);
        boolean boolean0 = node0.mayMutateArguments();
    }

    @Test(timeout = 4000)
    public void test202408() throws Throwable {
        Node node0 = Node.newNumber(1.0);
        node0.setSideEffectFlags(49);
    }

    @Test(timeout = 4000)
    public void test203409() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
        boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
    }

    @Test(timeout = 4000)
    public void test203410() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
        boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
        node_SideEffectFlags0.valueOf();
    }

    @Test(timeout = 4000)
    public void test204411() throws Throwable {
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
        boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
    }

    @Test(timeout = 4000)
    public void test205412() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = node0.mayMutateArguments();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test205413() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = node0.mayMutateArguments();
    }

    @Test(timeout = 4000)
    public void test205414() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = node0.mayMutateArguments();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test206415() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2862);
        Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
        node0.setSideEffectFlags(node_SideEffectFlags1);
        boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test206416() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2862);
        Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
        node0.setSideEffectFlags(node_SideEffectFlags1);
        boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test206417() throws Throwable {
        Node node0 = new Node(37, 37, 37);
        Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2862);
        Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
        node0.setSideEffectFlags(node_SideEffectFlags1);
        boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    }

    @Test(timeout = 4000)
    public void test207418() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    }

    @Test(timeout = 4000)
    public void test207419() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test207420() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test208421() throws Throwable {
        Node node0 = Node.newNumber((double) 118, 118, 118);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test208422() throws Throwable {
        Node node0 = Node.newNumber((double) 118, 118, 118);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node0);
    }

    @Test(timeout = 4000)
    public void test208423() throws Throwable {
        Node node0 = Node.newNumber((double) 118, 118, 118);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node0);
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test209424() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test209425() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test209426() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
    }

    @Test(timeout = 4000)
    public void test209427() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test209428() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test210429() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = new Node(15, node0, node0, (-534), 1);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test210430() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = new Node(15, node0, node0, (-534), 1);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test210431() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = new Node(15, node0, node0, (-534), 1);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
        node0.isVar();
    }

    @Test(timeout = 4000)
    public void test210432() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = new Node(15, node0, node0, (-534), 1);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    }

    @Test(timeout = 4000)
    public void test210433() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = new Node(15, node0, node0, (-534), 1);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test210434() throws Throwable {
        Node node0 = new Node(118);
        Node node1 = new Node(15, node0, node0, (-534), 1);
        Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test211435() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = new Node(15, node0, node0, (-534), 1);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    }

    @Test(timeout = 4000)
    public void test211436() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = new Node(15, node0, node0, (-534), 1);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    }

    @Test(timeout = 4000)
    public void test211437() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = new Node(15, node0, node0, (-534), 1);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
        node1.getType();
    }

    @Test(timeout = 4000)
    public void test211438() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = new Node(15, node0, node0, (-534), 1);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test211439() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = new Node(15, node0, node0, (-534), 1);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test211440() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = new Node(15, node0, node0, (-534), 1);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test211441() throws Throwable {
        Node node0 = new Node(98);
        Node node1 = new Node(15, node0, node0, (-534), 1);
        Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
        Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
        boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test212442() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        boolean boolean0 = node0.isAdd();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test212443() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        boolean boolean0 = node0.isAdd();
    }

    @Test(timeout = 4000)
    public void test212444() throws Throwable {
        Node node0 = new Node(66, 66, 66);
        boolean boolean0 = node0.isAdd();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test213445() throws Throwable {
        Node node0 = Node.newString("Number node not created with Node.newNumber");
        node0.setType(21);
        boolean boolean0 = node0.isAdd();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test213446() throws Throwable {
        Node node0 = Node.newString("Number node not created with Node.newNumber");
        node0.setType(21);
        boolean boolean0 = node0.isAdd();
    }

    @Test(timeout = 4000)
    public void test214447() throws Throwable {
        Node node0 = new Node((-3765), (-3765), (-3765));
        boolean boolean0 = node0.isAnd();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test214448() throws Throwable {
        Node node0 = new Node((-3765), (-3765), (-3765));
        boolean boolean0 = node0.isAnd();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test214449() throws Throwable {
        Node node0 = new Node((-3765), (-3765), (-3765));
        boolean boolean0 = node0.isAnd();
    }

    @Test(timeout = 4000)
    public void test215450() throws Throwable {
        Node node0 = new Node(101);
        boolean boolean0 = node0.isAnd();
    }

    @Test(timeout = 4000)
    public void test215451() throws Throwable {
        Node node0 = new Node(101);
        boolean boolean0 = node0.isAnd();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test216452() throws Throwable {
        Node node0 = new Node(174, 174, 174);
        boolean boolean0 = node0.isArrayLit();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test216453() throws Throwable {
        Node node0 = new Node(174, 174, 174);
        boolean boolean0 = node0.isArrayLit();
    }

    @Test(timeout = 4000)
    public void test216454() throws Throwable {
        Node node0 = new Node(174, 174, 174);
        boolean boolean0 = node0.isArrayLit();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test217455() throws Throwable {
        Node node0 = new Node(63, 30, 42);
        boolean boolean0 = node0.isArrayLit();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test217456() throws Throwable {
        Node node0 = new Node(63, 30, 42);
        boolean boolean0 = node0.isArrayLit();
    }

    @Test(timeout = 4000)
    public void test218457() throws Throwable {
        Node node0 = Node.newNumber((-406.6402727316181));
        boolean boolean0 = node0.isAssign();
    }

    @Test(timeout = 4000)
    public void test218458() throws Throwable {
        Node node0 = Node.newNumber((-406.6402727316181));
        boolean boolean0 = node0.isAssign();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test218459() throws Throwable {
        Node node0 = Node.newNumber((-406.6402727316181));
        boolean boolean0 = node0.isAssign();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test219460() throws Throwable {
        Node node0 = Node.newNumber((double) 29, 29, 29);
        node0.setType(86);
        boolean boolean0 = node0.isAssign();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test219461() throws Throwable {
        Node node0 = Node.newNumber((double) 29, 29, 29);
        node0.setType(86);
        boolean boolean0 = node0.isAssign();
    }

    @Test(timeout = 4000)
    public void test220462() throws Throwable {
        Node node0 = Node.newString("NK");
        boolean boolean0 = node0.isAssignAdd();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test220463() throws Throwable {
        Node node0 = Node.newString("NK");
        boolean boolean0 = node0.isAssignAdd();
    }

    @Test(timeout = 4000)
    public void test220464() throws Throwable {
        Node node0 = Node.newString("NK");
        boolean boolean0 = node0.isAssignAdd();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test221465() throws Throwable {
        Node node0 = Node.newNumber((-1.0), 43, 43);
        node0.setType(93);
        boolean boolean0 = node0.isAssignAdd();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test221466() throws Throwable {
        Node node0 = Node.newNumber((-1.0), 43, 43);
        node0.setType(93);
        boolean boolean0 = node0.isAssignAdd();
    }

    @Test(timeout = 4000)
    public void test222467() throws Throwable {
        Node node0 = Node.newString(29, "YPZnfVon", 29, 29);
        node0.isBlock();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test222468() throws Throwable {
        Node node0 = Node.newString(29, "YPZnfVon", 29, 29);
        node0.isBlock();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test223469() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = node0.isBlock();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test223470() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = node0.isBlock();
    }

    @Test(timeout = 4000)
    public void test224471() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        node0.isBreak();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test224472() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        node0.isBreak();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test225473() throws Throwable {
        Node node0 = Node.newString("YimPZnfCVFn");
        Node node1 = new Node(116, node0, node0);
        boolean boolean0 = node1.isBreak();
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test225474() throws Throwable {
        Node node0 = Node.newString("YimPZnfCVFn");
        Node node1 = new Node(116, node0, node0);
        boolean boolean0 = node1.isBreak();
        node1.getLineno();
    }

    @Test(timeout = 4000)
    public void test225475() throws Throwable {
        Node node0 = Node.newString("YimPZnfCVFn");
        Node node1 = new Node(116, node0, node0);
        boolean boolean0 = node1.isBreak();
    }

    @Test(timeout = 4000)
    public void test225476() throws Throwable {
        Node node0 = Node.newString("YimPZnfCVFn");
        Node node1 = new Node(116, node0, node0);
        boolean boolean0 = node1.isBreak();
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test225477() throws Throwable {
        Node node0 = Node.newString("YimPZnfCVFn");
        Node node1 = new Node(116, node0, node0);
        boolean boolean0 = node1.isBreak();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test226478() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = node0.isCall();
    }

    @Test(timeout = 4000)
    public void test226479() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = node0.isCall();
        node0.isIn();
    }

    @Test(timeout = 4000)
    public void test226480() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = node0.isCall();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test227481() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = node0.isCall();
    }

    @Test(timeout = 4000)
    public void test227482() throws Throwable {
        Node node0 = new Node(37);
        boolean boolean0 = node0.isCall();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test228483() throws Throwable {
        Node node0 = new Node((-3765));
        boolean boolean0 = node0.isCase();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test228484() throws Throwable {
        Node node0 = new Node((-3765));
        boolean boolean0 = node0.isCase();
    }

    @Test(timeout = 4000)
    public void test228485() throws Throwable {
        Node node0 = new Node((-3765));
        boolean boolean0 = node0.isCase();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test229486() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        JSType jSType1 = modificationVisitor0.caseStringType();
        JSType[] jSTypeArray0 = new JSType[7];
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Not declared as a type name");
        jSTypeArray0[0] = (JSType) templateType0;
        jSTypeArray0[1] = jSType1;
        jSTypeArray0[2] = jSType0;
        jSTypeArray0[3] = jSType1;
        jSTypeArray0[4] = jSType0;
        jSTypeArray0[5] = jSType1;
        jSTypeArray0[6] = jSType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        Node node1 = new Node(111, node0, node0, node0);
        boolean boolean0 = node1.isCase();
    }

    @Test(timeout = 4000)
    public void test229487() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        JSType jSType1 = modificationVisitor0.caseStringType();
        JSType[] jSTypeArray0 = new JSType[7];
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Not declared as a type name");
        jSTypeArray0[0] = (JSType) templateType0;
        jSTypeArray0[1] = jSType1;
        jSTypeArray0[2] = jSType0;
        jSTypeArray0[3] = jSType1;
        jSTypeArray0[4] = jSType0;
        jSTypeArray0[5] = jSType1;
        jSTypeArray0[6] = jSType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        Node node1 = new Node(111, node0, node0, node0);
        boolean boolean0 = node1.isCase();
        node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test229488() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        JSType jSType1 = modificationVisitor0.caseStringType();
        JSType[] jSTypeArray0 = new JSType[7];
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Not declared as a type name");
        jSTypeArray0[0] = (JSType) templateType0;
        jSTypeArray0[1] = jSType1;
        jSTypeArray0[2] = jSType0;
        jSTypeArray0[3] = jSType1;
        jSTypeArray0[4] = jSType0;
        jSTypeArray0[5] = jSType1;
        jSTypeArray0[6] = jSType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        Node node1 = new Node(111, node0, node0, node0);
        boolean boolean0 = node1.isCase();
        node1.hasMoreThanOneChild();
    }

    @Test(timeout = 4000)
    public void test229489() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
        JSType jSType0 = modificationVisitor0.caseNumberType();
        JSType jSType1 = modificationVisitor0.caseStringType();
        JSType[] jSTypeArray0 = new JSType[7];
        TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Not declared as a type name");
        jSTypeArray0[0] = (JSType) templateType0;
        jSTypeArray0[1] = jSType1;
        jSTypeArray0[2] = jSType0;
        jSTypeArray0[3] = jSType1;
        jSTypeArray0[4] = jSType0;
        jSTypeArray0[5] = jSType1;
        jSTypeArray0[6] = jSType0;
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        Node node1 = new Node(111, node0, node0, node0);
        boolean boolean0 = node1.isCase();
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test230490() throws Throwable {
        Node node0 = Node.newString(117, "{...}", 891, 891);
        node0.isCast();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test230491() throws Throwable {
        Node node0 = Node.newString(117, "{...}", 891, 891);
        node0.isCast();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test231492() throws Throwable {
        Node node0 = new Node(155);
        boolean boolean0 = node0.isCast();
    }

    @Test(timeout = 4000)
    public void test231493() throws Throwable {
        Node node0 = new Node(155);
        boolean boolean0 = node0.isCast();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test232494() throws Throwable {
        Node node0 = new Node(126);
        boolean boolean0 = node0.isCatch();
        node0.isLabel();
    }

    @Test(timeout = 4000)
    public void test232495() throws Throwable {
        Node node0 = new Node(126);
        boolean boolean0 = node0.isCatch();
    }

    @Test(timeout = 4000)
    public void test232496() throws Throwable {
        Node node0 = new Node(126);
        boolean boolean0 = node0.isCatch();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test233497() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        boolean boolean0 = node0.isCatch();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test233498() throws Throwable {
        Node node0 = new Node(120, 120, 120);
        boolean boolean0 = node0.isCatch();
    }

    @Test(timeout = 4000)
    public void test234499() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        boolean boolean0 = node0.isComma();
    }

    @Test(timeout = 4000)
    public void test234500() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        boolean boolean0 = node0.isComma();
        node0.isNew();
    }

    @Test(timeout = 4000)
    public void test234501() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        boolean boolean0 = node0.isComma();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test235502() throws Throwable {
        Node node0 = Node.newString(118, "\u0000\u00AD\u0600\u06DD\u070F\u1680\u180E\u2000\u2028\u205F\u206A\u3000\uD800\uFEFF\uFFF9\uFFFA");
        node0.setType(85);
        boolean boolean0 = node0.isComma();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test235503() throws Throwable {
        Node node0 = Node.newString(118, "\u0000\u00AD\u0600\u06DD\u070F\u1680\u180E\u2000\u2028\u205F\u206A\u3000\uD800\uFEFF\uFFF9\uFFFA");
        node0.setType(85);
        boolean boolean0 = node0.isComma();
    }

    @Test(timeout = 4000)
    public void test236504() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        boolean boolean0 = node0.isContinue();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test236505() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        boolean boolean0 = node0.isContinue();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test236506() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        boolean boolean0 = node0.isContinue();
    }

    @Test(timeout = 4000)
    public void test237507() throws Throwable {
        Node node0 = Node.newString(117, "{...}", 891, 891);
        boolean boolean0 = node0.isContinue();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test237508() throws Throwable {
        Node node0 = Node.newString(117, "{...}", 891, 891);
        boolean boolean0 = node0.isContinue();
    }

    @Test(timeout = 4000)
    public void test238509() throws Throwable {
        Node node0 = Node.newString(125, "!y/5/Afx");
        boolean boolean0 = node0.isDebugger();
    }

    @Test(timeout = 4000)
    public void test238510() throws Throwable {
        Node node0 = Node.newString(125, "!y/5/Afx");
        boolean boolean0 = node0.isDebugger();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test238511() throws Throwable {
        Node node0 = Node.newString(125, "!y/5/Afx");
        boolean boolean0 = node0.isDebugger();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test239512() throws Throwable {
        Node node0 = new Node(152);
        boolean boolean0 = node0.isDebugger();
    }

    @Test(timeout = 4000)
    public void test239513() throws Throwable {
        Node node0 = new Node(152);
        boolean boolean0 = node0.isDebugger();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test240514() throws Throwable {
        Node node0 = Node.newNumber((-474.9454345372132));
        boolean boolean0 = node0.isDec();
    }

    @Test(timeout = 4000)
    public void test240515() throws Throwable {
        Node node0 = Node.newNumber((-474.9454345372132));
        boolean boolean0 = node0.isDec();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test240516() throws Throwable {
        Node node0 = Node.newNumber((-474.9454345372132));
        boolean boolean0 = node0.isDec();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test241517() throws Throwable {
        Node node0 = new Node(103, 30, 42);
        boolean boolean0 = node0.isDec();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test241518() throws Throwable {
        Node node0 = new Node(103, 30, 42);
        boolean boolean0 = node0.isDec();
    }

    @Test(timeout = 4000)
    public void test242519() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isDefaultCase();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test242520() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isDefaultCase();
    }

    @Test(timeout = 4000)
    public void test242521() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isDefaultCase();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test243522() throws Throwable {
        Node node0 = new Node(112, 2761, (-18));
        boolean boolean0 = node0.isDefaultCase();
    }

    @Test(timeout = 4000)
    public void test243523() throws Throwable {
        Node node0 = new Node(112, 2761, (-18));
        boolean boolean0 = node0.isDefaultCase();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test244524() throws Throwable {
        Node node0 = Node.newNumber((-474.9454345372132));
        boolean boolean0 = node0.isDelProp();
    }

    @Test(timeout = 4000)
    public void test244525() throws Throwable {
        Node node0 = Node.newNumber((-474.9454345372132));
        boolean boolean0 = node0.isDelProp();
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test244526() throws Throwable {
        Node node0 = Node.newNumber((-474.9454345372132));
        boolean boolean0 = node0.isDelProp();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test245527() throws Throwable {
        Node node0 = new Node(31, 1547, 31);
        boolean boolean0 = node0.isDelProp();
    }

    @Test(timeout = 4000)
    public void test245528() throws Throwable {
        Node node0 = new Node(31, 1547, 31);
        boolean boolean0 = node0.isDelProp();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test246529() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        boolean boolean0 = node0.isDo();
    }

    @Test(timeout = 4000)
    public void test246530() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        boolean boolean0 = node0.isDo();
        node0.isThrow();
    }

    @Test(timeout = 4000)
    public void test246531() throws Throwable {
        Node node0 = new Node(49, 49, 49);
        boolean boolean0 = node0.isDo();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test247532() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = node0.isDo();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test247533() throws Throwable {
        Node node0 = new Node(114);
        boolean boolean0 = node0.isDo();
    }

    @Test(timeout = 4000)
    public void test248534() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isEmpty();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test248535() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isEmpty();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test248536() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test249537() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = node0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test249538() throws Throwable {
        Node node0 = new Node(124);
        boolean boolean0 = node0.isEmpty();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test250539() throws Throwable {
        Node node0 = new Node((-3765));
        boolean boolean0 = node0.isExprResult();
    }

    @Test(timeout = 4000)
    public void test250540() throws Throwable {
        Node node0 = new Node((-3765));
        boolean boolean0 = node0.isExprResult();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test250541() throws Throwable {
        Node node0 = new Node((-3765));
        boolean boolean0 = node0.isExprResult();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test251542() throws Throwable {
        Node node0 = Node.newString(130, "~XVY4[/7}", 130, 130);
        boolean boolean0 = node0.isExprResult();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test251543() throws Throwable {
        Node node0 = Node.newString(130, "~XVY4[/7}", 130, 130);
        boolean boolean0 = node0.isExprResult();
    }

    @Test(timeout = 4000)
    public void test252544() throws Throwable {
        Node node0 = Node.newNumber(3292.378991876403);
        boolean boolean0 = node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test252545() throws Throwable {
        Node node0 = Node.newNumber(3292.378991876403);
        boolean boolean0 = node0.isFalse();
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test252546() throws Throwable {
        Node node0 = Node.newNumber(3292.378991876403);
        boolean boolean0 = node0.isFalse();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test253547() throws Throwable {
        Node node0 = new Node(43, 43, 39);
        boolean boolean0 = node0.isFalse();
    }

    @Test(timeout = 4000)
    public void test253548() throws Throwable {
        Node node0 = new Node(43, 43, 39);
        boolean boolean0 = node0.isFalse();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test254549() throws Throwable {
        Node node0 = new Node(29);
        boolean boolean0 = node0.isFor();
    }

    @Test(timeout = 4000)
    public void test254550() throws Throwable {
        Node node0 = new Node(29);
        boolean boolean0 = node0.isFor();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test254551() throws Throwable {
        Node node0 = new Node(29);
        boolean boolean0 = node0.isFor();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test255552() throws Throwable {
        Node node0 = Node.newString(115, "%aNA&O; \"eqvAM]s", 115, 115);
        boolean boolean0 = node0.isFor();
    }

    @Test(timeout = 4000)
    public void test255553() throws Throwable {
        Node node0 = Node.newString(115, "%aNA&O; \"eqvAM]s", 115, 115);
        boolean boolean0 = node0.isFor();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test256554() throws Throwable {
        Node node0 = new Node(154);
        boolean boolean0 = node0.isGetterDef();
    }

    @Test(timeout = 4000)
    public void test256555() throws Throwable {
        Node node0 = new Node(154);
        boolean boolean0 = node0.isGetterDef();
        node0.isStringKey();
    }

    @Test(timeout = 4000)
    public void test256556() throws Throwable {
        Node node0 = new Node(154);
        boolean boolean0 = node0.isGetterDef();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test257557() throws Throwable {
        Node node0 = Node.newNumber((double) 29, 131088, 131088);
        Node node1 = new Node(147, node0, node0, 4, 4095);
        boolean boolean0 = node1.isGetterDef();
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test257558() throws Throwable {
        Node node0 = Node.newNumber((double) 29, 131088, 131088);
        Node node1 = new Node(147, node0, node0, 4, 4095);
        boolean boolean0 = node1.isGetterDef();
    }

    @Test(timeout = 4000)
    public void test257559() throws Throwable {
        Node node0 = Node.newNumber((double) 29, 131088, 131088);
        Node node1 = new Node(147, node0, node0, 4, 4095);
        boolean boolean0 = node1.isGetterDef();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test257560() throws Throwable {
        Node node0 = Node.newNumber((double) 29, 131088, 131088);
        Node node1 = new Node(147, node0, node0, 4, 4095);
        boolean boolean0 = node1.isGetterDef();
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test257561() throws Throwable {
        Node node0 = Node.newNumber((double) 29, 131088, 131088);
        Node node1 = new Node(147, node0, node0, 4, 4095);
        boolean boolean0 = node1.isGetterDef();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test258562() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isGetElem();
    }

    @Test(timeout = 4000)
    public void test258563() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isGetElem();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test258564() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isGetElem();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test259565() throws Throwable {
        Node node0 = Node.newNumber((double) 83, 10, 125);
        Node node1 = new Node(35, node0, node0, node0);
        boolean boolean0 = node1.isGetElem();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test259566() throws Throwable {
        Node node0 = Node.newNumber((double) 83, 10, 125);
        Node node1 = new Node(35, node0, node0, node0);
        boolean boolean0 = node1.isGetElem();
    }

    @Test(timeout = 4000)
    public void test259567() throws Throwable {
        Node node0 = Node.newNumber((double) 83, 10, 125);
        Node node1 = new Node(35, node0, node0, node0);
        boolean boolean0 = node1.isGetElem();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test260568() throws Throwable {
        Node node0 = new Node((-3765));
        boolean boolean0 = node0.isGetProp();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test260569() throws Throwable {
        Node node0 = new Node((-3765));
        boolean boolean0 = node0.isGetProp();
    }

    @Test(timeout = 4000)
    public void test260570() throws Throwable {
        Node node0 = new Node((-3765));
        boolean boolean0 = node0.isGetProp();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test261571() throws Throwable {
        Node node0 = Node.newString(33, "com.google.common.collect.Maps$ImprovedAbstractMap", 4095, 164);
        boolean boolean0 = node0.isGetProp();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test261572() throws Throwable {
        Node node0 = Node.newString(33, "com.google.common.collect.Maps$ImprovedAbstractMap", 4095, 164);
        boolean boolean0 = node0.isGetProp();
    }

    @Test(timeout = 4000)
    public void test262573() throws Throwable {
        Node node0 = new Node((-3765));
        boolean boolean0 = node0.isHook();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test262574() throws Throwable {
        Node node0 = new Node((-3765));
        boolean boolean0 = node0.isHook();
    }

    @Test(timeout = 4000)
    public void test262575() throws Throwable {
        Node node0 = new Node((-3765));
        boolean boolean0 = node0.isHook();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test263576() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = new Node(98, node0, node0, node0);
        boolean boolean0 = node1.isHook();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test263577() throws Throwable {
        Node node0 = new Node(37);
        Node node1 = new Node(98, node0, node0, node0);
        boolean boolean0 = node1.isHook();
    }

    @Test(timeout = 4000)
    public void test264578() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        boolean boolean0 = node0.isIf();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test264579() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        boolean boolean0 = node0.isIf();
    }

    @Test(timeout = 4000)
    public void test264580() throws Throwable {
        Node node0 = new Node(118, 118, 118);
        boolean boolean0 = node0.isIf();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test265581() throws Throwable {
        Node node0 = new Node(108, 50, 108);
        boolean boolean0 = node0.isIf();
    }

    @Test(timeout = 4000)
    public void test265582() throws Throwable {
        Node node0 = new Node(108, 50, 108);
        boolean boolean0 = node0.isIf();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test266583() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        node0.isIn();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test266584() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        node0.isIn();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test267585() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = node0.isIn();
    }

    @Test(timeout = 4000)
    public void test267586() throws Throwable {
        Node node0 = new Node(51);
        boolean boolean0 = node0.isIn();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test268587() throws Throwable {
        Node node0 = Node.newString("!", 119, 385);
        node0.isInc();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test268588() throws Throwable {
        Node node0 = Node.newString("!", 119, 385);
        node0.isInc();
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test269589() throws Throwable {
        Node node0 = new Node(102, 30, 42);
        boolean boolean0 = node0.isInc();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test269590() throws Throwable {
        Node node0 = new Node(102, 30, 42);
        boolean boolean0 = node0.isInc();
    }

    @Test(timeout = 4000)
    public void test270591() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isInstanceOf();
    }

    @Test(timeout = 4000)
    public void test270592() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isInstanceOf();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test270593() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isInstanceOf();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test271594() throws Throwable {
        Node node0 = new Node(52, 52, 52);
        boolean boolean0 = node0.isInstanceOf();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test271595() throws Throwable {
        Node node0 = new Node(52, 52, 52);
        boolean boolean0 = node0.isInstanceOf();
    }

    @Test(timeout = 4000)
    public void test272596() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = node0.isLabel();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test272597() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = node0.isLabel();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test272598() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = node0.isLabel();
    }

    @Test(timeout = 4000)
    public void test273599() throws Throwable {
        Node node0 = new Node(126);
        boolean boolean0 = node0.isLabel();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test273600() throws Throwable {
        Node node0 = new Node(126);
        boolean boolean0 = node0.isLabel();
    }

    @Test(timeout = 4000)
    public void test274601() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isLabelName();
    }

    @Test(timeout = 4000)
    public void test274602() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isLabelName();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test274603() throws Throwable {
        Node node0 = new Node(105);
        boolean boolean0 = node0.isLabelName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test275604() throws Throwable {
        Node node0 = new Node(153);
        boolean boolean0 = node0.isLabelName();
    }

    @Test(timeout = 4000)
    public void test275605() throws Throwable {
        Node node0 = new Node(153);
        boolean boolean0 = node0.isLabelName();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test276606() throws Throwable {
        Node node0 = Node.newNumber((-425.9));
        boolean boolean0 = node0.isName();
    }

    @Test(timeout = 4000)
    public void test276607() throws Throwable {
        Node node0 = Node.newNumber((-425.9));
        boolean boolean0 = node0.isName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test276608() throws Throwable {
        Node node0 = Node.newNumber((-425.9));
        boolean boolean0 = node0.isName();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test277609() throws Throwable {
        Node node0 = Node.newString("SFfQ\"0OkEZ}a(E");
        node0.isName();
    }

    @Test(timeout = 4000)
    public void test277610() throws Throwable {
        Node node0 = Node.newString("SFfQ\"0OkEZ}a(E");
        node0.setType(38);
        boolean boolean0 = node0.isName();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test277611() throws Throwable {
        Node node0 = Node.newString("SFfQ\"0OkEZ}a(E");
        node0.setType(38);
        boolean boolean0 = node0.isName();
    }

    @Test(timeout = 4000)
    public void test278612() throws Throwable {
        Node node0 = new Node(985, 985, 985);
        node0.isNE();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test278613() throws Throwable {
        Node node0 = new Node(985, 985, 985);
        node0.isNE();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test279614() throws Throwable {
        Node node0 = new Node(13, 13, 32);
        boolean boolean0 = node0.isNE();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test279615() throws Throwable {
        Node node0 = new Node(13, 13, 32);
        boolean boolean0 = node0.isNE();
    }

    @Test(timeout = 4000)
    public void test280616() throws Throwable {
        Node node0 = Node.newString("FUANCTION_PROTOTYPE");
        boolean boolean0 = node0.isNew();
    }

    @Test(timeout = 4000)
    public void test280617() throws Throwable {
        Node node0 = Node.newString("FUANCTION_PROTOTYPE");
        boolean boolean0 = node0.isNew();
        node0.isString();
    }

    @Test(timeout = 4000)
    public void test280618() throws Throwable {
        Node node0 = Node.newString("FUANCTION_PROTOTYPE");
        boolean boolean0 = node0.isNew();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test281619() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = node0.isNew();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test281620() throws Throwable {
        Node node0 = new Node(30);
        boolean boolean0 = node0.isNew();
    }

    @Test(timeout = 4000)
    public void test282621() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        boolean boolean0 = node0.isNot();
    }

    @Test(timeout = 4000)
    public void test282622() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        boolean boolean0 = node0.isNot();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test282623() throws Throwable {
        Node node0 = Node.newString("FUNCTION_PROTOTYPE");
        boolean boolean0 = node0.isNot();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test283624() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        boolean boolean0 = node0.isNot();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test283625() throws Throwable {
        Node node0 = new Node(26, 26, 26);
        boolean boolean0 = node0.isNot();
    }

    @Test(timeout = 4000)
    public void test284626() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        boolean boolean0 = node0.isNull();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test284627() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        boolean boolean0 = node0.isNull();
    }

    @Test(timeout = 4000)
    public void test284628() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        boolean boolean0 = node0.isNull();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test285629() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = node0.isNull();
    }

    @Test(timeout = 4000)
    public void test285630() throws Throwable {
        Node node0 = new Node(41);
        boolean boolean0 = node0.isNull();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test286631() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isNumber();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test286632() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isNumber();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test286633() throws Throwable {
        Node node0 = new Node(154, 154, 154);
        boolean boolean0 = node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test287634() throws Throwable {
        Node node0 = Node.newNumber((-0.8877167227904719), 131, 131);
        boolean boolean0 = node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test287635() throws Throwable {
        Node node0 = Node.newNumber((-0.8877167227904719), 131, 131);
        boolean boolean0 = node0.isNumber();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test288636() throws Throwable {
        Node node0 = new Node((-3765), (-3765), (-3765));
        node0.isObjectLit();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test288637() throws Throwable {
        Node node0 = new Node((-3765), (-3765), (-3765));
        node0.isObjectLit();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test289638() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = node0.isObjectLit();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test289639() throws Throwable {
        Node node0 = new Node(64, 64, 64);
        boolean boolean0 = node0.isObjectLit();
    }

    @Test(timeout = 4000)
    public void test290640() throws Throwable {
        Node node0 = new Node((-3765), (-3765), (-3765));
        boolean boolean0 = node0.isOr();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test290641() throws Throwable {
        Node node0 = new Node((-3765), (-3765), (-3765));
        boolean boolean0 = node0.isOr();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test290642() throws Throwable {
        Node node0 = new Node((-3765), (-3765), (-3765));
        boolean boolean0 = node0.isOr();
    }

    @Test(timeout = 4000)
    public void test291643() throws Throwable {
        Node node0 = new Node(100);
        boolean boolean0 = node0.isOr();
    }

    @Test(timeout = 4000)
    public void test291644() throws Throwable {
        Node node0 = new Node(100);
        boolean boolean0 = node0.isOr();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test292645() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.isParamList();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test292646() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.isParamList();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test292647() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test293648() throws Throwable {
        Node node0 = Node.newNumber((double) 29, 29, 29);
        node0.setType(83);
        boolean boolean0 = node0.isParamList();
    }

    @Test(timeout = 4000)
    public void test294649() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.isRegExp();
    }

    @Test(timeout = 4000)
    public void test294650() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.isRegExp();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test294651() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.isRegExp();
        node0.getCharno();
    }

    @Test(timeout = 4000)
    public void test295652() throws Throwable {
        Node node0 = new Node(34);
        boolean boolean0 = node0.isReturn();
    }

    @Test(timeout = 4000)
    public void test295653() throws Throwable {
        Node node0 = new Node(34);
        boolean boolean0 = node0.isReturn();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test295654() throws Throwable {
        Node node0 = new Node(34);
        boolean boolean0 = node0.isReturn();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test296655() throws Throwable {
        Node node0 = Node.newString(4, "Q7nJkxgf&!.MrtG]", 53, 15);
        boolean boolean0 = node0.isReturn();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test296656() throws Throwable {
        Node node0 = Node.newString(4, "Q7nJkxgf&!.MrtG]", 53, 15);
        boolean boolean0 = node0.isReturn();
    }

    @Test(timeout = 4000)
    public void test297657() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        node0.isScript();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test297658() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        node0.isScript();
        node0.isBlock();
    }

    @Test(timeout = 4000)
    public void test298659() throws Throwable {
        Node node0 = Node.newString(132, "sBc/l", 132, 132);
        boolean boolean0 = node0.isScript();
    }

    @Test(timeout = 4000)
    public void test298660() throws Throwable {
        Node node0 = Node.newString(132, "sBc/l", 132, 132);
        boolean boolean0 = node0.isScript();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test299661() throws Throwable {
        Node node0 = new Node(33, 18, 18);
        node0.isSetterDef();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test299662() throws Throwable {
        Node node0 = new Node(33, 18, 18);
        node0.isSetterDef();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test300663() throws Throwable {
        Node node0 = new Node((-3765));
        Node node1 = new Node(148, node0, node0, 50, 1892);
        boolean boolean0 = node1.isSetterDef();
        node0.isSetterDef();
    }

    @Test(timeout = 4000)
    public void test300664() throws Throwable {
        Node node0 = new Node((-3765));
        Node node1 = new Node(148, node0, node0, 50, 1892);
        boolean boolean0 = node1.isSetterDef();
    }

    @Test(timeout = 4000)
    public void test300665() throws Throwable {
        Node node0 = new Node((-3765));
        Node node1 = new Node(148, node0, node0, 50, 1892);
        boolean boolean0 = node1.isSetterDef();
        node1.hasOneChild();
    }

    @Test(timeout = 4000)
    public void test300666() throws Throwable {
        Node node0 = new Node((-3765));
        Node node1 = new Node(148, node0, node0, 50, 1892);
        boolean boolean0 = node1.isSetterDef();
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test300667() throws Throwable {
        Node node0 = new Node((-3765));
        Node node1 = new Node(148, node0, node0, 50, 1892);
        boolean boolean0 = node1.isSetterDef();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test301668() throws Throwable {
        Node node0 = new Node(99);
        boolean boolean0 = node0.isString();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test301669() throws Throwable {
        Node node0 = new Node(99);
        boolean boolean0 = node0.isString();
    }

    @Test(timeout = 4000)
    public void test301670() throws Throwable {
        Node node0 = new Node(99);
        boolean boolean0 = node0.isString();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test302671() throws Throwable {
        Node node0 = Node.newString("!", 119, 385);
        boolean boolean0 = node0.isString();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test302672() throws Throwable {
        Node node0 = Node.newString("!", 119, 385);
        boolean boolean0 = node0.isString();
    }

    @Test(timeout = 4000)
    public void test303673() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.isStringKey();
    }

    @Test(timeout = 4000)
    public void test303674() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.isStringKey();
        node0.isVar();
    }

    @Test(timeout = 4000)
    public void test303675() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.isStringKey();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test304676() throws Throwable {
        Node node0 = new Node(154);
        boolean boolean0 = node0.isStringKey();
    }

    @Test(timeout = 4000)
    public void test304677() throws Throwable {
        Node node0 = new Node(154);
        boolean boolean0 = node0.isStringKey();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test305678() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        node0.isSwitch();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test305679() throws Throwable {
        Node node0 = new Node(42, 42, 42);
        node0.isSwitch();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test306680() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        boolean boolean0 = node0.isSwitch();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test306681() throws Throwable {
        Node node0 = new Node(110, 110, 110);
        boolean boolean0 = node0.isSwitch();
    }

    @Test(timeout = 4000)
    public void test307682() throws Throwable {
        Node node0 = Node.newString(115, "%aNA&O; \"eqvAM]s", 115, 115);
        node0.isThis();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test307683() throws Throwable {
        Node node0 = Node.newString(115, "%aNA&O; \"eqvAM]s", 115, 115);
        node0.isThis();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test308684() throws Throwable {
        Node node0 = Node.newNumber((-425.92));
        node0.isThis();
    }

    @Test(timeout = 4000)
    public void test308685() throws Throwable {
        Node node0 = Node.newNumber((-425.92));
        node0.setType(42);
        boolean boolean0 = node0.isThis();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test308686() throws Throwable {
        Node node0 = Node.newNumber((-425.92));
        node0.setType(42);
        boolean boolean0 = node0.isThis();
    }

    @Test(timeout = 4000)
    public void test309687() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = node0.isThrow();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test309688() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = node0.isThrow();
    }

    @Test(timeout = 4000)
    public void test309689() throws Throwable {
        Node node0 = new Node(125, 125, 125);
        boolean boolean0 = node0.isThrow();
        node0.isBlock();
    }

    @Test(timeout = 4000)
    public void test310690() throws Throwable {
        Node node0 = new Node(49);
        boolean boolean0 = node0.isThrow();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test310691() throws Throwable {
        Node node0 = new Node(49);
        boolean boolean0 = node0.isThrow();
    }

    @Test(timeout = 4000)
    public void test311692() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        boolean boolean0 = node0.isTrue();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test311693() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        boolean boolean0 = node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test311694() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        boolean boolean0 = node0.isTrue();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test312695() throws Throwable {
        Node node0 = Node.newNumber((-474.9454345372132));
        Node node1 = new Node(44, node0, 2, 54);
        boolean boolean0 = node1.isTrue();
    }

    @Test(timeout = 4000)
    public void test312696() throws Throwable {
        Node node0 = Node.newNumber((-474.9454345372132));
        Node node1 = new Node(44, node0, 2, 54);
        boolean boolean0 = node1.isTrue();
        node0.isTrue();
    }

    @Test(timeout = 4000)
    public void test312697() throws Throwable {
        Node node0 = Node.newNumber((-474.9454345372132));
        Node node1 = new Node(44, node0, 2, 54);
        boolean boolean0 = node1.isTrue();
        node1.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test312698() throws Throwable {
        Node node0 = Node.newNumber((-474.9454345372132));
        Node node1 = new Node(44, node0, 2, 54);
        boolean boolean0 = node1.isTrue();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test313699() throws Throwable {
        Node node0 = Node.newNumber((double) (-894), (-894), (-894));
        boolean boolean0 = node0.isTry();
        node0.isNumber();
    }

    @Test(timeout = 4000)
    public void test313700() throws Throwable {
        Node node0 = Node.newNumber((double) (-894), (-894), (-894));
        boolean boolean0 = node0.isTry();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test313701() throws Throwable {
        Node node0 = Node.newNumber((double) (-894), (-894), (-894));
        boolean boolean0 = node0.isTry();
    }

    @Test(timeout = 4000)
    public void test314702() throws Throwable {
        Node node0 = new Node(77, 9, 77);
        boolean boolean0 = node0.isTry();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test314703() throws Throwable {
        Node node0 = new Node(77, 9, 77);
        boolean boolean0 = node0.isTry();
    }

    @Test(timeout = 4000)
    public void test315704() throws Throwable {
        Node node0 = Node.newNumber((double) 29, 29, 29);
        boolean boolean0 = node0.isTypeOf();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test315705() throws Throwable {
        Node node0 = Node.newNumber((double) 29, 29, 29);
        boolean boolean0 = node0.isTypeOf();
    }

    @Test(timeout = 4000)
    public void test315706() throws Throwable {
        Node node0 = Node.newNumber((double) 29, 29, 29);
        boolean boolean0 = node0.isTypeOf();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test316707() throws Throwable {
        Node node0 = Node.newString(122, "prev is not a child of this node.");
        Node node1 = new Node(32, node0);
        boolean boolean0 = node1.isTypeOf();
        node0.isTypeOf();
    }

    @Test(timeout = 4000)
    public void test316708() throws Throwable {
        Node node0 = Node.newString(122, "prev is not a child of this node.");
        Node node1 = new Node(32, node0);
        boolean boolean0 = node1.isTypeOf();
    }

    @Test(timeout = 4000)
    public void test316709() throws Throwable {
        Node node0 = Node.newString(122, "prev is not a child of this node.");
        Node node1 = new Node(32, node0);
        boolean boolean0 = node1.isTypeOf();
        node0.isVoid();
    }

    @Test(timeout = 4000)
    public void test316710() throws Throwable {
        Node node0 = Node.newString(122, "prev is not a child of this node.");
        Node node1 = new Node(32, node0);
        boolean boolean0 = node1.isTypeOf();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test317711() throws Throwable {
        Node node0 = new Node(1035);
        boolean boolean0 = node0.isVar();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test317712() throws Throwable {
        Node node0 = new Node(1035);
        boolean boolean0 = node0.isVar();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test317713() throws Throwable {
        Node node0 = new Node(1035);
        boolean boolean0 = node0.isVar();
    }

    @Test(timeout = 4000)
    public void test318714() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.isVar();
    }

    @Test(timeout = 4000)
    public void test318715() throws Throwable {
        Node node0 = new Node(118);
        boolean boolean0 = node0.isVar();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test319716() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        boolean boolean0 = node0.isVoid();
    }

    @Test(timeout = 4000)
    public void test319717() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        boolean boolean0 = node0.isVoid();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test319718() throws Throwable {
        Node node0 = new Node(34, 34, 34);
        boolean boolean0 = node0.isVoid();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test320719() throws Throwable {
        Node node0 = Node.newString(122, "prev is not a child of this node.");
        boolean boolean0 = node0.isVoid();
    }

    @Test(timeout = 4000)
    public void test320720() throws Throwable {
        Node node0 = Node.newString(122, "prev is not a child of this node.");
        boolean boolean0 = node0.isVoid();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test321721() throws Throwable {
        Node node0 = new Node(152, 152, 152);
        boolean boolean0 = node0.isWhile();
    }

    @Test(timeout = 4000)
    public void test321722() throws Throwable {
        Node node0 = new Node(152, 152, 152);
        boolean boolean0 = node0.isWhile();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test321723() throws Throwable {
        Node node0 = new Node(152, 152, 152);
        boolean boolean0 = node0.isWhile();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test322724() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = node0.isWhile();
        node0.getLineno();
    }

    @Test(timeout = 4000)
    public void test322725() throws Throwable {
        Node node0 = new Node(113);
        boolean boolean0 = node0.isWhile();
    }

    @Test(timeout = 4000)
    public void test323726() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        node0.isWith();
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test323727() throws Throwable {
        Node node0 = Node.newString(30, "", 30, 30);
        node0.isWith();
        node0.isNew();
    }

    @Test(timeout = 4000)
    public void test324728() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = node0.isWith();
    }

    @Test(timeout = 4000)
    public void test324729() throws Throwable {
        Node node0 = new Node(119);
        boolean boolean0 = node0.isWith();
        node0.getCharno();
    }
}
