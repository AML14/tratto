/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 23:16:46 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckRegExp;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ExternExportsPass;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ReferenceCollectingCallback_ESTest extends ReferenceCollectingCallback_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Node node0 = new Node((-579));
        Compiler compiler0 = new Compiler();
        CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        referenceCollectingCallback_Reference0.getAssignedValue();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.ReferenceCollectingCallback", "com.google.javascript.jscomp.ReferenceCollectingCallback");
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, (ScopeCreator) null);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node0);
        Scope scope0 = referenceCollectingCallback_Reference0.getScope();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        MakeDeclaredNamesUnique.BoilerplateRenamer makeDeclaredNamesUnique_BoilerplateRenamer0 = new MakeDeclaredNamesUnique.BoilerplateRenamer(supplier0, (String) null);
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique(makeDeclaredNamesUnique_BoilerplateRenamer0);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, referenceCollectingCallback_BasicBlock0);
        Node node1 = referenceCollectingCallback_Reference0.getParent();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        MakeDeclaredNamesUnique.BoilerplateRenamer makeDeclaredNamesUnique_BoilerplateRenamer0 = new MakeDeclaredNamesUnique.BoilerplateRenamer(supplier0, (String) null);
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique(makeDeclaredNamesUnique_BoilerplateRenamer0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, referenceCollectingCallback_BasicBlock0);
        String string0 = referenceCollectingCallback_Reference0.getSourceName();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, referenceCollectingCallback_BasicBlock0, node0);
        Node node1 = referenceCollectingCallback_Reference0.getGrandparent();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Node node0 = new Node((-579));
        Compiler compiler0 = new Compiler();
        CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        boolean boolean0 = referenceCollectingCallback_Reference0.isHoistedFunction();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        Set<Scope.Var> set0 = referenceCollectingCallback0.getReferencedVariables();
        set0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback((AbstractCompiler) null, referenceCollectingCallback_Behavior0);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = referenceCollectingCallback0.getReferenceCollection((Scope.Var) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        Node node0 = new Node(118, 118, 118);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, referenceCollectingCallback_BasicBlock0);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        node0.addChildToFront(node0);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isAssignedOnceInLifetime();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("n8qEI_N^f");
        node0.setType(77);
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        referenceCollectingCallback0.process(node0, node0);
        node0.isOnlyModifiesThisCall();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Node node0 = compiler0.parseSyntheticCode("com.google.javascriptjscomp.ReferenceCollectingCallback$ReferenceCollection", "com.google.javascriptjscomp.ReferenceCollectingCallback$ReferenceCollection");
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        Node node1 = new Node(98, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        referenceCollectingCallback0.visit(nodeTraversal0, node1, node1);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = new Node(100, node0, node0);
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node1);
        node1.isUnscopedQualifiedName();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Node node0 = Node.newString(101, "ce8m|nX/C*Ds5E2B^");
        Compiler compiler0 = new Compiler();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Node node0 = Node.newString(108, "%W&|UWB>}b9/");
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Node node0 = Node.newString(113, "ce8m|nX/C*Ds5E2B^");
        Compiler compiler0 = new Compiler();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback((AbstractCompiler) null, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, referenceCollectingCallback0);
        Node node0 = new Node(114);
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Node node0 = Node.newString(115, " Tn'K#B92I#)H");
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        Node node0 = Node.newString(119, "ce8m|nX/C*Ds5E2B^");
        Compiler compiler0 = new Compiler();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        Node node0 = new Node(111);
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isWellDefined();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        Node node0 = Node.newNumber(1.0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isWellDefined();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        Node node0 = new Node(118);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, referenceCollectingCallback_BasicBlock0);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        node0.addChildToFront(node0);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isWellDefined();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isEscaped();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add((ReferenceCollectingCallback.Reference) null, (NodeTraversal) null, (Scope.Var) null);
        referenceCollectingCallback_ReferenceCollection0.isEscaped();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("mom.qoogle.aasript.jscomp.RefereneClllec,ingCalbnck", "mom.qoogle.aasript.jscomp.RefereneClllec,ingCalbnck");
        ExternExportsPass externExportsPass0 = new ExternExportsPass(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, externExportsPass0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference1 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        Node node0 = new Node(118, 118, 118);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference1 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        Node node0 = Node.newString(118, "#wa,lMdB!sZ|>,cV");
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        node0.addChildToFront(node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference1 = referenceCollectingCallback_ReferenceCollection0.getInitializingReferenceForConstants();
        referenceCollectingCallback_Reference1.getSourceName();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        Node node0 = Node.newString("com.goog?s.javascript.jscomp.ReferenceCollectingCallbIck$ReferenceCollection");
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        node0.addChildToFront(node0);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isAssignedOnceInLifetime();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        Node node0 = new Node(118);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        node0.addChildToFront(node0);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isAssignedOnceInLifetime();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        Node node0 = new Node(118, 118, 118);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, false, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, referenceCollectingCallback_BasicBlock0);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        node0.addChildToFront(node0);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isNeverAssigned();
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        Node node0 = Node.newString("com.goog?s.javascript.jscomp.ReferenceCollectingCallbIck$ReferenceCollection");
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        node0.addChildToFront(node0);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isNeverAssigned();
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.firstReferenceIsAssigningDeclaration();
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        Node node0 = new Node(118, 118, 118);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.firstReferenceIsAssigningDeclaration();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        Node node0 = new Node(118, 118, 118);
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        node0.addChildToFront(node0);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.firstReferenceIsAssigningDeclaration();
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Compiler compiler0 = new Compiler();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
        Node node1 = new Node(31, node0, node0, node0, node0);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node1);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, referenceCollectingCallback_BasicBlock0, node0);
        boolean boolean0 = referenceCollectingCallback_Reference0.isDeclaration();
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Compiler compiler0 = new Compiler();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = new Node(105, node0, node0, node0, node0);
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node1, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        boolean boolean0 = referenceCollectingCallback_Reference0.isDeclaration();
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = new ReferenceCollectingCallback.ReferenceCollection();
        Node node0 = Node.newString("com.goog?s.javascript.jscomp.ReferenceCollectingCallbIck$ReferenceCollection");
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        node0.setType(105);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        referenceCollectingCallback_ReferenceCollection0.add(referenceCollectingCallback_Reference0, nodeTraversal0, (Scope.Var) null);
        boolean boolean0 = referenceCollectingCallback_ReferenceCollection0.isWellDefined();
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = new Node(105, node0, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node1);
        Node node2 = referenceCollectingCallback_Reference0.getAssignedValue();
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Compiler compiler0 = new Compiler();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = new Node(118, node0, node0, node0, node0);
        MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node1, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        referenceCollectingCallback_Reference0.isLvalue();
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        Node node0 = Node.newString("com.goog?s.javascript.jscomp.ReferenceCollectingCallbIck$ReferenceCollection");
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node0);
        node0.setType(86);
        boolean boolean0 = referenceCollectingCallback_Reference0.isSimpleAssignmentToName();
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        Node node0 = Node.newString("com.goog?s.javascript.jscomp.ReferenceCollectingCallbIck$ReferenceCollection");
        Compiler compiler0 = new Compiler();
        ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, controlFlowAnalysis0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node0, node0, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        node0.setType(86);
        boolean boolean0 = referenceCollectingCallback_Reference0.isSimpleAssignmentToName();
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = new Node(102, node0, node0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node1);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, referenceCollectingCallback_BasicBlock0, node1);
        boolean boolean0 = referenceCollectingCallback_Reference0.isLvalue();
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, (ScopeCreator) null);
        Node node0 = new Node(103, 103, 103);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node0);
        boolean boolean0 = referenceCollectingCallback_Reference0.isLvalue();
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = new Node(88, node0, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = new ReferenceCollectingCallback.Reference(node1, node1, nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null);
        referenceCollectingCallback_Reference0.isLvalue();
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
        ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, (ScopeCreator) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = new Node(88, node0, node0);
        ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.newBleedingFunction(nodeTraversal0, (ReferenceCollectingCallback.BasicBlock) null, node1);
        boolean boolean0 = referenceCollectingCallback_Reference0.isLvalue();
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = new Node(114, node0, node0, node0, node0);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = new Node(113, node0, node0, node0, node0);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        Stack<JSType> stack0 = new Stack<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
        Node node1 = new Node(115, node0, node0, node0, node0);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        Node node0 = Node.newString("j4");
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
        boolean boolean0 = referenceCollectingCallback_BasicBlock0.provablyExecutesBefore((ReferenceCollectingCallback.BasicBlock) null);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("mom.qoogle.aasript.jscomp.RefereneClllec,ingCalbnck", "mom.qoogle.aasript.jscomp.RefereneClllec,ingCalbnck");
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock0 = new ReferenceCollectingCallback.BasicBlock((ReferenceCollectingCallback.BasicBlock) null, node0);
        ReferenceCollectingCallback.BasicBlock referenceCollectingCallback_BasicBlock1 = new ReferenceCollectingCallback.BasicBlock(referenceCollectingCallback_BasicBlock0, node0);
        boolean boolean0 = referenceCollectingCallback_BasicBlock0.provablyExecutesBefore(referenceCollectingCallback_BasicBlock1);
    }
}
