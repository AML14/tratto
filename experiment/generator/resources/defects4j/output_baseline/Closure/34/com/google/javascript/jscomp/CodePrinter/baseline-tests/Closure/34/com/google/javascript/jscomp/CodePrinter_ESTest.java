/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 21:59:03 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodePrinter;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CodePrinter_ESTest extends CodePrinter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Node node0 = Node.newString("y'9v=,J/4R*AP+");
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
        codePrinter_Builder0.setTagAsStrict(true);
        String string0 = codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Node node0 = Node.newString("y'9v=,J/4R*AP+");
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
        Charset charset0 = Charset.defaultCharset();
        CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setOutputCharset(charset0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Node node0 = Node.newString("E]x*7u>[ sJKP|YJ6");
        Node node1 = new Node(110, node0, 48, 4);
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
        codePrinter_Builder0.setOutputTypes(true);
        String string0 = codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Node node0 = Node.newString("E]x*7u>[ sJKP|YJ6");
        Node node1 = new Node(112, node0, 32, 4);
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
        codePrinter_Builder0.setOutputTypes(true);
        String string0 = codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CodePrinter codePrinter0 = new CodePrinter();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Node node0 = Node.newString("com.google.javascript.jscomp.CodePrinter$Builder");
        Node node1 = new Node(132, node0, 37, 52);
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
        String string0 = codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Node node0 = Node.newString("O\"{S(");
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
        codePrinter_Builder0.setLineLengthThreshold(0);
        String string0 = codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Node node0 = Node.newString("y'9v=,J/4R*AP+");
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
        SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
        node0.setSourceFileForTesting("y'9v=,J/4R*AP+");
        codePrinter_Builder0.setSourceMap(sourceMap0);
        String string0 = codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Node node0 = Node.newString("");
        Node node1 = new Node(49, node0, 32, 54);
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
        node1.setSourceFileForTesting("");
        SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
        SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
        codePrinter_Builder0.setSourceMapDetailLevel(sourceMap_DetailLevel0);
        codePrinter_Builder0.setSourceMap(sourceMap0);
        String string0 = codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Node node0 = Node.newString("y'9v=,J.4R*AP+");
        Node node1 = new Node(49, node0, 47, 53);
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
        CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
        codePrinter_Builder0.setLineLengthThreshold(16);
        String string0 = codePrinter_Builder1.build();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Node node0 = Node.newString("y'9=Jl/4R*AP+");
        Node node1 = new Node(49, node0, 32, 53);
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
        codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
        SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
        codePrinter_Builder0.setSourceMap(sourceMap0);
        codePrinter_Builder0.setLineLengthThreshold(16);
        String string0 = codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Node node0 = Node.newString("y'9=Jl/4R*AP+");
        Node node1 = new Node(49, node0, 32, 53);
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
        codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
        SourceMap sourceMap0 = mock(SourceMap.class, new ViolatedAssumptionAnswer());
        node1.setSourceFileForTesting("y'9=Jl/4R*AP+");
        codePrinter_Builder0.setSourceMap(sourceMap0);
        codePrinter_Builder0.setLineLengthThreshold(16);
        String string0 = codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Node node0 = Node.newNumber((double) 32);
        Node node1 = new Node(16, node0, 46, 44);
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
        node1.addChildrenToBack(node1);
        codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Node node0 = Node.newNumber((double) 32);
        Node node1 = new Node(16, node0, 46, 44);
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
        node1.addChildrenToBack(node1);
        CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setOutputTypes(true);
        codePrinter_Builder1.build();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Node node0 = new Node(32);
        Node node1 = new Node(32, node0);
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
        codePrinter_Builder0.setOutputTypes(true);
        codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Node node0 = Node.newNumber((double) 32);
        Node node1 = new Node(32, node0);
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
        Node node2 = new Node(0, node1, 12, 37);
        node1.addChildrenToBack(node2);
        codePrinter_Builder0.setOutputTypes(true);
        codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Node node0 = Node.newString("~\"Yb=orGF");
        Node node1 = new Node(49, node0, 47, 53);
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node1);
        codePrinter_Builder0.setLineBreak(true);
        String string0 = codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Node node0 = Node.newString("8ATCH");
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
        codePrinter_Builder0.setLineLengthThreshold(1);
        CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
        String string0 = codePrinter_Builder1.build();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Node node0 = Node.newString("8ATCH");
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
        CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setPreferLineBreakAtEndOfFile(true);
        String string0 = codePrinter_Builder1.build();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Node node0 = new Node(0);
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
        codePrinter_Builder0.setSourceMapDetailLevel((SourceMap.DetailLevel) null);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder((Node) null);
        codePrinter_Builder0.build();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Node node0 = Node.newString("y'9v=,J/4R*AP+");
        CodePrinter.Builder codePrinter_Builder0 = new CodePrinter.Builder(node0);
        CodePrinter.Builder codePrinter_Builder1 = codePrinter_Builder0.setPrettyPrint(true);
        String string0 = codePrinter_Builder1.build();
    }
}
