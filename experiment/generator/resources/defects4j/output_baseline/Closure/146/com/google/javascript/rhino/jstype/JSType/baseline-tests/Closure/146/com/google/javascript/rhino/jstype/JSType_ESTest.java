/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 07:04:03 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.HashMap;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JSType_ESTest extends JSType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isRecordType();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getTypesUnderShallowEquality(nullType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
        boolean boolean0 = unionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = unknownType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        boolean boolean0 = unknownType0.isStringValueType();
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isBooleanObjectType();
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isBooleanObjectType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getJSDocInfo();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        String string0 = nullType0.toDebugHashCodeString();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        String string0 = nullType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isRegexpType();
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isRegexpType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0714() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isString();
    }

    @Test(timeout = 4000)
    public void test0815() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isDateType();
    }

    @Test(timeout = 4000)
    public void test0816() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isDateType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0917() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noObjectType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0918() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noObjectType0);
        jSType0.getTypesUnderEquality(noObjectType0);
        noObjectType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test1019() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isStringObjectType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1020() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isStringObjectType();
    }

    @Test(timeout = 4000)
    public void test1121() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "IjEkeL]}N]vpO");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test1122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "IjEkeL]}N]vpO");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, "Named type with empty name component");
        boolean boolean0 = enumElementType0.matchesObjectContext();
        enumElementType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1223() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNumberObjectType();
    }

    @Test(timeout = 4000)
    public void test1224() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNumberObjectType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1325() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "R-l|d*+");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesStringContext();
    }

    @Test(timeout = 4000)
    public void test1326() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "R-l|d*+");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesStringContext();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1427() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.unboxesTo();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1528() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, "Unknown class name");
        boolean boolean0 = nullType0.canTestForEqualityWith(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1529() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, "Unknown class name");
        boolean boolean0 = nullType0.canTestForEqualityWith(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test1630() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "@kM3iq[dpI1#d`9~5");
        boolean boolean0 = templateType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test1631() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "@kM3iq[dpI1#d`9~5");
        boolean boolean0 = templateType0.isConstructor();
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1732() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test1733() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isArrayType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1834() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test1835() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isBooleanValueType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1936() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test1937() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canBeCalled();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2038() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.isNumber();
    }

    @Test(timeout = 4000)
    public void test2139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test2140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.isTemplateType();
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2241() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        boolean boolean0 = templateType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test2242() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        boolean boolean0 = templateType0.isOrdinaryFunction();
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2343() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(nullType0);
        JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
        nullType0.getTypesUnderEquality(jSType1);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2344() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(nullType0);
        JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
        nullType0.getTypesUnderEquality(jSType1);
        jSType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test2445() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        boolean boolean0 = nullType0.isNamedType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2446() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        boolean boolean0 = nullType0.isNamedType();
    }

    @Test(timeout = 4000)
    public void test2547() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        ObjectType objectType0 = numberType0.dereference();
        objectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2548() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        ObjectType objectType0 = numberType0.dereference();
    }

    @Test(timeout = 4000)
    public void test2649() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesInt32Context();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2750() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Unknown class name", (-523), (-523));
        boolean boolean0 = namedType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2751() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Unknown class name", (-523), (-523));
        boolean boolean0 = namedType0.isInterface();
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2852() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isInstanceType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2853() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test2954() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noType0);
        boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test2955() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noType0);
        boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
        proxyObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2956() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noType0);
        boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test3057() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test3058() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        nullType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test3159() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
    }

    @Test(timeout = 4000)
    public void test3160() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isTheObjectType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test3261() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
        objectType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test3262() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
        JSType jSType0 = objectType0.getGreatestSubtype(errorFunctionType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test3263() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
        JSType jSType0 = objectType0.getGreatestSubtype(errorFunctionType0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test3264() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
        JSType jSType0 = objectType0.getGreatestSubtype(errorFunctionType0);
        errorFunctionType0.isNominalType();
    }

    @Test(timeout = 4000)
    public void test3365() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.matchesUint32Context();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test3466() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
    }

    @Test(timeout = 4000)
    public void test3467() throws Throwable {
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = allType0.matchesNumberContext();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test3568() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ">A^X:rb@:");
        boolean boolean0 = templateType0.isEnumType();
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test3569() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ">A^X:rb@:");
        boolean boolean0 = templateType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test3670() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test3671() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.isNumberValueType();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test3772() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.forgiveUnknownNames();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test3873() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.clearResolved();
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test3974() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, noType0);
        boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
        parameterizedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test3975() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, noType0);
        boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test3976() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, noType0);
        boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test4077() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
        ((UnionType) jSType0).toString();
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test4178() throws Throwable {
        boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test4279() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(nullType0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test4280() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = JSType.isEquivalent(nullType0, (JSType) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test4381() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType.isEquivalent(nullType0, nullType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test4482() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test4483() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.equals((Object) null);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test4584() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        nullType0.equals(numberType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test4585() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        nullType0.equals(numberType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test4686() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.findPropertyType("Not declared as a type name");
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test4787() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        stringType0.findPropertyType("TYPE_ERROR_FUNCTION_TYPE");
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test4888() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canAssignTo(stringType0);
    }

    @Test(timeout = 4000)
    public void test4889() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        StringType stringType0 = new StringType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canAssignTo(stringType0);
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test4990() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canAssignTo(nullType0);
    }

    @Test(timeout = 4000)
    public void test4991() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canAssignTo(nullType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5092() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ObjectType objectType0 = nullType0.dereference();
        objectType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test5093() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ObjectType objectType0 = nullType0.dereference();
    }

    @Test(timeout = 4000)
    public void test5094() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ObjectType objectType0 = nullType0.dereference();
        objectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5195() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.getTypesUnderEquality(allType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5196() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        nullType0.getTypesUnderEquality(allType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5297() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        nullType0.getTypesUnderInequality(unknownType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5298() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        nullType0.getTypesUnderInequality(unknownType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test5399() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        numberType0.testForEquality(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test53100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        numberType0.testForEquality(jSType0);
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test54101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(voidType0);
        voidType0.testForEquality(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test54102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(voidType0);
        voidType0.testForEquality(jSType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test55103() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(allType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test55104() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(allType0);
    }

    @Test(timeout = 4000)
    public void test56105() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, "Named type with empty name component");
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test56106() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, "Named type with empty name component");
        boolean boolean0 = nullType0.canTestForShallowEqualityWith(enumElementType0);
    }

    @Test(timeout = 4000)
    public void test57107() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        NullType nullType1 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType1.canTestForShallowEqualityWith(nullType0);
    }

    @Test(timeout = 4000)
    public void test57108() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        NullType nullType1 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType1.canTestForShallowEqualityWith(nullType0);
        nullType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test58109() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getLeastSupertype(allType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test59110() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
        UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
        nullType0.getLeastSupertype(unionType0);
    }

    @Test(timeout = 4000)
    public void test60111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType jSType0 = JSType.getLeastSupertype((JSType) noType0, (JSType) noType0);
    }

    @Test(timeout = 4000)
    public void test60112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType jSType0 = JSType.getLeastSupertype((JSType) noType0, (JSType) noType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test61113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType jSType0 = stringType0.getGreatestSubtype(recordType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test61114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
        RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
        JSType jSType0 = stringType0.getGreatestSubtype(recordType0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test62115() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) noObjectType0, (JSType) noObjectType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test62116() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) noObjectType0, (JSType) noObjectType0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test63117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test64118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.getReferenceName();
    }

    @Test(timeout = 4000)
    public void test64119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
        UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test65120() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 1, 0);
        JSType jSType0 = nullType0.getGreatestSubtype(namedType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test66121() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, "Unknown class name");
        nullType0.getGreatestSubtype(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test66122() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, "Unknown class name");
        nullType0.getGreatestSubtype(enumElementType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test67123() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
        Node node0 = Node.newString(1, "Not declared as a type name", 0, 2);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, nullType0, false);
        JSType jSType1 = JSType.getGreatestSubtype(jSType0, (JSType) arrowType0);
        jSType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test67124() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
        Node node0 = Node.newString(1, "Not declared as a type name", 0, 2);
        ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, nullType0, false);
        JSType jSType1 = JSType.getGreatestSubtype(jSType0, (JSType) arrowType0);
        jSType1.isResolved();
    }

    @Test(timeout = 4000)
    public void test68125() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        NullType nullType1 = new NullType((JSTypeRegistry) null);
        nullType1.getGreatestSubtype(nullType0);
    }

    @Test(timeout = 4000)
    public void test69126() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.getRestrictedTypeGivenToBooleanOutcome(true);
    }

    @Test(timeout = 4000)
    public void test70127() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test71128() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(nullType0);
        nullType0.getTypesUnderEquality(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test71129() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(nullType0);
        nullType0.getTypesUnderEquality(jSType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test72130() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(nullType0);
        nullType0.getTypesUnderInequality(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test72131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(nullType0);
        nullType0.getTypesUnderInequality(jSType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test73132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        nullType0.getTypesUnderInequality(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test74133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(voidType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test74134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        voidType0.getTypesUnderShallowInequality(voidType0);
        voidType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test75135() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
        nullType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test75136() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
        nullType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test75137() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
        nullType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test75138() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
        nullType0.getTypesUnderShallowInequality(jSType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test76139() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        nullType0.getTypesUnderShallowInequality(voidType0);
        nullType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test76140() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        nullType0.getTypesUnderShallowInequality(voidType0);
        voidType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test76141() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        VoidType voidType0 = new VoidType((JSTypeRegistry) null);
        nullType0.getTypesUnderShallowInequality(voidType0);
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test77142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 1, 0);
        boolean boolean0 = namedType0.differsFrom(nullType0);
    }

    @Test(timeout = 4000)
    public void test77143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 1, 0);
        boolean boolean0 = namedType0.differsFrom(nullType0);
        namedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test78144() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
    }

    @Test(timeout = 4000)
    public void test78145() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
        boolean boolean0 = nullType0.differsFrom(unknownType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test79146() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.differsFrom(nullType0);
        nullType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test79147() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.differsFrom(nullType0);
    }

    @Test(timeout = 4000)
    public void test80148() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.differsFrom(allType0);
    }

    @Test(timeout = 4000)
    public void test80149() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        AllType allType0 = new AllType((JSTypeRegistry) null);
        boolean boolean0 = nullType0.differsFrom(allType0);
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test81150() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
    }

    @Test(timeout = 4000)
    public void test81151() throws Throwable {
        UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
        boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
        unknownType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test82152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
        objectType0.getTypesUnderEquality(enumElementType0);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test82153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
        EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, "Named type with empty name component");
        objectType0.getTypesUnderEquality(enumElementType0);
        objectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test83154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 1, 0);
        JSType.TypePair jSType_TypePair0 = namedType0.getTypesUnderEquality(nullType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "VE{}$JQ=GG44llaSQ=.");
        JSType[] jSTypeArray0 = new JSType[5];
        namedType0.referencedType = (ObjectType) errorFunctionType0;
        jSTypeArray0[4] = (JSType) namedType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType_TypePair0.typeB, true, jSTypeArray0);
        functionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test84155() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test84156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        EmptyScope emptyScope0 = new EmptyScope();
        errorFunctionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test85157() throws Throwable {
        NullType nullType0 = new NullType((JSTypeRegistry) null);
        nullType0.setResolvedTypeInternal((JSType) null);
        EmptyScope emptyScope0 = new EmptyScope();
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
    }
}
