/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 02:56:27 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CrossModuleCodeMotion;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.DiagnosticGroup;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSModuleGraph;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.RenameVars;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        node0.getType();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        node0.isSyntheticBlock();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
    }

    @Test(timeout = 4000)
    public void test0013() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSource((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test0024() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray();
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSource();
    }

    @Test(timeout = 4000)
    public void test0046() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Node node0 = compiler0.parseTestCode("4`rnDcpCv~zUmi(");
        compiler0.toSource(compiler_CodeBuilder0, (-1), node0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test0047() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Node node0 = compiler0.parseTestCode("4`rnDcpCv~zUmi(");
        compiler0.toSource(compiler_CodeBuilder0, (-1), node0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test0058() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test0069() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule[] jSModuleArray0 = new JSModule[3];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((JSSourceFile[]) null, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test00710() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.resetUniqueNameId();
    }

    @Test(timeout = 4000)
    public void test00811() throws Throwable {
        Level level0 = Level.ALL;
        Compiler.setLoggingLevel(level0);
        level0.toString();
    }

    @Test(timeout = 4000)
    public void test00912() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getCssRenamingMap();
    }

    @Test(timeout = 4000)
    public void test01013() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    }

    @Test(timeout = 4000)
    public void test01114() throws Throwable {
        Compiler compiler0 = new Compiler();
        Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
        compiler0.setState(compiler_IntermediateState0);
    }

    @Test(timeout = 4000)
    public void test01215() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.disableThreads();
    }

    @Test(timeout = 4000)
    public void test01316() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("iDMYQ#U+5.L?@3T-0X");
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        compiler0.updateGlobalVarReferences(treeMap0, node0);
    }

    @Test(timeout = 4000)
    public void test01417() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.rebuildInputsFromModules();
    }

    @Test(timeout = 4000)
    public void test01518() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.precheck();
    }

    @Test(timeout = 4000)
    public void test01619() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.computeCFG();
    }

    @Test(timeout = 4000)
    public void test01720() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getPropertyMap();
    }

    @Test(timeout = 4000)
    public void test01821() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("}7OS6NG%(qC ");
    }

    @Test(timeout = 4000)
    public void test01922() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.processDefines();
    }

    @Test(timeout = 4000)
    public void test02023() throws Throwable {
        Callable<RenameVars> callable0 = (Callable<RenameVars>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        RenameVars renameVars0 = Compiler.runCallableWithLargeStack(callable0);
    }

    @Test(timeout = 4000)
    public void test02124() throws Throwable {
        LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        compiler0.languageMode();
    }

    @Test(timeout = 4000)
    public void test02225() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setCssRenamingMap((CssRenamingMap) null);
    }

    @Test(timeout = 4000)
    public void test02326() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test02427() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getVariableMap();
    }

    @Test(timeout = 4000)
    public void test02528() throws Throwable {
        Compiler compiler0 = new Compiler();
        FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    }

    @Test(timeout = 4000)
    public void test02629() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parse();
    }

    @Test(timeout = 4000)
    public void test02730() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    }

    @Test(timeout = 4000)
    public void test02831() throws Throwable {
        Compiler compiler0 = new Compiler();
        SymbolTable symbolTable0 = compiler0.buildKnownSymbolTable();
    }

    @Test(timeout = 4000)
    public void test02932() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.recordFunctionInformation();
    }

    @Test(timeout = 4000)
    public void test03033() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getExternsInOrder();
    }

    @Test(timeout = 4000)
    public void test03134() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" [testcode] ");
        String string0 = compiler0.toSource(node0);
    }

    @Test(timeout = 4000)
    public void test03135() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" [testcode] ");
        String string0 = compiler0.toSource(node0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test03236() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModuleGraph jSModuleGraph0 = compiler0.getModuleGraph();
    }

    @Test(timeout = 4000)
    public void test03337() throws Throwable {
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        SourceMap sourceMap0 = compiler0.getSourceMap();
    }

    @Test(timeout = 4000)
    public void test03438() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test03539() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.getRoot();
    }

    @Test(timeout = 4000)
    public void test03640() throws Throwable {
        MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.Compiler$3");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        List<CompilerInput> list0 = compiler0.getInputsForTesting();
    }

    @Test(timeout = 4000)
    public void test03741() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("H+TSwrUF4lolL?Kgx", "eCFG");
        JSModule[] jSModuleArray0 = new JSModule[5];
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test03842() throws Throwable {
        Compiler compiler0 = new Compiler();
        CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
        compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
    }

    @Test(timeout = 4000)
    public void test03943() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setHasRegExpGlobalReferences(true);
    }

    @Test(timeout = 4000)
    public void test04044() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getMessages();
    }

    @Test(timeout = 4000)
    public void test04145() throws Throwable {
        Compiler compiler0 = new Compiler();
        List<CompilerInput> list0 = compiler0.getExternsForTesting();
    }

    @Test(timeout = 4000)
    public void test04246() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.removeTryCatchFinally();
    }

    @Test(timeout = 4000)
    public void test04347() throws Throwable {
        MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.Compiler$3");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        Scope scope0 = compiler0.getTopScope();
    }

    @Test(timeout = 4000)
    public void test04448() throws Throwable {
        Compiler compiler0 = new Compiler();
        ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
    }

    @Test(timeout = 4000)
    public void test04549() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
    }

    @Test(timeout = 4000)
    public void test04650() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        String string0 = compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test04751() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
    }

    @Test(timeout = 4000)
    public void test04852() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
    }

    @Test(timeout = 4000)
    public void test04953() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test05054() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("(?T", "(?T");
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
    }

    @Test(timeout = 4000)
    public void test05055() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("(?T", "(?T");
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        compiler0.optimize();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05156() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("toSourceArray");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        ErrorManager errorManager0 = compiler0.getErrorManager();
    }

    @Test(timeout = 4000)
    public void test05157() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("toSourceArray");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        ErrorManager errorManager0 = compiler0.getErrorManager();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test05258() throws Throwable {
        Compiler compiler0 = new Compiler();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup("}7OS6NG%(qC ", diagnosticTypeArray0);
        DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        compiler0.parseTestCode("}7OS6NG%(qC ");
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test05259() throws Throwable {
        Compiler compiler0 = new Compiler();
        DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[0];
        DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup("}7OS6NG%(qC ", diagnosticTypeArray0);
        DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        compiler0.parseTestCode("}7OS6NG%(qC ");
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test05360() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("yxaVT%'");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("yxaVT%'");
        jSSourceFileArray0[0] = jSSourceFile0;
        CompilerOptions compilerOptions0 = compiler0.options;
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        compilerOptions0.setCheckGlobalThisLevel(checkLevel0);
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05461() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.checkSymbols = true;
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        compiler0.compileModules(arrayList0, stack0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test05462() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.checkSymbols = true;
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05563() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        JSModule jSModule0 = new JSModule(" nzl9y0'|z");
        stack0.add(jSModule0);
        stack0.add(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compileModules(arrayList0, stack0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05564() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        JSModule jSModule0 = new JSModule(" nzl9y0'|z");
        stack0.add(jSModule0);
        stack0.add(jSModule0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05665() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("$", "$");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "$";
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        jSSourceFile0.isExtern();
    }

    @Test(timeout = 4000)
    public void test05766() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("computeCFG");
        stack0.add(jSSourceFile0);
        stack0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test05767() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("computeCFG");
        stack0.add(jSSourceFile0);
        stack0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05868() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test05969() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test06070() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        JSModule jSModule0 = new JSModule((String) null);
        linkedList0.add(jSModule0);
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test06171() throws Throwable {
        Compiler.runCallable((Callable<CrossModuleCodeMotion>) null, false, false);
    }

    @Test(timeout = 4000)
    public void test06272() throws Throwable {
        Callable<CrossModuleCodeMotion> callable0 = (Callable<CrossModuleCodeMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        CrossModuleCodeMotion crossModuleCodeMotion0 = Compiler.runCallable(callable0, false, true);
    }

    @Test(timeout = 4000)
    public void test06373() throws Throwable {
        Callable<CrossModuleCodeMotion> callable0 = (Callable<CrossModuleCodeMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(callable0).call();
        CrossModuleCodeMotion crossModuleCodeMotion0 = Compiler.runCallable(callable0, false, false);
    }

    @Test(timeout = 4000)
    public void test06474() throws Throwable {
        Compiler.runCallable((Callable<CrossModuleCodeMotion>) null, false, true);
    }

    @Test(timeout = 4000)
    public void test06575() throws Throwable {
        Compiler compiler0 = new Compiler();
        DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig((CompilerOptions) null);
        compiler0.setPassConfig(defaultPassConfig0);
    }

    @Test(timeout = 4000)
    public void test06676() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.getPassConfig();
        compiler0.setPassConfig(passConfig0);
    }

    @Test(timeout = 4000)
    public void test06777() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("$", "$");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        jSSourceFile0.isExtern();
    }

    @Test(timeout = 4000)
    public void test06778() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("$", "$");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.check();
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test06879() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        TreeSet<String> treeSet0 = new TreeSet<String>();
        compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test06980() throws Throwable {
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("%name%");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Compiler compiler0 = new Compiler();
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.startPass("XJPu>");
        compiler0.optimize();
    }

    @Test(timeout = 4000)
    public void test07081() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.endPass();
    }

    @Test(timeout = 4000)
    public void test07182() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.reportCodeChange();
        TreeSet<String> treeSet0 = new TreeSet<String>();
        compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test07283() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.areNodesEqualForInlining((Node) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test07384() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("$");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("$", "$");
        jSSourceFileArray0[0] = jSSourceFile0;
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        compiler0.removeExternInput("$");
    }

    @Test(timeout = 4000)
    public void test07485() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("");
        compiler0.removeExternInput((String) null);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07586() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compileModules(arrayList0, stack0, compilerOptions0);
        compiler0.newExternInput((String) null);
    }

    @Test(timeout = 4000)
    public void test07687() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("yxaVT%'", "yxaVT%'");
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        stack0.add(jSSourceFile0);
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        compiler0.newExternInput("yxaVT%'");
    }

    @Test(timeout = 4000)
    public void test07788() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("");
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("", "");
        jSSourceFileArray0[0] = jSSourceFile0;
        CompilerOptions compilerOptions0 = compiler0.options;
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFileArray0[0]);
        compiler0.addIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test07889() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("iDMYQ#U+5.L?@3T-0X");
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("AzLBi", (Charset) null);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test07990() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" [testcode] ");
        node0.addChildrenToBack(node0);
        node0.getChildCount();
    }

    @Test(timeout = 4000)
    public void test07991() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode(" [testcode] ");
        node0.addChildrenToBack(node0);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(" [testcode] ", " [testcode] ");
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test08092() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
    }

    @Test(timeout = 4000)
    public void test08093() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test08194() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test08195() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    }

    @Test(timeout = 4000)
    public void test08296() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.getTypeValidator();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test08297() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        compiler0.getTypeValidator();
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
    }

    @Test(timeout = 4000)
    public void test08398() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("Yhy)pH(\"1");
        compiler0.parseTestCode("Yhy)pH(\"1");
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test08499() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("// Input %num%");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("");
    }

    @Test(timeout = 4000)
    public void test085100() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("INTERNAL COMPILER ERROR.\nPlease report this problem.\n");
        compiler_CodeBuilder1.toString();
    }

    @Test(timeout = 4000)
    public void test086101() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("<V@U4^S&B+Eak8]P,");
    }

    @Test(timeout = 4000)
    public void test087102() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("ThOgu+7B'@ X8]@vgQQ");
        boolean boolean0 = compiler_CodeBuilder1.endsWith("\"7>c%IX^hYB=O");
    }

    @Test(timeout = 4000)
    public void test088103() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        boolean boolean0 = compiler0.isInliningForbidden();
    }

    @Test(timeout = 4000)
    public void test088104() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        boolean boolean0 = compiler0.isInliningForbidden();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test089105() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5?5");
        boolean boolean0 = compiler0.acceptEcmaScript5();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test089106() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5?5");
        boolean boolean0 = compiler0.acceptEcmaScript5();
    }

    @Test(timeout = 4000)
    public void test090107() throws Throwable {
        Compiler compiler0 = new Compiler();
        CheckLevel checkLevel0 = CheckLevel.OFF;
        String[] stringArray0 = new String[3];
        JSError jSError0 = JSError.make("JSC_EMPTY_MODULE_LIST_ERROR", (-2134), (-2915), checkLevel0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
        compiler0.report(jSError0);
        jSError0.getCharno();
    }

    @Test(timeout = 4000)
    public void test091108() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.throwInternalError("o9-`\"+UyN(Zj;n+", (Exception) null);
    }

    @Test(timeout = 4000)
    public void test092109() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("y]`");
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) null, (List<JSSourceFile>) null, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test093110() throws Throwable {
        Compiler compiler0 = new Compiler();
        Region region0 = compiler0.getSourceRegion("this.passes has already been assigned", (-2082408384));
    }

    @Test(timeout = 4000)
    public void test094111() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5?5");
        compiler0.getSourceRegion("toSourceArray", 15);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test095112() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5?5");
        Region region0 = compiler0.getSourceRegion(" [testcode] ", 15);
    }

    @Test(timeout = 4000)
    public void test095113() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("5?5");
        Region region0 = compiler0.getSourceRegion(" [testcode] ", 15);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test096114() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("JSC_MODULE_DEPENDENCY_ERROR");
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test097115() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        node0.getSourceFileName();
    }

    @Test(timeout = 4000)
    public void test097116() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test097117() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
        node0.getSourcePosition();
    }

    @Test(timeout = 4000)
    public void test098118() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.compileModules(arrayList0, stack0, compilerOptions0);
        compiler0.getNodeForCodeInsertion((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test099119() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("JSC_MODULE_DEPENDENCY_ERROR");
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(sourceFile_Generator0).getCode();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator("JSC_MODULE_DEPENDENCY_ERROR", sourceFile_Generator0);
        jSModule0.addFirst(jSSourceFile0);
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test100120() throws Throwable {
        Compiler compiler0 = new Compiler();
        String string0 = compiler0.getAstDotGraph();
    }

    @Test(timeout = 4000)
    public void test101121() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        String string0 = compiler0.getAstDotGraph();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test101122() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        String string0 = compiler0.getAstDotGraph();
    }

    @Test(timeout = 4000)
    public void test102123() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.getErrorManager();
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test103124() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.SymbolTable$Symbol");
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        compiler0.updateGlobalVarReferences(treeMap0, node0);
    }

    @Test(timeout = 4000)
    public void test104125() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString("I_\"`I'5PT0%MCgP(4");
        TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
        compiler0.updateGlobalVarReferences(treeMap0, node0);
    }
}
