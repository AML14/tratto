/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 04:02:26 GMT 2023
 */
package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JSType_ESTest extends JSType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        stringType0.getTypesUnderInequality(functionType0);
        functionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
        FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
        stringType0.getTypesUnderInequality(functionType0);
        stringType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isResolved();
        instanceObjectType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isResolved();
        noResolvedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isResolved();
        instanceObjectType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
        boolean boolean0 = instanceObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isStringValueType();
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isStringValueType();
        allType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.isStringValueType();
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.unboxesTo();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0310() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.unboxesTo();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0311() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.unboxesTo();
        noResolvedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0312() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = noResolvedType0.unboxesTo();
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType objectType0 = noResolvedType0.dereference();
        objectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0414() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType objectType0 = noResolvedType0.dereference();
        objectType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0415() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType objectType0 = noResolvedType0.dereference();
        objectType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0416() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ObjectType objectType0 = noResolvedType0.dereference();
    }

    @Test(timeout = 4000)
    public void test0517() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.getJSDocInfo();
        noType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test0518() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.getJSDocInfo();
        noType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0519() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.getJSDocInfo();
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0520() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.getJSDocInfo();
        noType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0621() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        String string0 = noResolvedType0.toDebugHashCodeString();
    }

    @Test(timeout = 4000)
    public void test0622() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        String string0 = noResolvedType0.toDebugHashCodeString();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0623() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        String string0 = noResolvedType0.toDebugHashCodeString();
        noResolvedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0624() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        String string0 = noResolvedType0.toDebugHashCodeString();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0725() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isRegexpType();
        noResolvedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0726() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isRegexpType();
    }

    @Test(timeout = 4000)
    public void test0727() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isRegexpType();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0728() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isRegexpType();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0829() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test0830() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test0831() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
        noResolvedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test0832() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
    }

    @Test(timeout = 4000)
    public void test0833() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isString();
        noResolvedType0.isAllType();
    }

    @Test(timeout = 4000)
    public void test0934() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isDateType();
    }

    @Test(timeout = 4000)
    public void test0935() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.isDateType();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1036() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        jSType0.findPropertyType("Not declared as a type name");
        jSType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test1037() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        jSType0.findPropertyType("Not declared as a type name");
        jSType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test1038() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        jSType0.findPropertyType("Not declared as a type name");
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test1039() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        jSType0.findPropertyType("Not declared as a type name");
        jSType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
        arrowType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test1141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
        arrowType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
        boolean boolean0 = arrowType0.matchesObjectContext();
    }

    @Test(timeout = 4000)
    public void test1243() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.isNullable();
        stringType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test1244() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.isNullable();
    }

    @Test(timeout = 4000)
    public void test1245() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.isNullable();
        stringType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1346() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        templateType0.canTestForEqualityWith(noType0);
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1347() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        templateType0.canTestForEqualityWith(noType0);
        templateType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test1348() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        templateType0.canTestForEqualityWith(noType0);
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test1449() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "a");
        boolean boolean0 = templateType0.isConstructor();
    }

    @Test(timeout = 4000)
    public void test1450() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "a");
        boolean boolean0 = templateType0.isConstructor();
        templateType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test1451() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "a");
        boolean boolean0 = templateType0.isConstructor();
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1552() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test1553() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isArrayType();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1554() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        boolean boolean0 = noResolvedType0.isArrayType();
        noResolvedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test1655() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.setValidator((Predicate<JSType>) null);
    }

    @Test(timeout = 4000)
    public void test1756() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isBooleanValueType();
        voidType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test1757() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isBooleanValueType();
        voidType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1758() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        boolean boolean0 = voidType0.isBooleanValueType();
    }

    @Test(timeout = 4000)
    public void test1859() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.canBeCalled();
        numberType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test1860() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        boolean boolean0 = numberType0.canBeCalled();
    }

    @Test(timeout = 4000)
    public void test1961() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
        boolean boolean0 = jSType0.hasDisplayName();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test1962() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
        boolean boolean0 = jSType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test2063() throws Throwable {
        NumberType numberType0 = new NumberType((JSTypeRegistry) null);
        numberType0.isNumber();
    }

    @Test(timeout = 4000)
    public void test2164() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isTemplateType();
    }

    @Test(timeout = 4000)
    public void test2165() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isTemplateType();
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test2166() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isTemplateType();
        noType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test2167() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isTemplateType();
        noType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2268() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "&*a>eWMWz");
        boolean boolean0 = templateType0.isOrdinaryFunction();
    }

    @Test(timeout = 4000)
    public void test2269() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "&*a>eWMWz");
        boolean boolean0 = templateType0.isOrdinaryFunction();
        templateType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test2270() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "&*a>eWMWz");
        boolean boolean0 = templateType0.isOrdinaryFunction();
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2371() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.isNamedType();
    }

    @Test(timeout = 4000)
    public void test2372() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.isNamedType();
        noObjectType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test2373() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.isNamedType();
        noObjectType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2374() throws Throwable {
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        boolean boolean0 = noObjectType0.isNamedType();
        noObjectType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test2475() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.matchesInt32Context();
        noResolvedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test2476() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.matchesInt32Context();
        noResolvedType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2577() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test2578() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.isInterface();
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2579() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        boolean boolean0 = templateType0.isInterface();
        templateType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test2680() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$2");
        boolean boolean0 = templateType0.isInstanceType();
        templateType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2681() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$2");
        boolean boolean0 = templateType0.isInstanceType();
    }

    @Test(timeout = 4000)
    public void test2682() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$2");
        boolean boolean0 = templateType0.isInstanceType();
        templateType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test2783() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality(noType0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType_TypePair0.typeA);
        boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test2784() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality(noType0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType_TypePair0.typeA);
        boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
    }

    @Test(timeout = 4000)
    public void test2885() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2886() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        errorFunctionType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
        errorFunctionType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test2987() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isTheObjectType();
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test2988() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isTheObjectType();
    }

    @Test(timeout = 4000)
    public void test2989() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.isTheObjectType();
        noType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test3090() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.matchesUint32Context();
    }

    @Test(timeout = 4000)
    public void test3091() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        boolean boolean0 = allType0.matchesUint32Context();
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test3192() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
        boolean boolean0 = templateType0.isEnumType();
        templateType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test3193() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
        boolean boolean0 = templateType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test3294() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
        functionPrototypeType0.isVoidType();
    }

    @Test(timeout = 4000)
    public void test3295() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
        functionPrototypeType0.isNullType();
    }

    @Test(timeout = 4000)
    public void test3296() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
        boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
        noResolvedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test3297() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
        boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
        functionPrototypeType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test3298() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
        boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
    }

    @Test(timeout = 4000)
    public void test3399() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        noType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test34100() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        noResolvedType0.forgiveUnknownNames();
        noResolvedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test35101() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.clearResolved();
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test35102() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.clearResolved();
        noType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test35103() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.clearResolved();
        noType0.isResolved();
    }

    @Test(timeout = 4000)
    public void test36104() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
    }

    @Test(timeout = 4000)
    public void test36105() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
        boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
        parameterizedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test37106() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        enumElementType0.toString();
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test37107() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
        EnumType enumType0 = jSTypeRegistry0.createEnumType("Named type with empty name component", jSType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        enumElementType0.toString();
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test38108() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        boolean boolean0 = templateType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test38109() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
        boolean boolean0 = templateType0.hasDisplayName();
        templateType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test39110() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
        errorFunctionType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test39111() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = errorFunctionType0.hasDisplayName();
    }

    @Test(timeout = 4000)
    public void test40112() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noType0.getTypesUnderEquality(noObjectType0);
        noObjectType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test40113() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
        noType0.getTypesUnderEquality(noObjectType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test41114() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) noResolvedType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, jSTypeArray0);
        functionType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test41115() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType[] jSTypeArray0 = new JSType[1];
        jSTypeArray0[0] = (JSType) noResolvedType0;
        FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, jSTypeArray0);
        noResolvedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test42116() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
        booleanType0.getTypesUnderShallowEquality(proxyObjectType0);
        proxyObjectType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test42117() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
        booleanType0.getTypesUnderShallowEquality(proxyObjectType0);
        booleanType0.isNoObjectType();
    }

    @Test(timeout = 4000)
    public void test43118() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType.isEquivalent(noResolvedType0, noResolvedType0);
        noResolvedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test44119() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, (JSType) null);
        boolean boolean0 = JSType.isEquivalent(proxyObjectType0, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test45120() throws Throwable {
        boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
    }

    @Test(timeout = 4000)
    public void test46121() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.equals(simpleErrorReporter0);
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test46122() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.equals(simpleErrorReporter0);
        noType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test46123() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        boolean boolean0 = noType0.equals(simpleErrorReporter0);
    }

    @Test(timeout = 4000)
    public void test47124() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        noType0.equals(numberType0);
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test47125() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        noType0.equals(numberType0);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test48126() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NullType nullType0 = new NullType(jSTypeRegistry0);
        nullType0.findPropertyType("Unknown class name");
        nullType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test49127() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.canAssignTo(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test49128() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        boolean boolean0 = stringType0.canAssignTo(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test50129() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test50130() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
        boolean boolean0 = jSType0.canAssignTo(jSType_TypePair0.typeB);
    }

    @Test(timeout = 4000)
    public void test51131() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        ObjectType objectType0 = stringType0.dereference();
        objectType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test51132() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        StringType stringType0 = new StringType(jSTypeRegistry0);
        ObjectType objectType0 = stringType0.dereference();
    }

    @Test(timeout = 4000)
    public void test52133() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noType0.getTypesUnderEquality(allType0);
        allType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test52134() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noType0.getTypesUnderEquality(allType0);
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test52135() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noType0.getTypesUnderEquality(allType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test53136() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        noResolvedType0.getTypesUnderEquality(templateType0);
        noResolvedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test53137() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        noResolvedType0.getTypesUnderEquality(templateType0);
        templateType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test53138() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
        noResolvedType0.getTypesUnderEquality(templateType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test54139() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderShallowEquality(noType0);
        jSType_TypePair0.typeA.testForEqualityHelper(templateType0, noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test54140() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderShallowEquality(noType0);
        jSType_TypePair0.typeA.testForEqualityHelper(templateType0, noType0);
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test55141() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noType0);
        noType0.getTypesUnderInequality(jSType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test56142() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        noType0.getTypesUnderEquality(errorFunctionType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test57143() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0, true);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(functionPrototypeType0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        errorFunctionType0.getTypesUnderInequality(jSType_TypePair0.typeB);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test58144() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a type name", noType0);
        errorFunctionType0.getTypesUnderInequality(enumType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test59145() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", noResolvedType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(enumElementType0);
        enumType0.getTypesUnderInequality(jSType_TypePair0.typeB);
        enumElementType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test59146() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", noResolvedType0);
        EnumElementType enumElementType0 = enumType0.getElementsType();
        JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(enumElementType0);
        enumType0.getTypesUnderInequality(jSType_TypePair0.typeB);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test60147() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        jSType0.isEnumElementType();
    }

    @Test(timeout = 4000)
    public void test60148() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        numberType0.testForEquality(jSType0);
        jSType0.isFunctionType();
    }

    @Test(timeout = 4000)
    public void test60149() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        numberType0.testForEquality(jSType0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test60150() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
        numberType0.testForEquality(jSType0);
        numberType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test61151() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
        boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test61152() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
        boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
        noType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test61153() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
        boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
    }

    @Test(timeout = 4000)
    public void test62154() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "{", voidType0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(enumType0);
        enumType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test62155() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        VoidType voidType0 = new VoidType(jSTypeRegistry0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "{", voidType0);
        boolean boolean0 = voidType0.canTestForShallowEqualityWith(enumType0);
    }

    @Test(timeout = 4000)
    public void test63156() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", noResolvedType0);
        boolean boolean0 = enumType0.canTestForShallowEqualityWith(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test63157() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", noResolvedType0);
        boolean boolean0 = enumType0.canTestForShallowEqualityWith(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test64158() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality(noType0);
        noType0.getLeastSupertype(jSType_TypePair0.typeB);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test65159() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test65160() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
        errorFunctionType0.getLeastSupertype(jSType0);
        errorFunctionType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test66161() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        errorFunctionType0.getLeastSupertype(noResolvedType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test67162() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
        RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        noResolvedType0.getTypesUnderShallowEquality(recordType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test68163() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType1 = numberType0.autoboxesTo();
        jSType0.getTypesUnderShallowEquality(jSType1);
        jSType1.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test68164() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType1 = numberType0.autoboxesTo();
        jSType0.getTypesUnderShallowEquality(jSType1);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test69165() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
        JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
        JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
        jSTypeNativeArray0[0] = jSTypeNative0;
        jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        errorFunctionType0.getTypesUnderShallowEquality(jSType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test70166() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        jSType0.getTypesUnderShallowEquality(numberType0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test71167() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
        UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
        JSType.filterNoResolvedType(unionType0);
        unionType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test72168() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType jSType0 = noType0.getRestrictedTypeGivenToBooleanOutcome(false);
    }

    @Test(timeout = 4000)
    public void test72169() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType jSType0 = noType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test72170() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType jSType0 = noType0.getRestrictedTypeGivenToBooleanOutcome(false);
        jSType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test73171() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        JSType jSType0 = allType0.getRestrictedTypeGivenToBooleanOutcome(true);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test74172() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test74173() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
        noResolvedType0.getTypesUnderEquality(jSType0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test75174() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NumberType numberType0 = new NumberType(jSTypeRegistry0);
        JSType jSType0 = numberType0.autoboxesTo();
        jSType0.getTypesUnderEquality(numberType0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test76175() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.getTypesUnderInequality(noType0);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test77176() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noType0);
        jSType0.getTypesUnderShallowInequality(jSType0);
        jSType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test77177() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noType0);
        jSType0.getTypesUnderShallowInequality(jSType0);
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test78178() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = templateType0.differsFrom(noResolvedType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test78179() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = templateType0.differsFrom(noResolvedType0);
    }

    @Test(timeout = 4000)
    public void test79180() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
        boolean boolean0 = noType0.differsFrom(jSType_TypePair0.typeA);
        noType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test79181() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
        boolean boolean0 = noType0.differsFrom(jSType_TypePair0.typeA);
        noType0.isNoResolvedType();
    }

    @Test(timeout = 4000)
    public void test79182() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
        boolean boolean0 = noType0.differsFrom(jSType_TypePair0.typeA);
    }

    @Test(timeout = 4000)
    public void test80183() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = noResolvedType0.differsFrom(templateType0);
    }

    @Test(timeout = 4000)
    public void test80184() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = noResolvedType0.differsFrom(templateType0);
        noResolvedType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test80185() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
        boolean boolean0 = noResolvedType0.differsFrom(templateType0);
        templateType0.isEmptyType();
    }

    @Test(timeout = 4000)
    public void test81186() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = noResolvedType0.differsFrom(errorFunctionType0);
        errorFunctionType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test81187() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
        boolean boolean0 = noResolvedType0.differsFrom(errorFunctionType0);
    }

    @Test(timeout = 4000)
    public void test82188() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowEquality(templateType0);
        boolean boolean0 = JSType.isSubtype((JSType) noType0, jSType_TypePair0.typeB);
        noType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test82189() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
        JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowEquality(templateType0);
        boolean boolean0 = JSType.isSubtype((JSType) noType0, jSType_TypePair0.typeB);
    }

    @Test(timeout = 4000)
    public void test83190() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
        AllType allType0 = new AllType(jSTypeRegistry0);
        noResolvedType0.getTypesUnderShallowEquality(allType0);
        noResolvedType0.hasCachedValues();
    }

    @Test(timeout = 4000)
    public void test84191() throws Throwable {
        SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
        JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        NoType noType0 = new NoType(jSTypeRegistry0);
        noType0.setResolvedTypeInternal((JSType) null);
        noType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
        noType0.isResolved();
    }
}
