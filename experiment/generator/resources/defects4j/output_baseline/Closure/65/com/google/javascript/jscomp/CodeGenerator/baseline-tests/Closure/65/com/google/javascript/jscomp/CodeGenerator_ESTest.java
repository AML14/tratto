/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 03:12:06 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodeConsumer;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CodeGenerator_ESTest extends CodeGenerator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Node node0 = new Node(51);
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
        codeGenerator0.addList(node0, true, codeGenerator_Context0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Node node0 = new Node(41);
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        codeGenerator0.addList(node0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        codeGenerator0.tagAsStrict();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        String string0 = CodeGenerator.escapeToDoubleQuotedJsString("on\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption\":\n\fOptimizeMode\u0012\t\n\u0005SPEED\u0010\u0001\u0012\r\n\tCODE_SIZE\u0010\u0002\u0012\u0010\n\fLITE_RUNTIME\u0010\u0003*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"\u00B8\u0001\n\u000EMessageOptions\u0012&\n\u0017message_set_wire_format\u0018\u0001 \u0001(\b:\u0005false\u0012.\n\u001Fno_standard_descriptor_accessor\u0018\u0002 \u0001(\b:\u0005false\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"\u0094\u0002\n\fFieldOptions\u0012:\n\u0005ctype\u0018\u0001 \u0001(\u000E2#.google.protobuf.FieldOptions.CType:\u0006STRING\u0012\u000E\n\u0006packed\u0018\u0002 \u0001(\b\u0012\u0019");
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        codeGenerator0.addCaseBody((Node) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        codeGenerator0.addList((Node) null, false);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Charset charset0 = Charset.forName("default");
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
        codeGenerator0.addAllSiblings((Node) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        double double0 = CodeGenerator.getSimpleNumber("8");
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        double double0 = CodeGenerator.getSimpleNumber("9,/*l'+");
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        boolean boolean0 = CodeGenerator.isSimpleNumber("ts$?9[ D3(7Zr!~c");
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        double double0 = CodeGenerator.getSimpleNumber("");
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        Node node0 = new Node(85, 85, 85);
        codeGenerator0.addArrayList(node0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Node node0 = new Node(97, 97, 97);
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
        codeGenerator0.addList(node0, false, codeGenerator_Context0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Node node0 = new Node(1020);
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        codeGenerator0.addAllSiblings(node0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        codeGenerator0.addJsString("5!=QA'C");
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        codeGenerator0.addJsString("Bad binary operator \"%s\": expected 2 arguments but got %s");
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        String string0 = CodeGenerator.escapeToDoubleQuotedJsString("\n\ndeprecated\u0018\u0003 \u0001(\b:\u0005false\u0012\u001C\n\u0014experimental_map_key\u0018\t \u0001(\t\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption\"/\n\u0005CType\u0012\n\n\u0006STRING\u0010\u0000\u0012\b\n\u0004CORD\u0010\u0001\u0012\u0010\n\fSTRING_PIECE\u0010\u0002*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"]\n\u000BEnumOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"b\n\u0010EnumValueOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"`\n\u000EServiceOptions\u0012C\n");
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
        codeGenerator0.addJsString("`j;T!yoElE<!--y-b?");
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        String string0 = CodeGenerator.escapeToDoubleQuotedJsString("_(]]>PY1wRdl%");
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        String string0 = CodeGenerator.regexpEscape("~>HA<!--5");
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        String string0 = CodeGenerator.escapeToDoubleQuotedJsString("<!-->-s");
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        String string0 = CodeGenerator.regexpEscape("<np->-s");
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        String string0 = CodeGenerator.escapeToDoubleQuotedJsString("QbR]>3Lryt+un/^n");
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        String string0 = CodeGenerator.escapeToDoubleQuotedJsString("g</scriptyx-hd&l");
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        String string0 = CodeGenerator.regexpEscape("zg2", charsetEncoder0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        String string0 = CodeGenerator.identifierEscape("\n\ndeprecated\u0018\u0003 \u0001(\b:\u0005false\u0012\u001C\n\u0014experimental_map_key\u0018\t \u0001(\t\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption\"/\n\u0005CType\u0012\n\n\u0006STRING\u0010\u0000\u0012\b\n\u0004CORD\u0010\u0001\u0012\u0010\n\fSTRING_PIECE\u0010\u0002*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"]\n\u000BEnumOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"b\n\u0010EnumValueOptions\u0012C\n\u0014uninterpreted_option\u0018\u00E7\u0007 \u0003(\u000B2$.google.protobuf.UninterpretedOption*\t\b\u00E8\u0007\u0010\u0080\u0080\u0080\u0080\u0002\"`\n\u000EServiceOptions\u0012C\n");
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        String string0 = CodeGenerator.identifierEscape("com.google.javascript.jscomp.DiagnosticGroup");
    }
}
