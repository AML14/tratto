/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 17:16:34 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.Reader;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test0004() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test0005() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test0006() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test0007() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test0008() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00119() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("epV!DihL0*h.t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test00221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test00223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00224() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00225() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00226() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00227() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00228() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00229() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00230() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00231() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00332() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00333() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00334() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00335() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00336() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00337() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00338() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00339() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00340() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00441() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00442() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00443() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00444() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00445() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test00546() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00547() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00548() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00549() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00550() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00551() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00552() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00553() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00654() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("|mabLp4");
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00655() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("|mabLp4");
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00656() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("|mabLp4");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00657() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("|mabLp4");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00658() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("|mabLp4");
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00659() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("|mabLp4");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00660() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("|mabLp4");
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00661() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("|mabLp4");
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00662() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("|mabLp4");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00763() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00764() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00765() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00766() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00767() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00768() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test00769() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00770() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("y");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00871() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00872() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00873() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00874() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00875() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00876() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00877() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00878() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00979() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00980() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00981() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00982() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00983() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00984() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00985() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00986() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00987() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = Character.valueOf('!');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test01088() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test01089() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test01090() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test01091() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test01092() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test01093() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test01094() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test01095() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test01096() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test01097() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test01198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test01199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test011100() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test012101() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test012102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test012103() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test012104() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test012105() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test012106() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test012107() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test012108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test012109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("format");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test013110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test013111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test013112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test013113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test013114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test013115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test013116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test013117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test014118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test014119() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test015120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test015121() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test015122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test015123() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test015124() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test015125() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test015126() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test015127() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test015128() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test015129() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test015130() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test015131() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        Character character0 = Character.valueOf('Y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test016132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test016133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test016134() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
        cSVFormat3.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test016135() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test016136() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test016137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test016138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test016139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
        Character character0 = new Character('X');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test017140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test017141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test017142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test017143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test017144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test017145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test017146() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test017147() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = new Character('x');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test018148() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test018149() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test018150() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test018151() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test018152() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test018153() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test018154() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        Character character0 = new Character('y');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test019155() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test019156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test019157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test019158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test019159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test019160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test019161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test019162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test019163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test020164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test020165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test020166() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test020167() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test020168() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test020169() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test020170() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test020171() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test021172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test021173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test021174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test021175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test021176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test021177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test021178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test021179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("CommentStart=<");
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test022180() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("QJWto;q]bY]?r+,Y");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test022181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("QJWto;q]bY]?r+,Y");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test022182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("QJWto;q]bY]?r+,Y");
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test022183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("QJWto;q]bY]?r+,Y");
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test022184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("QJWto;q]bY]?r+,Y");
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test022185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("QJWto;q]bY]?r+,Y");
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test022186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("QJWto;q]bY]?r+,Y");
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test022187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("QJWto;q]bY]?r+,Y");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test022188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("QJWto;q]bY]?r+,Y");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test023189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.withNullString("mlg\"F");
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test023190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.withNullString("mlg\"F");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test024191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test024192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test024193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test024194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test024195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test024196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test024197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test024198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test025199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test025200() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test025201() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test025202() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test026203() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test026204() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test026205() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test026206() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test026207() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test026208() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test026209() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test026210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test027211() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test027212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test027213() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test027214() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test027215() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test027216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test027217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test028218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test028219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test028220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test028221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test028222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test028223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test028224() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test028225() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test028226() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test028227() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test028228() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test029229() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test029230() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test029231() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test029232() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test029233() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test029234() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test029235() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test030236() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test030237() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test030238() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test030239() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test031240() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("O{x<Z~@");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test031241() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("O{x<Z~@");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test031242() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("O{x<Z~@");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test031243() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("O{x<Z~@");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test031244() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("O{x<Z~@");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test031245() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("O{x<Z~@");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test031246() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("O{x<Z~@");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test031247() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("O{x<Z~@");
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test032248() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test032249() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test032250() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test032251() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test032252() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test032253() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test032254() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test032255() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test033256() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test033257() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test033258() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test033259() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test033260() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test033261() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test033262() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test033263() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        String[] stringArray0 = new String[6];
        stringArray0[0] = ":";
        stringArray0[1] = "8`0&40-Y^E%,tpsSa";
        stringArray0[2] = "~dD/GUYR ";
        stringArray0[3] = "ON7::V\"j@@DK";
        stringArray0[4] = "MINIMAL";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test034264() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test034265() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test035266() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test035267() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test035268() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test035269() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test035270() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test035271() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test035272() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test035273() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('R');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test036274() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test036275() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test036276() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test036277() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test036278() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test036279() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test036280() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test036281() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        Character character0 = Character.valueOf('S');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test037282() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        Character character0 = new Character('s');
        cSVFormat1.withEscape(character0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test037283() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        Character character0 = new Character('s');
        cSVFormat1.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test038284() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test038285() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test038286() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test038287() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test038288() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getNullString();
    }

    @Test(timeout = 4000)
    public void test038289() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test038290() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test038291() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Jyv!x");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test039292() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test039293() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test039294() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test039295() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test039296() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test039297() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test039298() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test039299() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test040300() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test040301() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test040302() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test040303() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test040304() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test040305() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test040306() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test040307() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test041308() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\"');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test041309() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\"');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test041310() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\"');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test041311() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\"');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test041312() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\"');
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test041313() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\"');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test042314() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('M');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test042315() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('M');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test042316() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('M');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test043317() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test043318() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test043319() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test043320() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test043321() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test043322() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test043323() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test043324() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test044325() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test044326() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test044327() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test044328() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test044329() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test044330() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test044331() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test045332() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test045333() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test045334() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test045335() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test045336() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test045337() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test045338() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test045339() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<");
        Character character0 = Character.valueOf('W');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test046340() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test046341() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test046342() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test046343() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test046344() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test046345() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test046346() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test047347() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('N');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test047348() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('N');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test047349() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('N');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test047350() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('N');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test047351() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('N');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test047352() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('N');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test047353() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('N');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test047354() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('N');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test048355() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test048356() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test048357() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test048358() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test048359() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test048360() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test048361() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test049362() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        Character character0 = Character.valueOf('*');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\"');
        cSVFormat4.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test049363() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        Character character0 = Character.valueOf('*');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\"');
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test049364() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        Character character0 = Character.valueOf('*');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\"');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test049365() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        Character character0 = Character.valueOf('*');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\"');
        cSVFormat4.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test050366() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test050367() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test050368() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test050369() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test050370() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test050371() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test050372() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test050373() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test050374() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test051375() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('|');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test051376() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('|');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test051377() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('|');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test052378() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("rcKJs'S9{B9");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test052379() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("rcKJs'S9{B9");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
        cSVFormat4.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test052380() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("rcKJs'S9{B9");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
        cSVFormat4.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test052381() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("rcKJs'S9{B9");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
        cSVFormat4.equals((Object) cSVFormat3);
    }

    @Test(timeout = 4000)
    public void test052382() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("rcKJs'S9{B9");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
        cSVFormat4.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test052383() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("rcKJs'S9{B9");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
        cSVFormat4.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test052384() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("rcKJs'S9{B9");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test052385() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("rcKJs'S9{B9");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
        cSVFormat4.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test052386() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("rcKJs'S9{B9");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test052387() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("rcKJs'S9{B9");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
        cSVFormat4.getNullString();
    }

    @Test(timeout = 4000)
    public void test053388() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test053389() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test053390() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test053391() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test053392() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test053393() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test053394() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test054395() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test054396() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test054397() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test054398() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test054399() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test054400() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test054401() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test054402() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test055403() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
        boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test055404() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
        boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test055405() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
        boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test055406() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
        boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test055407() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
        boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test055408() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
        boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test055409() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
        boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test055410() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
        boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test056411() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test056412() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test056413() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test056414() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test056415() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test057416() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test057417() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test057418() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test057419() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test057420() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test057421() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test057422() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test057423() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        String string0 = cSVFormat1.getRecordSeparator();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test058424() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test058425() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test058426() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test058427() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test058428() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test058429() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test058430() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test059431() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = cSVFormat0.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test060432() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("QJWto;q]bY]?r+,Y");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test060433() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("QJWto;q]bY]?r+,Y");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test060434() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("QJWto;q]bY]?r+,Y");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test060435() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("QJWto;q]bY]?r+,Y");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test060436() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("QJWto;q]bY]?r+,Y");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test060437() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("QJWto;q]bY]?r+,Y");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test060438() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("QJWto;q]bY]?r+,Y");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test060439() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("QJWto;q]bY]?r+,Y");
        String string0 = cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test061440() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test061441() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test061442() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test061443() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test061444() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test061445() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test061446() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test061447() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test062448() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test062449() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test062450() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test062451() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test062452() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test062453() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test062454() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test063455() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test064456() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "bapp*>~N]>qej~6vX";
        stringArray0[1] = "org.apache.commons.csv.ExtendedBufferedReader";
        stringArray0[2] = "The header contains a duplicate entry: '";
        stringArray0[3] = "783";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test064457() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "bapp*>~N]>qej~6vX";
        stringArray0[1] = "org.apache.commons.csv.ExtendedBufferedReader";
        stringArray0[2] = "The header contains a duplicate entry: '";
        stringArray0[3] = "783";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test064458() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "bapp*>~N]>qej~6vX";
        stringArray0[1] = "org.apache.commons.csv.ExtendedBufferedReader";
        stringArray0[2] = "The header contains a duplicate entry: '";
        stringArray0[3] = "783";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test064459() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "bapp*>~N]>qej~6vX";
        stringArray0[1] = "org.apache.commons.csv.ExtendedBufferedReader";
        stringArray0[2] = "The header contains a duplicate entry: '";
        stringArray0[3] = "783";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test064460() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "bapp*>~N]>qej~6vX";
        stringArray0[1] = "org.apache.commons.csv.ExtendedBufferedReader";
        stringArray0[2] = "The header contains a duplicate entry: '";
        stringArray0[3] = "783";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test064461() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "bapp*>~N]>qej~6vX";
        stringArray0[1] = "org.apache.commons.csv.ExtendedBufferedReader";
        stringArray0[2] = "The header contains a duplicate entry: '";
        stringArray0[3] = "783";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test064462() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[5];
        stringArray0[0] = "bapp*>~N]>qej~6vX";
        stringArray0[1] = "org.apache.commons.csv.ExtendedBufferedReader";
        stringArray0[2] = "The header contains a duplicate entry: '";
        stringArray0[3] = "783";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test065463() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = cSVFormat0.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test066464() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test067465() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test067466() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test067467() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test067468() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test067469() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test068470() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test068471() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test068472() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test068473() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test068474() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test068475() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test068476() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test069477() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test069478() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test070479() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('k');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.withEscape('k');
    }

    @Test(timeout = 4000)
    public void test071480() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('T');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.withDelimiter('T');
    }

    @Test(timeout = 4000)
    public void test072481() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        cSVFormat0.DEFAULT.print((Appendable) null);
    }

    @Test(timeout = 4000)
    public void test073482() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        cSVFormat0.parse((Reader) null);
    }

    @Test(timeout = 4000)
    public void test074483() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        cSVFormat0.format((Object[]) null);
    }

    @Test(timeout = 4000)
    public void test075484() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
        cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test075485() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
        cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test075486() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
        cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test075487() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
        cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test075488() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
        cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test076489() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test076490() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test076491() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test076492() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test076493() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test076494() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test076495() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test077496() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$VALUES");
        boolean boolean0 = cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test077497() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$VALUES");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test077498() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$VALUES");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test077499() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$VALUES");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test077500() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$VALUES");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test077501() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$VALUES");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test077502() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$VALUES");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test077503() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$VALUES");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test077504() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$VALUES");
        boolean boolean0 = cSVFormat1.isNullStringSet();
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test078505() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat0.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test079506() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test080507() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test080508() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test080509() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test080510() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test080511() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test080512() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test080513() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = new Character('f');
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
        boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test081514() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test081515() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test081516() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test081517() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test081518() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    }

    @Test(timeout = 4000)
    public void test081519() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test081520() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test081521() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('e');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test082522() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test082523() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test082524() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test082525() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test082526() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test082527() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test082528() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getHeader();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test083529() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = cSVFormat0.getHeader();
    }

    @Test(timeout = 4000)
    public void test084530() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test085531() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = cSVFormat0.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test086532() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String string0 = cSVFormat0.getNullString();
    }

    @Test(timeout = 4000)
    public void test087533() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        cSVFormat0.getQuoteMode();
    }

    @Test(timeout = 4000)
    public void test088534() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = cSVFormat0.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test089535() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test090536() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String string0 = cSVFormat0.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test091537() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = cSVFormat0.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test092538() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test092539() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test092540() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test092541() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test092542() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test093543() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        QuoteMode quoteMode0 = QuoteMode.NONE;
        cSVFormat0.withQuoteMode(quoteMode0);
    }

    @Test(timeout = 4000)
    public void test094544() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
        Character character0 = new Character('r');
        cSVFormat1.withCommentMarker(character0);
    }

    @Test(timeout = 4000)
    public void test095545() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('s');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.withQuote('s');
    }

    @Test(timeout = 4000)
    public void test096546() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        cSVFormat0.EXCEL.withCommentMarker(',');
    }

    @Test(timeout = 4000)
    public void test097547() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
        Character character0 = new Character('U');
        cSVFormat0.withEscape(character0);
    }

    @Test(timeout = 4000)
    public void test098548() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('(');
        Character character0 = new Character('(');
        cSVFormat0.withQuote(character0);
    }

    @Test(timeout = 4000)
    public void test099549() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[8];
        stringArray0[0] = "vE7j|07";
        stringArray0[1] = "]G7;";
        stringArray0[2] = "w5%hol.RC'kWi";
        stringArray0[3] = "The header contains a duplicate entry: '";
        stringArray0[4] = "1q#6hb?%~+|gP";
        stringArray0[5] = "(line ";
        stringArray0[6] = "\r\n";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test099550() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[8];
        stringArray0[0] = "vE7j|07";
        stringArray0[1] = "]G7;";
        stringArray0[2] = "w5%hol.RC'kWi";
        stringArray0[3] = "The header contains a duplicate entry: '";
        stringArray0[4] = "1q#6hb?%~+|gP";
        stringArray0[5] = "(line ";
        stringArray0[6] = "\r\n";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test100551() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        String string0 = cSVFormat0.toString();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test100552() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        String string0 = cSVFormat0.toString();
    }

    @Test(timeout = 4000)
    public void test101553() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test101554() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test102555() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("IUgG1T[MPmf6/yGLlvX");
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test102556() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("IUgG1T[MPmf6/yGLlvX");
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test103557() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        cSVFormat0.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test103558() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[7];
        cSVFormat0.format(objectArray0);
        cSVFormat0.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test104559() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('1');
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test104560() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('1');
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test105561() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat0.isCommentMarkerSet();
    }

    @Test(timeout = 4000)
    public void test106562() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test106563() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test106564() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test106565() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test106566() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test107567() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        cSVFormat0.TDF.hashCode();
    }

    @Test(timeout = 4000)
    public void test108568() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("WL__2JE");
        cSVFormat1.hashCode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test108569() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("WL__2JE");
        cSVFormat1.hashCode();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test108570() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("WL__2JE");
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test108571() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("WL__2JE");
        cSVFormat1.hashCode();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test109572() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        cSVFormat1.hashCode();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test109573() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test109574() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test109575() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test109576() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test110577() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test110578() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test110579() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test110580() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test110581() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test110582() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test111583() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[8];
        stringArray0[0] = "vE7j|07";
        stringArray0[1] = "]G7;";
        stringArray0[2] = "w5%hol.RC'kWi";
        stringArray0[3] = "The header contains a duplicate entry: '";
        stringArray0[4] = "1q#6hb?%~+|gP";
        stringArray0[5] = "(line ";
        stringArray0[6] = "\r\n";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.format(stringArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test111584() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[8];
        stringArray0[0] = "vE7j|07";
        stringArray0[1] = "]G7;";
        stringArray0[2] = "w5%hol.RC'kWi";
        stringArray0[3] = "The header contains a duplicate entry: '";
        stringArray0[4] = "1q#6hb?%~+|gP";
        stringArray0[5] = "(line ";
        stringArray0[6] = "\r\n";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.format(stringArray0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test111585() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[8];
        stringArray0[0] = "vE7j|07";
        stringArray0[1] = "]G7;";
        stringArray0[2] = "w5%hol.RC'kWi";
        stringArray0[3] = "The header contains a duplicate entry: '";
        stringArray0[4] = "1q#6hb?%~+|gP";
        stringArray0[5] = "(line ";
        stringArray0[6] = "\r\n";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.format(stringArray0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test111586() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[8];
        stringArray0[0] = "vE7j|07";
        stringArray0[1] = "]G7;";
        stringArray0[2] = "w5%hol.RC'kWi";
        stringArray0[3] = "The header contains a duplicate entry: '";
        stringArray0[4] = "1q#6hb?%~+|gP";
        stringArray0[5] = "(line ";
        stringArray0[6] = "\r\n";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.format(stringArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test111587() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[8];
        stringArray0[0] = "vE7j|07";
        stringArray0[1] = "]G7;";
        stringArray0[2] = "w5%hol.RC'kWi";
        stringArray0[3] = "The header contains a duplicate entry: '";
        stringArray0[4] = "1q#6hb?%~+|gP";
        stringArray0[5] = "(line ";
        stringArray0[6] = "\r\n";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.format(stringArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test111588() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[8];
        stringArray0[0] = "vE7j|07";
        stringArray0[1] = "]G7;";
        stringArray0[2] = "w5%hol.RC'kWi";
        stringArray0[3] = "The header contains a duplicate entry: '";
        stringArray0[4] = "1q#6hb?%~+|gP";
        stringArray0[5] = "(line ";
        stringArray0[6] = "\r\n";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.format(stringArray0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test111589() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[8];
        stringArray0[0] = "vE7j|07";
        stringArray0[1] = "]G7;";
        stringArray0[2] = "w5%hol.RC'kWi";
        stringArray0[3] = "The header contains a duplicate entry: '";
        stringArray0[4] = "1q#6hb?%~+|gP";
        stringArray0[5] = "(line ";
        stringArray0[6] = "\r\n";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.format(stringArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test112590() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test112591() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test112592() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test112593() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test112594() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test112595() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test112596() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test113597() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test113598() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test113599() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test113600() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test113601() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test113602() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test113603() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test114604() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test115605() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test115606() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test115607() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test115608() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test115609() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test115610() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test115611() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test115612() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test115613() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("r,&,Izl?x01`c1z8");
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test116614() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.ExtendedBufferedReader");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test116615() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.ExtendedBufferedReader");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test116616() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.ExtendedBufferedReader");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test116617() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.ExtendedBufferedReader");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test116618() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.ExtendedBufferedReader");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test116619() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.ExtendedBufferedReader");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test116620() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.ExtendedBufferedReader");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test116621() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.ExtendedBufferedReader");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test116622() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.ExtendedBufferedReader");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test117623() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('?');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test117624() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('?');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test117625() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('?');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test117626() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('?');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test117627() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('?');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test117628() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('?');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test117629() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('?');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test117630() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('?');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test118631() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        CSVFormat cSVFormat2 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test118632() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        CSVFormat cSVFormat2 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test118633() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        CSVFormat cSVFormat2 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test118634() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        CSVFormat cSVFormat2 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test118635() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        CSVFormat cSVFormat2 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test118636() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        CSVFormat cSVFormat2 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test118637() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        CSVFormat cSVFormat2 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test119638() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test119639() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test119640() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test119641() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test119642() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test119643() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test119644() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test119645() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test119646() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test120647() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test120648() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test120649() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test120650() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test120651() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test120652() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test120653() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test120654() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test120655() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test121656() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test121657() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test121658() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test121659() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test121660() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test121661() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test121662() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test121663() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test121664() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test121665() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test122666() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test122667() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test122668() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test122669() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test122670() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test122671() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test122672() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test122673() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test122674() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character('r');
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test123675() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = CSVFormat.TDF;
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test124676() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test124677() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test124678() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test124679() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test124680() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test125681() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test125682() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test125683() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test125684() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test125685() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test125686() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test125687() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test125688() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test126689() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test126690() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
    }

    @Test(timeout = 4000)
    public void test126691() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test126692() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test126693() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test126694() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        Object object0 = new Object();
        boolean boolean0 = cSVFormat0.equals(object0);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test127695() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        boolean boolean0 = cSVFormat0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test128696() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test128697() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test128698() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test128699() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test128700() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test128701() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test129702() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[3];
        cSVFormat0.withHeader(stringArray0);
    }

    @Test(timeout = 4000)
    public void test130703() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test130704() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test131705() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test131706() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test131707() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test131708() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test131709() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test131710() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test131711() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test131712() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test132713() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test132714() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test132715() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test132716() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test132717() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test132718() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test132719() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test132720() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test132721() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test132722() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test133723() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test134724() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test134725() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test135726() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test135727() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test135728() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test135729() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test135730() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test135731() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test135732() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test135733() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test136734() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test136735() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test136736() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test136737() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test136738() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test136739() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test136740() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test136741() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test136742() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test136743() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test136744() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test137745() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        MockPrintStream mockPrintStream0 = new MockPrintStream("GWS,4YX@?");
        cSVFormat0.print(mockPrintStream0);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test137746() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        MockPrintStream mockPrintStream0 = new MockPrintStream("GWS,4YX@?");
        cSVFormat0.print(mockPrintStream0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test137747() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        MockPrintStream mockPrintStream0 = new MockPrintStream("GWS,4YX@?");
        cSVFormat0.print(mockPrintStream0);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test137748() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        MockPrintStream mockPrintStream0 = new MockPrintStream("GWS,4YX@?");
        cSVFormat0.print(mockPrintStream0);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test137749() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
        MockPrintStream mockPrintStream0 = new MockPrintStream("GWS,4YX@?");
        cSVFormat0.print(mockPrintStream0);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test138750() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test139751() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        PipedReader pipedReader0 = new PipedReader(1);
        CSVParser cSVParser0 = cSVFormat0.TDF.parse(pipedReader0);
        cSVParser0.getRecordNumber();
    }
}
