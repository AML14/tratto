/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 16:59:33 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        String[] stringArray0 = new String[2];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer(2494);
        hashMap0.put("tblJU6", integer0);
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "ox~i", (-750L));
        boolean boolean0 = cSVRecord0.isSet("tblJU6");
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        String[] stringArray0 = new String[2];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer(2494);
        hashMap0.put("tblJU6", integer0);
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "ox~i", (-750L));
        boolean boolean0 = cSVRecord0.isSet("tblJU6");
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer((-1));
        hashMap0.put("", integer0);
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "]9rX", 82L);
        boolean boolean0 = cSVRecord0.isConsistent();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer((-1));
        hashMap0.put("", integer0);
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "]9rX", 82L);
        boolean boolean0 = cSVRecord0.isConsistent();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", 0L);
        String[] stringArray0 = cSVRecord0.values();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", (-1L));
        cSVRecord0.size();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        String[] stringArray0 = new String[1];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "24G>O&M1HLKqj", 0L);
        long long0 = cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        String[] stringArray0 = new String[4];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "'V", 570L);
        long long0 = cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, (String) null, (-1L));
        cSVRecord0.getComment();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", 0L);
        String string0 = cSVRecord0.getComment();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        String[] stringArray0 = new String[1];
        stringArray0[0] = "24G>O&M1HLKqj";
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer(0);
        hashMap0.put("24G>O&M1HLKqj", integer0);
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "24G>O&M1HLKqj", 0L);
        String string0 = cSVRecord0.get("24G>O&M1HLKqj");
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        String[] stringArray0 = new String[3];
        stringArray0[0] = "";
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer(0);
        hashMap0.put("", integer0);
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
        String string0 = cSVRecord0.get("");
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        String[] stringArray0 = new String[3];
        stringArray0[1] = "d_tp*3?d";
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(1, 1578.9357F);
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "!", 0L);
        String string0 = cSVRecord0.get(1);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        String[] stringArray0 = new String[3];
        stringArray0[0] = "";
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
        String string0 = cSVRecord0.get(0);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        hashMap0.put("", (Integer) null);
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, (String) null, (-1L));
        cSVRecord0.isSet("");
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer(0);
        hashMap0.put("", integer0);
        CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", 2103L);
        cSVRecord0.get("");
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        String[] stringArray0 = new String[10];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "h8B|J=>/", (-24));
        cSVRecord0.get((-24));
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        String[] stringArray0 = new String[0];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zf3", (-734L));
        cSVRecord0.isMapped("zf3");
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        String[] stringArray0 = new String[2];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer(0);
        hashMap0.put("", integer0);
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "@A~]A", 1L);
        boolean boolean0 = cSVRecord0.isMapped("");
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        String[] stringArray0 = new String[2];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        Integer integer0 = new Integer(0);
        hashMap0.put("", integer0);
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "@A~]A", 1L);
        boolean boolean0 = cSVRecord0.isMapped("");
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        String[] stringArray0 = new String[0];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zf3", (-734L));
        Integer integer0 = new Integer(0);
        hashMap0.put((String) null, integer0);
        boolean boolean0 = cSVRecord0.isSet((String) null);
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        String[] stringArray0 = new String[0];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zf3", (-734L));
        Integer integer0 = new Integer(0);
        hashMap0.put((String) null, integer0);
        boolean boolean0 = cSVRecord0.isSet((String) null);
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        String[] stringArray0 = new String[1];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Ki=[~{)k5vRN|Uq=a\"H", 2032L);
        Integer integer0 = new Integer(0);
        hashMap0.put("Ki=[~{)k5vRN|Uq=a\"H", integer0);
        boolean boolean0 = cSVRecord0.isSet("Ki=[~{)k5vRN|Uq=a\"H");
    }

    @Test(timeout = 4000)
    public void test1823() throws Throwable {
        String[] stringArray0 = new String[1];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Ki=[~{)k5vRN|Uq=a\"H", 2032L);
        Integer integer0 = new Integer(0);
        hashMap0.put("Ki=[~{)k5vRN|Uq=a\"H", integer0);
        boolean boolean0 = cSVRecord0.isSet("Ki=[~{)k5vRN|Uq=a\"H");
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        String[] stringArray0 = new String[1];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Ki=[~{)k5vRN|Uq=a\"H", 2032L);
        boolean boolean0 = cSVRecord0.isSet("Ki=[~{)k5vRN|Uq=a\"H");
    }

    @Test(timeout = 4000)
    public void test1925() throws Throwable {
        String[] stringArray0 = new String[1];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Ki=[~{)k5vRN|Uq=a\"H", 2032L);
        boolean boolean0 = cSVRecord0.isSet("Ki=[~{)k5vRN|Uq=a\"H");
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        String[] stringArray0 = new String[8];
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "", 2512L);
        boolean boolean0 = cSVRecord0.isMapped("");
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        String[] stringArray0 = new String[8];
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "", 2512L);
        boolean boolean0 = cSVRecord0.isMapped("");
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        String[] stringArray0 = new String[1];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Ki=[~{)k5vRN|Uq=a\"H", 2032L);
        cSVRecord0.isConsistent();
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        String[] stringArray0 = new String[1];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Ki=[~{)k5vRN|Uq=a\"H", 2032L);
        Integer integer0 = new Integer(0);
        hashMap0.put("Ki=[~{)k5vRN|Uq=a\"H", integer0);
        boolean boolean0 = cSVRecord0.isConsistent();
    }

    @Test(timeout = 4000)
    public void test2230() throws Throwable {
        String[] stringArray0 = new String[30];
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, stringArray0[8], 0L);
        boolean boolean0 = cSVRecord0.isConsistent();
    }

    @Test(timeout = 4000)
    public void test2331() throws Throwable {
        String[] stringArray0 = new String[1];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Ki=[~{)k5vRN|Uq=a\"H", 2032L);
        boolean boolean0 = cSVRecord0.isConsistent();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2332() throws Throwable {
        String[] stringArray0 = new String[1];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Ki=[~{)k5vRN|Uq=a\"H", 2032L);
        boolean boolean0 = cSVRecord0.isConsistent();
    }

    @Test(timeout = 4000)
    public void test2433() throws Throwable {
        String[] stringArray0 = new String[1];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Ki=[~{)k5vRN|Uq=a\"H", 2032L);
        Integer integer0 = new Integer(0);
        hashMap0.put("Ki=[~{)k5vRN|Uq=a\"H", integer0);
        cSVRecord0.get("Ki=[~{)k5vRN|Uq=a\"H");
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2534() throws Throwable {
        String[] stringArray0 = new String[8];
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "", 2512L);
        cSVRecord0.get("");
    }

    @Test(timeout = 4000)
    public void test2635() throws Throwable {
        String[] stringArray0 = new String[0];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zf3", (-734L));
        cSVRecord0.get("org.apache.commons.csv.CSVRecord");
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2736() throws Throwable {
        String[] stringArray0 = new String[2];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "ox~i", (-750L));
        cSVRecord0.size();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2837() throws Throwable {
        String[] stringArray0 = new String[10];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "h8B|J=>/", (-24));
        long long0 = cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2938() throws Throwable {
        String[] stringArray0 = new String[2];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
        String string0 = cSVRecord0.get(1);
    }

    @Test(timeout = 4000)
    public void test3039() throws Throwable {
        String[] stringArray0 = new String[2];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "ox~i", (-750L));
        String[] stringArray1 = cSVRecord0.values();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test3040() throws Throwable {
        String[] stringArray0 = new String[2];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "ox~i", (-750L));
        String[] stringArray1 = cSVRecord0.values();
    }

    @Test(timeout = 4000)
    public void test3141() throws Throwable {
        String[] stringArray0 = new String[0];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zf3", (-734L));
        cSVRecord0.toString();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test3242() throws Throwable {
        String[] stringArray0 = new String[1];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Ki=[~{)k5vRN|Uq=a\"H", 2032L);
        cSVRecord0.getComment();
        cSVRecord0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test3243() throws Throwable {
        String[] stringArray0 = new String[1];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Ki=[~{)k5vRN|Uq=a\"H", 2032L);
        cSVRecord0.getComment();
        cSVRecord0.size();
    }

    @Test(timeout = 4000)
    public void test3344() throws Throwable {
        String[] stringArray0 = new String[0];
        HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
        CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zf3", (-734L));
        cSVRecord0.iterator();
        cSVRecord0.getRecordNumber();
    }
}
