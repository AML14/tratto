/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 17:02:14 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StringReader stringReader0 = new StringReader("E0=S!i@iL");
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        stringReader0.close();
        CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[2];
        stringArray0[0] = "p@q=v?idwm|ufx";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVParser cSVParser0 = CSVParser.parse("p@q=v?idwm|ufx", cSVFormat1);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[2];
        stringArray0[0] = "p@q=v?idwm|ufx";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVParser cSVParser0 = CSVParser.parse("p@q=v?idwm|ufx", cSVFormat1);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
        cSVRecord0.isConsistent();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        cSVParser0.close();
        boolean boolean0 = cSVParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        List<CSVRecord> list0 = cSVParser0.getRecords();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        StringReader stringReader0 = new StringReader("`r`JjOw");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        cSVParser0.getRecords();
        long long0 = cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Character character0 = Character.valueOf('4');
        Quote quote0 = Quote.MINIMAL;
        Character character1 = new Character('C');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character1, character0, false, false, "string", "", stringArray0, false);
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        CSVParser cSVParser0 = CSVParser.parse("A:q )Rl|!", cSVFormat2);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Character character0 = Character.valueOf('4');
        Quote quote0 = Quote.MINIMAL;
        Character character1 = new Character('C');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character1, character0, false, false, "", "", stringArray0, false);
        CSVParser cSVParser0 = CSVParser.parse("CSVParser has been closed", cSVFormat0);
        long long0 = cSVParser0.getCurrentLineNumber();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        URL uRL0 = MockURL.getFileExample();
        Charset charset0 = Charset.defaultCharset();
        CSVParser.parse(uRL0, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        URL uRL0 = MockURL.getFtpExample();
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        URL uRL0 = MockURL.getHttpExample();
        Charset charset0 = Charset.defaultCharset();
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser.parse(uRL0, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Character character0 = new Character('W');
        Quote quote0 = Quote.MINIMAL;
        String[] stringArray0 = new String[6];
        CSVFormat cSVFormat0 = new CSVFormat(']', character0, quote0, character0, character0, false, false, "Escape=<", "reader", stringArray0, false);
        CSVParser.parse("No more CSV records available", cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        CSVParser.parse("", (CSVFormat) null);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Character character0 = Character.valueOf('\'');
        Quote quote0 = Quote.MINIMAL;
        Character character1 = new Character('C');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character1, character0, false, false, "", "", stringArray0, false);
        CSVParser.parse("'LRS;)z", cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        File file0 = MockFile.createTempFile("qivQG~Ob6", "");
        Character character0 = Character.valueOf('3');
        Quote quote0 = Quote.ALL;
        String[] stringArray0 = new String[4];
        CSVFormat cSVFormat0 = new CSVFormat('k', character0, quote0, character0, character0, true, true, "qivQG~Ob6", "", stringArray0, false);
        CSVParser.parse(file0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser.parse((File) null, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        StringReader stringReader0 = new StringReader("");
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
        cSVParser0.close();
        cSVParser0.nextRecord();
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        Character character0 = Character.valueOf('4');
        Quote quote0 = Quote.MINIMAL;
        Character character1 = new Character('C');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat0 = new CSVFormat('z', character0, quote0, character1, character0, false, false, "string", "", stringArray0, false);
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        cSVParser0.close();
        cSVParser0.getRecords();
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("g8MZtXg1E)E1@qzx{/t@{gJT,0?|");
        FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        MockFile mockFile0 = new MockFile("g8MZtXg1E)E1@qzx{");
        File file0 = MockFile.createTempFile("t@{gJT,", "?|", (File) mockFile0);
        CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
        cSVParser0.close();
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        StringReader stringReader0 = new StringReader("rfo^0AJV+Bf0iZ5MVW");
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('o');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('o');
        CSVParser cSVParser0 = null;
        cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = null;
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[8];
        stringArray0[0] = "V ykN~%xg'G";
        stringArray0[1] = "org.apache.commons.csv.csvrecord";
        stringArray0[2] = "string";
        stringArray0[3] = "@ms]N[hd";
        stringArray0[4] = "[qYO";
        stringArray0[5] = "IN;%,-Nk/E*ed=&`F ";
        stringArray0[7] = "=";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
        StringReader stringReader0 = new StringReader("\r\n");
        CSVParser cSVParser0 = cSVFormat3.parse(stringReader0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = CSVParser.parse("t@{gJT,", cSVFormat0);
        List<CSVRecord> list0 = cSVParser0.getRecords();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVParser cSVParser0 = CSVParser.parse("nthi", cSVFormat0);
        cSVParser0.close();
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        Character character0 = Character.valueOf(',');
        Quote quote0 = Quote.MINIMAL;
        Character character1 = new Character('C');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character1, character0, false, false, "", "", stringArray0, false);
        StringReader stringReader0 = new StringReader("l");
        CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("string");
        CSVParser cSVParser0 = CSVParser.parse("nthi", cSVFormat1);
        cSVParser0.nextRecord();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
        NetworkHandling.createRemoteTextFile(evoSuiteURL0, "(line ");
        URL uRL0 = MockURL.getHttpExample();
        Charset charset0 = Charset.defaultCharset();
        CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse("E0=S!pi@iL", cSVFormat0);
        Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVParser cSVParser0 = CSVParser.parse("nthi", cSVFormat0);
        cSVParser0.getHeaderMap();
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVParser cSVParser0 = CSVParser.parse("nthi", cSVFormat0);
        long long0 = cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        Character character0 = Character.valueOf('4');
        Quote quote0 = Quote.MINIMAL;
        Character character1 = new Character('C');
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat0 = new CSVFormat('z', character0, quote0, character1, character0, false, false, "string", "", stringArray0, false);
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        cSVParser0.getCurrentLineNumber();
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        MockFile mockFile0 = new MockFile("E0=S!pi@iL");
        CSVParser.parse((File) mockFile0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        boolean boolean0 = cSVParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
    }
}
