/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 17:18:44 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test0002() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        cSVFormat1.hashCode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test0003() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test0004() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test0015() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test0016() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test0017() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test0018() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test0019() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00215() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test00218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00324() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00325() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00326() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00327() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00328() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00329() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00330() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00331() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00432() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test00433() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00434() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00535() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00536() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00537() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00538() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00539() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test00540() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00541() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00642() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00643() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00644() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test00745() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00746() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00747() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00748() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00749() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00750() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00751() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00752() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00753() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00754() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test00755() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test00856() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00857() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00858() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00859() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00860() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test00861() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test00862() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00863() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test00864() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00865() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('F');
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test00966() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test00967() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test00968() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test00969() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test00970() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test00971() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test01072() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test01073() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test01074() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test01075() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test01076() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test01077() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test01078() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test01079() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test01080() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test01181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("$6\u0005i+`jwl");
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test01182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("$6\u0005i+`jwl");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test01183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("$6\u0005i+`jwl");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test01184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("$6\u0005i+`jwl");
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test01185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("$6\u0005i+`jwl");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test01186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator("$6\u0005i+`jwl");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test01287() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test01288() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test01289() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test01290() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test01291() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test01292() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test01293() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test01294() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test01295() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test01296() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("\u0085");
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test01397() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test01398() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test01399() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test013100() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test013101() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test013102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test013103() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test013104() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test013105() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test014106() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test014107() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test014108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test014109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test014110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test014111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test014112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test014113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test015114() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test015115() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test015116() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test016117() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(']');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test016118() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(']');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test016119() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(']');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test016120() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(']');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test016121() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(']');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test016122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(']');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test016123() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(']');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test016124() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = Character.valueOf(']');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test017125() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test017126() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test017127() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test017128() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test017129() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test017130() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test017131() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test017132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test017133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test017134() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test018135() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test018136() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test018137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test018138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test019139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test019140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test019141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test019142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test019143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test019144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test019145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test020146() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test020147() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test020148() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test020149() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test020150() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test020151() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test020152() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test020153() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        Character character0 = new Character('x');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test021154() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test021155() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test021156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test021157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test021158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test021159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test021160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test021161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test022162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test022163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test022164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test022165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test022166() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test022167() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test022168() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test022169() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test023170() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
        Character character0 = new Character('~');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test023171() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
        Character character0 = new Character('~');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test023172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
        Character character0 = new Character('~');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test023173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
        Character character0 = new Character('~');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test023174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
        Character character0 = new Character('~');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test023175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
        Character character0 = new Character('~');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test023176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
        Character character0 = new Character('~');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test023177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
        Character character0 = new Character('~');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test023178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
        Character character0 = new Character('~');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test023179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
        Character character0 = new Character('~');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        QuoteMode quoteMode0 = QuoteMode.NONE;
        CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test024180() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test024181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test024182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test024183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test024184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test024185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test024186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test024187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test024188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Character character1 = new Character('=');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test025189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test025190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test025191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test025192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test025193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test025194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test025195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test025196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test025197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test026198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test026199() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test026200() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test027201() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('9');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test027202() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('9');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test027203() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('9');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test027204() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('9');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test027205() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('9');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test027206() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('9');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test027207() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('9');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test027208() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('9');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test027209() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('9');
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test028210() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test028211() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test028212() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test028213() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test028214() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test028215() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test028216() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test028217() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test028218() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test029219() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test029220() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test029221() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test029222() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test029223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test029224() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test029225() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test029226() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test029227() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test029228() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test030229() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test030230() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test030231() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test030232() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test031233() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test031234() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test031235() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test031236() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test031237() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test031238() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test031239() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test031240() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test031241() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test031242() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test032243() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test032244() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test032245() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test032246() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test032247() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test032248() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test032249() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test032250() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test032251() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test033252() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test033253() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test033254() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test033255() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test033256() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test033257() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test033258() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test033259() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test033260() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test033261() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = new Character('5');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("N(686|R}S{Y&2");
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test034262() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("i+GE6EAjjvqAW3");
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test034263() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("i+GE6EAjjvqAW3");
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test034264() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("i+GE6EAjjvqAW3");
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test035265() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test035266() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test035267() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test035268() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test035269() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test035270() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test035271() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test035272() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test035273() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test035274() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test036275() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('~');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test036276() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('~');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test036277() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('~');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test036278() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('~');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test036279() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('~');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test036280() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('~');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test036281() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('~');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test036282() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('~');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test036283() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('~');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test036284() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('~');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test036285() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('~');
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test037286() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test037287() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test037288() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test037289() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test037290() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test037291() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test037292() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test037293() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test037294() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test038295() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test038296() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test038297() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test038298() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test038299() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test038300() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test039301() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test039302() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test039303() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test039304() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test039305() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test039306() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test039307() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test039308() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test039309() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test039310() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test039311() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test039312() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test040313() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test040314() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test040315() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test040316() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test040317() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test040318() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test040319() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test040320() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test040321() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test041322() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test041323() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test041324() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test041325() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test041326() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test041327() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test041328() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test041329() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test041330() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test041331() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test041332() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test042333() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test042334() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test042335() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test042336() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test042337() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test042338() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test042339() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test043340() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test043341() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test043342() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test043343() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test043344() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test043345() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test043346() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test043347() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test043348() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test043349() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("$VALUES");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test044350() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test044351() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test044352() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test044353() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test044354() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test044355() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test044356() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test044357() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test044358() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test044359() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test044360() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test044361() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test045362() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test045363() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test045364() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test045365() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test045366() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test045367() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test045368() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test045369() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test045370() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test046371() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test046372() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test046373() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test046374() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test046375() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test047376() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test047377() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test047378() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test047379() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test047380() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test047381() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test047382() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test048383() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test048384() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test048385() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
        cSVFormat3.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test048386() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test048387() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test048388() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test048389() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test048390() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test048391() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
        cSVFormat3.equals((Object) cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test048392() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test049393() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test049394() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test049395() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test049396() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test049397() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test049398() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test049399() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test049400() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test049401() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test049402() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test049403() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test049404() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString(") invalid parse sequence");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test050405() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test050406() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test050407() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test050408() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test050409() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test050410() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test050411() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test050412() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test050413() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test051414() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test051415() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test051416() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test051417() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test051418() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test051419() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test051420() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test051421() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test051422() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test052423() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test052424() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test052425() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test052426() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test052427() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test052428() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test052429() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test052430() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test052431() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
        CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test053432() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test053433() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test053434() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test053435() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test053436() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test053437() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test053438() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test053439() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test054440() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test054441() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test054442() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test055443() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("lwi!f<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test055444() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("lwi!f<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test055445() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("lwi!f<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test055446() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("lwi!f<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test055447() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("lwi!f<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test055448() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("lwi!f<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test055449() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("lwi!f<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test055450() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("lwi!f<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test055451() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("lwi!f<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test055452() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("lwi!f<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test055453() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("lwi!f<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test055454() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("lwi!f<");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test056455() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test056456() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test056457() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test056458() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test056459() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test056460() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test056461() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test056462() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test056463() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test056464() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test056465() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test056466() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test057467() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test057468() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test057469() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test057470() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test057471() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test057472() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test057473() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test057474() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test057475() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test057476() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test057477() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test058478() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test058479() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test058480() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test059481() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test059482() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test059483() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test059484() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test059485() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test059486() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test059487() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test060488() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test060489() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test060490() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test060491() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test060492() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test060493() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test061494() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test061495() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test061496() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test061497() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test061498() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test061499() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test061500() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test061501() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test061502() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf('\'');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test062503() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Object[] objectArray0 = new Object[6];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test062504() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Object[] objectArray0 = new Object[6];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test062505() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Object[] objectArray0 = new Object[6];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test062506() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Object[] objectArray0 = new Object[6];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test062507() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Object[] objectArray0 = new Object[6];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test062508() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Object[] objectArray0 = new Object[6];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test062509() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Object[] objectArray0 = new Object[6];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test062510() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Object[] objectArray0 = new Object[6];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test062511() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        Object[] objectArray0 = new Object[6];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test063512() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        Object[] objectArray0 = new Object[9];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test063513() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        Object[] objectArray0 = new Object[9];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test063514() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        Object[] objectArray0 = new Object[9];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test064515() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("format");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test064516() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("format");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test064517() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("format");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test064518() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("format");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test064519() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("format");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test064520() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("format");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test064521() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("format");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test064522() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("format");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test064523() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("format");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test064524() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("format");
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test065525() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test065526() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test065527() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test065528() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test065529() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test065530() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test065531() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test065532() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test065533() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test065534() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test066535() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test066536() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test066537() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test066538() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test066539() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test066540() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test066541() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test066542() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test066543() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test067544() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test067545() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test067546() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test068547() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test068548() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test068549() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test069550() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test069551() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test069552() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test069553() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test069554() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test069555() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test069556() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test069557() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test069558() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test070559() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('w');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test070560() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('w');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test070561() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('w');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test070562() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('w');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test070563() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('w');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test071564() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test071565() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test071566() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test071567() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test071568() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test071569() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test071570() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test071571() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test072572() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test072573() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test072574() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test073575() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test073576() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test073577() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test073578() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test073579() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test073580() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test073581() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test073582() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test073583() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test073584() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("krB-k'{");
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test074585() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test074586() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test075587() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test075588() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test075589() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test075590() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test075591() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test075592() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test075593() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test075594() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test075595() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test075596() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test076597() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test076598() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test076599() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test076600() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test076601() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test076602() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test076603() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test076604() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test076605() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test077606() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test077607() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test077608() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test077609() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test077610() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test077611() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test077612() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test077613() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test077614() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test078615() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test078616() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test078617() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test078618() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test078619() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test078620() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test078621() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test078622() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test078623() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test078624() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        Character character0 = new Character('F');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test079625() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test079626() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test079627() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test079628() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test079629() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat3.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test079630() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test079631() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test079632() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat3.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test080633() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test080634() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test080635() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test080636() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test080637() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test080638() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test080639() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test080640() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test080641() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = new Character(' ');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test081642() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        Character character0 = new Character(')');
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test081643() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        Character character0 = new Character(')');
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test081644() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        Character character0 = new Character(')');
        CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test082645() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test082646() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test082647() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test082648() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test082649() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test082650() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test082651() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test082652() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test082653() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test082654() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("t");
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test083655() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test083656() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test083657() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test083658() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test083659() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test083660() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test083661() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test083662() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test083663() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test083664() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test084665() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test084666() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test084667() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test084668() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test084669() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test084670() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test084671() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test084672() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test084673() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test085674() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test085675() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test085676() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test085677() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        cSVFormat1.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test085678() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test085679() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test085680() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test085681() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test085682() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test086683() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test086684() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test086685() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test086686() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test086687() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test086688() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test086689() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test086690() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test086691() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test086692() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test087693() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test087694() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test087695() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test087696() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test087697() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test087698() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test087699() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test087700() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test087701() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = Character.valueOf('%');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test088702() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test088703() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test088704() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test088705() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test088706() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test088707() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test088708() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test088709() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test088710() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test089711() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        Character character0 = Character.valueOf('A');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test089712() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        Character character0 = Character.valueOf('A');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test089713() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        Character character0 = Character.valueOf('A');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test089714() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        Character character0 = Character.valueOf('A');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test089715() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        Character character0 = Character.valueOf('A');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test089716() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        Character character0 = Character.valueOf('A');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test089717() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        Character character0 = Character.valueOf('A');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test089718() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        Character character0 = Character.valueOf('A');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test090719() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test090720() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test090721() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test090722() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test090723() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test090724() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test090725() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test090726() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test090727() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test091728() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        Character character0 = new Character('P');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test091729() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        Character character0 = new Character('P');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test091730() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        Character character0 = new Character('P');
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test092731() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test092732() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test092733() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test092734() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test092735() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test092736() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test092737() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test092738() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test092739() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test093740() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test093741() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test093742() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test093743() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test093744() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test093745() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test093746() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test093747() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test093748() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test093749() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test094750() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test094751() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test094752() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test094753() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test094754() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test094755() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test094756() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test094757() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test094758() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test094759() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test095760() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test095761() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
        cSVFormat2.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test095762() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test095763() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test096764() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test096765() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test096766() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test096767() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test096768() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test096769() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test096770() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test096771() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test096772() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = Character.valueOf(')');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test097773() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test097774() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
        cSVFormat3.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test097775() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test097776() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test097777() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test097778() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test097779() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test097780() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test097781() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
        cSVFormat3.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test097782() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test097783() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
        cSVFormat3.equals((Object) cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test098784() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test098785() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test098786() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test099787() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        cSVFormat4.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test099788() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        cSVFormat4.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test099789() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        cSVFormat4.getNullString();
    }

    @Test(timeout = 4000)
    public void test099790() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        cSVFormat4.equals((Object) cSVFormat3);
    }

    @Test(timeout = 4000)
    public void test099791() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        cSVFormat4.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test099792() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        cSVFormat4.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test099793() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test099794() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
        CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
        CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test100795() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test100796() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test100797() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test100798() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test100799() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test100800() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('u');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test101801() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        Character character0 = new Character('F');
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test101802() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        Character character0 = new Character('F');
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test101803() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        Character character0 = new Character('F');
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test101804() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        Character character0 = new Character('F');
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test101805() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        Character character0 = new Character('F');
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test101806() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        Character character0 = new Character('F');
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test101807() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        Character character0 = new Character('F');
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test101808() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        Character character0 = new Character('F');
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test101809() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        Character character0 = new Character('F');
        CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test102810() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test102811() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test102812() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test102813() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test102814() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test102815() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test102816() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test102817() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test102818() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test102819() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test103820() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test103821() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test103822() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        cSVFormat3.equals((Object) cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test103823() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test103824() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        cSVFormat3.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test103825() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test104826() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test104827() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test104828() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test104829() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test104830() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test104831() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test104832() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test104833() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test104834() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test104835() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test105836() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test105837() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test105838() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test105839() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test105840() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test105841() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
        cSVFormat0.getRecordSeparator();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test106842() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test106843() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test106844() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test106845() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test106846() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test106847() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
        QuoteMode quoteMode0 = QuoteMode.MINIMAL;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.getQuoteMode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test107848() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test107849() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test107850() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test107851() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test107852() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test107853() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.getQuoteCharacter();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test108854() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test108855() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test108856() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test108857() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test108858() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test108859() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test108860() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test108861() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test108862() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test108863() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test109864() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test109865() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test109866() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test109867() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test109868() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test109869() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test109870() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test109871() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test109872() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test109873() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
        String string0 = cSVFormat1.getNullString();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test110874() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test110875() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test110876() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test110877() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test110878() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test110879() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test110880() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test110881() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test110882() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test111883() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test111884() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test111885() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test112886() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test113887() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getHeaderComments();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test113888() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getHeaderComments();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test113889() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Object[] objectArray0 = new Object[3];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getHeaderComments();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test114890() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = cSVFormat0.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test115891() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test116892() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test116893() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test116894() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test116895() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test116896() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test116897() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test117898() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('w');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test117899() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('w');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test117900() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('w');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test117901() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('w');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test117902() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('w');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test117903() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('w');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test117904() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('w');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        cSVFormat1.getCommentMarker();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test118905() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test118906() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test118907() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test118908() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test118909() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test118910() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test118911() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test118912() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test118913() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test119914() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn((-3419)).when(resultSetMetaData0).getColumnCount();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        cSVFormat0.EXCEL.withHeader(resultSet0);
    }

    @Test(timeout = 4000)
    public void test120915() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
        doReturn(477).when(resultSetMetaData0).getColumnCount();
        doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
        cSVFormat0.EXCEL.withHeader(resultSet0);
    }

    @Test(timeout = 4000)
    public void test121916() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
        Character character0 = new Character('P');
        cSVFormat0.withEscape(character0);
    }

    @Test(timeout = 4000)
    public void test122917() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        Character character0 = new Character('O');
        CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
        cSVFormat1.withCommentMarker(character0);
    }

    @Test(timeout = 4000)
    public void test123918() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        cSVFormat0.MYSQL.print((Appendable) null);
    }

    @Test(timeout = 4000)
    public void test124919() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        cSVFormat0.parse((Reader) null);
    }

    @Test(timeout = 4000)
    public void test125920() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        PipedReader pipedReader0 = new PipedReader();
        cSVFormat1.parse(pipedReader0);
    }

    @Test(timeout = 4000)
    public void test126921() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        cSVFormat0.format((Object[]) null);
    }

    @Test(timeout = 4000)
    public void test127922() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Character character0 = new Character('E');
        CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
        cSVFormat1.withDelimiter('E');
    }

    @Test(timeout = 4000)
    public void test128923() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test129924() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.isQuoteCharacterSet();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test129925() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.isQuoteCharacterSet();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test129926() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.isQuoteCharacterSet();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test129927() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.isQuoteCharacterSet();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test129928() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.isQuoteCharacterSet();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test129929() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
        cSVFormat0.isQuoteCharacterSet();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test130930() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat2.isNullStringSet();
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test130931() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat2.isNullStringSet();
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test130932() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test130933() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat2.isNullStringSet();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test130934() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat2.isNullStringSet();
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test130935() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat2.isNullStringSet();
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test130936() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat2.isNullStringSet();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test130937() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("S9!tjmt06ctf:57#Z");
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        boolean boolean0 = cSVFormat2.isNullStringSet();
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test131938() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test132939() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test133940() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        boolean boolean0 = cSVFormat0.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test134941() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test134942() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test134943() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test134944() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test134945() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    }

    @Test(timeout = 4000)
    public void test134946() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test134947() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test134948() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test134949() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test134950() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = Character.valueOf('0');
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
        boolean boolean0 = cSVFormat1.isCommentMarkerSet();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test135951() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.isCommentMarkerSet();
    }

    @Test(timeout = 4000)
    public void test136952() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = cSVFormat0.getHeaderComments();
    }

    @Test(timeout = 4000)
    public void test137953() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.getHeader();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test137954() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.getHeader();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test137955() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.getHeader();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test137956() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.getHeader();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test137957() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.getHeader();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test137958() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.getHeader();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test137959() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.getHeader();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test137960() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.getHeader();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test137961() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
        doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
        cSVFormat1.getHeader();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test138962() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        String[] stringArray0 = cSVFormat0.getHeader();
    }

    @Test(timeout = 4000)
    public void test139963() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        cSVFormat0.getQuoteMode();
    }

    @Test(timeout = 4000)
    public void test140964() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        Character character0 = cSVFormat0.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test141965() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test142966() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test143967() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test143968() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test143969() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test143970() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test143971() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test143972() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test143973() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test143974() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test143975() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test144976() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Character character0 = cSVFormat0.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test145977() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String string0 = cSVFormat0.getNullString();
    }

    @Test(timeout = 4000)
    public void test146978() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Character character0 = cSVFormat0.getEscapeCharacter();
    }

    @Test(timeout = 4000)
    public void test147979() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test148980() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String string0 = cSVFormat0.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test149981() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        boolean boolean0 = cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test150982() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test150983() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test150984() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test151985() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        char char0 = cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test151986() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test151987() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test151988() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test151989() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test151990() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        char char0 = cSVFormat0.getDelimiter();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test152991() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[8];
        cSVFormat0.MYSQL.withHeader(stringArray0);
    }

    @Test(timeout = 4000)
    public void test153992() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        QuoteMode quoteMode0 = QuoteMode.NONE;
        cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
    }

    @Test(timeout = 4000)
    public void test154993() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');
        cSVFormat1.withEscape('(');
    }

    @Test(timeout = 4000)
    public void test155994() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
        Character character0 = Character.valueOf('6');
        cSVFormat1.withQuote(character0);
    }

    @Test(timeout = 4000)
    public void test156995() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        cSVFormat0.withCommentMarker('w');
    }

    @Test(timeout = 4000)
    public void test157996() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(')');
        cSVFormat1.withQuote(')');
    }

    @Test(timeout = 4000)
    public void test158997() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test158998() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
        CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test159999() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1591000() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        Object[] objectArray0 = new Object[2];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test1601001() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        String string0 = cSVFormat2.toString();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1601002() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        String string0 = cSVFormat2.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1601003() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
        String string0 = cSVFormat2.toString();
    }

    @Test(timeout = 4000)
    public void test1611004() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        String string0 = cSVFormat0.toString();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1611005() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
        String string0 = cSVFormat0.toString();
    }

    @Test(timeout = 4000)
    public void test1621006() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("i+GE6EAjjvqAW3");
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test1621007() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("i+GE6EAjjvqAW3");
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1631008() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        cSVFormat0.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1631009() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        Object[] objectArray0 = new Object[4];
        cSVFormat0.MYSQL.format(objectArray0);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1631010() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        Object[] objectArray0 = new Object[4];
        cSVFormat0.MYSQL.format(objectArray0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1631011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        Object[] objectArray0 = new Object[4];
        cSVFormat0.MYSQL.format(objectArray0);
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1631012() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        Object[] objectArray0 = new Object[4];
        cSVFormat0.MYSQL.format(objectArray0);
        cSVFormat0.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1631013() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        Object[] objectArray0 = new Object[4];
        cSVFormat0.MYSQL.format(objectArray0);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1631014() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        Object[] objectArray0 = new Object[4];
        cSVFormat0.MYSQL.format(objectArray0);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1631015() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        Object[] objectArray0 = new Object[4];
        cSVFormat0.MYSQL.format(objectArray0);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1641016() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
        String string0 = cSVFormat1.toString();
    }

    @Test(timeout = 4000)
    public void test1641017() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
        String string0 = cSVFormat1.toString();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1651018() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        cSVFormat0.hashCode();
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1651019() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        cSVFormat0.hashCode();
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1651020() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        cSVFormat0.hashCode();
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1651021() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        cSVFormat0.hashCode();
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1651022() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
        cSVFormat0.hashCode();
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1661023() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.hashCode();
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1661024() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.hashCode();
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1661025() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1661026() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1661027() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1661028() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1671029() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1671030() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1671031() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
        cSVFormat1.hashCode();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1681032() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        cSVFormat0.TDF.hashCode();
    }

    @Test(timeout = 4000)
    public void test1691033() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        cSVFormat1.hashCode();
        cSVFormat1.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test1691034() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        cSVFormat1.hashCode();
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1691035() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        cSVFormat1.hashCode();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1691036() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
        cSVFormat1.hashCode();
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1701037() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        cSVFormat0.MYSQL.hashCode();
    }

    @Test(timeout = 4000)
    public void test1711038() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1711039() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
        CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
        cSVFormat1.hashCode();
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1721040() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getHeaderComments();
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1721041() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getHeaderComments();
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1721042() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getHeaderComments();
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1721043() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getHeaderComments();
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1721044() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getHeaderComments();
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1721045() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getHeaderComments();
        cSVFormat2.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1721046() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        Object[] objectArray0 = new Object[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
        cSVFormat2.getHeaderComments();
        cSVFormat2.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1731047() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1731048() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1731049() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1731050() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1731051() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1731052() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1741053() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1741054() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1741055() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1741056() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1741057() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1741058() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1741059() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1741060() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1741061() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1751062() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1751063() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1751064() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1751065() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1751066() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1751067() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1751068() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1751069() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1751070() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        String[] stringArray0 = new String[3];
        stringArray0[0] = "63msK\"sU`@JH@kw8";
        stringArray0[1] = "L,d3z4N*9<";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1761071() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1761072() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1761073() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        cSVFormat2.equals(cSVFormat1);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1761074() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1761075() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test1761076() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        cSVFormat2.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1761077() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
        cSVFormat2.equals(cSVFormat1);
        cSVFormat2.getNullString();
    }

    @Test(timeout = 4000)
    public void test1771078() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat2);
        cSVFormat2.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1771079() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat2);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1771080() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat2);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1771081() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat2);
        cSVFormat2.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test1771082() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat2);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1771083() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat2);
        cSVFormat2.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1771084() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test1771085() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat2);
        cSVFormat2.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1771086() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("$/G");
        CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
        boolean boolean0 = cSVFormat0.equals(cSVFormat2);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1781087() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1781088() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1781089() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1781090() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1781091() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1781092() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1781093() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1781094() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getCommentMarker();
    }

    @Test(timeout = 4000)
    public void test1781095() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1781096() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1791097() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1791098() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1791099() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1791100() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1791101() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1791102() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1791103() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1791104() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1791105() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test1791106() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1791107() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1801108() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        Object[] objectArray0 = new Object[4];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    }

    @Test(timeout = 4000)
    public void test1801109() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        Object[] objectArray0 = new Object[4];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1801110() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        Object[] objectArray0 = new Object[4];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1801111() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        Object[] objectArray0 = new Object[4];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1801112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        Object[] objectArray0 = new Object[4];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat2.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1801113() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
        Object[] objectArray0 = new Object[4];
        CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
        boolean boolean0 = cSVFormat1.equals(cSVFormat2);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1811114() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1811115() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1811116() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1811117() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1811118() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1811119() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1811120() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1811121() throws Throwable {
        CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
        CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
        QuoteMode quoteMode0 = QuoteMode.ALL;
        CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1821122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1821123() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1821124() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1821125() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1821126() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1821127() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1821128() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1821129() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat0.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1821130() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1821131() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1821132() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1831133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.equals("63msK\"sU`@JH@kw8");
    }

    @Test(timeout = 4000)
    public void test1841134() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
        boolean boolean0 = cSVFormat0.equals((Object) null);
        cSVFormat0.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1841135() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
        boolean boolean0 = cSVFormat0.equals((Object) null);
        cSVFormat0.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1841136() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
        boolean boolean0 = cSVFormat0.equals((Object) null);
        cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1841137() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
        boolean boolean0 = cSVFormat0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test1841138() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
        boolean boolean0 = cSVFormat0.equals((Object) null);
        cSVFormat0.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1841139() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
        boolean boolean0 = cSVFormat0.equals((Object) null);
        cSVFormat0.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1841140() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
        boolean boolean0 = cSVFormat0.equals((Object) null);
        cSVFormat0.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1851141() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1861142() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1861143() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1861144() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) cSVFormat0;
        CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1871145() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1881146() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1881147() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1881148() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1881149() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1881150() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getNullString();
    }

    @Test(timeout = 4000)
    public void test1881151() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test1881152() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1881153() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1881154() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1881155() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("NONE");
        boolean boolean0 = cSVFormat1.equals(cSVFormat0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1891156() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat2.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1891157() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1891158() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
        CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1901159() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1901160() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1901161() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
        CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1911162() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1911163() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
        cSVFormat3.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1911164() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
        cSVFormat4.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1911165() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
        cSVFormat4.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1911166() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
        cSVFormat3.equals((Object) cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1911167() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
        CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
        CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
        CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1921168() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1921169() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1921170() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1921171() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1921172() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test1921173() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1921174() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1921175() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
        boolean boolean0 = cSVFormat0.equals(cSVFormat1);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1931176() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("$/G");
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
        cSVFormat3.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1931177() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("$/G");
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
        cSVFormat3.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1931178() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("$/G");
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
        cSVFormat3.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1931179() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("$/G");
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
        cSVFormat3.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1931180() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("$/G");
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
        cSVFormat3.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1931181() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("$/G");
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
        cSVFormat3.getQuoteCharacter();
    }

    @Test(timeout = 4000)
    public void test1931182() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("$/G");
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
        cSVFormat3.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1931183() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("$/G");
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
        cSVFormat3.getRecordSeparator();
    }

    @Test(timeout = 4000)
    public void test1931184() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("$/G");
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
        cSVFormat3.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1931185() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("$/G");
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
        cSVFormat3.getNullString();
    }

    @Test(timeout = 4000)
    public void test1931186() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
        CSVFormat cSVFormat2 = cSVFormat1.withNullString("$/G");
        CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
        cSVFormat3.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1941187() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        MockFileWriter mockFileWriter0 = new MockFileWriter(">Z%5F+:E");
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
        CSVPrinter cSVPrinter0 = cSVFormat0.DEFAULT.print(mockPrintWriter0);
    }

    @Test(timeout = 4000)
    public void test1951188() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getIgnoreHeaderCase();
    }

    @Test(timeout = 4000)
    public void test1951189() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        cSVFormat1.getSkipHeaderRecord();
    }

    @Test(timeout = 4000)
    public void test1951190() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedReader pipedReader0 = new PipedReader();
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.equals((Object) cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1951191() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedReader pipedReader0 = new PipedReader();
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.isQuoteCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1951192() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedReader pipedReader0 = new PipedReader();
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.getAllowMissingColumnNames();
    }

    @Test(timeout = 4000)
    public void test1951193() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedReader pipedReader0 = new PipedReader();
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.getDelimiter();
    }

    @Test(timeout = 4000)
    public void test1951194() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedReader pipedReader0 = new PipedReader();
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.getIgnoreEmptyLines();
    }

    @Test(timeout = 4000)
    public void test1951195() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedReader pipedReader0 = new PipedReader();
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.isEscapeCharacterSet();
    }

    @Test(timeout = 4000)
    public void test1951196() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedReader pipedReader0 = new PipedReader();
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.getIgnoreSurroundingSpaces();
    }

    @Test(timeout = 4000)
    public void test1951197() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedReader pipedReader0 = new PipedReader();
        cSVFormat1.parse(pipedReader0);
        cSVFormat1.isNullStringSet();
    }

    @Test(timeout = 4000)
    public void test1961198() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        Object[] objectArray0 = new Object[2];
        String string0 = cSVFormat0.format(objectArray0);
    }
}
