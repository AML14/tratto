/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 17:14:55 GMT 2023
 */
package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[2];
        stringArray0[0] = ">";
        stringArray0[1] = "string";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVParser cSVParser0 = CSVParser.parse("string", cSVFormat1);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[2];
        stringArray0[0] = ">";
        stringArray0[1] = "string";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVParser cSVParser0 = CSVParser.parse("string", cSVFormat1);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
        cSVRecord0.isConsistent();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 35);
        CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
        cSVParser0.close();
        boolean boolean0 = cSVParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat0);
        cSVParser0.nextRecord();
        LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        URI uRI0 = MockURI.aFileURI;
        URL uRL0 = MockURI.toURL(uRI0);
        Charset charset0 = Charset.defaultCharset();
        CSVParser.parse(uRL0, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Charset charset0 = Charset.defaultCharset();
        CSVParser.parse((URL) null, charset0, (CSVFormat) null);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[1];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVParser.parse("", cSVFormat1);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        CSVParser.parse("gtjqJAKF$}f4^#", (CSVFormat) null);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        File file0 = MockFile.createTempFile("ygTPJ><bl[d^LLv.`hn", "[LrS_H&F+GyXtIZ:`");
        CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        MockFile mockFile0 = new MockFile(",`g|C]bw%", ",`g|C]bw%");
        Charset charset0 = Charset.defaultCharset();
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVParser.parse((File) mockFile0, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        PipedReader pipedReader0 = new PipedReader();
        CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
        cSVParser0.nextRecord();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 35);
        CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
        cSVParser0.close();
        LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
        cSVParser0.getRecords(linkedList0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        PipedReader pipedReader0 = new PipedReader();
        CSVParser cSVParser0 = null;
        cSVParser0 = new CSVParser(pipedReader0, (CSVFormat) null);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse("XhdDY", cSVFormat0);
        LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
        LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        PipedReader pipedReader0 = new PipedReader(98);
        CSVFormat cSVFormat0 = CSVFormat.MYSQL;
        CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
        boolean boolean0 = cSVParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        PipedReader pipedReader0 = new PipedReader(288);
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
        cSVParser0.getRecords();
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
        CSVParser cSVParser0 = CSVParser.parse("*#", cSVFormat0);
        cSVParser0.close();
        Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.newFormat(',');
        String[] stringArray0 = new String[2];
        stringArray0[0] = "org.apache.commons.csv.CSVParser";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
        PipedReader pipedReader0 = new PipedReader(2097);
        cSVFormat2.parse(pipedReader0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVParser cSVParser0 = CSVParser.parse(") ", cSVFormat1);
        cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        String[] stringArray0 = new String[0];
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse("string", cSVFormat0);
        List<CSVRecord> list0 = cSVParser0.getRecords();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse("string", cSVFormat0);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[2];
        stringArray0[0] = ">";
        stringArray0[1] = "string";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 35);
        CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        String[] stringArray0 = new String[2];
        stringArray0[0] = ">";
        stringArray0[1] = "string";
        CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0, 35);
        CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);
        Map<String, Integer> map0 = cSVParser0.getHeaderMap();
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("The delimiter cannot be a line break");
        CSVParser cSVParser0 = CSVParser.parse("The delimiter cannot be a line break", cSVFormat1);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
        cSVRecord0.toString();
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVFormat cSVFormat1 = cSVFormat0.withNullString("6+<SO]1CEx]vC4+W#$");
        CSVParser cSVParser0 = CSVParser.parse("string", cSVFormat1);
        CSVRecord cSVRecord0 = cSVParser0.nextRecord();
        cSVRecord0.toString();
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat0);
        long long0 = cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse("XhdDY", cSVFormat0);
        long long0 = cSVParser0.getCurrentLineNumber();
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        File file0 = MockFile.createTempFile("I1d` Z\"])yE3\"", "I1d` Z\"])yE3\"");
        Charset charset0 = Charset.defaultCharset();
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat0);
        List<CSVRecord> list0 = cSVParser0.getRecords();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.RFC4180;
        CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat0);
        Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        cSVParser0.forEach(consumer0);
        long long0 = cSVParser0.getRecordNumber();
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.TDF;
        URL uRL0 = MockURL.getHttpExample();
        Charset charset0 = Charset.defaultCharset();
        CSVParser.parse(uRL0, charset0, cSVFormat0);
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        CSVParser cSVParser0 = CSVParser.parse("XhdDY", cSVFormat0);
        Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        CSVFormat cSVFormat0 = CSVFormat.EXCEL;
        Charset charset0 = Charset.defaultCharset();
        CSVParser.parse((File) null, charset0, cSVFormat0);
    }
}
