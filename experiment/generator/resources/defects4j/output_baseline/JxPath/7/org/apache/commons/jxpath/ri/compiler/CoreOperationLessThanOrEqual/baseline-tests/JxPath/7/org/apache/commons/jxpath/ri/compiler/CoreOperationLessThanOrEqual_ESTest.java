/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 07:22:53 GMT 2023
 */
package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CoreOperationLessThanOrEqual_ESTest extends CoreOperationLessThanOrEqual_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Expression[] expressionArray0 = new Expression[0];
        CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
        CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
        String string0 = coreOperationLessThanOrEqual0.getSymbol();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Constant constant0 = new Constant("''");
        CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
        CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
        QName qName0 = new QName("|BOU$lydGisag/,+");
        Locale locale0 = Locale.CANADA;
        NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "<=", locale0);
        JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, constant0, nodePointer0);
        EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
        PredicateContext predicateContext0 = new PredicateContext(evalContext0, constant0);
        Object object0 = coreOperationLessThanOrEqual0.computeValue(predicateContext0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Expression[] expressionArray0 = new Expression[0];
        CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
        CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
        Object object0 = coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
    }
}
