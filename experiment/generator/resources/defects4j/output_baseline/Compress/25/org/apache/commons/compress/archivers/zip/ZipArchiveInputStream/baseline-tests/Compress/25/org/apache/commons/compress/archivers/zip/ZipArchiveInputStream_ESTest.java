/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 09:57:18 GMT 2023
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.charset.IllegalCharsetNameException;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ZipArchiveInputStream_ESTest extends ZipArchiveInputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) 119;
        boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 119);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "DIRECTORY", true, true);
        zipArchiveInputStream0.getNextEntry();
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        byte[] byteArray0 = new byte[6];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 98);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, "DIRECTORY", true, true);
        zipArchiveInputStream0.getNextEntry();
        zipArchiveInputStream0.getBytesRead();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        ZipArchiveInputStream.matches((byte[]) null, 26);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        zipArchiveInputStream0.getNextZipEntry();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ZipArchiveInputStream zipArchiveInputStream0 = null;
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "nQNy!G[`/^,`EY", false);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = null;
        zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, "TgUR0lt5}4zQ$$O'=");
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(611);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, (String) null, false);
        zipArchiveInputStream0.getBytesRead();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
        zipArchiveInputStream0.getNextZipEntry();
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
        zipArchiveInputStream0.getNextZipEntry();
        zipArchiveInputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        byte[] byteArray0 = new byte[5];
        boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, (byte) 1);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        byte[] byteArray0 = new byte[5];
        boolean boolean0 = ZipArchiveInputStream.matches(byteArray0, 214);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
        long long0 = zipArchiveInputStream0.skip(1393L);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null);
        long long0 = zipArchiveInputStream0.skip(0L);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1301);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(bufferedInputStream0, (String) null, false, false);
        zipArchiveInputStream0.skip((-1L));
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
        long long0 = zipArchiveInputStream0.skip(541L);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveInputStream0.canReadEntryData(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(dataInputStream0);
        File file0 = MockFile.createTempFile("]9T7 ", "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry");
        TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0, "L<X");
        boolean boolean0 = zipArchiveInputStream0.canReadEntryData(tarArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
        zipArchiveInputStream0.close();
        zipArchiveInputStream0.getNextZipEntry();
        zipArchiveInputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0);
        int int0 = zipArchiveInputStream0.read((byte[]) null, 26, 3301);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream((InputStream) null, (String) null);
        zipArchiveInputStream0.getNextEntry();
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ZipArchiveInputStream zipArchiveInputStream0 = null;
        zipArchiveInputStream0 = new ZipArchiveInputStream(pipedInputStream0, "", true, true);
    }
}
