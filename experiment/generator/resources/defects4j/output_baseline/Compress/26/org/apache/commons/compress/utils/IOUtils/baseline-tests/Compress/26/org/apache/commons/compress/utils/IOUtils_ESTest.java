/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 09:58:44 GMT 2023
 */
package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.compress.utils.IOUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        byteArrayInputStream0.read();
        int int0 = IOUtils.readFully((InputStream) byteArrayInputStream0, byteArray0);
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        byteArrayInputStream0.read();
        int int0 = IOUtils.readFully((InputStream) byteArrayInputStream0, byteArray0);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        long long0 = IOUtils.skip(byteArrayInputStream0, 0L);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        IOUtils.closeQuietly(pipedInputStream0);
        pipedInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        byte[] byteArray1 = IOUtils.toByteArray(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        long long0 = IOUtils.copy((InputStream) byteArrayInputStream0, (OutputStream) null);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        IOUtils.toByteArray((InputStream) null);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 2752);
        IOUtils.toByteArray(byteArrayInputStream0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        IOUtils.toByteArray(pipedInputStream0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        IOUtils.skip((InputStream) null, 2792L);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
        DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
        IOUtils.skip(dataInputStream0, 1622L);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        IOUtils.readFully((InputStream) dataInputStream0, (byte[]) null, 543, 8024);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
        IOUtils.readFully((InputStream) pushbackInputStream0, (byte[]) null);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        byte[] byteArray0 = new byte[5];
        IOUtils.readFully((InputStream) dataInputStream0, byteArray0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        IOUtils.copy((InputStream) null, (OutputStream) byteArrayOutputStream0, 0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(528);
        IOUtils.copy((InputStream) pipedInputStream0, (OutputStream) byteArrayOutputStream0, 528);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("@9R#W8%Q&dA}l\"");
        IOUtils.copy((InputStream) null, (OutputStream) mockPrintStream0);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
        IOUtils.copy((InputStream) pushbackInputStream0, (OutputStream) null);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        int int0 = IOUtils.readFully((InputStream) byteArrayInputStream0, byteArray0, 0, (int) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        long long0 = IOUtils.copy((InputStream) byteArrayInputStream0, (OutputStream) byteArrayOutputStream0, (int) (byte) 114);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        long long0 = IOUtils.copy((InputStream) byteArrayInputStream0, (OutputStream) byteArrayOutputStream0, (int) (byte) 114);
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("a E!VIPqv^n? *");
        long long0 = IOUtils.copy((InputStream) sequenceInputStream0, (OutputStream) mockFileOutputStream0, 0);
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false, true).when(enumeration0).hasMoreElements();
        doReturn((Object) null).when(enumeration0).nextElement();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        IOUtils.closeQuietly(sequenceInputStream0);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        IOUtils.closeQuietly((Closeable) null);
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        int int0 = IOUtils.readFully((InputStream) sequenceInputStream0, byteArray0);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        IOUtils.readFully((InputStream) byteArrayInputStream0, byteArray0, 543, 8024);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        IOUtils.readFully((InputStream) byteArrayInputStream0, byteArray0, (int) (byte) (-44), 0);
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        byte[] byteArray0 = new byte[1];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 1, (-809));
        IOUtils.readFully((InputStream) byteArrayInputStream0, byteArray0, (int) (byte) 1, (-322));
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 69, 0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
        long long0 = IOUtils.skip(pushbackInputStream0, 1291L);
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 69, 0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
        long long0 = IOUtils.skip(pushbackInputStream0, 1291L);
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        long long0 = IOUtils.skip(byteArrayInputStream0, (-1157L));
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        MockFile mockFile0 = new MockFile("qayi", "/GC`");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        long long0 = IOUtils.copy((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0);
    }

    @Test(timeout = 4000)
    public void test2832() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        MockFile mockFile0 = new MockFile("qayi", "/GC`");
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
        long long0 = IOUtils.copy((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test2933() throws Throwable {
        Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        byte[] byteArray0 = IOUtils.toByteArray(sequenceInputStream0);
    }
}
