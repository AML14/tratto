/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 01:34:32 GMT 2023
 */
package org.apache.commons.compress.archivers.cpio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CpioArchiveInputStream_ESTest extends CpioArchiveInputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, "w");
        cpioArchiveInputStream0.getCount();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0);
        cpioArchiveInputStream0.close();
        cpioArchiveInputStream0.getNextCPIOEntry();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, 1364);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(sequenceInputStream0, 1439);
        cpioArchiveInputStream0.close();
        cpioArchiveInputStream0.close();
        cpioArchiveInputStream0.getBytesRead();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
        cpioArchiveInputStream0.getNextEntry();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, 1089);
        int int0 = cpioArchiveInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
        long long0 = cpioArchiveInputStream0.skip(134630224L);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
        long long0 = cpioArchiveInputStream0.skip(134630224L);
        int int0 = cpioArchiveInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        byte[] byteArray0 = new byte[9];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0);
        cpioArchiveInputStream0.getNextCPIOEntry();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        byte[] byteArray0 = new byte[2];
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
        cpioArchiveInputStream0.read(byteArray0, (-1), 666);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        byte[] byteArray0 = new byte[2];
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, (byte) 50);
        cpioArchiveInputStream0.read(byteArray0, (int) (byte) 50, (-642));
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        byte[] byteArray0 = new byte[2];
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
        cpioArchiveInputStream0.read(byteArray0, 4091, 4091);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
        byte[] byteArray0 = new byte[0];
        int int0 = cpioArchiveInputStream0.read(byteArray0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream(byteArrayInputStream0);
        cpioArchiveInputStream0.getNextCPIOEntry();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
        cpioArchiveInputStream0.skip((-3453L));
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null);
        long long0 = cpioArchiveInputStream0.skip(0L);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        CpioArchiveInputStream cpioArchiveInputStream0 = new CpioArchiveInputStream((InputStream) null, (byte) 50);
        long long0 = cpioArchiveInputStream0.skip(3776L);
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        byte[] byteArray0 = new byte[5];
        byteArray0[0] = (byte) 113;
        CpioArchiveInputStream.matches(byteArray0, (byte) 113);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        byte[] byteArray0 = new byte[9];
        byteArray0[1] = (byte) 113;
        CpioArchiveInputStream.matches(byteArray0, 204);
    }
}
