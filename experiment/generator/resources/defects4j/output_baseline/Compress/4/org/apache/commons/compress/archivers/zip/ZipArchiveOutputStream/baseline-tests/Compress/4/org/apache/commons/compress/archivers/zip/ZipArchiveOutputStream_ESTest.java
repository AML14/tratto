/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 01:11:39 GMT 2023
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        MockFile mockFile0 = new MockFile("|Z<S)|q:+V;KN8Ck`#");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        String string0 = zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.close();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MockFile mockFile0 = new MockFile("utf-8");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        zipArchiveOutputStream0.setComment("utf-8");
        zipArchiveOutputStream0.close();
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
        zipArchiveOutputStream0.setFallbackToUTF8(true);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setEncoding("93Z");
        zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
        zipArchiveOutputStream0.createArchiveEntry((File) null, "Invalid compression level: ");
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
        String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        File file0 = MockFile.createTempFile("OdMm", "OdMm");
        MockFile mockFile0 = new MockFile(file0, "OdMm");
        ZipArchiveOutputStream zipArchiveOutputStream0 = null;
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        ZipArchiveOutputStream zipArchiveOutputStream0 = null;
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        MockFile mockFile0 = new MockFile("g&>96:qIxO^90966vs");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
        boolean boolean0 = zipArchiveOutputStream1.isSeekable();
        zipArchiveOutputStream1.getEncoding();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        MockFile mockFile0 = new MockFile("g&>96:qIxO^90966vs");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
        boolean boolean0 = zipArchiveOutputStream1.isSeekable();
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        MockFile mockFile0 = new MockFile("g&>96:qIxO^90966vs");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
        boolean boolean0 = zipArchiveOutputStream1.isSeekable();
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        String string0 = "!O\\uHYC<";
        MockFile mockFile0 = new MockFile("", string0);
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        boolean boolean0 = zipArchiveOutputStream0.isSeekable();
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        String string0 = "!O\\uHYC<";
        MockFile mockFile0 = new MockFile("", string0);
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        boolean boolean0 = zipArchiveOutputStream0.isSeekable();
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.closeArchiveEntry();
        zipArchiveOutputStream0.finish();
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.closeArchiveEntry();
        zipArchiveOutputStream0.finish();
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveEntry0.setCrc(0);
        zipArchiveEntry0.setSize(0);
        zipArchiveOutputStream0.setMethod(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveEntry0.setCrc(0);
        zipArchiveEntry0.setSize(0);
        zipArchiveOutputStream0.setMethod(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveEntry0.setCrc(3);
        zipArchiveEntry0.setSize(0);
        zipArchiveOutputStream0.setMethod(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveEntry0.setCrc(0);
        zipArchiveEntry0.setSize(8);
        zipArchiveOutputStream0.setMethod(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test1621() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        MockFile mockFile0 = new MockFile("not encodeable", "not encodeable");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        zipArchiveOutputStream0.setMethod(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test1722() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setMethod(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test1823() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveEntry0.setSize(8);
        zipArchiveOutputStream0.setMethod(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setLevel(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test1925() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setLevel(0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test2026() throws Throwable {
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
        zipArchiveOutputStream0.setLevel((-437));
    }

    @Test(timeout = 4000)
    public void test2127() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setLevel(2048);
    }

    @Test(timeout = 4000)
    public void test2228() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("] for UniCode path extra data.");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
        zipArchiveOutputStream0.setLevel((-1));
        zipArchiveOutputStream0.getEncoding();
    }

    @Test(timeout = 4000)
    public void test2329() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry0.setMethod(0);
        zipArchiveOutputStream0.write((byte[]) null, 3, 8249);
    }

    @Test(timeout = 4000)
    public void test2430() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
        zipArchiveOutputStream1.writeCentralFileHeader(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test2531() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test2532() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test2633() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        byte[] byteArray0 = new byte[1];
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        zipArchiveOutputStream0.write(byteArray0, 0, 8263);
    }

    @Test(timeout = 4000)
    public void test2734() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.close();
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test2735() throws Throwable {
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.close();
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test2836() throws Throwable {
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
        zipArchiveOutputStream1.flush();
        zipArchiveOutputStream1.getEncoding();
    }

    @Test(timeout = 4000)
    public void test2937() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test2938() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test3039() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        zipArchiveEntry0.setComment("{i/q");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test3040() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        zipArchiveEntry0.setComment("{i/q");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test3141() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        zipArchiveEntry0.setComment("");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test3142() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        zipArchiveEntry0.setComment("");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test3243() throws Throwable {
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
        ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
        zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setComment("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField");
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test3344() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        MockFile mockFile0 = new MockFile("Z8HY;", "Z8HY;");
        ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
        JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry((ZipEntry) zipArchiveEntry0);
        zipArchiveOutputStream1.writeDataDescriptor(jarArchiveEntry0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test3445() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        zipArchiveEntry0.setComment("S3k?iq%%csEW>(QI");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test3546() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.size();
    }

    @Test(timeout = 4000)
    public void test3547() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
        zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        byteArrayOutputStream0.toString();
    }

    @Test(timeout = 4000)
    public void test3648() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        MockFile mockFile0 = new MockFile("Q6x$|*^L+fM(");
        ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
    }
}
