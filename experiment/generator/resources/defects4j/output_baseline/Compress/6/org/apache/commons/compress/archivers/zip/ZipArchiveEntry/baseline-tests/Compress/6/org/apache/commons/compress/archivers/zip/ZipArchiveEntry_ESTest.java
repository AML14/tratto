/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 07:38:31 GMT 2023
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.NoSuchElementException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ZipArchiveEntry_ESTest extends ZipArchiveEntry_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        zipArchiveEntry0.setPlatform(8);
        int int0 = zipArchiveEntry0.getUnixMode();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        zipArchiveEntry0.setPlatform(8);
        int int0 = zipArchiveEntry0.getUnixMode();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("IGdv~XX,hFq@<!N vp");
        zipArchiveEntry0.setMethod(40960);
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("IGdv~XX,hFq@<!N vp");
        zipArchiveEntry0.setMethod(40960);
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setMethod(806);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setMethod(806);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
        zipArchiveEntry1.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("e~>HA< 'A5 q/");
        zipArchiveEntry0.isDirectory();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("e~>HA< 'A5 q/");
        zipArchiveEntry0.isDirectory();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("e~>HA< 'A5 q/");
        zipArchiveEntry0.isDirectory();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("e~>HA< 'A5 q/");
        zipArchiveEntry0.isDirectory();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setUnixMode(32768);
        int int0 = zipArchiveEntry0.getUnixMode();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setUnixMode(32768);
        int int0 = zipArchiveEntry0.getUnixMode();
    }

    @Test(timeout = 4000)
    public void test0512() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setUnixMode(14);
        int int0 = zipArchiveEntry0.getPlatform();
        zipArchiveEntry0.getUnixMode();
    }

    @Test(timeout = 4000)
    public void test0513() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setUnixMode(14);
        int int0 = zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test0614() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setPlatform((-1014));
        int int0 = zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
        zipArchiveEntry0.getName();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
        zipArchiveEntry0.getName();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
        zipArchiveEntry0.getName();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test0718() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
        zipArchiveEntry0.getName();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test0819() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test0820() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        zipArchiveEntry0.setMethod(0);
        int int0 = zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test0921() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("IGdv~XX,hFq@<!N vp");
        zipArchiveEntry0.setMethod(40960);
        int int0 = zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test1022() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
        zipArchiveEntry0.setInternalAttributes((-7));
        int int0 = zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test1123() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipShort zipShort0 = new ZipShort(byteArray0);
        ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
    }

    @Test(timeout = 4000)
    public void test1124() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipShort zipShort0 = new ZipShort(byteArray0);
        ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test1125() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipShort zipShort0 = new ZipShort(byteArray0);
        ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test1126() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipShort zipShort0 = new ZipShort(byteArray0);
        ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test1127() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipShort zipShort0 = new ZipShort(byteArray0);
        ZipExtraField zipExtraField0 = zipArchiveEntry0.getExtraField(zipShort0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test1228() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        zipArchiveEntry0.setUnixMode(1042);
        long long0 = zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test1329() throws Throwable {
        MockFile mockFile0 = new MockFile("SP{RQD.", "(]9X:N+hD");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "(]9X:N+hD");
        zipArchiveEntry0.setUnixMode((-877));
        long long0 = zipArchiveEntry0.getExternalAttributes();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test1330() throws Throwable {
        MockFile mockFile0 = new MockFile("SP{RQD.", "(]9X:N+hD");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "(]9X:N+hD");
        zipArchiveEntry0.setUnixMode((-877));
        long long0 = zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test1431() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
        ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
        byte[] byteArray0 = new byte[4];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("", byteArray0);
        zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
        byte[] byteArray1 = zipArchiveEntry0.getCentralDirectoryExtra();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test1432() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
        ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
        byte[] byteArray0 = new byte[4];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("", byteArray0);
        zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
        byte[] byteArray1 = zipArchiveEntry0.getCentralDirectoryExtra();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test1433() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
        ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
        byte[] byteArray0 = new byte[4];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("", byteArray0);
        zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
        byte[] byteArray1 = zipArchiveEntry0.getCentralDirectoryExtra();
    }

    @Test(timeout = 4000)
    public void test1434() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
        ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
        byte[] byteArray0 = new byte[4];
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("", byteArray0);
        zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
        byte[] byteArray1 = zipArchiveEntry0.getCentralDirectoryExtra();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test1535() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
        byte[] byteArray0 = new byte[4];
        byteArray0[2] = (byte) 5;
        zipArchiveEntry0.setExtra(byteArray0);
    }

    @Test(timeout = 4000)
    public void test1636() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setExtra((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test1737() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("/");
        byte[] byteArray0 = new byte[6];
        byteArray0[2] = (byte) 50;
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    }

    @Test(timeout = 4000)
    public void test1838() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
        zipArchiveEntry0.setCentralDirectoryExtra((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test1939() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("8$vE!0<");
        zipArchiveEntry0.addExtraField((ZipExtraField) null);
    }

    @Test(timeout = 4000)
    public void test2040() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        UnrecognizedExtraField unrecognizedExtraField0 = new UnrecognizedExtraField();
        zipArchiveEntry0.addAsFirstExtraField(unrecognizedExtraField0);
    }

    @Test(timeout = 4000)
    public void test2141() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = null;
        zipArchiveEntry0 = new ZipArchiveEntry((ZipArchiveEntry) null);
    }

    @Test(timeout = 4000)
    public void test2242() throws Throwable {
        ZipEntry zipEntry0 = new ZipEntry(",k$prN");
        byte[] byteArray0 = new byte[7];
        byteArray0[2] = (byte) (-115);
        zipEntry0.setExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry0 = null;
        zipArchiveEntry0 = new ZipArchiveEntry(zipEntry0);
    }

    @Test(timeout = 4000)
    public void test2343() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = null;
        zipArchiveEntry0 = new ZipArchiveEntry((ZipEntry) null);
    }

    @Test(timeout = 4000)
    public void test2444() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = null;
        zipArchiveEntry0 = new ZipArchiveEntry((String) null);
    }

    @Test(timeout = 4000)
    public void test2545() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = null;
        zipArchiveEntry0 = new ZipArchiveEntry((File) null, "");
    }

    @Test(timeout = 4000)
    public void test2646() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        zipArchiveEntry0.getName();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test2647() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        zipArchiveEntry0.getName();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test2648() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        zipArchiveEntry0.getName();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test2649() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        zipArchiveEntry0.getName();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test2750() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("<0[Kf[K");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
        byte[] byteArray0 = new byte[2];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.getExtraField(zipShort0);
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test2751() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("<0[Kf[K");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
        byte[] byteArray0 = new byte[2];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.getExtraField(zipShort0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test2752() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("<0[Kf[K");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
        byte[] byteArray0 = new byte[2];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.getExtraField(zipShort0);
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test2753() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("<0[Kf[K");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        ZipShort zipShort0 = asiExtraField0.getCentralDirectoryLength();
        byte[] byteArray0 = new byte[2];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.getExtraField(zipShort0);
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test2854() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[0];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addExtraField(asiExtraField0);
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test2855() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[0];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addExtraField(asiExtraField0);
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test2856() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[0];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addExtraField(asiExtraField0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test2857() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[0];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addExtraField(asiExtraField0);
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test2958() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        zipArchiveEntry0.getExtraFields();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test2959() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        zipArchiveEntry0.getExtraFields();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test2960() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        zipArchiveEntry0.getExtraFields();
        zipArchiveEntry0.getSize();
    }

    @Test(timeout = 4000)
    public void test2961() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        zipArchiveEntry0.getExtraFields();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test2962() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        zipArchiveEntry0.getExtraFields();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test3063() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("org.apache.commons.compress.archivers.zip.AsiExtraField");
        ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[4];
        JarMarker jarMarker0 = JarMarker.getInstance();
        zipExtraFieldArray0[0] = (ZipExtraField) jarMarker0;
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
        zipExtraFieldArray0[1] = (ZipExtraField) unicodePathExtraField0;
        UnrecognizedExtraField unrecognizedExtraField0 = new UnrecognizedExtraField();
        zipExtraFieldArray0[2] = (ZipExtraField) unrecognizedExtraField0;
        zipExtraFieldArray0[3] = (ZipExtraField) unicodePathExtraField0;
        zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
    }

    @Test(timeout = 4000)
    public void test3164() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        zipArchiveEntry0.setMethod((-1));
    }

    @Test(timeout = 4000)
    public void test3265() throws Throwable {
        MockFile mockFile0 = new MockFile("<;),L'&}K,+BhbF+");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        ZipArchiveEntry zipArchiveEntry1 = null;
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test3366() throws Throwable {
        MockFile mockFile0 = new MockFile(";=oe3*p[O~S", "");
        String string0 = "Q+3q\\u==+CQ{";
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
        boolean boolean0 = zipArchiveEntry0.isDirectory();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test3367() throws Throwable {
        MockFile mockFile0 = new MockFile(";=oe3*p[O~S", "");
        String string0 = "Q+3q\\u==+CQ{";
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
        boolean boolean0 = zipArchiveEntry0.isDirectory();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test3368() throws Throwable {
        MockFile mockFile0 = new MockFile(";=oe3*p[O~S", "");
        String string0 = "Q+3q\\u==+CQ{";
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
        boolean boolean0 = zipArchiveEntry0.isDirectory();
    }

    @Test(timeout = 4000)
    public void test3369() throws Throwable {
        MockFile mockFile0 = new MockFile(";=oe3*p[O~S", "");
        String string0 = "Q+3q\\u==+CQ{";
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
        boolean boolean0 = zipArchiveEntry0.isDirectory();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test3370() throws Throwable {
        MockFile mockFile0 = new MockFile(";=oe3*p[O~S", "");
        String string0 = "Q+3q\\u==+CQ{";
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
        boolean boolean0 = zipArchiveEntry0.isDirectory();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test3371() throws Throwable {
        MockFile mockFile0 = new MockFile(";=oe3*p[O~S", "");
        String string0 = "Q+3q\\u==+CQ{";
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, string0);
        boolean boolean0 = zipArchiveEntry0.isDirectory();
        zipArchiveEntry0.getSize();
    }

    @Test(timeout = 4000)
    public void test3472() throws Throwable {
        File file0 = MockFile.createTempFile(";6:/", (String) null);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ";6:/");
        int int0 = zipArchiveEntry0.getMethod();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test3473() throws Throwable {
        File file0 = MockFile.createTempFile(";6:/", (String) null);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ";6:/");
        int int0 = zipArchiveEntry0.getMethod();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test3474() throws Throwable {
        File file0 = MockFile.createTempFile(";6:/", (String) null);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ";6:/");
        int int0 = zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test3475() throws Throwable {
        File file0 = MockFile.createTempFile(";6:/", (String) null);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ";6:/");
        int int0 = zipArchiveEntry0.getMethod();
        zipArchiveEntry0.getSize();
    }

    @Test(timeout = 4000)
    public void test3476() throws Throwable {
        File file0 = MockFile.createTempFile(";6:/", (String) null);
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ";6:/");
        int int0 = zipArchiveEntry0.getMethod();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test3577() throws Throwable {
        MockFile mockFile0 = new MockFile("SP{RQD.", "(]9X:N+hD");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "(]9X:N+hD");
        long long0 = zipArchiveEntry0.getExternalAttributes();
        zipArchiveEntry0.getSize();
    }

    @Test(timeout = 4000)
    public void test3578() throws Throwable {
        MockFile mockFile0 = new MockFile("SP{RQD.", "(]9X:N+hD");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "(]9X:N+hD");
        long long0 = zipArchiveEntry0.getExternalAttributes();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test3579() throws Throwable {
        MockFile mockFile0 = new MockFile("SP{RQD.", "(]9X:N+hD");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "(]9X:N+hD");
        long long0 = zipArchiveEntry0.getExternalAttributes();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test3580() throws Throwable {
        MockFile mockFile0 = new MockFile("SP{RQD.", "(]9X:N+hD");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "(]9X:N+hD");
        long long0 = zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test3581() throws Throwable {
        MockFile mockFile0 = new MockFile("SP{RQD.", "(]9X:N+hD");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "(]9X:N+hD");
        long long0 = zipArchiveEntry0.getExternalAttributes();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test3682() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test3683() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setExternalAttributes(1L);
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test3784() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setMethod(0);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry0.isSupportedCompressionMethod();
    }

    @Test(timeout = 4000)
    public void test3785() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setMethod(0);
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
        zipArchiveEntry1.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test3886() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        int int0 = zipArchiveEntry0.getInternalAttributes();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test3887() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        int int0 = zipArchiveEntry0.getInternalAttributes();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test3888() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        int int0 = zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test3889() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        int int0 = zipArchiveEntry0.getInternalAttributes();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test3990() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("o-x|mHfp\"v.");
        zipArchiveEntry0.setName("o-x|mHfp\"v.");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        zipArchiveEntry1.equals((Object) zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test3991() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry("o-x|mHfp\"v.");
        zipArchiveEntry0.setName("o-x|mHfp\"v.");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    }

    @Test(timeout = 4000)
    public void test4092() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        zipArchiveEntry1.getMethod();
    }

    @Test(timeout = 4000)
    public void test4093() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        zipArchiveEntry1.getPlatform();
    }

    @Test(timeout = 4000)
    public void test4094() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        zipArchiveEntry1.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test4095() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        zipArchiveEntry1.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test4096() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test4197() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("xAb");
        boolean boolean0 = zipArchiveEntry0.equals("xAb");
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test4198() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("xAb");
        boolean boolean0 = zipArchiveEntry0.equals("xAb");
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test4199() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("xAb");
        boolean boolean0 = zipArchiveEntry0.equals("xAb");
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test41100() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("xAb");
        boolean boolean0 = zipArchiveEntry0.equals("xAb");
    }

    @Test(timeout = 4000)
    public void test41101() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("xAb");
        boolean boolean0 = zipArchiveEntry0.equals("xAb");
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test42102() throws Throwable {
        MockFile mockFile0 = new MockFile("RpDq=nVV^Jw!@s0)m1", "RpDq=nVV^Jw!@s0)m1");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "RpDq=nVV^Jw!@s0)m1");
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test42103() throws Throwable {
        MockFile mockFile0 = new MockFile("RpDq=nVV^Jw!@s0)m1", "RpDq=nVV^Jw!@s0)m1");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "RpDq=nVV^Jw!@s0)m1");
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        zipArchiveEntry0.getSize();
    }

    @Test(timeout = 4000)
    public void test42104() throws Throwable {
        MockFile mockFile0 = new MockFile("RpDq=nVV^Jw!@s0)m1", "RpDq=nVV^Jw!@s0)m1");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "RpDq=nVV^Jw!@s0)m1");
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test42105() throws Throwable {
        MockFile mockFile0 = new MockFile("RpDq=nVV^Jw!@s0)m1", "RpDq=nVV^Jw!@s0)m1");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "RpDq=nVV^Jw!@s0)m1");
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test42106() throws Throwable {
        MockFile mockFile0 = new MockFile("RpDq=nVV^Jw!@s0)m1", "RpDq=nVV^Jw!@s0)m1");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "RpDq=nVV^Jw!@s0)m1");
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test42107() throws Throwable {
        MockFile mockFile0 = new MockFile("RpDq=nVV^Jw!@s0)m1", "RpDq=nVV^Jw!@s0)m1");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "RpDq=nVV^Jw!@s0)m1");
        boolean boolean0 = zipArchiveEntry0.equals((Object) null);
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test43108() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test43109() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test43110() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test43111() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test43112() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry0);
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test44113() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        zipArchiveEntry1.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test44114() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test44115() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        zipArchiveEntry1.getMethod();
    }

    @Test(timeout = 4000)
    public void test44116() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        zipArchiveEntry1.getPlatform();
    }

    @Test(timeout = 4000)
    public void test44117() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
        boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
        zipArchiveEntry1.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test45118() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[10];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test46119() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[4];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test46120() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[4];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test46121() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[4];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test47122() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        zipArchiveEntry0.hashCode();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test47123() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        zipArchiveEntry0.hashCode();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test47124() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        zipArchiveEntry0.hashCode();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test47125() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setName("OQU]yU7X\"eO)`");
        zipArchiveEntry0.hashCode();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test48126() throws Throwable {
        MockFile mockFile0 = new MockFile("RpDq=nVV^Jw!@s0)m1", "RpDq=nVV^Jw!@s0)m1");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "RpDq=nVV^Jw!@s0)m1");
        byte[] byteArray0 = new byte[3];
        UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField("RpDq=nVV^Jw!@s0)m1", byteArray0);
        zipArchiveEntry0.getExtraField(unicodeCommentExtraField0.UCOM_ID);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test48127() throws Throwable {
        MockFile mockFile0 = new MockFile("RpDq=nVV^Jw!@s0)m1", "RpDq=nVV^Jw!@s0)m1");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "RpDq=nVV^Jw!@s0)m1");
        byte[] byteArray0 = new byte[3];
        UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField("RpDq=nVV^Jw!@s0)m1", byteArray0);
        zipArchiveEntry0.getExtraField(unicodeCommentExtraField0.UCOM_ID);
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test48128() throws Throwable {
        MockFile mockFile0 = new MockFile("RpDq=nVV^Jw!@s0)m1", "RpDq=nVV^Jw!@s0)m1");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "RpDq=nVV^Jw!@s0)m1");
        byte[] byteArray0 = new byte[3];
        UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField("RpDq=nVV^Jw!@s0)m1", byteArray0);
        zipArchiveEntry0.getExtraField(unicodeCommentExtraField0.UCOM_ID);
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test48129() throws Throwable {
        MockFile mockFile0 = new MockFile("RpDq=nVV^Jw!@s0)m1", "RpDq=nVV^Jw!@s0)m1");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "RpDq=nVV^Jw!@s0)m1");
        byte[] byteArray0 = new byte[3];
        UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField("RpDq=nVV^Jw!@s0)m1", byteArray0);
        zipArchiveEntry0.getExtraField(unicodeCommentExtraField0.UCOM_ID);
        zipArchiveEntry0.getSize();
    }

    @Test(timeout = 4000)
    public void test48130() throws Throwable {
        MockFile mockFile0 = new MockFile("RpDq=nVV^Jw!@s0)m1", "RpDq=nVV^Jw!@s0)m1");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "RpDq=nVV^Jw!@s0)m1");
        byte[] byteArray0 = new byte[3];
        UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField("RpDq=nVV^Jw!@s0)m1", byteArray0);
        zipArchiveEntry0.getExtraField(unicodeCommentExtraField0.UCOM_ID);
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test49131() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        byte[] byteArray0 = new byte[4];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        AsiExtraField asiExtraField0 = new AsiExtraField();
        ZipShort zipShort0 = asiExtraField0.getHeaderId();
        zipArchiveEntry0.removeExtraField(zipShort0);
    }

    @Test(timeout = 4000)
    public void test50132() throws Throwable {
        MockFile mockFile0 = new MockFile("RpDq=nVV^Jw!@s0)m1", "RpDq=nVV^Jw!@s0)m1");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "RpDq=nVV^Jw!@s0)m1");
        byte[] byteArray0 = new byte[3];
        UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField("RpDq=nVV^Jw!@s0)m1", byteArray0);
        zipArchiveEntry0.removeExtraField(unicodeCommentExtraField0.UCOM_ID);
    }

    @Test(timeout = 4000)
    public void test51133() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipShort zipShort0 = new ZipShort(byteArray0);
        zipArchiveEntry0.removeExtraField(zipShort0);
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test51134() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipShort zipShort0 = new ZipShort(byteArray0);
        zipArchiveEntry0.removeExtraField(zipShort0);
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test51135() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipShort zipShort0 = new ZipShort(byteArray0);
        zipArchiveEntry0.removeExtraField(zipShort0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test51136() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipShort zipShort0 = new ZipShort(byteArray0);
        zipArchiveEntry0.removeExtraField(zipShort0);
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test52137() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("OQU]yU7X\"eO)`", byteArray0);
        zipArchiveEntry1.addAsFirstExtraField(unicodePathExtraField0);
        zipArchiveEntry1.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test52138() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("OQU]yU7X\"eO)`", byteArray0);
        zipArchiveEntry1.addAsFirstExtraField(unicodePathExtraField0);
        zipArchiveEntry1.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test52139() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("OQU]yU7X\"eO)`", byteArray0);
        zipArchiveEntry1.addAsFirstExtraField(unicodePathExtraField0);
    }

    @Test(timeout = 4000)
    public void test52140() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField("OQU]yU7X\"eO)`", byteArray0);
        zipArchiveEntry1.addAsFirstExtraField(unicodePathExtraField0);
        zipArchiveEntry1.getMethod();
    }

    @Test(timeout = 4000)
    public void test53141() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
        zipArchiveEntry0.getExtraFields();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test53142() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
        zipArchiveEntry0.getExtraFields();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test53143() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
        zipArchiveEntry0.getExtraFields();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test53144() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
        zipArchiveEntry0.getExtraFields();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test53145() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        AsiExtraField asiExtraField0 = new AsiExtraField();
        zipArchiveEntry0.addAsFirstExtraField(asiExtraField0);
        zipArchiveEntry0.getExtraFields();
        zipArchiveEntry0.getSize();
    }

    @Test(timeout = 4000)
    public void test54146() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        JarMarker jarMarker0 = JarMarker.getInstance();
        zipArchiveEntry0.addExtraField(jarMarker0);
        zipArchiveEntry0.getLocalFileDataExtra();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test54147() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        JarMarker jarMarker0 = JarMarker.getInstance();
        zipArchiveEntry0.addExtraField(jarMarker0);
        zipArchiveEntry0.getLocalFileDataExtra();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test54148() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        JarMarker jarMarker0 = JarMarker.getInstance();
        zipArchiveEntry0.addExtraField(jarMarker0);
        zipArchiveEntry0.getLocalFileDataExtra();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test54149() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        JarMarker jarMarker0 = JarMarker.getInstance();
        zipArchiveEntry0.addExtraField(jarMarker0);
        zipArchiveEntry0.getLocalFileDataExtra();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test55150() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        byteArray0[1] = (byte) (-5);
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test55151() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        byteArray0[1] = (byte) (-5);
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test55152() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        byteArray0[1] = (byte) (-5);
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test55153() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        byte[] byteArray0 = new byte[5];
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        byteArray0[1] = (byte) (-5);
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test56154() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        int int0 = zipArchiveEntry0.getUnixMode();
        zipArchiveEntry0.getSize();
    }

    @Test(timeout = 4000)
    public void test56155() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        int int0 = zipArchiveEntry0.getUnixMode();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test56156() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        int int0 = zipArchiveEntry0.getUnixMode();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test56157() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        int int0 = zipArchiveEntry0.getUnixMode();
    }

    @Test(timeout = 4000)
    public void test56158() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        int int0 = zipArchiveEntry0.getUnixMode();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test56159() throws Throwable {
        File file0 = MockFile.createTempFile("o-x|mHfp\"v.", "o-x|mHfp\"v.");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "q6rJNg*TJ}");
        int int0 = zipArchiveEntry0.getUnixMode();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test57160() throws Throwable {
        MockFile mockFile0 = new MockFile("] for UniCode path extra data.", "] for UniCode path extra data.");
        mockFile0.mkdirs();
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "] for UniCode path extra data.");
        zipArchiveEntry0.setUnixMode(3);
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test58161() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test58162() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test58163() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test58164() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test58165() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("FATAL: UTF-8 encoding not supported.");
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    }

    @Test(timeout = 4000)
    public void test59166() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test59167() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setMethod(0);
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test59168() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        zipArchiveEntry0.setMethod(0);
        boolean boolean0 = zipArchiveEntry0.isSupportedCompressionMethod();
    }

    @Test(timeout = 4000)
    public void test60169() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
    }

    @Test(timeout = 4000)
    public void test60170() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        zipArchiveEntry1.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test60171() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        zipArchiveEntry1.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test60173() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        zipArchiveEntry1.getMethod();
    }

    @Test(timeout = 4000)
    public void test60174() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "/");
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        boolean boolean0 = zipArchiveEntry0.equals(zipArchiveEntry1);
        zipArchiveEntry1.getSize();
    }

    @Test(timeout = 4000)
    public void test61175() throws Throwable {
        MockFile mockFile0 = new MockFile("", "");
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
        zipArchiveEntry0.setExtra();
        ZipArchiveEntry zipArchiveEntry1 = null;
        zipArchiveEntry1 = new ZipArchiveEntry((ZipEntry) zipArchiveEntry0);
    }

    @Test(timeout = 4000)
    public void test62176() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("xAb");
        int int0 = zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test62177() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("xAb");
        int int0 = zipArchiveEntry0.getPlatform();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test62178() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("xAb");
        int int0 = zipArchiveEntry0.getPlatform();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test62179() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("xAb");
        int int0 = zipArchiveEntry0.getPlatform();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test63180() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
    }

    @Test(timeout = 4000)
    public void test63181() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
    }

    @Test(timeout = 4000)
    public void test63182() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.getMethod();
    }

    @Test(timeout = 4000)
    public void test63183() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test63184() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test63185() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getLocalFileDataExtra();
        zipArchiveEntry0.setCentralDirectoryExtra(byteArray0);
        ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry) zipArchiveEntry0.clone();
        zipArchiveEntry1.getPlatform();
    }

    @Test(timeout = 4000)
    public void test64186() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        zipArchiveEntry0.setInternalAttributes(841);
        int int0 = zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test65187() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test65188() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test65189() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test65190() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("OQU]yU7X\"eO)`");
        byte[] byteArray0 = zipArchiveEntry0.getCentralDirectoryExtra();
        zipArchiveEntry0.setExtra(byteArray0);
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test66191() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        zipArchiveEntry0.getLastModifiedDate();
        zipArchiveEntry0.getInternalAttributes();
    }

    @Test(timeout = 4000)
    public void test66192() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        zipArchiveEntry0.getLastModifiedDate();
        zipArchiveEntry0.getPlatform();
    }

    @Test(timeout = 4000)
    public void test66193() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        zipArchiveEntry0.getLastModifiedDate();
        zipArchiveEntry0.getMethod();
    }

    @Test(timeout = 4000)
    public void test66194() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZIP compression method can not be negative: ");
        zipArchiveEntry0.getLastModifiedDate();
        zipArchiveEntry0.getExternalAttributes();
    }

    @Test(timeout = 4000)
    public void test67195() throws Throwable {
        ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry1 = null;
        zipArchiveEntry1 = new ZipArchiveEntry(zipArchiveEntry0);
    }
}
