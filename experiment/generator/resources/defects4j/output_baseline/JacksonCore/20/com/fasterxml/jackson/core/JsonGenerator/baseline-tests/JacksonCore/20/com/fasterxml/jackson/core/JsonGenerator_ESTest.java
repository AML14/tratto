/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 19:21:01 GMT 2023
 */
package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class JsonGenerator_ESTest extends JsonGenerator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        double[] doubleArray0 = new double[1];
        filteringGeneratorDelegate0.writeArray(doubleArray0, 0, (-32));
        filteringGeneratorDelegate0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        filteringGeneratorDelegate0.writeStartObject();
        filteringGeneratorDelegate0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        char[] charArray0 = new char[7];
        uTF8JsonGenerator0.writeRawValue(charArray0, 1, 0);
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.setCurrentValue((Object) null);
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        int int0 = jsonGenerator_Feature0.getMask();
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        boolean boolean0 = jsonGenerator_Feature0.enabledIn(1);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringWriter stringWriter0 = new StringWriter();
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
        SerializedString serializedString0 = new SerializedString("AUTO_CLOSE_TARGET");
        writerBasedJsonGenerator0.writeRaw((SerializableString) serializedString0);
        writerBasedJsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
        BigInteger bigInteger0 = BigInteger.ZERO;
        uTF8JsonGenerator0.writeNumber(bigInteger0);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("27e F", true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, mockFileOutputStream0);
        uTF8JsonGenerator0.writeNumber("Invalid UTF-8 start byte 0x");
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeNumber((float) 3);
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, true);
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        filteringGeneratorDelegate0.writeRawValue((SerializableString) serializedString0);
        serializedString0.getValue();
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, true, true);
        filteringGeneratorDelegate0.writeNullField("");
        filteringGeneratorDelegate0.getFormatFeatures();
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float((double) 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        JsonGenerator jsonGenerator0 = jsonGeneratorDelegate0.useDefaultPrettyPrinter();
        jsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float((double) 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        JsonGenerator jsonGenerator0 = jsonGeneratorDelegate0.setRootValueSeparator((SerializableString) null);
        jsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Double double0 = new Double(3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        byte[] byteArray0 = new byte[6];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-21), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("VALUE_STRING");
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
        jsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float(845.7);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        StringWriter stringWriter0 = new StringWriter();
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("9");
        JsonGenerator jsonGenerator0 = writerBasedJsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
        jsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        filteringGeneratorDelegate0.writeNumber((long) 56319);
        uTF8JsonGenerator0.setHighestNonEscapedChar((-3));
        uTF8JsonGenerator0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((-3));
        jsonGenerator0.canOmitFields();
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test01819() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setFeatureMask(918);
        jsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test01920() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float((double) 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        JsonGenerator jsonGenerator0 = jsonGeneratorDelegate0.setFeatureMask(37);
        jsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test02021() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float((double) 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
        jsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test02122() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1361, (ObjectCodec) null, mockPrintStream0);
        uTF8JsonGenerator0.isClosed();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test02223() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("luS0%?8sAWJ`lX");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, true);
        ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 10, true);
        uTF8JsonGenerator0.getOutputContext();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test02324() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3267, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
        uTF8JsonGenerator0.getOutputBuffered();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test02425() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        filteringGeneratorDelegate0.getFeatureMask();
        filteringGeneratorDelegate0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test02526() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        filteringGeneratorDelegate0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test02527() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        filteringGeneratorDelegate0.overrideStdFeatures((-1), (-1064));
        filteringGeneratorDelegate0.getFeatureMask();
        filteringGeneratorDelegate0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test02628() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
        filteringGeneratorDelegate0.getCurrentValue();
        filteringGeneratorDelegate0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test02729() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.getCodec();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test02830() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, true);
        uTF8JsonGenerator0.getCharacterEscapes();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test02931() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, filterOutputStream0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
        jsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test03032() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float(845.7);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        MockFile mockFile0 = new MockFile((String) null, "') as character #");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[7];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-1), true);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
        jsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test03033() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float(845.7);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        MockFile mockFile0 = new MockFile((String) null, "') as character #");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        byte[] byteArray0 = new byte[7];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-1), true);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
        JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
        jsonGenerator0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test03134() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float(0.0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0);
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, false);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        filteringGeneratorDelegate0.configure(jsonGenerator_Feature0, true);
        uTF8JsonGenerator0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test03135() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float(0.0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
        DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0);
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, false);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        filteringGeneratorDelegate0.configure(jsonGenerator_Feature0, true);
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test03236() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float((double) 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.writeStringField("", "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
    }

    @Test(timeout = 4000)
    public void test03337() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Double double0 = new Double(3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        byte[] byteArray0 = new byte[6];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
        uTF8JsonGenerator0.writeNumber(0.0F);
        uTF8JsonGenerator0.writeStartObject();
    }

    @Test(timeout = 4000)
    public void test03438() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
        jsonGeneratorDelegate0.writeStartArray((-3051));
    }

    @Test(timeout = 4000)
    public void test03539() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float((double) 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
        uTF8JsonGenerator0.writeStartArray(256);
    }

    @Test(timeout = 4000)
    public void test03640() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        char[] charArray0 = new char[6];
        jsonGeneratorDelegate0.writeRawValue(charArray0, 3390, (-675));
    }

    @Test(timeout = 4000)
    public void test03741() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream("Vg@3etg2{x%W3m<");
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 128);
    }

    @Test(timeout = 4000)
    public void test03842() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        jsonGeneratorDelegate0.writeObjectId((Object) null);
    }

    @Test(timeout = 4000)
    public void test03943() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
        jsonGeneratorDelegate0.writeObjectFieldStart("7lID5N6u):N!*r+");
    }

    @Test(timeout = 4000)
    public void test04044() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
        AtomicBoolean atomicBoolean0 = new AtomicBoolean();
        filteringGeneratorDelegate0.writeObjectField("AUTO_CLOSE_JSON_CONTENT", atomicBoolean0);
    }

    @Test(timeout = 4000)
    public void test04145() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        BigDecimal bigDecimal0 = new BigDecimal(1);
        jsonGeneratorDelegate0.writeNumberField("", bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test04246() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
        jsonGeneratorDelegate0.writeNumberField("iV9+G2!3", 0L);
    }

    @Test(timeout = 4000)
    public void test04347() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
        filteringGeneratorDelegate0.writeNumberField("No Base6Variant with name ", (-4488));
    }

    @Test(timeout = 4000)
    public void test04448() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        jsonGeneratorDelegate0.writeNumberField("No native support for writing embedded objects", 2.147483647E9);
    }

    @Test(timeout = 4000)
    public void test04549() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
        filteringGeneratorDelegate0.writeNumber((short) 425);
    }

    @Test(timeout = 4000)
    public void test04650() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float((double) 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        jsonGeneratorDelegate0.writeNumber((short) 290);
    }

    @Test(timeout = 4000)
    public void test04751() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
        filteringGeneratorDelegate0.writeNumber(0L);
    }

    @Test(timeout = 4000)
    public void test04852() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
        filteringGeneratorDelegate0.writeNumber((double) 2149);
    }

    @Test(timeout = 4000)
    public void test04953() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        jsonGeneratorDelegate0.writeNullField("LD_rm]'j%/#\"ZP");
    }

    @Test(timeout = 4000)
    public void test05054() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Long long0 = new Long((-2507L));
        IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, (-32), true);
        SerializedString serializedString0 = new SerializedString("");
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
    }

    @Test(timeout = 4000)
    public void test05155() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
        jsonGeneratorDelegate0.writeEndArray();
    }

    @Test(timeout = 4000)
    public void test05256() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringWriter stringWriter0 = new StringWriter();
        AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
        IOContext iOContext0 = new IOContext(bufferRecycler0, atomicBoolean0, false);
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
        writerBasedJsonGenerator0.writeEndArray();
    }

    @Test(timeout = 4000)
    public void test05357() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
        jsonGeneratorDelegate0.writeBooleanField((String) null, true);
    }

    @Test(timeout = 4000)
    public void test05458() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, true);
        uTF8JsonGenerator0.writeBoolean(true);
    }

    @Test(timeout = 4000)
    public void test05559() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 6, false);
        uTF8JsonGenerator0.writeBinaryField("F\"o?E", byteArrayBuilder0.NO_BYTES);
    }

    @Test(timeout = 4000)
    public void test05660() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
        byte[] byteArray0 = new byte[1];
        jsonGeneratorDelegate0.writeBinary(byteArray0, 0, 9);
    }

    @Test(timeout = 4000)
    public void test05761() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        jsonGeneratorDelegate0.writeBinary(byteArrayBuilder0.NO_BYTES, (-1876), 0);
    }

    @Test(timeout = 4000)
    public void test05862() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
        byte[] byteArray0 = new byte[3];
        filteringGeneratorDelegate0.writeBinary(byteArray0);
    }

    @Test(timeout = 4000)
    public void test05963() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1554, 421);
        filteringGeneratorDelegate0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte) 97);
    }

    @Test(timeout = 4000)
    public void test06064() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float(845.7);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        StringWriter stringWriter0 = new StringWriter();
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        writerBasedJsonGenerator0.writeBinary((InputStream) null, (-20));
    }

    @Test(timeout = 4000)
    public void test06165() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
        int[] intArray0 = new int[5];
        uTF8JsonGenerator0.writeArray(intArray0, 0, 1424);
    }

    @Test(timeout = 4000)
    public void test06266() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        jsonGeneratorDelegate0.setCurrentValue((Object) null);
    }

    @Test(timeout = 4000)
    public void test06367() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
        jsonGeneratorDelegate0.setCharacterEscapes(jsonpCharacterEscapes0);
    }

    @Test(timeout = 4000)
    public void test06468() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        jsonGeneratorDelegate0.overrideStdFeatures(3050, 3050);
    }

    @Test(timeout = 4000)
    public void test06569() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        jsonGeneratorDelegate0.isClosed();
    }

    @Test(timeout = 4000)
    public void test06670() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        jsonGeneratorDelegate0.getSchema();
    }

    @Test(timeout = 4000)
    public void test06771() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        jsonGeneratorDelegate0.getPrettyPrinter();
    }

    @Test(timeout = 4000)
    public void test06872() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        jsonGeneratorDelegate0.getOutputTarget();
    }

    @Test(timeout = 4000)
    public void test06973() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
        jsonGeneratorDelegate0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test07074() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
        jsonGeneratorDelegate0.getCurrentValue();
    }

    @Test(timeout = 4000)
    public void test07175() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        jsonGeneratorDelegate0.getCodec();
    }

    @Test(timeout = 4000)
    public void test07276() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.copyCurrentEvent((JsonParser) null);
    }

    @Test(timeout = 4000)
    public void test07377() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        jsonGeneratorDelegate0.configure(jsonGenerator_Feature0, false);
    }

    @Test(timeout = 4000)
    public void test07478() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        jsonGeneratorDelegate0.close();
    }

    @Test(timeout = 4000)
    public void test07579() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
        BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 3, false);
        uTF8JsonGenerator0.close();
    }

    @Test(timeout = 4000)
    public void test07680() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        byte[] byteArray0 = new byte[6];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 4, true);
        uTF8JsonGenerator0.close();
    }

    @Test(timeout = 4000)
    public void test07781() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
        filteringGeneratorDelegate0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test07882() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
        filteringGeneratorDelegate0.canWriteBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test07983() throws Throwable {
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, tokenFilter0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2274, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 0, false);
        ((JsonGenerator) uTF8JsonGenerator0)._verifyOffsets(0, 0, 92);
    }

    @Test(timeout = 4000)
    public void test08084() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream("^m5qPD_X?3^lQb/y<");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
        double[] doubleArray0 = new double[2];
        uTF8JsonGenerator0.writeArray(doubleArray0, 56319, 6);
    }

    @Test(timeout = 4000)
    public void test08185() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Double double0 = new Double(3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        byte[] byteArray0 = new byte[6];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-21), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
        uTF8JsonGenerator0.writeObjectRef("VALUE_STRING");
    }

    @Test(timeout = 4000)
    public void test08286() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        IOContext iOContext0 = new IOContext(bufferRecycler0, bigDecimal0, false);
        File file0 = MockFile.createTempFile(" cD", ".|bU ");
        MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
        byte[] byteArray0 = new byte[1];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 881, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
        uTF8JsonGenerator0.getPrettyPrinter();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test08387() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeFieldId(1L);
    }

    @Test(timeout = 4000)
    public void test08488() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringWriter stringWriter0 = new StringWriter();
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
        AtomicBoolean atomicBoolean0 = new AtomicBoolean();
        filteringGeneratorDelegate0.writeObject(atomicBoolean0);
        filteringGeneratorDelegate0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test08589() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Double double0 = new Double(3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        byte[] byteArray0 = new byte[6];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
        uTF8JsonGenerator0.writeObject(bufferRecycler0.BYTE_READ_IO_BUFFER);
    }

    @Test(timeout = 4000)
    public void test08690() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        filteringGeneratorDelegate0.writeObject(filteringGeneratorDelegate0);
    }

    @Test(timeout = 4000)
    public void test08791() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1554, (ObjectCodec) null, byteArrayBuilder0);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
        int[] intArray0 = new int[3];
        jsonGeneratorDelegate0.writeArray(intArray0, (-32), 1554);
    }

    @Test(timeout = 4000)
    public void test08892() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        StringReader stringReader0 = new StringReader("`w&w=_+Th$N`tp");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 57343, 56320, true);
        filteringGeneratorDelegate0.copyCurrentStructure(readerBasedJsonParser0);
    }

    @Test(timeout = 4000)
    public void test08993() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringWriter stringWriter0 = new StringWriter();
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
        StringReader stringReader0 = new StringReader("<'_$]%");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3011, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        writerBasedJsonGenerator0.copyCurrentEvent(readerBasedJsonParser0);
    }

    @Test(timeout = 4000)
    public void test09094() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        double[] doubleArray0 = new double[1];
        filteringGeneratorDelegate0.writeArray(doubleArray0, 0, 0);
        filteringGeneratorDelegate0.getOutputBuffered();
    }

    @Test(timeout = 4000)
    public void test09195() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, true);
        long[] longArray0 = new long[6];
        uTF8JsonGenerator0.writeArray(longArray0, 56320, (-1048));
    }

    @Test(timeout = 4000)
    public void test09296() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
        int[] intArray0 = new int[1];
        uTF8JsonGenerator0.writeArray(intArray0, 20, (-3105));
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test09397() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float((double) 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        jsonGeneratorDelegate0.configure(jsonGenerator_Feature0, true);
        uTF8JsonGenerator0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test09398() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float((double) 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        jsonGeneratorDelegate0.configure(jsonGenerator_Feature0, true);
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test09499() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
        jsonGeneratorDelegate0.writeStringField("com.fasterxml.jackson.core.JsonGenerator$Feature", "com.fasterxml.jackson.core.JsonGenerator$Feature");
    }

    @Test(timeout = 4000)
    public void test095100() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        boolean boolean0 = filteringGeneratorDelegate0.canOmitFields();
    }

    @Test(timeout = 4000)
    public void test095101() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        boolean boolean0 = filteringGeneratorDelegate0.canOmitFields();
        filteringGeneratorDelegate0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test096102() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float((double) 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        jsonGeneratorDelegate0.writeObjectFieldStart("Current context not Array but ");
    }

    @Test(timeout = 4000)
    public void test097103() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        StringWriter stringWriter0 = new StringWriter();
        AtomicLong atomicLong0 = new AtomicLong(0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, atomicLong0, false);
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1029, (ObjectCodec) null, stringWriter0);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0, true);
        jsonGeneratorDelegate0.writeOmittedField("AUTO_CLOSE_JSON_CONTENT");
        jsonGeneratorDelegate0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test098104() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
        byte[] byteArray0 = new byte[7];
        jsonGeneratorDelegate0.writeBinaryField("QUOTE_NON_NUMERIC_NUMBERS", byteArray0);
    }

    @Test(timeout = 4000)
    public void test099105() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeNumberField("{`8BDW3xr{$P#Bd,$", (long) 0);
    }

    @Test(timeout = 4000)
    public void test100106() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.overrideFormatFeatures(2, 3);
    }

    @Test(timeout = 4000)
    public void test101107() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!S% B#COev&\"<^q9");
        byte[] byteArray0 = new byte[9];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) 10, false);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        boolean boolean0 = jsonGeneratorDelegate0.canUseSchema((FormatSchema) null);
    }

    @Test(timeout = 4000)
    public void test101108() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!S% B#COev&\"<^q9");
        byte[] byteArray0 = new byte[9];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 33, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) 10, false);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        boolean boolean0 = jsonGeneratorDelegate0.canUseSchema((FormatSchema) null);
        jsonGeneratorDelegate0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test102109() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1361, (ObjectCodec) null, mockPrintStream0);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
        jsonGeneratorDelegate0.writeObjectField("O}'}=", "O}'}=");
    }

    @Test(timeout = 4000)
    public void test103110() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("W-n 4");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
        byte[] byteArray0 = new byte[2];
        uTF8JsonGenerator0.writeBinary(byteArray0);
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test104111() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.writeNullField("");
    }

    @Test(timeout = 4000)
    public void test105112() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
        uTF8JsonGenerator0.writeStartArray(2);
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test106113() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[0];
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
        filteringGeneratorDelegate0.writeBinary(byteArray0, 2, (-2238));
        filteringGeneratorDelegate0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test107114() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringWriter stringWriter0 = new StringWriter(0);
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2699, (ObjectCodec) null, stringWriter0);
        byte[] byteArray0 = new byte[3];
        writerBasedJsonGenerator0.writeUTF8String(byteArray0, 1, 18);
    }

    @Test(timeout = 4000)
    public void test108115() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        uTF8JsonGenerator0.writeNumberField("STRICT_DUPLICATE_DETECTION", 0);
    }

    @Test(timeout = 4000)
    public void test109116() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        boolean boolean0 = filteringGeneratorDelegate0.canWriteBinaryNatively();
        filteringGeneratorDelegate0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test109117() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        boolean boolean0 = filteringGeneratorDelegate0.canWriteBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test110118() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        filteringGeneratorDelegate0.writeNumberField("`w&w=_+Th$N`tp", 1.0);
    }

    @Test(timeout = 4000)
    public void test111119() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3128, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.writeNumberField("Q$OInPz[|:#B#1.dwn", 0.0F);
    }

    @Test(timeout = 4000)
    public void test112120() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Short short0 = new Short((short) 128);
        IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
        uTF8JsonGenerator0.getSchema();
        uTF8JsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test113121() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringReader stringReader0 = new StringReader("luS0%?8sAWJ`lX");
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        char[] charArray0 = new char[9];
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, true);
        ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 10, true);
        uTF8JsonGenerator0.setSchema((FormatSchema) null);
    }

    @Test(timeout = 4000)
    public void test114122() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        AtomicInteger atomicInteger0 = new AtomicInteger(0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, atomicInteger0, false);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3230, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
        uTF8JsonGenerator0.writeArrayFieldStart("AUTO_CLOSE_JSON_CONTENT");
    }

    @Test(timeout = 4000)
    public void test115123() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float(845.7);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        StringWriter stringWriter0 = new StringWriter();
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        writerBasedJsonGenerator0.writeBinary((InputStream) null, 0);
        writerBasedJsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test116124() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float((double) 3);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
        uTF8JsonGenerator0.writeTypeId(bufferRecycler0);
    }

    @Test(timeout = 4000)
    public void test117125() throws Throwable {
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
        jsonGeneratorDelegate0.writeRawValue((SerializableString) null);
    }

    @Test(timeout = 4000)
    public void test118126() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 4, true);
        BigDecimal bigDecimal0 = new BigDecimal(57343);
        uTF8JsonGenerator0.writeNumberField("null array", bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test119127() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Float float0 = new Float(845.7);
        IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
        StringWriter stringWriter0 = new StringWriter();
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
        writerBasedJsonGenerator0.writeObjectId(jsonEncoding0);
    }

    @Test(timeout = 4000)
    public void test120128() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        StringWriter stringWriter0 = new StringWriter();
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2246), (ObjectCodec) null, stringWriter0);
        Short short0 = new Short((short) 255);
        writerBasedJsonGenerator0.writeEmbeddedObject(short0);
    }

    @Test(timeout = 4000)
    public void test121129() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(381);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-76), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        boolean boolean0 = filteringGeneratorDelegate0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test121130() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(381);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-76), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        boolean boolean0 = filteringGeneratorDelegate0.canWriteTypeId();
        filteringGeneratorDelegate0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test122131() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        AtomicInteger atomicInteger0 = new AtomicInteger((-1015));
        IOContext iOContext0 = new IOContext(bufferRecycler0, atomicInteger0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        byte[] byteArray0 = new byte[2];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
        uTF8JsonGenerator0.writeBooleanField("XRAe>Ib=0>~-}OYfz5", true);
    }

    @Test(timeout = 4000)
    public void test123132() throws Throwable {
        int int0 = JsonGenerator.Feature.collectDefaults();
    }
}
