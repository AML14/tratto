/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 18:29:32 GMT 2023
 */
package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class UTF8StreamJsonParser_ESTest extends UTF8StreamJsonParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) 127;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2626, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 1455, (byte) 0, false);
        uTF8StreamJsonParser0._skipCR();
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false, false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 4);
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[5];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-416), sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 101, (byte) 101, false);
        uTF8StreamJsonParser0._matchToken("", (-1907));
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("w0D$s#tbs~rzH");
        FileSystemHandling.appendStringToFile(evoSuiteFile0, "i6v`DKm}=d@=iFwr");
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        MockFile mockFile0 = new MockFile("w0D$s#tbs~rzH");
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[6];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1867, mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 116, (byte) 0, true);
        uTF8StreamJsonParser0._handleInvalidNumberStart((byte) 6, true);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1951, 0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 0, 8, true);
        boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast(102);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[6];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-119), (byte) (-119), false);
        boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast((-2714));
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[6];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-98), 2000, false);
        uTF8StreamJsonParser0._releaseBuffers();
        uTF8StreamJsonParser0.getTokenColumnNr();
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[7];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-3085), dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 84, 2000, false);
        String string0 = uTF8StreamJsonParser0.getValueAsString((String) null);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        byte[] byteArray0 = new byte[7];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 256, 97);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 333, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 1057, 192, false);
        String string0 = uTF8StreamJsonParser0.getValueAsString("");
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 80, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, 0, 92, true);
        JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
        jsonLocation0.getByteOffset();
    }

    @Test(timeout = 4000)
    public void test0089() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 80, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, 0, 92, true);
        JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
        jsonLocation0.getCharOffset();
    }

    @Test(timeout = 4000)
    public void test00810() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 80, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, 0, 92, true);
        JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
        jsonLocation0.getColumnNr();
    }

    @Test(timeout = 4000)
    public void test00811() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 80, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, 0, 92, true);
        JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
        jsonLocation0.getLineNr();
    }

    @Test(timeout = 4000)
    public void test00912() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[1];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 746, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-211), (-2541), false);
        int int0 = uTF8StreamJsonParser0._decodeCharForError(0);
    }

    @Test(timeout = 4000)
    public void test01013() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[9];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 7, 2000, true);
        int int0 = uTF8StreamJsonParser0._decodeCharForError(2000);
    }

    @Test(timeout = 4000)
    public void test01114() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        byte[] byteArray0 = new byte[5];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1241), mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 1, (byte) 1, true);
        uTF8StreamJsonParser0.slowParseName();
    }

    @Test(timeout = 4000)
    public void test01215() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[7];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, sequenceInputStream0, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (byte) (-16), (byte) (-44), true);
        int[] intArray0 = new int[9];
        uTF8StreamJsonParser0.parseMediumName((-643), intArray0);
    }

    @Test(timeout = 4000)
    public void test01316() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[2];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1660), pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 102, (byte) 102, false);
        int[] intArray0 = new int[4];
        uTF8StreamJsonParser0.parseEscapedName(intArray0, (byte) (-56), (byte) 102, 73, (-1660));
    }

    @Test(timeout = 4000)
    public void test01417() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[5];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 127, bufferedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 0, (byte) (-114), false);
        uTF8StreamJsonParser0.nextToken();
    }

    @Test(timeout = 4000)
    public void test01518() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 45);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        dataInputStream0.read(byteArray0);
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-101), (byte) (-107), true);
        uTF8StreamJsonParser0.nextLongValue(2230L);
    }

    @Test(timeout = 4000)
    public void test01619() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) (-34);
        byteArray0[1] = (byte) (-76);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1000, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 513, (-88), true);
        uTF8StreamJsonParser0.nextIntValue((-32768));
    }

    @Test(timeout = 4000)
    public void test01720() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
        Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2281), sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-123), 283, true);
        uTF8StreamJsonParser0.nextIntValue((byte) 0);
    }

    @Test(timeout = 4000)
    public void test01821() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[9];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-1398), (-3085), false);
        uTF8StreamJsonParser0.nextIntValue((-327));
    }

    @Test(timeout = 4000)
    public void test01922() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "') as character #", false);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[5];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream0, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, 706, 0, false);
        SerializedString serializedString0 = new SerializedString("");
        uTF8StreamJsonParser0.nextFieldName(serializedString0);
    }

    @Test(timeout = 4000)
    public void test02023() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1455), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 15, Integer.MIN_VALUE, false);
        uTF8StreamJsonParser0.nextBooleanValue();
    }

    @Test(timeout = 4000)
    public void test02124() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[8];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (byte) (-34), (byte) 57, true);
        uTF8StreamJsonParser0.nextBooleanValue();
    }

    @Test(timeout = 4000)
    public void test02225() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 2000);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[5];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, bufferedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-4577), (-4577), false);
        uTF8StreamJsonParser0.nextBooleanValue();
    }

    @Test(timeout = 4000)
    public void test02326() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[8];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (byte) 6, (byte) 57, true);
        uTF8StreamJsonParser0.nextBooleanValue();
    }

    @Test(timeout = 4000)
    public void test02427() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[2];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 123, (-32768), false);
        uTF8StreamJsonParser0.loadMore();
    }

    @Test(timeout = 4000)
    public void test02528() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2085);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[2];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2085, pushbackInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2085, (-593), true);
        uTF8StreamJsonParser0._skipCR();
    }

    @Test(timeout = 4000)
    public void test02629() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[8];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-64), (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (byte) (-89), (byte) 39, false);
        uTF8StreamJsonParser0._reportInvalidToken("2t%xAJX$", "Q,EfRq_?o(iQp9\"b");
    }

    @Test(timeout = 4000)
    public void test02730() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[6];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-101), mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 125, (byte) (-73), false);
        uTF8StreamJsonParser0._reportInvalidToken("'S+v)i", "1z#,5m");
    }

    @Test(timeout = 4000)
    public void test02831() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        File file0 = MockFile.createTempFile("Unexpected character (", "Unexpected character (");
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2684), mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 772, (byte) 0, true);
        uTF8StreamJsonParser0._reportInvalidInitial((byte) (-36));
    }

    @Test(timeout = 4000)
    public void test02932() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        byte[] byteArray0 = new byte[8];
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-69), pipedInputStream0, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, 1619, (byte) (-18), false);
        uTF8StreamJsonParser0._releaseBuffers();
    }

    @Test(timeout = 4000)
    public void test03033() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[9];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 3511, (byte) 0, true);
        uTF8StreamJsonParser0._releaseBuffers();
    }

    @Test(timeout = 4000)
    public void test03134() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, 377);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, dataInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-103), (byte) 0, true);
        uTF8StreamJsonParser0._parseNumber((byte) 3);
    }

    @Test(timeout = 4000)
    public void test03235() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[6];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 10, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (byte) (-17), false);
        uTF8StreamJsonParser0._parseNumber((byte) (-114));
    }

    @Test(timeout = 4000)
    public void test03336() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[9];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2398, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 65, 48, false);
        uTF8StreamJsonParser0._parseName(881);
    }

    @Test(timeout = 4000)
    public void test03437() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, bufferedInputStream0, objectCodec0, bytesToNameCanonicalizer0, (byte[]) null, 0, 2000, true);
        uTF8StreamJsonParser0._parseAposName();
    }

    @Test(timeout = 4000)
    public void test03538() throws Throwable {
        byte[] byteArray0 = new byte[7];
        IOContext iOContext0 = new IOContext((BufferRecycler) null, "6 +\"B+R>u?l~", false);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 73, mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 7, 7, false);
        uTF8StreamJsonParser0._handleOddName(73);
    }

    @Test(timeout = 4000)
    public void test03639() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[1];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = null;
        uTF8StreamJsonParser0 = new UTF8StreamJsonParser((IOContext) null, (-2), pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-124), (-2), true);
    }

    @Test(timeout = 4000)
    public void test03740() throws Throwable {
        int[] intArray0 = new int[1];
        UTF8StreamJsonParser.growArrayBy(intArray0, (-2148));
    }

    @Test(timeout = 4000)
    public void test03841() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        Object object0 = new Object();
        IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (byte) 56, (-3309), false);
        uTF8StreamJsonParser0.nextToken();
    }

    @Test(timeout = 4000)
    public void test03942() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[5];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-8), 0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 0, (byte) (-77), true);
        uTF8StreamJsonParser0.getBinaryValue((Base64Variant) null);
    }

    @Test(timeout = 4000)
    public void test04043() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1455), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 15, Integer.MIN_VALUE, false);
        JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
        jsonLocation0.getColumnNr();
    }

    @Test(timeout = 4000)
    public void test04044() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1455), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 15, Integer.MIN_VALUE, false);
        JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
        jsonLocation0.getCharOffset();
    }

    @Test(timeout = 4000)
    public void test04045() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1455), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 15, Integer.MIN_VALUE, false);
        JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
        jsonLocation0.getByteOffset();
    }

    @Test(timeout = 4000)
    public void test04046() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1455), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 15, Integer.MIN_VALUE, false);
        JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
        jsonLocation0.getLineNr();
    }

    @Test(timeout = 4000)
    public void test04147() throws Throwable {
        int[] intArray0 = UTF8StreamJsonParser.growArrayBy((int[]) null, 254);
    }

    @Test(timeout = 4000)
    public void test04248() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
        byte[] byteArray0 = new byte[3];
        byteArray0[1] = (byte) 43;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-2), (-2139), false);
        uTF8StreamJsonParser0._reportInvalidToken("");
    }

    @Test(timeout = 4000)
    public void test04349() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[1];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 255, 191, true);
        uTF8StreamJsonParser0._skipCR();
        uTF8StreamJsonParser0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test04450() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2626, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 1455, (byte) 0, false);
        uTF8StreamJsonParser0._skipCR();
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test04551() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[9];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (-256), 0, true);
        uTF8StreamJsonParser0._skipCR();
    }

    @Test(timeout = 4000)
    public void test04652() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[9];
        byteArray0[7] = (byte) (-61);
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 7, 2000, true);
        uTF8StreamJsonParser0._reportInvalidToken("fL_?Qx<(wwxMQ");
    }

    @Test(timeout = 4000)
    public void test04753() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        byteArray0[2] = (byte) 107;
        byteArray0[3] = (byte) (-101);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 45);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        dataInputStream0.readShort();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (byte) (-107), true);
        uTF8StreamJsonParser0.nextLongValue(2230L);
    }

    @Test(timeout = 4000)
    public void test04854() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[2];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 73, (byte) 33, false);
        uTF8StreamJsonParser0._decodeEscaped();
    }

    @Test(timeout = 4000)
    public void test04955() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        byteArray0[6] = (byte) 9;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 45);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        dataInputStream0.readShort();
        dataInputStream0.readFloat();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (byte) (-107), true);
        uTF8StreamJsonParser0.nextLongValue(2230L);
    }

    @Test(timeout = 4000)
    public void test05056() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[0];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 287, 273, false);
        uTF8StreamJsonParser0._matchToken("}ToZN/#\"Hzslw/Ey>g", 287);
    }

    @Test(timeout = 4000)
    public void test05157() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
        byte[] byteArray0 = new byte[8];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 514, (-1623));
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 500, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-1273), (byte) (-54), true);
        uTF8StreamJsonParser0._matchToken("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", 98);
    }

    @Test(timeout = 4000)
    public void test05258() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.JsonLocation", true);
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-603), (-1667));
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-642), (-603), true);
        uTF8StreamJsonParser0._handleInvalidNumberStart(603, false);
    }

    @Test(timeout = 4000)
    public void test05359() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) 73, (byte) 73, true);
        uTF8StreamJsonParser0._handleApos();
    }

    @Test(timeout = 4000)
    public void test05460() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-256), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-5), (byte) (-5), true);
        uTF8StreamJsonParser0._handleUnexpectedValue(0);
    }

    @Test(timeout = 4000)
    public void test05561() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) (-5);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pushbackInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 0, (-2218), true);
        uTF8StreamJsonParser0._skipString();
    }

    @Test(timeout = 4000)
    public void test05662() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 32;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 940);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-44), (-2074), false);
        uTF8StreamJsonParser0._skipString();
    }

    @Test(timeout = 4000)
    public void test05763() throws Throwable {
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
        IOContext iOContext0 = new IOContext((BufferRecycler) null, sequenceInputStream0, true);
        DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[5];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1558), dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-1558), 0, true);
        uTF8StreamJsonParser0._skipString();
    }

    @Test(timeout = 4000)
    public void test05864() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        byteArray0[2] = (byte) 120;
        byteArray0[3] = (byte) (-101);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 45);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        dataInputStream0.readShort();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (byte) (-107), true);
        uTF8StreamJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test05965() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        byteArray0[2] = (byte) 120;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 45);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        dataInputStream0.readShort();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (byte) (-107), true);
        uTF8StreamJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test06066() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, "ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER", false);
        PipedInputStream pipedInputStream0 = new PipedInputStream(32);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[8];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 18, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 117, 16, false);
        uTF8StreamJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test06167() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "KeQ>8", true);
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-1402), 27, true);
        uTF8StreamJsonParser0._finishString();
    }

    @Test(timeout = 4000)
    public void test06268() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[5];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3216, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 4304, (byte) 0, true);
        uTF8StreamJsonParser0._parseAposName();
    }

    @Test(timeout = 4000)
    public void test06369() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 2000);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pipedInputStream0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[4];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 0, (byte) 18, true);
        uTF8StreamJsonParser0._parseAposName();
    }

    @Test(timeout = 4000)
    public void test06470() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[7];
        Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 829, pushbackInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 97, 123, true);
        uTF8StreamJsonParser0._handleOddName((byte) 97);
    }

    @Test(timeout = 4000)
    public void test06571() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, "8n5D`yg^|E7HA]", true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[4];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1021, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (-3276), true);
        uTF8StreamJsonParser0._parseName(0);
    }

    @Test(timeout = 4000)
    public void test06672() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[4];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 0, 0, true);
        uTF8StreamJsonParser0._handleOddName((-4592));
    }

    @Test(timeout = 4000)
    public void test06773() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1455), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 15, Integer.MIN_VALUE, false);
        int[] intArray0 = new int[5];
        uTF8StreamJsonParser0.parseEscapedName(intArray0, (-1455), (-1455), (byte) 43, (-238));
    }

    @Test(timeout = 4000)
    public void test06874() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[5];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 7, (-1600), false);
        int[] intArray0 = new int[2];
        uTF8StreamJsonParser0.parseEscapedName(intArray0, 283, 0, (byte) 91, (byte) 7);
    }

    @Test(timeout = 4000)
    public void test06975() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 53, (byte) 0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 128, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 0, (-3760), false);
        uTF8StreamJsonParser0.slowParseName();
    }

    @Test(timeout = 4000)
    public void test07076() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false, true).when(enumeration0).hasMoreElements();
        doReturn((Object) null).when(enumeration0).nextElement();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2000, 2000, true);
        uTF8StreamJsonParser0.slowParseName();
    }

    @Test(timeout = 4000)
    public void test07177() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[0];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, pipedInputStream0, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, 993, 2000, true);
        uTF8StreamJsonParser0.slowParseName();
    }

    @Test(timeout = 4000)
    public void test07278() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, "~z'", true);
        byte[] byteArray0 = new byte[2];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1776, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 56, 57, true);
        uTF8StreamJsonParser0.parseLongName(57);
    }

    @Test(timeout = 4000)
    public void test07379() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[8];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (byte) 6, (byte) 57, true);
        uTF8StreamJsonParser0.parseLongName(633);
    }

    @Test(timeout = 4000)
    public void test07480() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[9];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2398, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 65, 48, false);
        uTF8StreamJsonParser0._parseName(200);
    }

    @Test(timeout = 4000)
    public void test07581() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1455), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 15, Integer.MIN_VALUE, false);
        uTF8StreamJsonParser0._parseNumber((-3126));
        JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
        jsonLocation0.getColumnNr();
    }

    @Test(timeout = 4000)
    public void test07582() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1455), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 15, Integer.MIN_VALUE, false);
        uTF8StreamJsonParser0._parseNumber((-3126));
        JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
        jsonLocation0.getCharOffset();
    }

    @Test(timeout = 4000)
    public void test07583() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1455), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 15, Integer.MIN_VALUE, false);
        uTF8StreamJsonParser0._parseNumber((-3126));
        JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
        jsonLocation0.getLineNr();
    }

    @Test(timeout = 4000)
    public void test07584() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1455), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 15, Integer.MIN_VALUE, false);
        uTF8StreamJsonParser0._parseNumber((-3126));
        JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getCurrentLocation();
        jsonLocation0.getByteOffset();
    }

    @Test(timeout = 4000)
    public void test07685() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        byteArray0[5] = (byte) 56;
        byteArray0[6] = (byte) 9;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 45);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        dataInputStream0.readShort();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (byte) (-107), true);
        long long0 = uTF8StreamJsonParser0.nextLongValue(2230L);
        uTF8StreamJsonParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test07686() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        byteArray0[5] = (byte) 56;
        byteArray0[6] = (byte) 9;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 45);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        dataInputStream0.readShort();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (byte) (-107), true);
        long long0 = uTF8StreamJsonParser0.nextLongValue(2230L);
    }

    @Test(timeout = 4000)
    public void test07787() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1455), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 15, Integer.MIN_VALUE, false);
        long long0 = uTF8StreamJsonParser0.nextLongValue((byte) 43);
        uTF8StreamJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test07788() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1455), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 15, Integer.MIN_VALUE, false);
        long long0 = uTF8StreamJsonParser0.nextLongValue((byte) 43);
    }

    @Test(timeout = 4000)
    public void test07889() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[0];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2000, (-1511), false);
        uTF8StreamJsonParser0.nextTextValue();
        uTF8StreamJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test07990() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[9];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 61, 1316, false);
        uTF8StreamJsonParser0.nextTextValue();
    }

    @Test(timeout = 4000)
    public void test08091() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[4];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 33, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 1248, 2000, true);
        uTF8StreamJsonParser0.nextFieldName((SerializableString) null);
    }

    @Test(timeout = 4000)
    public void test08192() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        byteArray0[5] = (byte) 56;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 45);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        dataInputStream0.readShort();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (byte) (-107), true);
        uTF8StreamJsonParser0.nextLongValue(2230L);
    }

    @Test(timeout = 4000)
    public void test08293() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[8];
        byteArray0[2] = (byte) 107;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 45);
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        dataInputStream0.readShort();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (byte) (-107), true);
        uTF8StreamJsonParser0.nextToken();
    }

    @Test(timeout = 4000)
    public void test08394() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 911);
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[1];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pushbackInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 254, true);
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, byteArrayBuilder0, byteArray0);
    }

    @Test(timeout = 4000)
    public void test08495() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[9];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 197, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 0, 0, false);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("FLOAT", false);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
        uTF8StreamJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) objectOutputStream0);
    }

    @Test(timeout = 4000)
    public void test08596() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-1), (byte) (-21), false);
        int int0 = uTF8StreamJsonParser0.getTextOffset();
    }

    @Test(timeout = 4000)
    public void test08697() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[8];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (byte) 6, (byte) 57, true);
        int int0 = uTF8StreamJsonParser0.getTextLength();
    }

    @Test(timeout = 4000)
    public void test08798() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[6];
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2110), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-683), (byte) 0, true);
        char[] charArray0 = uTF8StreamJsonParser0.getTextCharacters();
    }

    @Test(timeout = 4000)
    public void test08899() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 940);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-44), (-2074), false);
        JsonToken jsonToken0 = JsonToken.VALUE_STRING;
        String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    }

    @Test(timeout = 4000)
    public void test089100() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[7];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 19, (byte) 0, false);
        JsonToken jsonToken0 = JsonToken.FIELD_NAME;
        String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    }

    @Test(timeout = 4000)
    public void test090101() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[8];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 17, pipedInputStream0, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, 91, 64, true);
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
    }

    @Test(timeout = 4000)
    public void test091102() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, "ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER", false);
        PipedInputStream pipedInputStream0 = new PipedInputStream(32);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[8];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 18, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 117, 16, false);
        String string0 = uTF8StreamJsonParser0.getValueAsString("ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER");
    }

    @Test(timeout = 4000)
    public void test092103() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[7];
        Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) 39, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 34, 152, true);
        String string0 = uTF8StreamJsonParser0.getValueAsString();
    }

    @Test(timeout = 4000)
    public void test093104() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1455), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 15, Integer.MIN_VALUE, false);
        String string0 = uTF8StreamJsonParser0.getText();
    }

    @Test(timeout = 4000)
    public void test094105() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) (-34);
        byteArray0[1] = (byte) (-76);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1000, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 513, (-88), false);
        int int0 = uTF8StreamJsonParser0.nextIntValue((-32768));
        uTF8StreamJsonParser0.isClosed();
    }

    @Test(timeout = 4000)
    public void test094106() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) (-34);
        byteArray0[1] = (byte) (-76);
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1000, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 513, (-88), false);
        int int0 = uTF8StreamJsonParser0.nextIntValue((-32768));
    }

    @Test(timeout = 4000)
    public void test095107() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[8];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 17, pipedInputStream0, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, 91, 64, true);
        uTF8StreamJsonParser0._closeInput();
        uTF8StreamJsonParser0.hasTextCharacters();
    }

    @Test(timeout = 4000)
    public void test096108() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[5];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, pipedInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 7, (-1600), false);
        boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast((-2397));
    }

    @Test(timeout = 4000)
    public void test097109() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[5];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2, (byte) 34, true);
        uTF8StreamJsonParser0._loadToHaveAtLeast(1202);
    }

    @Test(timeout = 4000)
    public void test098110() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-2), (-2139), false);
        boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast(270);
        byteArrayInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test098111() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-2), (-2139), false);
        boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast(270);
    }

    @Test(timeout = 4000)
    public void test099112() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[8];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (byte) 6, (byte) 57, true);
        boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast((-3095));
    }

    @Test(timeout = 4000)
    public void test100113() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        PipedInputStream pipedInputStream0 = new PipedInputStream(1517);
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[2];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 45, pushbackInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-2592), 262145, true);
        uTF8StreamJsonParser0._loadToHaveAtLeast(2401);
    }

    @Test(timeout = 4000)
    public void test101114() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false, false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[9];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 3511, (byte) 0, true);
        uTF8StreamJsonParser0.nextBooleanValue();
    }

    @Test(timeout = 4000)
    public void test102115() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[5];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 240, 8, false);
        uTF8StreamJsonParser0._reportInvalidToken("N/A", "N/A");
    }

    @Test(timeout = 4000)
    public void test103116() throws Throwable {
        IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1808), pushbackInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) 0, (byte) 0, true);
        uTF8StreamJsonParser0._reportInvalidOther((byte) 0, 40);
    }

    @Test(timeout = 4000)
    public void test104117() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, (byte[]) null, 2000, 102, false);
        uTF8StreamJsonParser0._reportInvalidOther(0);
    }

    @Test(timeout = 4000)
    public void test105118() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 9, (byte) 0, false);
        Object object0 = uTF8StreamJsonParser0.getInputSource();
    }

    @Test(timeout = 4000)
    public void test106119() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[3];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, pipedInputStream0, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (byte) (-120), (byte) (-120), true);
        uTF8StreamJsonParser0._reportInvalidChar(365);
    }

    @Test(timeout = 4000)
    public void test107120() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        byte[] byteArray0 = new byte[4];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1000, (-4204), true);
        JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
        jsonLocation0.getCharOffset();
    }

    @Test(timeout = 4000)
    public void test108121() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[8];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-319), mockFileInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 0, (-2784), true);
        uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
        uTF8StreamJsonParser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test109122() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        byte[] byteArray0 = new byte[4];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2074), mockFileInputStream0, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, (byte) 92, (byte) 0, false);
        uTF8StreamJsonParser0._reportInvalidToken("");
    }

    @Test(timeout = 4000)
    public void test110123() throws Throwable {
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(objectCodec0).toString();
        BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[9];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 3511, (byte) 0, true);
        ObjectCodec objectCodec1 = uTF8StreamJsonParser0.getCodec();
    }
}
