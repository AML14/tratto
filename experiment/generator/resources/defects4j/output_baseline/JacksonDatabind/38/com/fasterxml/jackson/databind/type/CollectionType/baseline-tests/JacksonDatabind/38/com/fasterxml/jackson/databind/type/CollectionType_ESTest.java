/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 00:56:18 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.Collection;
import java.util.HashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CollectionType_ESTest extends CollectionType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (JavaType) simpleType0);
        String string0 = collectionType0.toString();
        collectionType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (JavaType) simpleType0);
        String string0 = collectionType0.toString();
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        Class<Object> class1 = Object.class;
        JavaType javaType0 = collectionType0._narrow(class1);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (JavaType) simpleType0);
        CollectionType collectionType1 = collectionType0.withValueHandler(class0);
        collectionType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        CollectionType collectionType1 = collectionType0.withContentValueHandler(typeFactory0);
        collectionType1.equals((Object) collectionType0);
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        CollectionType collectionType1 = collectionType0.withContentValueHandler(typeFactory0);
        collectionType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
        JavaType[] javaTypeArray0 = new JavaType[0];
        ReferenceType referenceType0 = new ReferenceType(class0, typeBindings0, collectionLikeType0, javaTypeArray0, simpleType0, ";B#Cz", ";B#Cz", true);
        CollectionType collectionType0 = new CollectionType(referenceType0, referenceType0);
        CollectionType collectionType1 = collectionType0.withStaticTyping();
    }

    @Test(timeout = 4000)
    public void test57() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        Class<String> class1 = String.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        Integer integer0 = new Integer(1);
        CollectionType collectionType1 = collectionType0.withTypeHandler(integer0);
        collectionType1.equals((Object) collectionType0);
    }

    @Test(timeout = 4000)
    public void test58() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        Class<String> class1 = String.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        Integer integer0 = new Integer(1);
        CollectionType collectionType1 = collectionType0.withTypeHandler(integer0);
        collectionType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test69() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        CollectionType collectionType1 = collectionType0.withContentTypeHandler((Object) null);
        collectionType1.equals((Object) collectionType0);
    }

    @Test(timeout = 4000)
    public void test610() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        CollectionType collectionType1 = collectionType0.withContentTypeHandler((Object) null);
        collectionType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test711() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        JavaType javaType0 = collectionType0.withContentType(collectionType0);
    }

    @Test(timeout = 4000)
    public void test712() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        JavaType javaType0 = collectionType0.withContentType(collectionType0);
        javaType0.equals((Object) collectionType0);
    }

    @Test(timeout = 4000)
    public void test713() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        JavaType javaType0 = collectionType0.withContentType(collectionType0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test814() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
        CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) referenceType0);
        JavaType javaType0 = collectionType0.withContentType(referenceType0);
    }

    @Test(timeout = 4000)
    public void test815() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
        CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) referenceType0);
        JavaType javaType0 = collectionType0.withContentType(referenceType0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test916() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        CollectionType collectionType1 = collectionType0.withStaticTyping();
        collectionType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test917() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        CollectionType collectionType1 = collectionType0.withStaticTyping();
        collectionType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test918() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        CollectionType collectionType1 = collectionType0.withStaticTyping();
        collectionType1.equals((Object) collectionType0);
    }
}
