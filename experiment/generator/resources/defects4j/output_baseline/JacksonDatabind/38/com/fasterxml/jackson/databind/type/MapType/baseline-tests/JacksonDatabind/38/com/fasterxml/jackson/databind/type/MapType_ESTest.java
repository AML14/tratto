/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 00:56:27 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MapType_ESTest extends MapType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        MapType mapType0 = MapType.construct((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
        Class<String> class1 = String.class;
        JavaType javaType0 = mapType0._narrow(class1);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Map> class0 = Map.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        MapType mapType1 = mapType0.withContentValueHandler(class0);
        mapType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        MapType mapType0 = MapType.construct((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
        TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
        JavaType[] javaTypeArray0 = new JavaType[5];
        JavaType javaType0 = mapType0.refine(class0, typeBindings0, simpleType0, javaTypeArray0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Map> class0 = Map.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        MapType mapType1 = mapType0.withTypeHandler(mapType0);
        mapType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        MapType mapType0 = MapType.construct((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
        Integer integer0 = new Integer(48);
        MapType mapType1 = mapType0.withKeyValueHandler(integer0);
        mapType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Map> class0 = Map.class;
        Class<Object> class1 = Object.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
        Object object0 = new Object();
        MapType mapType1 = mapType0.withContentTypeHandler(object0);
        mapType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<Integer> class0 = Integer.class;
        Class<Object> class1 = Object.class;
        SimpleType simpleType0 = new SimpleType(class1);
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        JavaType[] javaTypeArray0 = new JavaType[4];
        javaTypeArray0[1] = (JavaType) simpleType0;
        javaTypeArray0[3] = (JavaType) simpleType0;
        MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[3], javaTypeArray0[1]);
        String string0 = mapType0.getTypeName();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Class<Integer> class0 = Integer.class;
        Class<Object> class1 = Object.class;
        SimpleType simpleType0 = new SimpleType(class1);
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        JavaType[] javaTypeArray0 = new JavaType[4];
        javaTypeArray0[1] = (JavaType) simpleType0;
        javaTypeArray0[3] = (JavaType) simpleType0;
        MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[3], javaTypeArray0[1]);
        String string0 = mapType0.getTypeName();
        mapType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
        MapType mapType0 = new MapType(mapLikeType0, mapLikeType0, mapLikeType0);
        mapType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Map> class0 = Map.class;
        Class<Object> class1 = Object.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
        MapType mapType1 = mapType0.withKeyTypeHandler(mapType0);
        mapType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Map> class0 = Map.class;
        Class<Object> class1 = Object.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
        MapType mapType1 = mapType0.withValueHandler(mapType0);
        mapType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Map> class0 = Map.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        MapType mapType1 = mapType0.withStaticTyping();
        MapType mapType2 = mapType1.withStaticTyping();
        mapType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Map> class0 = Map.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        MapType mapType1 = mapType0.withStaticTyping();
        MapType mapType2 = mapType1.withStaticTyping();
        mapType2.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Map> class0 = Map.class;
        Class<Object> class1 = Object.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
        JavaType javaType0 = mapType0.withContentType(mapType0);
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Map> class0 = Map.class;
        Class<Object> class1 = Object.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
        JavaType javaType0 = mapType0.withContentType(mapType0);
        javaType0.equals((Object) mapType0);
    }

    @Test(timeout = 4000)
    public void test1115() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Map> class0 = Map.class;
        Class<Object> class1 = Object.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
        JavaType javaType0 = mapType0.withContentType(mapType0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        MapType mapType0 = MapType.construct((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
        JavaType javaType0 = mapType0.withContentType(simpleType0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1217() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        MapType mapType0 = MapType.construct((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
        JavaType javaType0 = mapType0.withContentType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Map> class0 = Map.class;
        Class<Object> class1 = Object.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
        MapType mapType1 = mapType0.withKeyType(mapType0);
        mapType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1319() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Map> class0 = Map.class;
        Class<Object> class1 = Object.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
        MapType mapType1 = mapType0.withKeyType(mapType0);
    }

    @Test(timeout = 4000)
    public void test1320() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Map> class0 = Map.class;
        Class<Object> class1 = Object.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
        MapType mapType1 = mapType0.withKeyType(mapType0);
        mapType1.equals((Object) mapType0);
    }

    @Test(timeout = 4000)
    public void test1421() throws Throwable {
        Class<Integer> class0 = Integer.class;
        Class<Object> class1 = Object.class;
        SimpleType simpleType0 = new SimpleType(class1);
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        JavaType[] javaTypeArray0 = new JavaType[4];
        javaTypeArray0[0] = (JavaType) simpleType0;
        javaTypeArray0[1] = (JavaType) simpleType0;
        javaTypeArray0[3] = (JavaType) simpleType0;
        MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[3], javaTypeArray0[1]);
        MapType mapType1 = mapType0.withKeyType(javaTypeArray0[0]);
    }

    @Test(timeout = 4000)
    public void test1422() throws Throwable {
        Class<Integer> class0 = Integer.class;
        Class<Object> class1 = Object.class;
        SimpleType simpleType0 = new SimpleType(class1);
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        JavaType[] javaTypeArray0 = new JavaType[4];
        javaTypeArray0[0] = (JavaType) simpleType0;
        javaTypeArray0[1] = (JavaType) simpleType0;
        javaTypeArray0[3] = (JavaType) simpleType0;
        MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[3], javaTypeArray0[1]);
        MapType mapType1 = mapType0.withKeyType(javaTypeArray0[0]);
        mapType1.useStaticType();
    }
}
