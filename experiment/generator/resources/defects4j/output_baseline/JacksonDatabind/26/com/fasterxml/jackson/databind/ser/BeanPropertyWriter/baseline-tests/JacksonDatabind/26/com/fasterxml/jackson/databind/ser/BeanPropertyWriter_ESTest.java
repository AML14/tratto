/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 00:21:28 GMT 2024
 */
package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.time.chrono.ThaiBuddhistEra;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanPropertyWriter_ESTest extends BeanPropertyWriter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (JavaType) null, false, (Object) null);
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.assignTypeSerializer((TypeSerializer) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.isVirtual();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.isVirtual();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.isUnwrapping();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.isUnwrapping();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getWrapperName();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getFullName();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.writeValueAsString(beanPropertyWriter0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getSerializedName();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getMetadata();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.unwrappingWriter(nameTransformer0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = new PropertyName("IT'", "IT'");
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("IT'", "IT'");
        BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
        beanPropertyWriter2.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = new PropertyName("IT'", "IT'");
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("IT'", "IT'");
        BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
        beanPropertyWriter2.getName();
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
        objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
        String string0 = objectMapper0.writeValueAsString(coreXMLSerializers_XMLGregorianCalendarSerializer0);
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.setInternalSetting((Object) null, (Object) null);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.setInternalSetting((Object) null, (Object) null);
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = new PropertyName("IT'", "IT'");
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = new PropertyName("IT'", "IT'");
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
        beanPropertyWriter2.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonSerializer<DOMSerializer> jsonSerializer0 = (JsonSerializer<DOMSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(jsonSerializer0).toString();
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, propertyName0);
        JsonSerializer<Object> jsonSerializer1 = beanPropertyWriter0.getSerializer();
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonSerializer<DOMSerializer> jsonSerializer0 = (JsonSerializer<DOMSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(jsonSerializer0).toString();
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, propertyName0);
        JsonSerializer<Object> jsonSerializer1 = beanPropertyWriter0.getSerializer();
        beanPropertyWriter0.assignSerializer(jsonSerializer1);
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test1621() throws Throwable {
        PropertyName propertyName0 = new PropertyName("field \"");
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JsonSerializer<DOMSerializer> jsonSerializer0 = (JsonSerializer<DOMSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, propertyName0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test1722() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
        beanPropertyWriter0.assignNullSerializer(jsonSerializer0);
        beanPropertyWriter0.assignNullSerializer((JsonSerializer<Object>) null);
    }

    @Test(timeout = 4000)
    public void test1823() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
        beanPropertyWriter0.assignNullSerializer(jsonSerializer0);
        beanPropertyWriter0.assignNullSerializer(jsonSerializer0);
        beanPropertyWriter0.hasNullSerializer();
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        BeanPropertyWriter beanPropertyWriter1 = (BeanPropertyWriter) beanPropertyWriter0.readResolve();
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2025() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        beanPropertyWriter0.readResolve();
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test2126() throws Throwable {
        PropertyName propertyName0 = PropertyName.construct((String) null);
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
        Class<Integer> class0 = Integer.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(annotatedClass0, class0, ", no static serializer", class0);
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonSerializer<PipedInputStream> jsonSerializer0 = (JsonSerializer<PipedInputStream>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        Object object0 = new Object();
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, virtualAnnotatedMember0, (Annotations) null, simpleType0, jsonSerializer0, (TypeSerializer) null, simpleType0, false, object0);
        Class<Annotation> class1 = Annotation.class;
        beanPropertyWriter0.getAnnotation(class1);
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test2227() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (JavaType) null, false, (Object) null);
        Class<Annotation> class0 = Annotation.class;
        beanPropertyWriter0.findAnnotation(class0);
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test2328() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        Class<Annotation> class0 = Annotation.class;
        beanPropertyWriter0.getContextAnnotation(class0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test2430() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
        JsonFormat.Value jsonFormat_Value1 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2431() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
        JsonFormat.Value jsonFormat_Value1 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test2532() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides((AnnotationIntrospector) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2533() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides((AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test2634() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        Object object0 = new Object();
        beanPropertyWriter0.setInternalSetting(object0, object0);
        Object object1 = beanPropertyWriter0.getInternalSetting((Object) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2635() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        Object object0 = new Object();
        beanPropertyWriter0.setInternalSetting(object0, object0);
        Object object1 = beanPropertyWriter0.getInternalSetting((Object) null);
    }

    @Test(timeout = 4000)
    public void test2736() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getInternalSetting((Object) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2837() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        Object object0 = new Object();
        beanPropertyWriter0.setInternalSetting(object0, object0);
        Object object1 = beanPropertyWriter0.setInternalSetting((Object) null, (Object) null);
    }

    @Test(timeout = 4000)
    public void test2838() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        Object object0 = new Object();
        beanPropertyWriter0.setInternalSetting(object0, object0);
        Object object1 = beanPropertyWriter0.setInternalSetting((Object) null, (Object) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2939() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonInclude.Include jsonInclude_Include0 = (JsonInclude.Include) BeanPropertyWriter.MARKER_FOR_EMPTY;
        beanPropertyWriter0.removeInternalSetting(jsonInclude_Include0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3040() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.setInternalSetting((Object) null, (Object) null);
        beanPropertyWriter0.removeInternalSetting((Object) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3141() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
        beanPropertyWriter0.setInternalSetting(thaiBuddhistEra0, "");
        Integer integer0 = new Integer(2190);
        Object object0 = beanPropertyWriter0.removeInternalSetting(integer0);
    }

    @Test(timeout = 4000)
    public void test3142() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
        beanPropertyWriter0.setInternalSetting(thaiBuddhistEra0, "");
        Integer integer0 = new Integer(2190);
        Object object0 = beanPropertyWriter0.removeInternalSetting(integer0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3243() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
        beanPropertyWriter0.assignSerializer(jsonSerializer0);
        boolean boolean0 = beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test3344() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0._nullSerializer = defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER;
        boolean boolean0 = beanPropertyWriter0.hasNullSerializer();
    }

    @Test(timeout = 4000)
    public void test3445() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3446() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test3547() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test3548() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3649() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = new PropertyName("La", "La");
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3650() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = new PropertyName("La", "La");
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test3751() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
        AnnotationMap annotationMap0 = new AnnotationMap();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<PipedInputStream> class0 = PipedInputStream.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer((TypeIdResolver) null, beanPropertyWriter0);
        JsonInclude.Include jsonInclude_Include0 = (JsonInclude.Include) BeanPropertyWriter.MARKER_FOR_EMPTY;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, collectionLikeType0, (JsonSerializer<?>) null, asWrapperTypeSerializer0, collectionLikeType0, false, jsonInclude_Include0);
        Class<?> class1 = beanPropertyWriter1.getRawSerializationType();
    }

    @Test(timeout = 4000)
    public void test3752() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
        AnnotationMap annotationMap0 = new AnnotationMap();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<PipedInputStream> class0 = PipedInputStream.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        AsWrapperTypeSerializer asWrapperTypeSerializer0 = new AsWrapperTypeSerializer((TypeIdResolver) null, beanPropertyWriter0);
        JsonInclude.Include jsonInclude_Include0 = (JsonInclude.Include) BeanPropertyWriter.MARKER_FOR_EMPTY;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, collectionLikeType0, (JsonSerializer<?>) null, asWrapperTypeSerializer0, collectionLikeType0, false, jsonInclude_Include0);
        Class<?> class1 = beanPropertyWriter1.getRawSerializationType();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3853() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getPropertyType();
    }

    @Test(timeout = 4000)
    public void test3954() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        SimpleModule simpleModule0 = new SimpleModule("Hk6-ZPL");
        String string0 = objectMapper1.writeValueAsString(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test4055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.writeValueAsString(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test4156() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        String string0 = objectMapper1.writeValueAsString(beanDeserializerFactory0);
    }

    @Test(timeout = 4000)
    public void test4257() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
        String string0 = objectMapper1.writeValueAsString(objectIdGenerators_UUIDGenerator0);
    }

    @Test(timeout = 4000)
    public void test4358() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        DOMSerializer dOMSerializer0 = new DOMSerializer();
        String string0 = objectMapper0.writeValueAsString(dOMSerializer0);
    }

    @Test(timeout = 4000)
    public void test4459() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "IT'IT'");
        String string0 = objectMapper0.writeValueAsString(coreXMLSerializers_XMLGregorianCalendarSerializer0);
    }

    @Test(timeout = 4000)
    public void test4560() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFileWriter mockFileWriter0 = new MockFileWriter("JSON");
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockFileWriter0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.serializeAsOmittedField(defaultSerializerProvider_Impl0, jsonGenerator0, defaultSerializerProvider_Impl0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test4661() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.serializeAsElement(defaultSerializerProvider_Impl0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test4762() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.serializeAsPlaceholder((Object) null, (JsonGenerator) null, (SerializerProvider) null);
    }

    @Test(timeout = 4000)
    public void test4863() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        beanPropertyWriter0._nullSerializer = (JsonSerializer<Object>) beanSerializer0;
        beanPropertyWriter0.serializeAsPlaceholder((Object) null, (JsonGenerator) null, (SerializerProvider) null);
    }

    @Test(timeout = 4000)
    public void test4964() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test5065() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null, (JavaType) null, false, (Object) null);
        JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
        beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) jsonObjectFormatVisitor_Base0);
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test5166() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, true);
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<JsonSerializer> class0 = JsonSerializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        JsonSerializer<NamedType> jsonSerializer0 = (JsonSerializer<NamedType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(jsonSerializer0).toString();
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, simpleType0, jsonSerializer0, (TypeSerializer) null, simpleType0, true, annotationIntrospector0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        beanPropertyWriter0.depositSchemaProperty(objectNode0, (SerializerProvider) defaultSerializerProvider_Impl0);
        objectNode0.textValue();
    }

    @Test(timeout = 4000)
    public void test5267() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test5368() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        ObjectMapper objectMapper0 = new ObjectMapper();
        POJONode pOJONode0 = new POJONode(objectMapper0);
        beanPropertyWriter0.get(pOJONode0);
    }

    @Test(timeout = 4000)
    public void test5469() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        String string0 = beanPropertyWriter1.toString();
    }

    @Test(timeout = 4000)
    public void test5470() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        String string0 = beanPropertyWriter1.toString();
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test5571() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
        beanPropertyWriter1.assignSerializer(jsonSerializer0);
        beanPropertyWriter1.toString();
        beanPropertyWriter1.hasSerializer();
    }
}
