/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 22:59:48 GMT 2024
 */
package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanPropertyWriter_ESTest extends BeanPropertyWriter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
        JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base((SerializerProvider) null);
        JsonFormatVisitorWrapper jsonFormatVisitorWrapper0 = mock(JsonFormatVisitorWrapper.class, new ViolatedAssumptionAnswer());
        doReturn(jsonObjectFormatVisitor_Base0).when(jsonFormatVisitorWrapper0).expectObjectFormat(any(com.fasterxml.jackson.databind.JavaType.class));
        objectMapper0.acceptJsonFormatVisitor(class0, jsonFormatVisitorWrapper0);
        objectMapper0.mixInCount();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = null;
        beanPropertyWriter0 = new BeanPropertyWriter((BeanPropertyWriter) null);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder("1vxpbZLC", annotationIntrospector0, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.instance;
        BeanPropertyWriter beanPropertyWriter0 = null;
        beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, (JavaType) null, coreXMLSerializers_XMLGregorianCalendarSerializer0, (TypeSerializer) null, (JavaType) null, false, "1vxpbZLC");
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("' (", "' (");
        CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
        objectMapper0.writeValue((File) mockFile0, (Object) coreXMLSerializers_XMLGregorianCalendarSerializer0);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        MockFile mockFile0 = new MockFile("' (", "' (");
        CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
        objectMapper1.writeValue((File) mockFile0, (Object) coreXMLSerializers_XMLGregorianCalendarSerializer0);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        MockFile mockFile0 = new MockFile(" out of ", " out of ");
        DateFormat dateFormat0 = MockDateFormat.getInstance();
        objectMapper0.writeValue((File) mockFile0, (Object) dateFormat0);
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        MockFile mockFile0 = new MockFile(" out of ", " out of ");
        DateFormat dateFormat0 = MockDateFormat.getInstance();
        objectMapper1.writeValue((File) mockFile0, (Object) dateFormat0);
        mockFile0.length();
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("");
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "");
        objectMapper1.writeValueAsString(mockFile0);
    }
}
