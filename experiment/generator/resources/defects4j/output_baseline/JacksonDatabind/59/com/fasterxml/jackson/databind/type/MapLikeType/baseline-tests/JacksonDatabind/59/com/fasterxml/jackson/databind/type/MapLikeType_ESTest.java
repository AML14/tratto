/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 04:34:36 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBase;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class MapLikeType_ESTest extends MapLikeType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        MapLikeType.construct(class0, simpleType0, simpleType0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        mapType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        mapLikeType0.isTrueMapType();
        MapLikeType.construct(class0, simpleType0, mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.equals(mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.buildCanonicalName();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.getGenericSignature();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        mapLikeType0.getErasedSignature();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.isThrowable();
        mapLikeType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
        MapType mapType1 = mapType0.withValueHandler(simpleType0);
        mapType0.withKeyValueHandler(mapType1);
        mapType1.hasHandlers();
        mapType1.isContainerType();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.toString();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        typeFactory0.constructRawMapLikeType(class0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        mapLikeType0.withKeyTypeHandler(simpleType0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        Class<Integer> class0 = Integer.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        mapLikeType0.withTypeHandler(class0);
        MapLikeType.construct(class0, mapLikeType0, mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.getContentValueHandler();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.withKeyType(mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0._narrow(class0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0._narrow(class0);
        mapLikeType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.withValueHandler(class0);
        MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
        mapLikeType1.buildCanonicalName();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.isContainerType();
        JavaType javaType0 = mapLikeType0.withContentType(mapLikeType0);
        javaType0.equals(mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        Class<Object> class0 = Object.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readerFor(class0);
        TypeFactory typeFactory0 = TypeFactory.instance;
        System.setCurrentTimeMillis((-2147483648L));
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        Class<ArrayType> class0 = ArrayType.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        mapLikeType0.equals(simpleType0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        Class<MapType> class0 = MapType.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        JavaType[] javaTypeArray0 = new JavaType[0];
        mapLikeType0.refine(class0, (TypeBindings) null, simpleType0, javaTypeArray0);
        Class<String> class1 = String.class;
        MapLikeType.construct(class1, mapLikeType0, simpleType0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        Class<Integer> class0 = Integer.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        MapLikeType mapLikeType1 = mapLikeType0.withContentValueHandler(class0);
        MapLikeType.construct(class0, mapLikeType1, simpleType0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        Class<CollectionType> class0 = CollectionType.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class1 = HashMap.class;
        Class<HashMap> class2 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class2);
        MapLikeType mapLikeType0 = mapType0.withKeyTypeHandler(class0);
        MapLikeType mapLikeType1 = mapType0.withKeyType(mapLikeType0);
        typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) mapType0, (JavaType) mapLikeType1);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
        mapLikeType1.withStaticTyping();
        mapLikeType1.buildCanonicalName();
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        Class<Object> class1 = Object.class;
        MapLikeType mapLikeType1 = MapLikeType.construct(class1, mapLikeType0, mapLikeType0);
        mapLikeType0.equals(mapLikeType1);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        JavaType javaType0 = mapLikeType0._narrow(class0);
        javaType0.equals(mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.getContentTypeHandler();
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        Class<MapLikeType> class0 = MapLikeType.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        mapLikeType0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 3);
        coreXMLDeserializers_Std0.getValueType();
        MapLikeType.construct(class0, (JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.withContentTypeHandler(class0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        mapLikeType0.withKeyValueHandler(class0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        Class<Object> class0 = Object.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        mapLikeType0.withContentType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);
        mapLikeType0.withKeyType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Class<Object> class0 = Object.class;
        TypeBase._bogusSuperClass(class0);
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        mapType0.hasHandlers();
        JavaType javaType0 = mapType0._narrow(class0);
        MapType mapType1 = new MapType(mapType0, javaType0, javaType0);
        mapType1.withKeyTypeHandler(mapType0);
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        mapType1.equals(javaType0);
        System.setCurrentTimeMillis(0L);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        Class<Integer> class0 = Integer.class;
        SimpleType simpleType0 = new SimpleType(class0);
        FileSystemHandling.shouldAllThrowIOExceptions();
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, (JavaType) null, simpleType0);
        mapLikeType0.buildCanonicalName();
    }
}
