/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 04:51:55 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassStack;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.type.TypeParser;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.io.File;
import java.lang.reflect.Array;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeFactory_ESTest extends TypeFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructMapType(class0, class0, class0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<DeserializationFeature> class0 = DeserializationFeature.class;
        typeFactory0.constructType((Type) class0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeFactory.rawClass((Type) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TypeFactory.unknownType();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        typeFactory0.constructRawCollectionLikeType(class0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayType> class0 = ArrayType.class;
        typeFactory0.constructCollectionLikeType(class0, class0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.withCache((LRUMap<Object, JavaType>) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructFromCanonical(">&En7*n.]1-wrU,");
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructType((Type) class0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        typeFactory0.constructCollectionType(class0, class0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Class<MapperFeature> class0 = MapperFeature.class;
        typeFactory0.findTypeParameters((JavaType) simpleType0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
        typeFactory1.findClass("5&7$IuY");
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
        arrayType0.withStaticTyping();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        typeFactory0.uncheckedSimpleType(class0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        typeFactory0.uncheckedSimpleType(class0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        objectMapper0.canSerialize(class0);
        File file0 = MockFile.createTempFile(" WvQc(G[u~O:$MU\";", " WvQc(G[u~O:$MU\";");
        objectMapper0.writeValue(file0, (Object) class0);
        ArrayList<MapperFeature> arrayList0 = new ArrayList<MapperFeature>();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        TypeFactory.rawClass(simpleType0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = TypeFactory.unknownType();
        typeFactory0.constructType((Type) javaType0, javaType0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        typeFactory0.constructType((Type) collectionType0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructRawMapType(class0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructFromCanonical("char");
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 0);
        typeFactory0.constructParametricType(class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        Class<ObjectMapper.DefaultTyping>[] classArray0 = (Class<ObjectMapper.DefaultTyping>[]) Array.newInstance(Class.class, 1);
        typeFactory0.constructParametricType(class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        Class<SimpleType> class1 = SimpleType.class;
        Class<SimpleType>[] classArray0 = (Class<SimpleType>[]) Array.newInstance(Class.class, 0);
        typeFactory0.constructParametrizedType(class0, class1, classArray0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructParametrizedType(class0, class0, (JavaType[]) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0._findPrimitive("HmG");
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        doReturn((String) null).when(typeModifier0).toString();
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        typeFactory1.withModifier(typeModifier1);
        Class<Integer> class0 = Integer.TYPE;
        typeFactory1.constructType((Type) class0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1410, 1410);
        TypeFactory typeFactory0 = new TypeFactory(lRUMap0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Integer> class0 = Integer.class;
        typeFactory0.constructRawMapLikeType(class0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.withModifier((TypeModifier) null);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        typeFactory0.constructRawMapLikeType(class0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapType> class0 = MapType.class;
        typeFactory0.findTypeParameters(class0, class0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructRawMapLikeType(class0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructFromCanonical("com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer");
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
        typeFactory0.constructMapLikeType(class0, class0, class0);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
        doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
        doReturn((Type) null).when(parameterizedType0).getRawType();
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        typeFactory0._fromParamType((ClassStack) null, parameterizedType0, typeBindings0);
        String string0 = "AiDrbzM!QQ$5^jQ:&=O";
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        Class<Object> class0 = Object.class;
        typeFactory0.constructReferenceType(class0, simpleType0);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        Class<String> class0 = String.class;
        typeFactory0.constructGeneralizedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        typeFactory0.findTypeParameters(class0, class0, typeBindings0);
        ClassLoader.getSystemClassLoader();
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayList<MapperFeature> arrayList0 = new ArrayList<MapperFeature>();
        objectMapper0.readerForUpdating(arrayList0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.findClass("float");
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructType((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.clearCache();
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.findClass("com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer");
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        typeFactory0.moreSpecificType(simpleType0, simpleType0);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
        typeFactory0.constructArrayType(class0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        SimpleType simpleType1 = TypeFactory.CORE_TYPE_LONG;
        typeFactory0.moreSpecificType(simpleType1, simpleType0);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<String> class0 = String.class;
        typeFactory0.constructRawMapLikeType(class0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        Class<Properties> class0 = Properties.class;
        TypeFactory.rawClass(class0);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        typeFactory0.constructSpecializedType(javaType0, class0);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        Class<Properties> class0 = Properties.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructType((Type) class0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Integer> class0 = Integer.TYPE;
        typeFactory0.constructRawMapLikeType(class0);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructFromCanonical("boolean");
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<POJONode> class0 = POJONode.class;
        typeFactory0.constructRawMapLikeType(class0);
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("short");
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) collectionLikeType0);
        Class<Properties> class1 = Properties.class;
        typeFactory0.constructType((Type) class1, (Class<?>) class1);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<DeserializationFeature> class0 = DeserializationFeature.class;
        TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        typeFactory0.constructGeneralizedType(resolvedRecursiveType0, class0);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
        Class<LinkedList> class1 = LinkedList.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) simpleType0);
        CollectionLikeType collectionLikeType0 = collectionType0.withStaticTyping();
        collectionLikeType0.findTypeParameters(class1);
        MapLikeType mapLikeType0 = new MapLikeType(collectionLikeType0, simpleType0, collectionType0);
        CollectionLikeType collectionLikeType1 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) mapLikeType0);
        SimpleType simpleType1 = TypeFactory.CORE_TYPE_ENUM;
        Properties properties0 = new Properties();
        properties0.put(typeFactory0, simpleType1);
        Class<Object> class2 = Object.class;
        typeFactory0.constructArrayType(class2);
        typeFactory0.constructRawMapLikeType(class2);
        Class<Object> class3 = Object.class;
        typeFactory0.constructGeneralizedType(collectionLikeType1, class3);
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("int");
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        Class<MapType> class0 = MapType.class;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("long");
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(3, 5247);
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassLoader classLoader1 = classLoader0.getParent();
        TypeFactory typeFactory1 = new TypeFactory(lRUMap0, typeParser0, typeModifierArray0, classLoader1);
        typeFactory1.constructType((Type) class0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeParser typeParser1 = typeParser0.withFactory(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[7];
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassLoader classLoader1 = classLoader0.getParent();
        TypeFactory typeFactory1 = new TypeFactory((LRUMap<Object, JavaType>) null, typeParser1, typeModifierArray0, classLoader1);
        Class<LinkedList> class0 = LinkedList.class;
        typeFactory1.constructRawCollectionType(class0);
        typeFactory1.withModifier(typeModifierArray0[2]);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        doReturn((String) null).when(typeModifier0).toString();
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        Class<RuntimeException> class0 = RuntimeException.class;
        typeFactory1.constructRawMapLikeType(class0);
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        Class<Properties> class0 = Properties.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructType((Type) class0, (Class<?>) class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
        objectMapper0.readerForUpdating(typeFactory0);
        ClassLoader.getSystemClassLoader();
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.findClass("void");
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        SimpleType simpleType1 = TypeFactory.CORE_TYPE_LONG;
        typeFactory0.moreSpecificType(simpleType0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test7171() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn(simpleType0).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        typeFactory1.constructRawMapLikeType(class0);
    }

    @Test(timeout = 4000)
    public void test7272() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        CollectionType collectionType0 = (CollectionType) typeFactory0.constructCollectionLikeType(class0, class0);
        CollectionType collectionType1 = (CollectionType) collectionType0.withTypeHandler(class0);
        typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) collectionType1);
        Class<Properties> class1 = Properties.class;
        typeFactory0.constructType((Type) class1, (Class<?>) class1);
        typeFactory0.findClass("p");
    }

    @Test(timeout = 4000)
    public void test7373() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.findClass("byte");
    }

    @Test(timeout = 4000)
    public void test7474() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("double");
    }

    @Test(timeout = 4000)
    public void test7575() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
        objectMapper0.readerForUpdating(objectIdGenerators_UUIDGenerator0);
        ClassLoader.getSystemClassLoader();
    }

    @Test(timeout = 4000)
    public void test7676() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        Class<SerializationFeature> class1 = SerializationFeature.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) collectionLikeType0, (JavaType[]) null, (JavaType) simpleType0);
        CollectionType collectionType1 = collectionType0.withTypeHandler((Object) null);
        ReferenceType referenceType0 = new ReferenceType(collectionType1, collectionLikeType0);
        SimpleType simpleType1 = referenceType0.withValueHandler(collectionType1);
        typeFactory0.constructGeneralizedType(simpleType1, class1);
        typeFactory0.constructFromCanonical("com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer");
    }

    @Test(timeout = 4000)
    public void test7777() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        Class<Properties> class1 = Properties.class;
        typeFactory0.constructMapType((Class<? extends Map>) null, class0, class1);
    }

    @Test(timeout = 4000)
    public void test7878() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructFromCanonical("long");
    }

    @Test(timeout = 4000)
    public void test7979() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructType((Type) class0, (Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test8080() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
        typeFactory0.moreSpecificType(simpleType0, arrayType0);
    }

    @Test(timeout = 4000)
    public void test8181() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("boolean");
    }

    @Test(timeout = 4000)
    public void test8282() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<EnumSet> class0 = EnumSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) collectionType0);
        JavaType[] javaTypeArray0 = new JavaType[7];
        javaTypeArray0[0] = (JavaType) collectionType0;
        javaTypeArray0[2] = (JavaType) collectionType0;
        javaTypeArray0[6] = (JavaType) collectionType0;
        typeFactory0._constructSimple(class0, typeBindings0, collectionType0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test8383() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        typeFactory0.constructSpecializedType(simpleType0, class0);
        typeFactory0.findClass("");
    }

    @Test(timeout = 4000)
    public void test8484() throws Throwable {
        TypeFactory.defaultInstance();
        ObjectMapper objectMapper0 = new ObjectMapper();
        AnnotationIntrospector.ReferenceProperty.Type annotationIntrospector_ReferenceProperty_Type0 = AnnotationIntrospector.ReferenceProperty.Type.MANAGED_REFERENCE;
        AtomicReference<AnnotationIntrospector.ReferenceProperty.Type> atomicReference0 = new AtomicReference<AnnotationIntrospector.ReferenceProperty.Type>(annotationIntrospector_ReferenceProperty_Type0);
        objectMapper0.readerForUpdating(atomicReference0);
        ClassLoader.getSystemClassLoader();
    }
}
