/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 02:02:39 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AnnotationIntrospector_ESTest extends AnnotationIntrospector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
        annotationIntrospector1.findSerializationInclusionForContent((Annotated) null, jsonInclude_Include0);
        AnnotationIntrospector.nopInstance();
        JavaType javaType0 = null;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        referenceType0.withValueHandler(javaType0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        jacksonAnnotationIntrospector0.findPropertyInclusion((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        AnnotationIntrospector.ReferenceProperty.back("Ei");
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.back("g(G|");
        AnnotationIntrospector.ReferenceProperty.back("g(G|");
        annotationIntrospector_ReferenceProperty0.getType();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.allIntrospectors((Collection<AnnotationIntrospector>) null);
        AnnotationIntrospector.ReferenceProperty.Type.values();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
        objectMapper0.readerFor(class0);
        AnnotationIntrospector.nopInstance();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.getSerializerProviderInstance();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        Class<AnnotationIntrospector> class0 = AnnotationIntrospector.class;
        objectMapper0.readerFor(class0);
        AnnotationIntrospector.nopInstance();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findKeyDeserializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findDeserializer((Annotated) null);
        AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        AnnotationIntrospector.ReferenceProperty.managed("Ei");
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getDefaultCreator();
        annotationIntrospector0.findKeyDeserializer((Annotated) null);
        annotationIntrospector0.findDeserializer((Annotated) null);
        annotationIntrospector0.findReferenceType((AnnotatedMember) null);
        Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 9);
        Class<Annotation> class0 = Annotation.class;
        classArray0[4] = class0;
        classArray0[6] = classArray0[2];
        classArray0[7] = class0;
        classArray0[8] = classArray0[6];
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        annotationIntrospector0.findSerializationInclusion((Annotated) null, jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        jacksonAnnotationIntrospector0.hasAnySetterAnnotation((AnnotatedMethod) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.back("Ei");
        AnnotationIntrospector.ReferenceProperty.back("Ei");
        annotationIntrospector_ReferenceProperty0.isBackReference();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.allIntrospectors();
        annotationIntrospector0.findClassDescription((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed("Ei");
        AnnotationIntrospector.ReferenceProperty.back("Ei");
        annotationIntrospector_ReferenceProperty0.isBackReference();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getArrayDelegateCreator();
        annotationIntrospector0.findInjectableValueId((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getArrayDelegateCreator();
        annotationIntrospector0.findObjectIdInfo((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getArrayDelegateCreator();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findInjectableValueId((AnnotatedMember) null);
        annotationIntrospector0.hasRequiredMarker((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector1);
        Class<Annotation> class0 = Annotation.class;
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getWithArgsCreator();
        annotationIntrospector0.isTypeId((AnnotatedMember) null);
        PropertyName propertyName0 = PropertyName.NO_NAME;
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getWithArgsCreator();
        annotationIntrospector0.isTypeId((AnnotatedMember) null);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<Integer> class0 = Integer.class;
        Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
        Class<SimpleObjectIdResolver> class2 = SimpleObjectIdResolver.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
        annotationIntrospector0.findObjectReferenceInfo((Annotated) null, objectIdInfo0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.version();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed("");
        jsonLocationInstantiator0.getDefaultCreator();
        annotationIntrospector0.findPropertyInclusion((Annotated) null);
        annotationIntrospector_ReferenceProperty0.getName();
        annotationIntrospector0.findDeserializer((Annotated) null);
        annotationIntrospector0.findNameForSerialization((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
        MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_SETTERS;
        mapperFeatureArray0[1] = mapperFeature1;
        objectMapper0.disable(mapperFeatureArray0);
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        AnnotationIntrospector.nopInstance();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findPropertyInclusion((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findSubtypes((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Annotation> class0 = Annotation.class;
        annotationMap0.get(class0);
        annotationIntrospector0.isAnnotationBundle((Annotation) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getArrayDelegateCreator();
        Object object0 = new Object();
        annotationIntrospector0.findSerializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findPropertyIndex((Annotated) null);
        annotationIntrospector0.findFilterId((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        objectMapper0.readerFor(class0);
        AnnotationIntrospector.nopInstance();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findKeySerializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
        Class<Object> class0 = Object.class;
        objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        annotationIntrospector0.findPropertiesToIgnore((Annotated) null);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
        AnnotationIntrospector.ReferenceProperty.back("#$F(Etz6");
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.back("#$F(Etz6");
        AnnotationIntrospector.ReferenceProperty.back("#$F(Etz6");
        AnnotationIntrospector.ReferenceProperty.managed("#$F(Etz6");
        annotationIntrospector_ReferenceProperty0.isManagedReference();
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getWithArgsCreator();
        annotationIntrospector0.findUnwrappingNameTransformer((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getArrayDelegateCreator();
        annotationIntrospector0.hasRequiredMarker((AnnotatedMember) null);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
        annotationIntrospector0.findSerializationInclusion((Annotated) null, jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getArrayDelegateCreator();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
        annotationIntrospector0.findPropertyDescription((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed("VZ");
        annotationIntrospector_ReferenceProperty0.isManagedReference();
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findViews((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findFormat((Annotated) null);
        annotationIntrospector0.findImplicitPropertyName((AnnotatedMember) null);
        annotationIntrospector0.findViews((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findFormat((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findSerializationPropertyOrder((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findPOJOBuilderConfig((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findNullSerializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getWithArgsCreator();
        annotationIntrospector0.findSerializationConverter((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.hasAnyGetterAnnotation((AnnotatedMethod) null);
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        AnnotationIntrospector.ReferenceProperty.Type.valueOf("JSON");
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getConfig();
        Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, class0);
        stdValueInstantiator0.getDelegateCreator();
        annotationIntrospector0.findDeserializationContentConverter((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getDefaultCreator();
        annotationIntrospector0.findDeserializationType((Annotated) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        beanSerializerBuilder0.getClassInfo();
        annotationIntrospector0.findRootName((AnnotatedClass) null);
        annotationIntrospector0.findValueInstantiator((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findContentDeserializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getWithArgsCreator();
        annotationIntrospector0.findPropertyAccess((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getWithArgsCreator();
        annotationIntrospector0.findNameForDeserialization((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findContentSerializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.version();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getArrayDelegateCreator();
        annotationIntrospector0.findSerializationContentConverter((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findPOJOBuilder((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findClassDescription((AnnotatedClass) null);
        annotationIntrospector0.findNamingStrategy((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector.ReferenceProperty.Type.values();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        Class<AnnotationIntrospector> class0 = AnnotationIntrospector.class;
        StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator(deserializationConfig0, class0);
        stdValueInstantiator0.getDelegateCreator();
        annotationIntrospector0.findPropertyDefaultValue((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getDelegateCreator();
        annotationIntrospector0.findDeserializationKeyType((Annotated) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getArrayDelegateCreator();
        annotationIntrospector0.findDeserializationConverter((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.hasAnySetterAnnotation((AnnotatedMethod) null);
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findEnumValue((Enum<?>) null);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Collection<AnnotationIntrospector> collection0 = annotationIntrospector0.allIntrospectors();
        annotationIntrospector0.findKeySerializer((Annotated) null);
        annotationIntrospector0.findTypeName((AnnotatedClass) null);
        annotationIntrospector0.findDeserializer((Annotated) null);
        annotationIntrospector0.findPropertyInclusion((Annotated) null);
        annotationIntrospector0.allIntrospectors(collection0);
        annotationIntrospector0.version();
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector.ReferenceProperty.Type[] annotationIntrospector_ReferenceProperty_TypeArray0 = AnnotationIntrospector.ReferenceProperty.Type.values();
        String[] stringArray0 = new String[3];
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        annotationIntrospector0.findEnumValues(class0, annotationIntrospector_ReferenceProperty_TypeArray0, stringArray0);
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector.ReferenceProperty.Type[] annotationIntrospector_ReferenceProperty_TypeArray0 = AnnotationIntrospector.ReferenceProperty.Type.values();
        Class<Integer> class0 = Integer.class;
        String[] stringArray0 = new String[3];
        stringArray0[0] = "Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s";
        annotationIntrospector0.findEnumValues(class0, annotationIntrospector_ReferenceProperty_TypeArray0, stringArray0);
        AnnotationIntrospector.ReferenceProperty.Type.values();
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.isIgnorableType((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.findIgnoreUnknownProperties((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        jsonLocationInstantiator0.getWithArgsCreator();
        annotationIntrospector0.findSerializationKeyType((Annotated) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Object> class0 = Object.class;
        objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        Class<Annotation> class0 = Annotation.class;
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        AnnotationIntrospector.nopInstance();
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector.ReferenceProperty.Type.values();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
        System.setCurrentTimeMillis(0L);
        annotationIntrospector0.resolveSetterConflict(deserializationConfig0, (AnnotatedMethod) null, (AnnotatedMethod) null);
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        objectMapper0.acceptJsonFormatVisitor((JavaType) mapLikeType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        AnnotationIntrospector.nopInstance();
    }
}
