/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 05:25:07 GMT 2024
 */
package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdTypeResolverBuilder_ESTest extends StdTypeResolverBuilder_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        stdTypeResolverBuilder0.typeIdVisibility(false);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        objectMapper_DefaultTypeResolverBuilder0.getTypeProperty();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        StdTypeResolverBuilder.noTypeInfoBuilder();
        stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
        stdTypeResolverBuilder0.defaultImpl(class0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        stdTypeResolverBuilder0.getDefaultImpl();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        stdTypeResolverBuilder0.typeProperty("");
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        stdTypeResolverBuilder0.typeProperty("!UML*bCDuMG6yTH&a#");
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayDeque<NamedType> arrayDeque0 = new ArrayDeque<NamedType>();
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, arrayDeque0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        JavaType javaType0 = TypeFactory.unknownType();
        LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
        stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, javaType0, linkedHashSet0, true, true);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;
        stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
        JavaType javaType0 = TypeFactory.unknownType();
        LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
        stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
        SerializationConfig serializationConfig0 = null;
        JavaType javaType0 = TypeFactory.unknownType();
        HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        stdTypeResolverBuilder0.typeProperty((String) null);
        String string0 = "!UML*bCDuMG6yTH&a#";
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        JavaType javaType0 = TypeFactory.unknownType();
        LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TreeSet<NamedType> treeSet0 = new TreeSet<NamedType>();
        stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, treeSet0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        JavaType javaType0 = TypeFactory.unknownType();
        LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
        stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, javaType0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NAME;
        stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
        JavaType javaType0 = TypeFactory.unknownType();
        LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
        stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, javaType0, linkedHashSet0, false, false);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        JavaType javaType0 = TypeFactory.unknownType();
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(javaType0, (TypeFactory) null);
        stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) minimalClassNameIdResolver0;
        LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
        stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, javaType0, linkedHashSet0, true, true);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TextNode> class0 = TextNode.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
        HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
        StdTypeResolverBuilder stdTypeResolverBuilder2 = stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
        stdTypeResolverBuilder2.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TextNode> class0 = TextNode.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
        stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
        stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
        JavaType javaType0 = TypeFactory.unknownType();
        LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
        stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, javaType0, linkedHashSet0, true, true);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<JavaType> class0 = JavaType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
        HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
        StdTypeResolverBuilder stdTypeResolverBuilder2 = stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
        stdTypeResolverBuilder2.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TextNode> class0 = TextNode.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
        HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, hashSet0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
        LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
        stdTypeResolverBuilder1.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Module> class0 = Module.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
        stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
        Vector<NamedType> vector0 = new Vector<NamedType>();
        stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, vector0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TextNode> class0 = TextNode.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
        stdTypeResolverBuilder1.defaultImpl(class0);
        stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Module> class0 = Module.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
        stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
        stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Module> class0 = Module.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
        stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
        stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Module> class0 = Module.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
        stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TextNode> class0 = TextNode.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
        stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
        stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TypeIdResolver> class0 = TypeIdResolver.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
        ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
        Class<NoClass> class1 = NoClass.class;
        stdTypeResolverBuilder0.defaultImpl(class1);
        TreeSet<NamedType> treeSet0 = new TreeSet<NamedType>();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.leaseObjectBuffer();
        defaultDeserializationContext_Impl0.getConfig();
        stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.TYPE;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init((JsonTypeInfo.Id) null, minimalClassNameIdResolver0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
        stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<JavaType> class0 = JavaType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
        TreeSet<NamedType> treeSet0 = new TreeSet<NamedType>();
        stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, treeSet0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Void> class0 = Void.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
        JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
        StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, classNameIdResolver0);
        StdTypeResolverBuilder stdTypeResolverBuilder2 = stdTypeResolverBuilder1.defaultImpl(class0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        stdTypeResolverBuilder2.inclusion(jsonTypeInfo_As0);
        stdTypeResolverBuilder2.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
        stdTypeResolverBuilder0.inclusion((JsonTypeInfo.As) null);
    }
}
