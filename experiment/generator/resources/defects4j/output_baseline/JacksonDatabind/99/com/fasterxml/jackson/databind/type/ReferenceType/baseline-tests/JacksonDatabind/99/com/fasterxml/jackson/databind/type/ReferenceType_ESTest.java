/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 07:48:44 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.Collection;
import java.util.EnumSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        Class<Integer> class1 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
        Class<MapLikeType> class2 = MapLikeType.class;
        JavaType[] javaTypeArray0 = new JavaType[5];
        ReferenceType referenceType1 = (ReferenceType) referenceType0.refine(class2, typeBindings0, referenceType0, javaTypeArray0);
        referenceType1.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        JavaType javaType0 = referenceType0.getReferencedType();
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        JavaType[] javaTypeArray0 = new JavaType[7];
        javaTypeArray0[5] = (JavaType) simpleType0;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[5]);
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, javaTypeArray0[2], javaTypeArray0[4]);
        CollectionType collectionType0 = new CollectionType(mapLikeType0, javaTypeArray0[2]);
        ReferenceType referenceType0 = new ReferenceType(collectionType0, collectionType0);
        boolean boolean0 = referenceType0.isReferenceType();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        String string0 = referenceType0.toString();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        String string0 = referenceType0.getErasedSignature();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        JavaType[] javaTypeArray0 = new JavaType[7];
        javaTypeArray0[5] = (JavaType) simpleType0;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[5]);
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, javaTypeArray0[2], javaTypeArray0[4]);
        CollectionType collectionType0 = new CollectionType(mapLikeType0, javaTypeArray0[2]);
        ReferenceType referenceType0 = new ReferenceType(collectionType0, collectionLikeType0);
        Class<Integer> class1 = Integer.class;
        ReferenceType referenceType1 = (ReferenceType) referenceType0._narrow(class1);
        referenceType1.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        boolean boolean0 = referenceType0.hasContentType();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        CollectionType collectionType0 = new CollectionType(simpleType0, simpleType0);
        ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        StringBuilder stringBuilder0 = new StringBuilder("Ljava/lang/Enum;");
        referenceType0.getGenericSignature(stringBuilder0);
        stringBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<MapType> class0 = MapType.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        JavaType[] javaTypeArray0 = new JavaType[0];
        ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) null, javaTypeArray0, (JavaType) referenceType0);
        boolean boolean0 = referenceType1.equals(referenceType0);
        referenceType1.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Class<MapType> class0 = MapType.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        JavaType[] javaTypeArray0 = new JavaType[0];
        ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) null, javaTypeArray0, (JavaType) referenceType0);
        boolean boolean0 = referenceType1.equals(referenceType0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Class<MapType> class0 = MapType.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        JavaType[] javaTypeArray0 = new JavaType[0];
        ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) null, javaTypeArray0, (JavaType) referenceType0);
        boolean boolean0 = referenceType1.equals(referenceType0);
        referenceType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        JavaType javaType0 = referenceType0.getAnchorType();
        javaType0.isReferenceType();
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapType> class0 = MapType.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ReferenceType referenceType0 = new ReferenceType(arrayType0, arrayType0);
        JavaType javaType0 = referenceType0.getContentType();
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType.upgradeFrom((JavaType) null, referenceType0);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = (ReferenceType) referenceType0.withContentType(referenceType0);
        referenceType1.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = (ReferenceType) referenceType0.withContentType(referenceType0);
        referenceType1.equals((Object) referenceType0);
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapType> class0 = MapType.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
        ReferenceType referenceType1 = (ReferenceType) referenceType0.withContentType(arrayType0);
        referenceType1.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        Class<Integer> class1 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
        Class<MapLikeType> class2 = MapLikeType.class;
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType0, (JavaType[]) null, (JavaType) referenceType0);
        CollectionLikeType collectionLikeType0 = collectionType0.withContentTypeHandler(typeBindings0);
        collectionLikeType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        Class<Integer> class1 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
        Class<MapLikeType> class2 = MapLikeType.class;
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType0, (JavaType[]) null, (JavaType) referenceType0);
        CollectionLikeType collectionLikeType0 = collectionType0.withContentTypeHandler(typeBindings0);
        collectionLikeType0.equals((Object) collectionType0);
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
        referenceType1.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
        referenceType1.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        Class<Integer> class1 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
        Class<MapLikeType> class2 = MapLikeType.class;
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType0, (JavaType[]) null, (JavaType) referenceType0);
        ReferenceType referenceType1 = referenceType0.withValueHandler(collectionType0);
        referenceType1.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test1924() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        Class<Integer> class1 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
        Class<MapLikeType> class2 = MapLikeType.class;
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType0, (JavaType[]) null, (JavaType) referenceType0);
        ReferenceType referenceType1 = referenceType0.withValueHandler(collectionType0);
        referenceType1.equals((Object) referenceType0);
    }

    @Test(timeout = 4000)
    public void test2025() throws Throwable {
        PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
        ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
        ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
        referenceType1.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test2126() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = (ReferenceType) referenceType0.withContentValueHandler(class0);
        referenceType1.equals((Object) referenceType0);
    }

    @Test(timeout = 4000)
    public void test2127() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = (ReferenceType) referenceType0.withContentValueHandler(class0);
        referenceType1.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test2228() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
        ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
        ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
        referenceType1.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test2329() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        Class<Integer> class1 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
        ReferenceType referenceType1 = referenceType0.withStaticTyping();
        Class<MapLikeType> class2 = MapLikeType.class;
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType1, (JavaType[]) null, (JavaType) referenceType1);
        collectionType0.withStaticTyping();
        referenceType1.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test2330() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        Class<Integer> class1 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
        ReferenceType referenceType1 = referenceType0.withStaticTyping();
        Class<MapLikeType> class2 = MapLikeType.class;
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType1, (JavaType[]) null, (JavaType) referenceType1);
        collectionType0.withStaticTyping();
        referenceType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test2331() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        Class<Integer> class1 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
        ReferenceType referenceType1 = referenceType0.withStaticTyping();
        Class<MapLikeType> class2 = MapLikeType.class;
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType1, (JavaType[]) null, (JavaType) referenceType1);
        collectionType0.withStaticTyping();
        referenceType0.equals((Object) referenceType1);
    }

    @Test(timeout = 4000)
    public void test2432() throws Throwable {
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        JavaType[] javaTypeArray0 = new JavaType[7];
        javaTypeArray0[1] = (JavaType) simpleType0;
        javaTypeArray0[5] = (JavaType) simpleType0;
        javaTypeArray0[6] = (JavaType) simpleType0;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[5]);
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaTypeArray0[6], simpleType0, javaTypeArray0[2]);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[1], collectionLikeType0);
        ReferenceType referenceType1 = referenceType0.withContentTypeHandler(mapLikeType0);
        boolean boolean0 = referenceType1.isAnchorType();
        referenceType0.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test2433() throws Throwable {
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        JavaType[] javaTypeArray0 = new JavaType[7];
        javaTypeArray0[1] = (JavaType) simpleType0;
        javaTypeArray0[5] = (JavaType) simpleType0;
        javaTypeArray0[6] = (JavaType) simpleType0;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[5]);
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaTypeArray0[6], simpleType0, javaTypeArray0[2]);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[1], collectionLikeType0);
        ReferenceType referenceType1 = referenceType0.withContentTypeHandler(mapLikeType0);
        boolean boolean0 = referenceType1.isAnchorType();
        referenceType0.equals((Object) referenceType1);
    }

    @Test(timeout = 4000)
    public void test2434() throws Throwable {
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        JavaType[] javaTypeArray0 = new JavaType[7];
        javaTypeArray0[1] = (JavaType) simpleType0;
        javaTypeArray0[5] = (JavaType) simpleType0;
        javaTypeArray0[6] = (JavaType) simpleType0;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[5]);
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaTypeArray0[6], simpleType0, javaTypeArray0[2]);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[1], collectionLikeType0);
        ReferenceType referenceType1 = referenceType0.withContentTypeHandler(mapLikeType0);
        boolean boolean0 = referenceType1.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test2535() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapType> class0 = MapType.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ReferenceType referenceType0 = new ReferenceType(arrayType0, arrayType0);
        boolean boolean0 = referenceType0.isAnchorType();
    }

    @Test(timeout = 4000)
    public void test2636() throws Throwable {
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        JavaType[] javaTypeArray0 = new JavaType[7];
        javaTypeArray0[1] = (JavaType) simpleType0;
        javaTypeArray0[5] = (JavaType) simpleType0;
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[5]);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[1], collectionLikeType0);
        boolean boolean0 = referenceType0.equals(javaTypeArray0[3]);
    }

    @Test(timeout = 4000)
    public void test2737() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SimpleType> class0 = SimpleType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        Class<EnumSet> class1 = EnumSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) referenceType0);
        collectionType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test2838() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = new ReferenceType(simpleType0, referenceType0);
        boolean boolean0 = referenceType1.equals(referenceType0);
    }

    @Test(timeout = 4000)
    public void test2839() throws Throwable {
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ReferenceType referenceType1 = new ReferenceType(simpleType0, referenceType0);
        boolean boolean0 = referenceType1.equals(referenceType0);
        referenceType0.equals((Object) referenceType1);
    }
}
