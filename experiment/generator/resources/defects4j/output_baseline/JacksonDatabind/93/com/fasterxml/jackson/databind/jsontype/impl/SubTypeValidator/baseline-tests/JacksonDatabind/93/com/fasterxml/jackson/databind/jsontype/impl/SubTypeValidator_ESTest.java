/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 07:31:54 GMT 2024
 */
package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class SubTypeValidator_ESTest extends SubTypeValidator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        SubTypeValidator subTypeValidator0 = new SubTypeValidator();
        JavaType javaType0 = TypeFactory.unknownType();
        subTypeValidator0.validateSubType((DeserializationContext) null, javaType0);
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Class<Module> class0 = Module.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        SubTypeValidator subTypeValidator0 = SubTypeValidator.instance();
        subTypeValidator0.validateSubType((DeserializationContext) null, simpleType0);
        simpleType0.hasValueHandler();
    }
}
