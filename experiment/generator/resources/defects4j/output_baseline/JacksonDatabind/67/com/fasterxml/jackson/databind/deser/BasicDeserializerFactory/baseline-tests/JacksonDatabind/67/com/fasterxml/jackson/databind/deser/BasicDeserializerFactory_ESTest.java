/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 06:02:26 GMT 2024
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.IOException;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentSkipListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BasicDeserializerFactory_ESTest extends BasicDeserializerFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<TokenBuffer> class0 = TokenBuffer.class;
        MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0, javaType0);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        beanDeserializerFactory0.resolveType(defaultDeserializationContext_Impl0, (BeanDescription) null, mapType0, (AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactoryConfig deserializerFactoryConfig1 = beanDeserializerFactory0.getFactoryConfig();
        deserializerFactoryConfig1.hasAbstractTypeResolvers();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JsonLocation> class0 = JsonLocation.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
        ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
        SimpleModule simpleModule1 = simpleModule0.addValueInstantiator(class0, valueInstantiator_Base0);
        objectMapper0.registerModule(simpleModule1);
        MappingIterator<LinkedHashMap<SQLSyntaxErrorException, Object>> mappingIterator0 = objectMapper0.readValues((JsonParser) null, (ResolvedType) javaType0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<SQLException> class0 = SQLException.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes((Class<?>) class0, (MapperConfig<?>) null);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        beanDeserializerFactory0._valueInstantiatorInstance((DeserializationConfig) null, annotatedClass0, class0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        ValueInstantiator valueInstantiator0 = beanDeserializerFactory0._valueInstantiatorInstance((DeserializationConfig) null, (Annotated) null, (Object) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        Class<DoubleNode> class0 = DoubleNode.class;
        ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
        ValueInstantiator valueInstantiator0 = beanDeserializerFactory0._valueInstantiatorInstance((DeserializationConfig) null, (Annotated) null, valueInstantiator_Base0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        beanDeserializerFactory0._valueInstantiatorInstance((DeserializationConfig) null, (Annotated) null, deserializerFactoryConfig0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        PropertyName propertyName0 = beanDeserializerFactory0._findParamName((AnnotatedParameter) null, annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, (-1962));
        PropertyName propertyName0 = beanDeserializerFactory0._findParamName(annotatedParameter0, (AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        PropertyName propertyName0 = beanDeserializerFactory0._findImplicitParamName((AnnotatedParameter) null, annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        PropertyName propertyName0 = beanDeserializerFactory0._findExplicitParamName((AnnotatedParameter) null, annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, (-751));
        PropertyName propertyName0 = beanDeserializerFactory0._findExplicitParamName(annotatedParameter0, annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        boolean boolean0 = beanDeserializerFactory0._hasExplicitParamName((AnnotatedParameter) null, (AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        JavaType javaType0 = TypeFactory.unknownType();
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, 799);
        boolean boolean0 = beanDeserializerFactory0._hasExplicitParamName(annotatedParameter0, (AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, javaType0, annotationMap0, 2);
        boolean boolean0 = beanDeserializerFactory0._hasExplicitParamName(annotatedParameter0, annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Class<BatchUpdateException> class0 = BatchUpdateException.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        MappingIterator<LinkedHashMap<SQLSyntaxErrorException, Object>> mappingIterator0 = objectMapper0.readValues((JsonParser) null, (ResolvedType) arrayType0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        MappingIterator<LinkedHashMap<SQLSyntaxErrorException, Object>> mappingIterator0 = objectMapper0.readValues((JsonParser) null, (ResolvedType) arrayType0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LongNode> class0 = LongNode.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
        doReturn((JsonDeserializer) null).when(beanDeserializerModifier0).modifyArrayDeserializer(any(com.fasterxml.jackson.databind.DeserializationConfig.class), any(com.fasterxml.jackson.databind.type.ArrayType.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.JsonDeserializer.class));
        simpleModule0.setDeserializerModifier(beanDeserializerModifier0);
        objectMapper0.registerModule(simpleModule0);
        objectMapper0.readValues((JsonParser) null, (ResolvedType) arrayType0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionType> class0 = CollectionType.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        objectMapper0.enableDefaultTyping();
        MappingIterator<LinkedHashMap<SQLSyntaxErrorException, Object>> mappingIterator0 = objectMapper0.readValues((JsonParser) null, (ResolvedType) arrayType0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Class<DataTruncation> class0 = DataTruncation.class;
        TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
        Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<EnumSet> class2 = EnumSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class2, (JavaType) resolvedRecursiveType0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1);
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        objectMapper0.readValues(jsonParser0, (ResolvedType) collectionType0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class1 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) resolvedRecursiveType0);
        MappingIterator<LinkedHashMap<SQLSyntaxErrorException, Object>> mappingIterator0 = objectMapper0.readValues((JsonParser) null, (ResolvedType) collectionType0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        Class<TokenBuffer> class0 = TokenBuffer.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        CollectionType collectionType0 = beanDeserializerFactory0._mapAbstractCollectionType(resolvedRecursiveType0, (DeserializationConfig) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ConcurrentSkipListMap> class1 = ConcurrentSkipListMap.class;
        MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) arrayType0, (JavaType) arrayType0);
        objectMapper0.readValues((JsonParser) null, (ResolvedType) mapType0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LongNode> class0 = LongNode.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        MappingIterator<LinkedHashMap<SQLSyntaxErrorException, Object>> mappingIterator0 = objectMapper0.readValues((JsonParser) null, (ResolvedType) arrayType0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
        objectMapper0.readValues(jsonParser0, (ResolvedType) referenceType0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
        DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        Class<ObjectNode> class0 = ObjectNode.class;
        JsonDeserializer<?> jsonDeserializer0 = beanDeserializerFactory0._findCustomTreeNodeDeserializer(class0, (DeserializationConfig) null, (BeanDescription) null);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<DataTruncation> class1 = DataTruncation.class;
        simpleModule0.addDeserializer(class1, (JsonDeserializer<? extends DataTruncation>) null);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
        MappingIterator<LinkedHashMap<SQLSyntaxErrorException, Object>> mappingIterator0 = objectMapper1.readValues((JsonParser) null, (ResolvedType) arrayType0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<DataTruncation> class0 = DataTruncation.class;
        SimpleModule simpleModule1 = simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends DataTruncation>) null);
        objectMapper0.registerModule(simpleModule1);
        MappingIterator<LinkedHashMap<SQLSyntaxErrorException, Object>> mappingIterator0 = objectMapper0.readValues((JsonParser) null, (ResolvedType) javaType0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<DataTruncation> class0 = DataTruncation.class;
        SimpleModule simpleModule1 = simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends DataTruncation>) null);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        objectMapper1.readValues((JsonParser) null, (ResolvedType) collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<DataTruncation> class0 = DataTruncation.class;
        SimpleModule simpleModule1 = simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends DataTruncation>) null);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
        Class<ObjectNode> class1 = ObjectNode.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
        JavaType[] javaTypeArray0 = new JavaType[6];
        javaTypeArray0[0] = javaType0;
        MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0], javaType0);
        objectMapper1.readValues((JsonParser) null, (ResolvedType) mapType0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        beanDeserializerFactory0._findJsonValueFor((DeserializationConfig) null, simpleType0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        AnnotatedMethod annotatedMethod0 = beanDeserializerFactory0._findJsonValueFor((DeserializationConfig) null, (JavaType) null);
    }
}
