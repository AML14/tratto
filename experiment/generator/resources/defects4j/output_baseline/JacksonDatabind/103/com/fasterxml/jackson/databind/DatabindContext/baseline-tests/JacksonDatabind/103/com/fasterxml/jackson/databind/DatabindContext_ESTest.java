/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 07:59:34 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.databind.DatabindContext;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Converter;
import java.io.IOException;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DatabindContext_ESTest extends DatabindContext_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<TypeNameIdResolver> class0 = TypeNameIdResolver.class;
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class0, "Ud}q5e_0$j<~2-Y-1(Y");
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JavaType javaType0 = defaultSerializerProvider_Impl0.constructType((Type) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
        defaultSerializerProvider_Impl0.constructSpecializedType(simpleType0, class1);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        JavaType javaType0 = serializerProvider0.constructSpecializedType(simpleType0, class0);
        javaType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
        TypeFactory typeFactory0 = serializerProvider0.getTypeFactory();
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        serializerProvider0.resolveSubType(javaType0, "com.fasterxml.jackson.databind.type.MapType");
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        defaultSerializerProvider_Impl0.resolveSubType((JavaType) null, "; expected type Converter or Class<Converter> instead");
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        PlaceholderForType placeholderForType0 = new PlaceholderForType(1024);
        JavaType javaType0 = serializerProvider0.resolveSubType(placeholderForType0, "com.fasterxml.jackson.databind.cfg.ConfigOverride$Empty");
        javaType0.hasContentType();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        serializerProvider0.objectIdGeneratorInstance((Annotated) null, objectIdInfo0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        ObjectIdInfo objectIdInfo0 = ObjectIdInfo.empty();
        ObjectIdResolver objectIdResolver0 = serializerProvider0.objectIdResolverInstance((Annotated) null, objectIdInfo0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        defaultSerializerProvider_Impl0.converterInstance((Annotated) null, class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Converter<Object, Object> converter0 = defaultSerializerProvider_Impl0.converterInstance((Annotated) null, (Object) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        defaultSerializerProvider_Impl0.converterInstance((Annotated) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<Object> class0 = Object.class;
        ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        valueInstantiator_Base0.createUsingDelegate(deserializationContext0, class0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
        Object[] objectArray0 = new Object[2];
        serializerProvider0.reportMappingProblem("9O.2e I00Lq.ir;{", objectArray0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        String string0 = ((DatabindContext) defaultSerializerProvider_Impl0)._quotedString("No 'injectableValues' configured, cannot inject value with id [%s]");
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProviderInstance();
        String string0 = ((DatabindContext) defaultSerializerProvider_Impl0)._truncate((String) null);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        String string0 = ((DatabindContext) defaultSerializerProvider_Impl0)._quotedString((String) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException) defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "tSN${-$n0's<mlR[IFN", (String) null);
        invalidTypeIdException0.getTypeId();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl) objectMapper0.getSerializerProvider();
        String string0 = ((DatabindContext) defaultSerializerProvider_Impl0)._desc("; expcted type Converter or Class<Converter> instead");
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        String string0 = ((DatabindContext) defaultSerializerProvider_Impl0)._desc((String) null);
    }
}
