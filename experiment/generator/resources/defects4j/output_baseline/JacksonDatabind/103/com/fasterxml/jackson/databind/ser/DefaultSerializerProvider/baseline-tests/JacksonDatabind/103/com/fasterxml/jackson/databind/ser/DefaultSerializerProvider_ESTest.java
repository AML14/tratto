/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 08:35:54 GMT 2024
 */
package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DefaultSerializerProvider_ESTest extends DefaultSerializerProvider_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<Object> class0 = Object.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        MockIOException mockIOException0 = new MockIOException();
        IOException iOException0 = objectMapper0.updateValue((IOException) mockIOException0, (Object) atomicReference0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, (Object) null, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        defaultSerializerProvider_Impl0.flushCachedSerializers();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        int int0 = defaultSerializerProvider_Impl0.cachedSerializersCount();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, nioPathSerializer0, resolvedRecursiveType0, (JsonSerializer<Object>) null, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
        JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, nioPathSerializer0);
        jsonSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, (Object) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<BeanSerializer> class0 = BeanSerializer.class;
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<Object> class0 = Object.class;
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, class0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
        PropertyName propertyName0 = PropertyName.construct("[eTPYX?JMnM/Yn$5", "[eTPYX?JMnM/Yn$5");
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, (AnnotationIntrospector) null, false, propertyName0);
        Class<Throwable> class0 = Throwable.class;
        defaultSerializerProvider_Impl0.includeFilterInstance(pOJOPropertyBuilder0, class0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Object object0 = defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, (Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls(defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls((Object) null);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
        defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
        ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
        WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId("<{`z!`9n[", objectIdGenerators_StringIdGenerator0);
        WritableObjectId writableObjectId1 = defaultSerializerProvider_Impl0.findObjectId((Object) null, objectIdGenerators_StringIdGenerator0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
        defaultSerializerProvider_Impl0.findObjectId(objectIdGenerators_StringIdGenerator0, objectIdGenerators_StringIdGenerator0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
        defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
        ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId(simpleObjectIdResolver0, objectIdGenerators_StringIdGenerator0);
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        WritableObjectId writableObjectId1 = defaultSerializerProvider_Impl0.findObjectId(simpleObjectIdResolver0, objectIdGenerators_IntSequenceGenerator0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        HashMap<Object, WritableObjectId> hashMap0 = new HashMap<Object, WritableObjectId>();
        defaultSerializerProvider_Impl0._seenObjectIds = (Map<Object, WritableObjectId>) hashMap0;
        ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
        WritableObjectId writableObjectId0 = defaultSerializerProvider_Impl0.findObjectId((Object) null, objectIdGenerators_StringIdGenerator0);
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        WritableObjectId writableObjectId1 = defaultSerializerProvider_Impl0.findObjectId(objectIdGenerators_IntSequenceGenerator0, objectIdGenerators_IntSequenceGenerator0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl) defaultSerializerProvider_Impl0.createInstance(serializationConfig0, beanSerializerFactory0);
        Map<Object, WritableObjectId> map0 = defaultSerializerProvider_Impl1._createObjectIdMap();
        map0.size();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
        SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl) defaultSerializerProvider_Impl0.createInstance(serializationConfig1, beanSerializerFactory0);
        Map<Object, WritableObjectId> map0 = defaultSerializerProvider_Impl1._createObjectIdMap();
        map0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<NioPathSerializer> class0 = NioPathSerializer.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
        boolean boolean0 = defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<IOException> class0 = IOException.class;
        defaultSerializerProvider_Impl0.hasSerializerFor(class0, (AtomicReference<Throwable>) null);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) placeholderForType0, (JavaType) placeholderForType0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JavaType javaType0 = TypeFactory.unknownType();
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) defaultSerializerProvider_Impl0, javaType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) deserializationFeature0, (JavaType) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) null, (Object) simpleObjectIdResolver0, (JavaType) null, (JsonSerializer<Object>) null);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, deserializationFeature0, (JavaType) null, (JsonSerializer<Object>) null, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
        defaultSerializerProvider_Impl0.serializePolymorphic(filteringGeneratorDelegate0, tokenFilter0, collectionLikeType0, (JsonSerializer<Object>) null, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, placeholderForType0, placeholderForType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        PlaceholderForType placeholderForType0 = new PlaceholderForType(24);
        defaultSerializerProvider_Impl0.serializePolymorphic((JsonGenerator) null, placeholderForType0, placeholderForType0, (JsonSerializer<Object>) null, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        defaultSerializerProvider_Impl0.setNullValueSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        defaultSerializerProvider_Impl0._serializeNull((JsonGenerator) null);
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor(mapType0, jsonFormatVisitorWrapper_Base0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        defaultSerializerProvider_Impl0.acceptJsonFormatVisitor((JavaType) null, jsonFormatVisitorWrapper_Base0);
    }
}
