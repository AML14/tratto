/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 09:00:25 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.NumberSerializers;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.OutputStream;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class NumberSerializers_ESTest extends NumberSerializers_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<NioPathSerializer> class0 = NioPathSerializer.class;
        NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
        JsonNode jsonNode0 = numberSerializers_FloatSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        NumberSerializers numberSerializers0 = new NumberSerializers();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Object> class0 = Object.class;
        NumberSerializers.IntegerSerializer numberSerializers_IntegerSerializer0 = new NumberSerializers.IntegerSerializer(class0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
        IOContext iOContext0 = new IOContext(bufferRecycler0, coreXMLSerializers_XMLGregorianCalendarSerializer0, false);
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s", false);
        byte[] byteArray0 = new byte[0];
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        numberSerializers_IntegerSerializer0.serializeWithType(class0, filteringGeneratorDelegate0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        numberSerializers_FloatSerializer0.serialize(defaultSerializerProvider_Impl0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Class<Integer> class0 = Integer.class;
        NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        numberSerializers_LongSerializer0.serialize(class0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<NioPathSerializer> class0 = NioPathSerializer.class;
        NumberSerializers.LongSerializer numberSerializers_LongSerializer0 = new NumberSerializers.LongSerializer(class0);
        NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = NumberSerializers.IntLikeSerializer.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        numberSerializers_IntLikeSerializer0.serialize(numberSerializers_LongSerializer0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        NumberSerializers.IntLikeSerializer numberSerializers_IntLikeSerializer0 = new NumberSerializers.IntLikeSerializer();
        numberSerializers_IntLikeSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<Integer> class0 = Integer.class;
        NumberSerializers.DoubleSerializer numberSerializers_DoubleSerializer0 = new NumberSerializers.DoubleSerializer(class0);
        DOMSerializer dOMSerializer0 = new DOMSerializer();
        JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
        JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        numberSerializers_DoubleSerializer0.serializeWithType(dOMSerializer0, jsonGenerator0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = new NumberSerializers.ShortSerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        Class<Byte> class0 = Byte.class;
        Class<DOMSerializer> class1 = DOMSerializer.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        numberSerializers_ShortSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, resolvedRecursiveType0);
        resolvedRecursiveType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        NumberSerializers.ShortSerializer numberSerializers_ShortSerializer0 = NumberSerializers.ShortSerializer.instance;
        Object object0 = new Object();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        numberSerializers_ShortSerializer0.serialize(object0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        numberSerializers_FloatSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        numberSerializers_FloatSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        NumberSerializers.FloatSerializer numberSerializers_FloatSerializer0 = new NumberSerializers.FloatSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
        JsonSerializer<?> jsonSerializer0 = numberSerializers_FloatSerializer0.createContextual(defaultSerializerProvider_Impl0, beanProperty_Bogus0);
    }
}
