/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:56:47 GMT 2024
 */
package com.fasterxml.jackson.databind.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectNode_ESTest extends ObjectNode_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.removeAll();
        objectNode1.isBigInteger();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonNode jsonNode0 = objectNode0.putAll(objectNode0);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Iterator<String> iterator0 = objectNode0.fieldNames();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.putNull("cZ/N@");
        Stack<JsonNode> stack0 = new Stack<JsonNode>();
        List<JsonNode> list0 = objectNode1.findValues(":y=wIh!<]8EpC", (List<JsonNode>) stack0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.hashCode();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0._at((JsonPointer) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        Spliterator<JsonNode> spliterator0 = objectNode0.spliterator();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonNode jsonNode0 = objectNode0.without("LpN@SVwK` vp{;");
        jsonNode0.textValue();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonToken jsonToken0 = objectNode0.asToken();
        jsonToken0.isStructStart();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.putObject("kC]()QA-");
        objectNode1.size();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        boolean boolean0 = objectNode0.hasNonNull("LpN@SVwK` vp{;");
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("<j]gXCuj8z^ ", (-2016056520));
        objectNode1.size();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.retain((String[]) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        HashMap<String, BigIntegerNode> hashMap0 = new HashMap<String, BigIntegerNode>();
        JsonNode jsonNode0 = objectNode0.putAll((Map<String, ? extends JsonNode>) hashMap0);
        jsonNode0.isFloat();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        ObjectNode objectNode1 = objectNode0.remove((Collection<String>) treeSet0);
        objectNode1.isLong();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonNode jsonNode0 = objectNode0.remove("zT4YsA$\"1Q'Zj/2)*j");
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        boolean boolean0 = objectNode0.has((-1554429048));
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.put("LpN@SVwK` vp{;", 0L);
        JsonNode jsonNode0 = objectNode1.findValue("JSON");
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        List<String> list0 = objectNode0.findValuesAsText("#-H*<g;}-e");
        ObjectNode objectNode1 = objectNode0.retain((Collection<String>) list0);
        objectNode1.textValue();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.put("*;5g'vz", (-1056.3));
        ArrayList<String> arrayList0 = new ArrayList<String>();
        objectNode0.findValuesAsText("*;5g'vz", (List<String>) arrayList0);
        arrayList0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.put("*;5g'vz", (-1056.3));
        ArrayList<String> arrayList0 = new ArrayList<String>();
        objectNode0.findValuesAsText("*;5g'vz", (List<String>) arrayList0);
        arrayList0.size();
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = new ObjectNode(jsonNodeFactory0);
        boolean boolean0 = objectNode1.equals(objectNode0);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.put(" <", false);
        objectNode1.isDouble();
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.without((Collection<String>) null);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("b_7~AsxM", (-1.0F));
        objectNode1.booleanValue();
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonNode jsonNode0 = objectNode0.path((-1509));
        jsonNode0.asToken();
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonParser jsonParser0 = objectNode0.traverse();
        jsonParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        TextNode textNode0 = jsonNodeFactory0.textNode("ULHq4{{gcI");
        ObjectNode objectNode1 = objectNode0.putPOJO("ULHq4{{gcI", textNode0);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.putNull("+");
        ObjectNode objectNode2 = objectNode1.deepCopy();
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.putNull("+");
        ObjectNode objectNode2 = objectNode1.deepCopy();
        objectNode2.size();
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonNode jsonNode0 = objectNode0.path("H<,2:");
        jsonNode0.asToken();
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.with(",}w({qq]BNqT[1");
        JsonNode jsonNode0 = objectNode0.path(",}w({qq]BNqT[1");
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        objectNode0.putNull((String) null);
        objectNode0.with((String) null);
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.with("Xab^sEK*<|~69/<2V");
        ObjectNode objectNode2 = objectNode0.with("Xab^sEK*<|~69/<2V");
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ArrayNode arrayNode0 = objectNode0.withArray("Can not pass null property name");
        arrayNode0.addObject();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        MockFile mockFile0 = new MockFile("JSON");
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator) jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
        SimpleType simpleType0 = (SimpleType) TypeFactory.unknownType();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
        AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, "JSON");
        objectNode0.serializeWithType(writerBasedJsonGenerator0, (SerializerProvider) null, asExternalTypeSerializer0);
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.put("MTt*yMz", 460.8990766266048);
        objectNode0.withArray("MTt*yMz");
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.withArray("H<,2:");
        ArrayNode arrayNode0 = objectNode0.withArray("H<,2:");
        arrayNode0.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonNode jsonNode0 = objectNode0.findValue("JSON");
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.with("<!&");
        Long long0 = new Long((-2279L));
        objectNode1.put("=!f{", long0);
        objectNode0.findValue("=!f{");
        objectNode0.size();
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.putNull("9bpcZCPSPvMHW@3-");
        List<JsonNode> list0 = objectNode1.findValues("9bpcZCPSPvMHW@3-");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.putNull("V%V");
        ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
        objectNode0.findValues("V%V", (List<JsonNode>) arrayList0);
        arrayList0.size();
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.putNull("V%V");
        ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
        objectNode0.findValues("V%V", (List<JsonNode>) arrayList0);
        arrayList0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.withArray("H<,2:");
        List<String> list0 = objectNode0.findValuesAsText("H<,2:", (List<String>) null);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.putNull("{");
        List<String> list0 = objectNode1.findValuesAsText("f)");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test4144() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.with("<!&");
        ObjectNode objectNode2 = objectNode0.findParent("=!f{");
    }

    @Test(timeout = 4000)
    public void test4246() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        Long long0 = new Long((-2279L));
        ObjectNode objectNode1 = objectNode0.put("=!f{", long0);
        ObjectNode objectNode2 = objectNode1.findParent("=!f{");
        objectNode2.isLong();
    }

    @Test(timeout = 4000)
    public void test4347() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.put("Internal error: entry should be a Number, but is of type ", (short) (-3));
        ArrayNode arrayNode0 = objectNode0.putArray("7R$O!=;AAfrFl>NPjc");
        ObjectNode objectNode2 = arrayNode0.insertObject(200);
        ObjectNode objectNode3 = objectNode2._put(")", objectNode1);
        ObjectNode objectNode4 = objectNode3.findParent("Internal error: entry should be a Number, but is of type ");
    }

    @Test(timeout = 4000)
    public void test4348() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.put("Internal error: entry should be a Number, but is of type ", (short) (-3));
        ArrayNode arrayNode0 = objectNode0.putArray("7R$O!=;AAfrFl>NPjc");
        ObjectNode objectNode2 = arrayNode0.insertObject(200);
        ObjectNode objectNode3 = objectNode2._put(")", objectNode1);
        ObjectNode objectNode4 = objectNode3.findParent("Internal error: entry should be a Number, but is of type ");
        objectNode4.size();
    }

    @Test(timeout = 4000)
    public void test4449() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.putNull("#-H*<g;}-e");
        List<JsonNode> list0 = objectNode1.findParents("#-H*<g;}-e");
        list0.size();
    }

    @Test(timeout = 4000)
    public void test4550() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.putNull(" (expected type: ");
        List<JsonNode> list0 = objectNode1.findParents("com.fasterxml.jackson.databind.deser.AbstractDeserializer");
        objectNode1.findParents(" (expected type: ", list0);
    }

    @Test(timeout = 4000)
    public void test4651() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        objectNode0.putNull("{");
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectWriter0, true);
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayOutputStream0);
        objectNode0.serialize(uTF8JsonGenerator0, (SerializerProvider) null);
    }

    @Test(timeout = 4000)
    public void test4752() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        ObjectNode objectNode0 = arrayNode0.insertObject(0);
        JsonNode jsonNode0 = objectNode0.set(";0lx#Wm?`", arrayNode0);
        jsonNode0.getNodeType();
    }

    @Test(timeout = 4000)
    public void test4853() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonNode jsonNode0 = objectNode0.set("hj-H4", (JsonNode) null);
        jsonNode0.isFloatingPointNumber();
    }

    @Test(timeout = 4000)
    public void test4954() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        HashMap<String, TextNode> hashMap0 = new HashMap<String, TextNode>();
        hashMap0.put("ZxdX", (TextNode) null);
        objectNode0.setAll((Map<String, ? extends JsonNode>) hashMap0);
        objectNode0.size();
    }

    @Test(timeout = 4000)
    public void test5055() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        NullNode nullNode0 = jsonNodeFactory0.nullNode();
        hashMap0.put(">!Q_l @", nullNode0);
        objectNode0.setAll((Map<String, ? extends JsonNode>) hashMap0);
        objectNode0.size();
    }

    @Test(timeout = 4000)
    public void test5156() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonNode jsonNode0 = objectNode0.replace("zT4YsA$\"1Q'Zj/2)*j", objectNode0);
    }

    @Test(timeout = 4000)
    public void test5257() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        JsonNode jsonNode0 = objectNode0.replace("!=U)md/", (JsonNode) null);
    }

    @Test(timeout = 4000)
    public void test5358() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        JsonNode jsonNode0 = objectNode0.put(":`", (JsonNode) objectNode0);
    }

    @Test(timeout = 4000)
    public void test5459() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, (Map<String, JsonNode>) null);
        objectNode0.put("com.fasterxml.jackson.databind.ser.std.NumberSerializer", (JsonNode) null);
    }

    @Test(timeout = 4000)
    public void test5560() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        Short short0 = new Short((short) (-1202));
        ObjectNode objectNode1 = objectNode0.put(" getter: ", short0);
        objectNode1.textValue();
    }

    @Test(timeout = 4000)
    public void test5661() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("=9zI)RRvckwLgHU", (Short) null);
        objectNode1.isFloatingPointNumber();
    }

    @Test(timeout = 4000)
    public void test5762() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Integer integer0 = new Integer(0);
        ObjectNode objectNode1 = objectNode0.put(":Q)fa-", integer0);
        objectNode1.asText();
    }

    @Test(timeout = 4000)
    public void test5863() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("LpN@SVwK` vp{;", (Integer) null);
    }

    @Test(timeout = 4000)
    public void test5964() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("ftfMh", (Long) null);
    }

    @Test(timeout = 4000)
    public void test6065() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Float float0 = new Float((-176.3724F));
        ObjectNode objectNode1 = objectNode0.put("#-H*<g;}-e", float0);
        objectNode1.asText();
    }

    @Test(timeout = 4000)
    public void test6166() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("]`", (Float) null);
        objectNode1.numberType();
    }

    @Test(timeout = 4000)
    public void test6267() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        Double double0 = new Double(1.0);
        ObjectNode objectNode1 = objectNode0.put("oU^yF5p'{<R%j1T%", double0);
        objectNode1.asText();
    }

    @Test(timeout = 4000)
    public void test6368() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.put("SOLID_MATCH", (Double) null);
        objectNode1.size();
    }

    @Test(timeout = 4000)
    public void test6469() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        BigDecimal bigDecimal0 = BigDecimal.TEN;
        ObjectNode objectNode1 = objectNode0.put("XgZ15KUnv2B}", bigDecimal0);
        objectNode1.numberType();
    }

    @Test(timeout = 4000)
    public void test6570() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put((String) null, (BigDecimal) null);
        objectNode1.isLong();
    }

    @Test(timeout = 4000)
    public void test6671() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.put("-}+OPSl29", "-}+OPSl29");
        objectNode1.isDouble();
    }

    @Test(timeout = 4000)
    public void test6772() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        ObjectNode objectNode1 = objectNode0.put("{", (String) null);
        objectNode1.isInt();
    }

    @Test(timeout = 4000)
    public void test6873() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        Boolean boolean0 = new Boolean(", copied ");
        ObjectNode objectNode1 = objectNode0.put("2|UEa<\"`(2d", boolean0);
    }

    @Test(timeout = 4000)
    public void test6974() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ObjectNode objectNode1 = objectNode0.put("Xab^sEK*<|~69/<2V", (Boolean) null);
        objectNode1.isLong();
    }

    @Test(timeout = 4000)
    public void test7075() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        ObjectNode objectNode1 = objectNode0.put("Internal error: entry should be a Number, but is of type ", (byte[]) null);
        objectNode1.textValue();
    }

    @Test(timeout = 4000)
    public void test7176() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        ObjectNode objectNode0 = arrayNode0.insertObject(0);
        boolean boolean0 = objectNode0.equals(objectNode0);
    }

    @Test(timeout = 4000)
    public void test7277() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
        boolean boolean0 = objectNode0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test7378() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        NullNode nullNode0 = jsonNodeFactory0.nullNode();
        boolean boolean0 = objectNode0.equals(nullNode0);
    }

    @Test(timeout = 4000)
    public void test7479() throws Throwable {
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        objectNode0.withArray("");
        byte[] byteArray0 = new byte[0];
        ObjectNode objectNode1 = objectNode0.put(")", byteArray0);
        String string0 = objectNode1.toString();
    }
}
