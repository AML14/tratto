/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 01:41:42 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.nio.CharBuffer;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalField;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class SimpleType_ESTest extends SimpleType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<SimpleType> class0 = SimpleType.class;
        SimpleType simpleType0 = new SimpleType(class0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
        simpleType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        simpleType0.toString();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        simpleType0.withContentValueHandler(class0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        simpleType0.buildCanonicalName();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        SimpleType simpleType1 = simpleType0.withStaticTyping();
        simpleType0.equals(simpleType1);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        SimpleType simpleType1 = simpleType0.withStaticTyping();
        simpleType1.withStaticTyping();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        simpleType0.withContentTypeHandler("com.fasterxml.jackson.databind.type.SimpleType");
        simpleType0.toString();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        simpleType0.withTypeHandler((Object) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<ChronoUnit> class0 = ChronoUnit.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        simpleType0.equals(class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<ChronoUnit> class0 = ChronoUnit.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        simpleType0.withContentType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        simpleType0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        simpleType0.withValueHandler(simpleType0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        simpleType0.getGenericSignature();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        simpleType0.getErasedSignature();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        simpleType0.withTypeHandler(simpleType0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ChronoUnit> class0 = ChronoUnit.class;
        typeFactory0.constructArrayType(class0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType.constructUnsafe(class0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        SimpleType simpleType1 = new SimpleType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        referenceType0.withContentTypeHandler(simpleType0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        Class<Object> class0 = Object.class;
        simpleType0._narrow(class0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Class<TemporalField> class0 = TemporalField.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        simpleType0._narrow(class0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        simpleType0.withValueHandler((Object) null);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        SimpleType simpleType1 = TypeFactory.CORE_TYPE_LONG;
        simpleType0.equals(simpleType1);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        simpleType0.equals(simpleType0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        SimpleType.construct(class0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        Class<LinkedList> class0 = LinkedList.class;
        SimpleType.construct(class0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        Class<String> class1 = String.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        SimpleType simpleType0 = new SimpleType(collectionType0);
        char[] charArray0 = new char[1];
        CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
        StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
        simpleType0.getGenericSignature(stringBuilder0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
        Class<TemporalField> class2 = TemporalField.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
        SimpleType simpleType0 = new SimpleType(mapType0);
        simpleType0.toString();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        Class<String> class1 = String.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        SimpleType simpleType0 = new SimpleType(collectionType0);
        simpleType0.toString();
    }
}
