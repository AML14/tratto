/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 02:42:13 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBase;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.net.Proxy;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeBindings_ESTest extends TypeBindings_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeBindings.TypeParamStash typeBindings_TypeParamStash0 = new TypeBindings.TypeParamStash();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Proxy.Type> class1 = Proxy.Type.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
        JavaType[] javaTypeArray0 = collectionLikeType0.findTypeParameters(class0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        TypeBindings typeBindings1 = (TypeBindings) typeBindings0.readResolve();
        typeBindings1.size();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        typeBindings0.hashCode();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        JavaType[] javaTypeArray0 = new JavaType[2];
        javaTypeArray0[0] = (JavaType) collectionType0;
        javaTypeArray0[1] = (JavaType) collectionType0;
        Class<Map> class1 = Map.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
        String string0 = typeBindings0.toString();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        JavaType[] javaTypeArray0 = new JavaType[2];
        javaTypeArray0[0] = (JavaType) collectionType0;
        javaTypeArray0[1] = (JavaType) collectionType0;
        Class<Map> class1 = Map.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
        String string0 = typeBindings0.toString();
        typeBindings0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        TypeBindings typeBindings1 = (TypeBindings) typeBindings0.readResolve();
        typeBindings1.size();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        TypeBindings.create(class0, (List<JavaType>) null);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
        typeBindings0.size();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Class<ReferenceType> class0 = ReferenceType.class;
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        linkedList0.add((JavaType) simpleType0);
        TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        Class<Integer> class0 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
        typeBindings0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        JavaType javaType0 = mapType0.containedTypeOrUnknown(1);
        javaType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        JavaType[] javaTypeArray0 = new JavaType[2];
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        TypeBindings.create(class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        typeBindings0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Class<Map> class0 = Map.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        JavaType[] javaTypeArray0 = new JavaType[1];
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
        typeBindings0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        TypeBindings.createIfNeeded(class0, (JavaType[]) null);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        JavaType[] javaTypeArray0 = new JavaType[1];
        Class<Map> class0 = Map.class;
        TypeBindings.createIfNeeded(class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("_b;Z(\"B,QdH2)E,zds");
        TypeBindings typeBindings2 = typeBindings1.withUnboundVariable("_b;Z(\"B,QdH2)E,zds");
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        JavaType javaType0 = typeBindings0.findBoundType("~&{,22vsQ\"C");
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        JavaType javaType0 = TypeBase._bogusSuperClass(class0);
        ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<ArrayList> class0 = ArrayList.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) resolvedRecursiveType0);
        typeBindings0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<ArrayList> class0 = ArrayList.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        Class<TypeBindings> class1 = TypeBindings.class;
        JavaType[] javaTypeArray0 = new JavaType[4];
        javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
        CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[0]);
        resolvedRecursiveType0.setReference(collectionType0);
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) resolvedRecursiveType0);
        typeBindings0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        String string0 = typeBindings0.getBoundName((-1440));
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        String string0 = typeBindings0.getBoundName(0);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        String string0 = typeBindings0.getBoundName(0);
        typeBindings0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        String string0 = typeBindings0.getBoundName(52);
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        JavaType javaType0 = typeBindings0.getBoundType((-2744));
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        JavaType javaType0 = typeBindings0.getBoundType(0);
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        List<JavaType> list0 = typeBindings0.getTypeParameters();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        boolean boolean0 = typeBindings0.hasUnbound("E");
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        TypeBindings typeBindings1 = typeBindings0.withUnboundVariable(" with 1 type parameter: class expects ");
        boolean boolean0 = typeBindings1.hasUnbound("");
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("");
        boolean boolean0 = typeBindings1.hasUnbound("");
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        String string0 = typeBindings0.toString();
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) referenceType0);
        TypeBindings typeBindings1 = TypeBindings.create((Class<?>) class0, (JavaType) simpleType0);
        boolean boolean0 = typeBindings0.equals(typeBindings1);
        typeBindings0.size();
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) referenceType0);
        TypeBindings typeBindings1 = TypeBindings.create((Class<?>) class0, (JavaType) simpleType0);
        boolean boolean0 = typeBindings0.equals(typeBindings1);
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        boolean boolean0 = typeBindings0.equals(typeBindings0);
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        boolean boolean0 = typeBindings0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        Stack<JavaType> stack0 = new Stack<JavaType>();
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        boolean boolean0 = typeBindings0.equals(stack0);
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        TypeBindings typeBindings1 = TypeFactory.EMPTY_BINDINGS;
        boolean boolean0 = typeBindings1.equals(typeBindings0);
    }

    @Test(timeout = 4000)
    public void test3640() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        TypeBindings typeBindings1 = TypeFactory.EMPTY_BINDINGS;
        boolean boolean0 = typeBindings1.equals(typeBindings0);
        typeBindings0.equals((Object) typeBindings1);
    }

    @Test(timeout = 4000)
    public void test3741() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        boolean boolean0 = typeBindings0.equals(typeBindings1);
    }

    @Test(timeout = 4000)
    public void test3742() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        boolean boolean0 = typeBindings0.equals(typeBindings1);
        typeBindings1.isEmpty();
    }
}
