/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:24:33 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.HierarchicType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.type.TypeParser;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.MinguoEra;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeFactory_ESTest extends TypeFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        collectionType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Class<CreatorProperty> class0 = CreatorProperty.class;
        SimpleType simpleType0 = new SimpleType(class0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        JavaType[] javaTypeArray0 = new JavaType[2];
        typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapType0);
        arrayType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        mapLikeType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.clearCache();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        collectionLikeType0.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        collectionLikeType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType[] javaTypeArray0 = new JavaType[1];
        typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        typeFactory0.constructSpecializedType(arrayType0, class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructType((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, mapType0);
        javaType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        JavaType javaType0 = TypeFactory.unknownType();
        TypeFactory typeFactory0 = TypeFactory.instance;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, javaType0);
        collectionLikeType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructFromCanonical("5qToukNo$#*Y");
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SimpleModule> class0 = SimpleModule.class;
        Class<CollectionType>[] classArray0 = (Class<CollectionType>[]) Array.newInstance(Class.class, 1);
        typeFactory0.constructParametricType(class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        JavaType javaType0 = TypeFactory.unknownType();
        TypeFactory typeFactory0 = TypeFactory.instance;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, javaType0, javaType0);
        mapLikeType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier1);
        typeFactory2.equals((Object) typeFactory1);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Integer> class0 = Integer.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        Class<?> class1 = TypeFactory.rawClass(arrayType0);
        typeFactory0._constructType(class1, (TypeBindings) null);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        Class<?> class1 = TypeFactory.rawClass(class0);
        class1.isEnum();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CreatorProperty> class0 = CreatorProperty.class;
        SimpleType simpleType0 = new SimpleType(class0);
        JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        JavaType javaType0 = typeFactory0.constructSpecializedType(typeBindings0.UNBOUND, class0);
        javaType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Class<CollectionType> class0 = CollectionType.class;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        SimpleType simpleType1 = simpleType0.withTypeHandler(class0);
        JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType1, class0);
        javaType0.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        JavaType javaType0 = simpleType0.widenBy(class0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        objectMapper0.acceptJsonFormatVisitor(javaType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<BinaryNode> class0 = BinaryNode.class;
        Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);
        JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class1);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<BinaryNode> class0 = BinaryNode.class;
        Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);
        JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class1);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<BinaryNode> class0 = BinaryNode.class;
        Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class1, javaTypeArray0);
        JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class1);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        Class<MapType> class0 = MapType.class;
        typeFactory0.findTypeParameters((JavaType) simpleType0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        Class<Object> class1 = Object.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        Class<?> class2 = collectionType0.getParameterSource();
        Class<ClassKey> class3 = ClassKey.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class2, (Class<?>) class3);
        javaType0.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, (JavaType) null);
        javaType1.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, simpleType0);
        JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, typeBindings0.UNBOUND);
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructType((Type) null, (Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        JavaType javaType0 = typeFactory0.constructType((Type) simpleType0, (JavaType) simpleType0);
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MinguoEra> class0 = MinguoEra.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (JavaType) null);
        javaType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        Class<MapType> class1 = MapType.class;
        JavaType javaType0 = typeFactory1.constructType((Type) class0, (Class<?>) class1);
        javaType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SimpleType> class0 = SimpleType.class;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[1];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        typeFactory1.constructType((Type) class0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test3941() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        JavaType[] javaTypeArray0 = new JavaType[1];
        typeFactory0.constructParametricType(class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SimpleModule> class0 = SimpleModule.class;
        Class<CollectionType>[] classArray0 = (Class<CollectionType>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        JavaType[] javaTypeArray0 = new JavaType[1];
        typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test4244() throws Throwable {
        Class<ArrayList> class0 = ArrayList.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType[] javaTypeArray0 = new JavaType[0];
        typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test4345() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Long> class0 = Long.TYPE;
        Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class1);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test4446() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, arrayList0);
        javaType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test4547() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Stack<JavaType> stack0 = new Stack<JavaType>();
        Class<MinguoEra> class0 = MinguoEra.class;
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);
        javaType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test4648() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
        javaType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test4749() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Vector<JavaType> vector0 = new Vector<JavaType>();
        vector0.add((JavaType) simpleType0);
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
        javaType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test4850() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Vector<JavaType> vector0 = new Vector<JavaType>();
        vector0.add((JavaType) simpleType0);
        vector0.add((JavaType) simpleType0);
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test4951() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SimpleType> class0 = SimpleType.class;
        Stack<JavaType> stack0 = new Stack<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);
        javaType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test5052() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = TypeFactory.unknownType();
        Class<ArrayList> class0 = ArrayList.class;
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        linkedList0.add(javaType0);
        JavaType javaType1 = typeFactory0._fromParameterizedClass(class0, linkedList0);
        javaType1.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test5153() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SimpleType> class0 = SimpleType.class;
        Stack<JavaType> stack0 = new Stack<JavaType>();
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        stack0.add(javaType0);
        typeFactory0._fromParameterizedClass(class0, stack0);
    }

    @Test(timeout = 4000)
    public void test5254() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._resolveVariableViaSubTypes((HierarchicType) null, "2+u%&cXPr", (TypeBindings) null);
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test5355() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SimpleType> class0 = SimpleType.class;
        Class<Object> class1 = Object.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class1);
        hierarchicType0.isGeneric();
    }

    @Test(timeout = 4000)
    public void test5456() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        Class<CollectionType> class1 = CollectionType.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class1);
    }

    @Test(timeout = 4000)
    public void test5557() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class1 = Object.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
        hierarchicType0.isGeneric();
    }

    @Test(timeout = 4000)
    public void test5658() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectWriter> class0 = ObjectWriter.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class0);
        typeFactory0._hashMapSuperInterfaceChain(hierarchicType0);
    }

    @Test(timeout = 4000)
    public void test5759() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0._arrayListSuperInterfaceChain((HierarchicType) null);
    }
}
