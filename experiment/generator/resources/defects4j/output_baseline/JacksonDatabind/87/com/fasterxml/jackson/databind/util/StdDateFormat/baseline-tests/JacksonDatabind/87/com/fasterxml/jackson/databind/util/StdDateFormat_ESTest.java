/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 07:13:02 GMT 2024
 */
package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        Locale locale0 = Locale.TAIWAN;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getISO8601Format((TimeZone) null);
        mockSimpleDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getRFC1123Format((TimeZone) null);
        mockSimpleDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.forLanguageTag("");
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        TimeZone timeZone1 = stdDateFormat0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.hashCode();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TimeZone timeZone0 = TimeZone.getTimeZone("");
        Locale locale0 = Locale.JAPANESE;
        TimeZone timeZone1 = TimeZone.getTimeZone("");
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone1);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Locale locale0 = Locale.PRC;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        stdDateFormat1.parse("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Locale locale0 = Locale.US;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, (Locale) null);
        stdDateFormat0.setTimeZone(timeZone0);
        timeZone0.getID();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        TimeZone timeZone0 = TimeZone.getDefault();
        stdDateFormat0.setTimeZone(timeZone0);
        stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.setLenient(true);
        stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        boolean boolean0 = stdDateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Date date0 = stdDateFormat0.parse("0");
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Date date0 = stdDateFormat0.parse("1582-10-15T00:00:00.000+0000");
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Date date0 = stdDateFormat0.parse("-0");
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse(")");
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(1);
        stdDateFormat0.parseObject("2014-02-14T20:21:21.320+0000", parsePosition0);
        parsePosition0.getIndex();
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(1);
        stdDateFormat0.parseObject("2014-02-14T20:21:21.320+0000", parsePosition0);
        parsePosition0.getErrorIndex();
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parseObject("0");
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parseObject("-");
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parseObject("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        String string0 = stdDateFormat0.instance.format(date0);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        String string0 = stdDateFormat0.toString();
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        boolean boolean0 = stdDateFormat0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("8JdG1V8wzx2q(XSh");
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("0.000");
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parseAsISO8601(".000", (ParsePosition) null, false);
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parseAsISO8601("y6)]-X\"4m ", (ParsePosition) null, false);
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parseAsISO8601("y.3ogo$BfvJLw3O:t<Z", (ParsePosition) null, true);
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (ParsePosition) null, false);
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parseAsISO8601("(locale: ", (ParsePosition) null, true);
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition(638);
        stdDateFormat0.parseAsISO8601("eJXu:g-*?(S-HP:rK", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        ParsePosition parsePosition0 = new ParsePosition((-1092));
        stdDateFormat0.parseAsISO8601("f\"R>X#-):", parsePosition0, false);
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parseAsISO8601(">]/@?+W_^.F", (ParsePosition) null, true);
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parseAsISO8601(")SrMG#$Rc+;6", (ParsePosition) null, false);
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parseAsISO8601("yvR+;3;#", (ParsePosition) null, true);
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parseAsISO8601("com.fasterxml.jackson.core.io.NumberInput", (ParsePosition) null, true);
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parseAsISO8601("*'KlEo>q{w", (ParsePosition) null, true);
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parseAsISO8601("DateFormat ", (ParsePosition) null, false);
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parseAsISO8601("(kawq", (ParsePosition) null, true);
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(9);
        stdDateFormat0.parseAsISO8601("]2\"'C0nB- <'O", parsePosition0, true);
    }

    @Test(timeout = 4000)
    public void test4344() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("Can not parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)");
    }
}
