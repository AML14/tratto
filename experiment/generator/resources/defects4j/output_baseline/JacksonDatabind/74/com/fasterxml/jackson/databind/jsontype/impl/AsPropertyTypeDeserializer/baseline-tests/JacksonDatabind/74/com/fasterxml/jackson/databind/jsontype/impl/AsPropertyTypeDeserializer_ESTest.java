/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 06:37:43 GMT 2024
 */
package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AsPropertyTypeDeserializer_ESTest extends AsPropertyTypeDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, (TypeIdResolver) null, "Y46&.\"gCa@,bhPcfm", false, mapLikeType0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, (Annotations) null, (AnnotatedParameter) null, 0, "Y46&.\"gCa@,bhPcfm", (PropertyMetadata) null);
        creatorProperty0.isRequired();
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, ".Gz#9\"#C", false, (JavaType) null);
        String string0 = objectMapper0.writeValueAsString(asPropertyTypeDeserializer0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, classNameIdResolver0, "u6", true, mapType0, jsonTypeInfo_As0);
        TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty((BeanProperty) null);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
        asPropertyTypeDeserializer0.deserializeTypedFromAny(jsonParser0, deserializationContext0);
        jsonParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
        asPropertyTypeDeserializer0.deserializeTypedFromAny(jsonParser0, deserializationContext0);
        jsonParser0.hasCurrentToken();
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        BooleanNode booleanNode0 = BooleanNode.getFalse();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, deserializationContext0);
        Object object0 = asPropertyTypeDeserializer0._deserializeTypedUsingDefaultImpl(jsonParser0, deserializationContext0, tokenBuffer0);
    }
}
