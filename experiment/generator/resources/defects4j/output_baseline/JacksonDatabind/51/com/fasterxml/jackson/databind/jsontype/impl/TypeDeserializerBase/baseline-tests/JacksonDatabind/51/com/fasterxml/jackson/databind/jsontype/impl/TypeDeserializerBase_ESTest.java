/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 02:29:51 GMT 2024
 */
package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.ObjectInputStream;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeDeserializerBase_ESTest extends TypeDeserializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<ObjectInputStream> class0 = ObjectInputStream.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "vze v`s0_X<[0CB", true, simpleType0, jsonTypeInfo_As0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        objectMapper0.writeValue((JsonGenerator) tokenBuffer0, (Object) asPropertyTypeDeserializer0);
        asPropertyTypeDeserializer0.getPropertyName();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "g", false, (JavaType) null);
        String string0 = asWrapperTypeDeserializer0.toString();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "g", false, (JavaType) null);
        String string0 = asWrapperTypeDeserializer0.toString();
        asWrapperTypeDeserializer0.getPropertyName();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "g", false, (JavaType) null);
        asWrapperTypeDeserializer0.baseTypeName();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "JSON", true, (JavaType) null);
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0);
        asWrapperTypeDeserializer0.getPropertyName();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = null;
        asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((AsPropertyTypeDeserializer) null, (BeanProperty) null);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, (String) null, false, (JavaType) null);
        asWrapperTypeDeserializer0.getPropertyName();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.AbstractDeserializer", false, (JavaType) null);
        Class<?> class1 = asExternalTypeDeserializer0.getDefaultImpl();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.AbstractDeserializer", false, (JavaType) null);
        Class<?> class1 = asExternalTypeDeserializer0.getDefaultImpl();
        asExternalTypeDeserializer0.getPropertyName();
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "JSON", true, (JavaType) null);
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0, jsonParser0);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, (TypeIdResolver) null, "; base-type:", true, simpleType0);
        asWrapperTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, typeFactory0);
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "uT)4++` S]M&3ry", false, simpleType0);
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
        asWrapperTypeDeserializer0._defaultImplDeserializer = (JsonDeserializer<Object>) coreXMLDeserializers_Std0;
        asWrapperTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
        asWrapperTypeDeserializer0.getPropertyName();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, "xzHOFZ:r6gB*|<a9`", false, (JavaType) null);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("xzHOFZ:r6gB*|<a9`");
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0, "xzHOFZ:r6gB*|<a9`");
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
        asPropertyTypeDeserializer0._handleUnknownTypeId((DeserializationContext) null, "", (TypeIdResolver) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        Class<ObjectInputStream> class0 = ObjectInputStream.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, minimalClassNameIdResolver0, "vze v`s0_X<[0CB", true, simpleType0, jsonTypeInfo_As0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        asPropertyTypeDeserializer0._handleUnknownTypeId(deserializationContext0, "vze v`s0_X<[0CB", minimalClassNameIdResolver0, simpleType0);
    }
}
