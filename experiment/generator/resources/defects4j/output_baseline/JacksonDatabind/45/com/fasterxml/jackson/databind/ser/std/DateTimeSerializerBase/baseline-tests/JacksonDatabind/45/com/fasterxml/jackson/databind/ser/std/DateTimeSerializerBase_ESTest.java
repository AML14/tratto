/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 01:44:22 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.time.format.TextStyle;
import java.util.Calendar;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeSerializerBase_ESTest extends DateTimeSerializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CalendarSerializer calendarSerializer0 = new CalendarSerializer();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<TextStyle> class1 = TextStyle.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
        calendarSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, mapType0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CalendarSerializer calendarSerializer0 = new CalendarSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(calendarSerializer0, (BeanProperty) null);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CalendarSerializer calendarSerializer0 = new CalendarSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        JavaType javaType0 = TypeFactory.unknownType();
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaType0, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
        defaultSerializerProvider_Impl0.handleSecondaryContextualization(calendarSerializer0, beanProperty_Std0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        boolean boolean0 = calendarSerializer0.isEmpty((Calendar) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CalendarSerializer calendarSerializer0 = new CalendarSerializer();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(252, 252, (-2147483646));
        boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        CalendarSerializer calendarSerializer0 = new CalendarSerializer();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        CalendarSerializer calendarSerializer0 = new CalendarSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(55, 55, 55, 55, 1183, 55);
        boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<TextStyle> class0 = TextStyle.class;
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        CalendarSerializer calendarSerializer0 = new CalendarSerializer((Boolean) null, dateFormat0);
        JsonNode jsonNode0 = calendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);
        jsonNode0.booleanValue();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<TextStyle> class0 = TextStyle.class;
        Boolean boolean0 = Boolean.TRUE;
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        CalendarSerializer calendarSerializer0 = new CalendarSerializer(boolean0, dateFormat0);
        JsonNode jsonNode0 = calendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, false);
        jsonNode0.isFloatingPointNumber();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        CalendarSerializer calendarSerializer0 = new CalendarSerializer();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        calendarSerializer0.serialize((Calendar) mockGregorianCalendar0, (JsonGenerator) null, (SerializerProvider) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        calendarSerializer0._asTimestamp(defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
        sqlDateSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Boolean boolean0 = Boolean.TRUE;
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<DoubleNode> class0 = DoubleNode.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
        sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, collectionLikeType0);
        collectionLikeType0.isContainerType();
    }
}
