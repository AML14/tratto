/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 00:24:13 GMT 2024
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.DataInputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.util.HashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanDeserializer_ESTest extends BeanDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, true);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        POJONode pOJONode0 = new POJONode((Object) null);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(pOJONode0);
        DataInputStream dataInputStream0 = objectReader0.readValue(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("uX}", "CSkC<F7bZ:$CH_");
        NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, nameTransformer1);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, (ObjectIdReader) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        HashSet<String> hashSet0 = new HashSet<String>();
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, hashSet0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        objectReader0.readValue(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        objectMapper0.readerFor(class0);
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectMapper0.treeAsTokens(objectNode0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<BeanDeserializer> class1 = BeanDeserializer.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class1);
        objectMapper0.convertValue((Object) class0, javaType0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        IntNode intNode0 = IntNode.valueOf((-940));
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(intNode0);
        objectReader0.readValue(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        DecimalNode decimalNode0 = DecimalNode.ZERO;
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(decimalNode0);
        objectReader0.readValue(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
        objectReader0.readValue(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CreatorProperty> class0 = CreatorProperty.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        BooleanNode booleanNode0 = BooleanNode.FALSE;
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
        objectReader0.readValue(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(arrayNode0);
        objectReader0.readValue(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        BigInteger bigInteger0 = BigInteger.TEN;
        BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
        JsonNode jsonNode0 = bigIntegerNode0.path((-243));
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(jsonNode0);
        objectReader0.readValue(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        objectMapper0.readerForUpdating(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.putNull("eyc");
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonParser0);
        objectReader0.readValue(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        ObjectNode objectNode1 = objectNode0.putNull("';z&,$f^kT1RV@2~ze");
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode1);
        objectReader0.readValue(jsonParser0);
    }
}
