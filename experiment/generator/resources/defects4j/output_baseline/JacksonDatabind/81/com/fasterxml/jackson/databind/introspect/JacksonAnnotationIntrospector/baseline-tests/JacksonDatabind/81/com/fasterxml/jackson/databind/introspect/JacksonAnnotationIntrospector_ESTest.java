/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 07:01:52 GMT 2024
 */
package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JacksonAnnotationIntrospector_ESTest extends JacksonAnnotationIntrospector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<?> class0 = jacksonAnnotationIntrospector0.findSerializationType((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jacksonAnnotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructNoTypeResolverBuilder();
        stdTypeResolverBuilder0.getTypeProperty();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructStdTypeResolverBuilder();
        stdTypeResolverBuilder0.isTypeIdVisible();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<AttributePropertyWriter> class0 = AttributePropertyWriter.class;
        Vector<JavaType> vector0 = new Vector<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
        Class<MapperFeature> class1 = MapperFeature.class;
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
        MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) arrayType0, (JavaType[]) null, (JavaType) arrayType0, (JavaType) arrayType0);
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType0, (JavaType[]) null, (JavaType) arrayType0);
        Class<?> class2 = jacksonAnnotationIntrospector0.findDeserializationContentType((Annotated) null, referenceType0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        Class<MapperFeature> class0 = MapperFeature.class;
        ObjectReader objectReader1 = objectReader0.forType(class0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        jacksonAnnotationIntrospector0.isTypeId((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        JavaType javaType0 = TypeFactory.unknownType();
        Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationType(annotatedClass0, javaType0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        Class<Boolean> class1 = Boolean.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
        TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
        VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, "#", simpleType0);
        Class<?> class2 = jacksonAnnotationIntrospector0.findSerializationKeyType(virtualAnnotatedMember0, simpleType0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        jacksonAnnotationIntrospector0.hasAnySetterAnnotation((AnnotatedMethod) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        JavaType javaType0 = TypeFactory.unknownType();
        Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationKeyType(annotatedClass0, javaType0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Version version0 = jacksonAnnotationIntrospector0.version();
        version0.getMinorVersion();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        jacksonAnnotationIntrospector0.hasAnyGetterAnnotation((AnnotatedMethod) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<?> class0 = jacksonAnnotationIntrospector0.findSerializationContentType((Annotated) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Object object0 = jacksonAnnotationIntrospector0.readResolve();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        jacksonAnnotationIntrospector0._annotationsInside = null;
        Object object0 = jacksonAnnotationIntrospector0.readResolve();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
        String string0 = jacksonAnnotationIntrospector0.findEnumValue(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        PropertyName propertyName0 = jacksonAnnotationIntrospector0.findRootName(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        objectMapper0.writeValue((OutputStream) byteArrayOutputStream0, (Object) jacksonAnnotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        String string0 = jacksonAnnotationIntrospector0.findClassDescription(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<Integer> class0 = Integer.class;
        VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "DCi>SkP>8:G|$:T'\"", (JavaType) null);
        Object object0 = jacksonAnnotationIntrospector0.findInjectableValueId(virtualAnnotatedMember0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        Class<MapLikeType> class0 = MapLikeType.class;
        ObjectReader objectReader1 = objectReader0.forType(class0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        List<NamedType> list0 = jacksonAnnotationIntrospector0.findSubtypes(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        String string0 = jacksonAnnotationIntrospector0.findTypeName(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        ObjectIdInfo objectIdInfo0 = jacksonAnnotationIntrospector0.findObjectReferenceInfo(annotatedClass0, (ObjectIdInfo) null);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Integer> class0 = Integer.TYPE;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        JavaType javaType0 = TypeFactory.unknownType();
        MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0, javaType0);
        ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) mapType0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        Object object0 = jacksonAnnotationIntrospector0.findNullSerializer(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        JsonInclude.Value jsonInclude_Value0 = jacksonAnnotationIntrospector0.findPropertyInclusion(annotatedClass0);
        jsonInclude_Value0.getValueInclusion();
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<String> class0 = String.class;
        VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "ifs]T5:o", (JavaType) null);
        Object object0 = jacksonAnnotationIntrospector0.findSerializationContentConverter(virtualAnnotatedMember0);
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        Class<Object> class0 = Object.class;
        ObjectReader objectReader1 = objectReader0.forType(class0);
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = jacksonAnnotationIntrospector0.findPOJOBuilderConfig(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        boolean boolean0 = jacksonAnnotationIntrospector0.hasCreatorAnnotation(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector1 = jacksonAnnotationIntrospector0.setConstructorPropertiesImpliesCreator(false);
        boolean boolean0 = jacksonAnnotationIntrospector1.hasCreatorAnnotation(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
        BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
        jacksonAnnotationIntrospector0.findCreatorBinding(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<String> class0 = String.class;
        Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit((Class<?>) null, class0);
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
        Class<MapperFeature> class1 = MapperFeature.class;
        Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class1, class0);
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
        Class<MapperFeature> class1 = MapperFeature.class;
        Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class1, class0);
        class2.toString();
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
        Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class0);
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("w<ydooldwR.l:r^", (String) null);
        propertyName0.hasSimpleName();
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("", "");
        propertyName0.hasSimpleName();
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("zr8r>B`Ct5W^", "");
        propertyName0.getSimpleName();
    }

    @Test(timeout = 4000)
    public void test4042() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("zr8r>B`Ct5W^", "");
        propertyName0.hasNamespace();
    }

    @Test(timeout = 4000)
    public void test4143() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("\"e#ZL!", "\"e#ZL!");
        propertyName0.hasNamespace();
    }
}
