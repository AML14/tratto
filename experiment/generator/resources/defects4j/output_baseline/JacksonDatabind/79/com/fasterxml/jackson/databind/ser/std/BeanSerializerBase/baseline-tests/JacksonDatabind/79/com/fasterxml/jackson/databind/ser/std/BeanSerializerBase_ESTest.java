/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 06:56:30 GMT 2024
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.PropertyWriter;
import com.fasterxml.jackson.databind.ser.impl.IteratorSerializer;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator;
import com.fasterxml.jackson.databind.ser.impl.StringArraySerializer;
import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
import com.fasterxml.jackson.databind.ser.std.MapSerializer;
import com.fasterxml.jackson.databind.ser.std.StdArraySerializers;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanSerializerBase_ESTest extends BeanSerializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<StringArraySerializer> class0 = StringArraySerializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        Iterator<PropertyWriter> iterator0 = beanSerializer0.properties();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer0);
        jsonSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        objectMapper0.convertValue((Object) jsonFactory0, (JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
        MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeatureArray0[0];
        mapperFeatureArray0[2] = mapperFeature0;
        mapperFeatureArray0[3] = mapperFeature0;
        mapperFeatureArray0[4] = mapperFeatureArray0[1];
        mapperFeatureArray0[5] = mapperFeature0;
        mapperFeatureArray0[6] = mapperFeatureArray0[0];
        MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        mapperFeatureArray0[7] = mapperFeature1;
        objectMapper0.disable(mapperFeatureArray0);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer(class0);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
        objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer(class0);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        Class<JavaType> class0 = JavaType.class;
        JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) null, false);
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        JsonSerializer<?> jsonSerializer0 = beanSerializerBase0.createContextual(serializerProvider0, (BeanProperty) null);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<StdArraySerializers.DoubleArraySerializer> class1 = StdArraySerializers.DoubleArraySerializer.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapType0);
        boolean boolean0 = beanSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<StdArraySerializers.DoubleArraySerializer> class1 = StdArraySerializers.DoubleArraySerializer.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapType0);
        CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapType0, mapType0);
        Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
        Class<ObjectIdResolver> class3 = ObjectIdResolver.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo((PropertyName) null, class2, class2, class3);
        PropertyBasedObjectIdGenerator propertyBasedObjectIdGenerator0 = new PropertyBasedObjectIdGenerator(objectIdInfo0, (BeanPropertyWriter) null);
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) collectionLikeType0, (PropertyName) null, (ObjectIdGenerator<?>) propertyBasedObjectIdGenerator0, false);
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
        boolean boolean0 = beanSerializerBase0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        JsonFactory jsonFactory0 = new JsonFactory();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "");
        IteratorSerializer iteratorSerializer0 = new IteratorSerializer(simpleType0, false, asExternalTypeSerializer0);
        beanSerializer0.serializeWithType(iteratorSerializer0, jsonGenerator0, defaultSerializerProvider_Impl0, asExternalTypeSerializer0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        PropertyName propertyName0 = PropertyName.construct("O36KM|PeT+sa^ TXf)");
        ObjectIdGenerator<AsPropertyTypeSerializer> objectIdGenerator0 = (ObjectIdGenerator<AsPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(objectIdGenerator0).generateId(any());
        ObjectIdGenerator<AsPropertyTypeSerializer> objectIdGenerator1 = (ObjectIdGenerator<AsPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator1, false);
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        MockPrintStream mockPrintStream0 = new MockPrintStream("O36KM|PeT+sa^ TXf)");
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, beanSerializer0, false);
        byte[] byteArray0 = new byte[17];
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockPrintStream0, byteArray0, 17, false);
        beanSerializerBase0.serializeWithType(jsonEncoding0, uTF8JsonGenerator0, serializerProvider0, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        JsonFactory jsonFactory0 = new JsonFactory();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        Class<StringArraySerializer> class0 = StringArraySerializer.class;
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withFilterId(class0);
        AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer((TypeIdResolver) null, (BeanProperty) null, "");
        IteratorSerializer iteratorSerializer0 = new IteratorSerializer(simpleType0, false, asExternalTypeSerializer0);
        beanSerializerBase0.serializeWithType(iteratorSerializer0, jsonGenerator0, defaultSerializerProvider_Impl0, asExternalTypeSerializer0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        BeanSerializer beanSerializer0 = new BeanSerializer(javaType0, (BeanSerializerBuilder) null, (BeanPropertyWriter[]) null, (BeanPropertyWriter[]) null);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        ObjectIdGenerator<JavaType> objectIdGenerator0 = (ObjectIdGenerator<JavaType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn(javaType0).when(objectIdGenerator0).generateId(any());
        ObjectIdGenerator<JavaType> objectIdGenerator1 = (ObjectIdGenerator<JavaType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, objectIdGenerator1, false);
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);
        beanSerializerBase0.serialize(propertyName0, jsonGenerator0, serializerProvider0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        BeanSerializer beanSerializer0 = new BeanSerializer(javaType0, (BeanSerializerBuilder) null, (BeanPropertyWriter[]) null, (BeanPropertyWriter[]) null);
        PropertyName propertyName0 = PropertyName.NO_NAME;
        ObjectIdGenerator<StdArraySerializers.ShortArraySerializer> objectIdGenerator0 = (ObjectIdGenerator<StdArraySerializers.ShortArraySerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(objectIdGenerator0).generateId(any());
        ObjectIdGenerator<StdArraySerializers.ShortArraySerializer> objectIdGenerator1 = (ObjectIdGenerator<StdArraySerializers.ShortArraySerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, objectIdGenerator1, true);
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);
        beanSerializerBase0.serialize(beanSerializer0, jsonGenerator0, serializerProvider0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        PropertyName propertyName0 = PropertyName.construct("O36KM|PeT+sa^ TXf)");
        ObjectIdGenerator<AsPropertyTypeSerializer> objectIdGenerator0 = (ObjectIdGenerator<AsPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(objectIdGenerator0).generateId(any());
        ObjectIdGenerator<AsPropertyTypeSerializer> objectIdGenerator1 = (ObjectIdGenerator<AsPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator1, true);
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        MockPrintStream mockPrintStream0 = new MockPrintStream("O36KM|PeT+sa^ TXf)");
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, beanSerializer0, true);
        byte[] byteArray0 = new byte[17];
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockPrintStream0, byteArray0, 17, false);
        beanSerializerBase0.serializeWithType(jsonEncoding0, uTF8JsonGenerator0, serializerProvider0, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Class<StringArraySerializer> class0 = StringArraySerializer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withFilterId(simpleType0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanSerializerBase0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        beanSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, simpleType0);
        simpleType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
        beanSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, simpleType0);
        simpleType0.isContainerType();
    }
}
