/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 06:53:47 GMT 2024
 */
package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectIdInfo_ESTest extends ObjectIdInfo_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("Unexpected token (%s), expected %s", class0, class0);
        Class<? extends ObjectIdGenerator<?>> class1 = objectIdInfo0.getGeneratorType();
        objectIdInfo0.getAlwaysAsId();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("Unexpected token (%s), expected %s", class0, class0);
        Class<? extends ObjectIdGenerator<?>> class1 = objectIdInfo0.getGeneratorType();
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("Unexpected token (%s), expected %s", class0, class0);
        Class<? extends ObjectIdGenerator<?>> class1 = objectIdInfo0.getGeneratorType();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1);
        objectIdInfo0.getAlwaysAsId();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class0, class1);
        objectIdInfo0.getAlwaysAsId();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("com.fasterxml.jackson.core.JsonStreamContext", class0, class0);
        Class<? extends ObjectIdResolver> class1 = objectIdInfo0.getResolverType();
        objectIdInfo0.getAlwaysAsId();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("com.fasterxml.jackson.core.JsonStreamContext", class0, class0);
        Class<? extends ObjectIdResolver> class1 = objectIdInfo0.getResolverType();
        class1.getModifiers();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("com.fasterxml.jackson.core.JsonStreamContext", class0, class0);
        Class<? extends ObjectIdResolver> class1 = objectIdInfo0.getResolverType();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("comfasterml.jacksoncore.JsonStreamContext", class0, class0);
        boolean boolean0 = objectIdInfo0.getAlwaysAsId();
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("com.fasterxml.jackson.core.JsonStreamContext", class0, class0);
        PropertyName propertyName0 = objectIdInfo0.getPropertyName();
        objectIdInfo0.getAlwaysAsId();
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("com.fasterxml.jackson.core.JsonStreamContext", class0, class0);
        PropertyName propertyName0 = objectIdInfo0.getPropertyName();
    }

    @Test(timeout = 4000)
    public void test0611() throws Throwable {
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("", class0, class1);
        Class<?> class2 = objectIdInfo0.getScope();
        objectIdInfo0.getAlwaysAsId();
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("", class0, class1);
        Class<?> class2 = objectIdInfo0.getScope();
    }

    @Test(timeout = 4000)
    public void test0613() throws Throwable {
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("", class0, class1);
        Class<?> class2 = objectIdInfo0.getScope();
        class2.toString();
    }

    @Test(timeout = 4000)
    public void test0714() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("com.fasterxml.jackson.core.JsonStreamContext", class0, class0);
        ObjectIdInfo objectIdInfo1 = objectIdInfo0.withAlwaysAsId(true);
        objectIdInfo0.getAlwaysAsId();
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("com.fasterxml.jackson.core.JsonStreamContext", class0, class0);
        ObjectIdInfo objectIdInfo1 = objectIdInfo0.withAlwaysAsId(true);
        objectIdInfo1.getAlwaysAsId();
    }

    @Test(timeout = 4000)
    public void test0816() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("com.fasterxml.jackson.core.JsonStreamContext", class0, class0);
        ObjectIdInfo objectIdInfo1 = objectIdInfo0.withAlwaysAsId(false);
    }

    @Test(timeout = 4000)
    public void test0917() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("!1q1EO,zS4ggX!t#", class0, (Class<? extends ObjectIdGenerator<?>>) null);
        String string0 = objectIdInfo0.toString();
    }

    @Test(timeout = 4000)
    public void test1018() throws Throwable {
        Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("Can not construct instance of s, problem: %s", (Class<?>) null, class0);
        String string0 = objectIdInfo0.toString();
    }
}
