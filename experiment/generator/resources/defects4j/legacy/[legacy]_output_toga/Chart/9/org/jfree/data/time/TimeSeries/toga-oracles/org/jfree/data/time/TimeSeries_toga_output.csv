project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", dateFormatSymbols0);
    ParsePosition parsePosition0 = new ParsePosition(2);
    Date date0 = mockSimpleDateFormat0.parse(""java.lang.Class"", parsePosition0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Millisecond millisecond0 = new Millisecond(date0, timeZone0);
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", """", class0);
    timeSeries0.hashCode();
    assertEquals("""", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test0001,"public void test0001() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", dateFormatSymbols0);
    ParsePosition parsePosition0 = new ParsePosition(2);
    Date date0 = mockSimpleDateFormat0.parse(""java.lang.Class"", parsePosition0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Millisecond millisecond0 = new Millisecond(date0, timeZone0);
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", """", class0);
    timeSeries0.hashCode();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test0002,"public void test0002() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", dateFormatSymbols0);
    ParsePosition parsePosition0 = new ParsePosition(2);
    Date date0 = mockSimpleDateFormat0.parse(""java.lang.Class"", parsePosition0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Millisecond millisecond0 = new Millisecond(date0, timeZone0);
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", """", class0);
    timeSeries0.hashCode();
    assertEquals("""", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test0003,"public void test0003() throws Throwable {
    DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", dateFormatSymbols0);
    ParsePosition parsePosition0 = new ParsePosition(2);
    Date date0 = mockSimpleDateFormat0.parse(""java.lang.Class"", parsePosition0);
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Millisecond millisecond0 = new Millisecond(date0, timeZone0);
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", """", class0);
    timeSeries0.hashCode();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test0014,"public void test0014() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    assertTrue(timeSeries1.equals((Object) timeSeries0));
}",0,
project,0,test0015,"public void test0015() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries1.addOrUpdate((RegularTimePeriod) week0, (double) 33);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(timeSeries1.equals((Object) timeSeries0));
}",0,
project,0,test0016,"public void test0016() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries1.addOrUpdate((RegularTimePeriod) week0, (double) 33);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(boolean0);
}",0,
project,0,test0027,"public void test0027() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    RegularTimePeriod regularTimePeriod0 = year0.next();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}",0,
project,0,test0028,"public void test0028() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    RegularTimePeriod regularTimePeriod0 = year0.next();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test0029,"public void test0029() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    RegularTimePeriod regularTimePeriod0 = year0.next();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test00210,"public void test00210() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    RegularTimePeriod regularTimePeriod0 = year0.next();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,
project,0,test00311,"public void test00311() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance(3);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    timeSeries0.setMaximumItemCount(1);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test00412,"public void test00412() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", ""]?FcP(On#"", class0);
    assertEquals(""]?FcP(On#"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test00413,"public void test00413() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", ""]?FcP(On#"", class0);
    timeSeries0.setRangeDescription("""");
    assertEquals("""", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test00514,"public void test00514() throws Throwable {
    Millisecond millisecond0 = new Millisecond();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, """", ""]?FcP(On#"", class0);
    timeSeries0.setDomainDescription(""Invalid 'index': "");
    assertEquals(""Invalid 'index': "", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test00615,"public void test00615() throws Throwable {
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries("""", class0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 0.0);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test00616,"public void test00616() throws Throwable {
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries("""", class0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 0.0);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test00617,"public void test00617() throws Throwable {
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries("""", class0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 0.0);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test00618,"public void test00618() throws Throwable {
    Class<Year> class0 = Year.class;
    TimeSeries timeSeries0 = new TimeSeries("""", class0);
    Year year0 = new Year();
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 0.0);
    timeSeries0.add(timeSeriesDataItem0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test00719,"public void test00719() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getDefault();
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 0.0, true);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test00720,"public void test00720() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getDefault();
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 0.0, true);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test00721,"public void test00721() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getDefault();
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 0.0, true);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test00722,"public void test00722() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getDefault();
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, 0.0, true);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test00823,"public void test00823() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    timeSeries0.update(0, (Number) 1);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test00824,"public void test00824() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    timeSeries0.update(0, (Number) 1);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test00825,"public void test00825() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    timeSeries0.update(0, (Number) 1);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,
project,0,test00826,"public void test00826() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    timeSeries0.update(0, (Number) 1);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test00927,"public void test00927() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertTrue(boolean0);
}",0,
project,0,test00928,"public void test00928() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test00929,"public void test00929() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,
project,0,test00930,"public void test00930() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test00931,"public void test00931() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    boolean boolean0 = timeSeries0.equals(timeSeries0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test01032,"public void test01032() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test01033,"public void test01033() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test01034,"public void test01034() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test01035,"public void test01035() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test01036,"public void test01036() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
    assertEquals(0, timeSeries1.getItemCount());
}",0,"assertEquals(0, timeSeries1.getItemCount())"
project,0,test01137,"public void test01137() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01138,"public void test01138() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test01139,"public void test01139() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test01140,"public void test01140() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Minute minute0 = new Minute(mockDate0);
    Day day0 = minute0.getDay();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.add((RegularTimePeriod) day0, (Number) 0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test01241,"public void test01241() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(29, year0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""xq}MLAs|G'WLFu,"", class0);
    timeSeries0.add((RegularTimePeriod) week0, (double) 53);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01242,"public void test01242() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(29, year0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""xq}MLAs|G'WLFu,"", class0);
    timeSeries0.add((RegularTimePeriod) week0, (double) 53);
    assertEquals(""xq}MLAs|G'WLFu,"", timeSeries0.getRangeDescription());
}",0,
project,0,test01243,"public void test01243() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(29, year0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""xq}MLAs|G'WLFu,"", class0);
    timeSeries0.add((RegularTimePeriod) week0, (double) 53);
    assertEquals("""", timeSeries0.getDomainDescription());
}",0,
project,0,test01244,"public void test01244() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(29, year0);
    Class<Week> class0 = Week.class;
    TimeSeries timeSeries0 = new TimeSeries(week0, """", ""xq}MLAs|G'WLFu,"", class0);
    timeSeries0.add((RegularTimePeriod) week0, (double) 53);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test01345,"public void test01345() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals((-1.0), number0);
}",0,
project,0,test01346,"public void test01346() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test01347,"public void test01347() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test01348,"public void test01348() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertNotNull(number0);
}",0,assertNotNull(number0)
project,0,test01349,"public void test01349() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test01350,"public void test01350() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01451,"public void test01451() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test01452,"public void test01452() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test01453,"public void test01453() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertNotNull(number0);
}",0,
project,0,test01454,"public void test01454() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test01455,"public void test01455() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01556,"public void test01556() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(1.39240928132E12, number0);
}",0,
project,0,test01557,"public void test01557() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test01558,"public void test01558() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test01559,"public void test01559() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01560,"public void test01560() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test01561,"public void test01561() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    Number number0 = timeSeries0.getValue((RegularTimePeriod) hour0);
    assertNotNull(number0);
}",0,assertNotNull(number0)
project,0,test01662,"public void test01662() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", (Class) null);
    timeSeries0.getTimePeriodClass();
    assertEquals(""java.lang.Class"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test01663,"public void test01663() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", (Class) null);
    timeSeries0.getTimePeriodClass();
    assertEquals(""java.lang.Class"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test01664,"public void test01664() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", (Class) null);
    timeSeries0.getTimePeriodClass();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01665,"public void test01665() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", (Class) null);
    timeSeries0.getTimePeriodClass();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test01766,"public void test01766() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute(0, hour0);
    Second second0 = new Second(2883, minute0);
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(second0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test01767,"public void test01767() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute(0, hour0);
    Second second0 = new Second(2883, minute0);
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(second0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01768,"public void test01768() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute(0, hour0);
    Second second0 = new Second(2883, minute0);
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(second0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test01769,"public void test01769() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute(0, hour0);
    Second second0 = new Second(2883, minute0);
    Class<Object> class0 = Object.class;
    TimeSeries timeSeries0 = new TimeSeries(second0, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Value"", string0);
}",0,assertNotNull(string0)
project,0,test01870,"public void test01870() throws Throwable {
    MockDate mockDate0 = new MockDate(4350L);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""Null 'range' argument."", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test01871,"public void test01871() throws Throwable {
    MockDate mockDate0 = new MockDate(4350L);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""Null 'range' argument."", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""Null 'range' argument."", timeSeries0.getDomainDescription());
}",0,
project,0,test01872,"public void test01872() throws Throwable {
    MockDate mockDate0 = new MockDate(4350L);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""Null 'range' argument."", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01873,"public void test01873() throws Throwable {
    MockDate mockDate0 = new MockDate(4350L);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    Class<Millisecond> class0 = Millisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(millisecond0, ""Null 'range' argument."", """", class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals("""", string0);
}",0,
project,0,test01974,"public void test01974() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(264, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getNextTimePeriod();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test01975,"public void test01975() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(264, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getNextTimePeriod();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test01976,"public void test01976() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(264, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getNextTimePeriod();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test01977,"public void test01977() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(264, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getNextTimePeriod();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test02078,"public void test02078() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test02079,"public void test02079() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.setMaximumItemAge(0);
    timeSeries0.getMaximumItemAge();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test02180,"public void test02180() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries0.getItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test02181,"public void test02181() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries0.getItemCount();
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test02182,"public void test02182() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries0.getItemCount();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test02183,"public void test02183() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries0.getItemCount();
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test02284,"public void test02284() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test02285,"public void test02285() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test02286,"public void test02286() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test02287,"public void test02287() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test02388,"public void test02388() throws Throwable {
    Year year0 = new Year();
    Class<FixedMillisecond> class0 = FixedMillisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test02389,"public void test02389() throws Throwable {
    Year year0 = new Year();
    Class<FixedMillisecond> class0 = FixedMillisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
    String string0 = timeSeries0.getDomainDescription();
    assertNull(string0);
}",0,
project,0,test02390,"public void test02390() throws Throwable {
    Year year0 = new Year();
    Class<FixedMillisecond> class0 = FixedMillisecond.class;
    TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test02491,"public void test02491() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
    timeSeries0.getDataItem(0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test02492,"public void test02492() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
    timeSeries0.getDataItem(0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,
project,0,test02493,"public void test02493() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
    timeSeries0.getDataItem(0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test02494,"public void test02494() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
    timeSeries0.getDataItem(0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test02595,"public void test02595() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test02596,"public void test02596() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test02597,"public void test02597() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test02598,"public void test02598() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.setNotify(false);
    TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test02699,"public void test02699() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    Hour hour0 = minute0.getHour();
    timeSeries0.setMaximumItemCount(0);
    timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) hour0);
    assertEquals(0, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test027100,"public void test027100() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test027101,"public void test027101() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.setMaximumItemAge(0L);
    timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test028102,"public void test028102() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test028103,"public void test028103() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test028104,"public void test028104() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test028105,"public void test028105() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1.0));
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test029106,"public void test029106() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", class0);
    // Undeclared exception!
    try {
        timeSeries0.update((RegularTimePeriod) null, (Number) 59);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}",0,
project,0,test030107,"public void test030107() throws Throwable {
    Second second0 = new Second();
    Class<Second> class0 = Second.class;
    TimeSeries timeSeries0 = new TimeSeries(second0, ""Null 'start' argument."", """", class0);
    // Undeclared exception!
    try {
        timeSeries0.update(59, (Number) 59);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 59, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test031108,"public void test031108() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
    PropertyChangeListener propertyChangeListener0 = metalComboBoxUI0.createPropertyChangeListener();
    timeSeries0.addPropertyChangeListener(propertyChangeListener0);
    // Undeclared exception!
    try {
        timeSeries0.setDomainDescription(""FXx>Zd5FG:E_0INv"");
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.jfree.data.time.TimeSeries cannot be cast to javax.swing.JComboBox
        //
        verifyException(""javax.swing.plaf.basic.BasicComboBoxUI$Handler"", e);
    }
}",0,
project,0,test032109,"public void test032109() throws Throwable {
    XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
    Class<Integer> class0 = Integer.class;
    TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, class0);
    // Undeclared exception!
    try {
        timeSeries0.removeAgedItems((-3466L), true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test033110,"public void test033110() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.getValue((-260));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test034111,"public void test034111() throws Throwable {
    Year year0 = new Year();
    TimeSeries timeSeries0 = new TimeSeries(year0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test035112,"public void test035112() throws Throwable {
    MockDate mockDate0 = new MockDate(3, 3, (-746), (-746), (-746));
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Week week0 = new Week(mockDate0, timeZone0, locale0);
    Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
    TimeSeries timeSeries0 = new TimeSeries(week0, class0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriod(3673);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 3673, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test036113,"public void test036113() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    LinkedList<TimeSeries> linkedList0 = new LinkedList<TimeSeries>();
    timeSeries0.data = (List) linkedList0;
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1, Size: 0
        //
        verifyException(""java.util.LinkedList"", e);
    }
}",0,
project,0,test037114,"public void test037114() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    LinkedList<TimeSeries> linkedList0 = new LinkedList<TimeSeries>();
    timeSeries0.data = (List) linkedList0;
    linkedList0.add(timeSeries0);
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.jfree.data.time.TimeSeries cannot be cast to org.jfree.data.time.TimeSeriesDataItem
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test038115,"public void test038115() throws Throwable {
    Year year0 = new Year();
    Class<Hour> class0 = Hour.class;
    TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, (String) null, class0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test039116,"public void test039116() throws Throwable {
    MockDate mockDate0 = new MockDate();
    TimeZone timeZone0 = TimeZone.getDefault();
    Day day0 = new Day(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(day0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem((-1562));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test040117,"public void test040117() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    // Undeclared exception!
    try {
        timeSeries0.delete((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test041118,"public void test041118() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.data = null;
    // Undeclared exception!
    try {
        timeSeries0.delete((-1461), 999);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test042119,"public void test042119() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""org.jfree.data.time.FixedMillisecond"", class0);
    // Undeclared exception!
    try {
        timeSeries0.delete(2, 59);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 2, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test043120,"public void test043120() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance(3);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    List list0 = timeSeries0.getItems();
    timeSeries0.data = list0;
    Year year0 = new Year();
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableList"", e);
    }
}",1,
project,0,test044121,"public void test044121() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    LinkedList<TimeSeries> linkedList0 = new LinkedList<TimeSeries>();
    timeSeries0.data = (List) linkedList0;
    linkedList0.add(timeSeries0);
    Year year0 = new Year();
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test045122,"public void test045122() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(9999, year0);
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test046123,"public void test046123() throws Throwable {
    Hour hour0 = new Hour();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(hour0, class0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 0);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test047124,"public void test047124() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) week0, (Number) 53, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test048125,"public void test048125() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.data = null;
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test049126,"public void test049126() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, (Number) null, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}",0,
project,0,test050127,"public void test050127() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, (-1.0), true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}",0,
project,0,test051128,"public void test051128() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", class0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) minute0, (-2.147483648E9));
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of java.lang.String.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test052129,"public void test052129() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", (Class) null);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) minute0, (double) 59);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test053130,"public void test053130() throws Throwable {
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null, """", """", class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}",1,
project,0,test054131,"public void test054131() throws Throwable {
    Class<Integer> class0 = Integer.class;
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}",1,
project,0,test055132,"public void test055132() throws Throwable {
    TimeSeries timeSeries0 = null;
    try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'key' argument.
        //
        verifyException(""org.jfree.data.general.Series"", e);
    }
}",1,
project,0,test056133,"public void test056133() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(2, 29);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 2, Size: 1
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test057134,"public void test057134() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    // Undeclared exception!
    try {
        timeSeries0.delete((-1500), (-1500));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test058135,"public void test058135() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(false);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test058136,"public void test058136() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(false);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test058137,"public void test058137() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(false);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test058138,"public void test058138() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.removeAgedItems(false);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test059139,"public void test059139() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test059140,"public void test059140() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test059141,"public void test059141() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test059142,"public void test059142() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) bigInteger0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test060143,"public void test060143() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
    timeSeries0.add(timeSeriesDataItem0, true);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test060144,"public void test060144() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
    timeSeries0.add(timeSeriesDataItem0, true);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test060145,"public void test060145() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
    timeSeries0.add(timeSeriesDataItem0, true);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test060146,"public void test060146() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
    timeSeries0.add(timeSeriesDataItem0, true);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test061147,"public void test061147() throws Throwable {
    MockDate mockDate0 = new MockDate(0L);
    Millisecond millisecond0 = new Millisecond(mockDate0);
    TimeSeries timeSeries0 = new TimeSeries(millisecond0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(millisecond0, (Number) null);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test062148,"public void test062148() throws Throwable {
    MockDate mockDate0 = new MockDate(1439, 1713, 1439, 3, 13);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, """", """", class0);
    // Undeclared exception!
    try {
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'item' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test063149,"public void test063149() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test064150,"public void test064150() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test064151,"public void test064151() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test064152,"public void test064152() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test064153,"public void test064153() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.getIndex(fixedMillisecond0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test065154,"public void test065154() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getTimePeriodClass();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test065155,"public void test065155() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,
project,0,test065156,"public void test065156() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getTimePeriodClass();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test065157,"public void test065157() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getTimePeriodClass();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test066158,"public void test066158() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test066159,"public void test066159() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(9223372036854775807L, long0);
}",0,
project,0,test066160,"public void test066160() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test066161,"public void test066161() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    long long0 = timeSeries0.getMaximumItemAge();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test067162,"public void test067162() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) minute0, (double) (-3500), true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test068163,"public void test068163() throws Throwable {
    Class<Panel> class0 = Panel.class;
    TimeSeries timeSeries0 = new TimeSeries(""You are attempting to add an observation for "", ""[BD"", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertNull(string0);
}",0,
project,0,test068164,"public void test068164() throws Throwable {
    Class<Panel> class0 = Panel.class;
    TimeSeries timeSeries0 = new TimeSeries(""You are attempting to add an observation for "", ""[BD"", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test068165,"public void test068165() throws Throwable {
    Class<Panel> class0 = Panel.class;
    TimeSeries timeSeries0 = new TimeSeries(""You are attempting to add an observation for "", ""[BD"", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(""[BD"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test068166,"public void test068166() throws Throwable {
    Class<Panel> class0 = Panel.class;
    TimeSeries timeSeries0 = new TimeSeries(""You are attempting to add an observation for "", ""[BD"", (String) null, class0);
    String string0 = timeSeries0.getRangeDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test069167,"public void test069167() throws Throwable {
    MockDate mockDate0 = new MockDate(59L);
    TimeZone timeZone0 = TimeZone.getDefault();
    Hour hour0 = new Hour(mockDate0, timeZone0);
    TimeSeries timeSeries0 = new TimeSeries(hour0);
    // Undeclared exception!
    try {
        timeSeries0.getValue(151);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 151, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test070168,"public void test070168() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
    TimeSeries timeSeries0 = new TimeSeries(mockDate0, class0);
    // Undeclared exception!
    try {
        timeSeries0.getTimePeriod((-2387));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test071169,"public void test071169() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    // Undeclared exception!
    try {
        timeSeries0.getDataItem(59);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 59, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",0,
project,0,test072170,"public void test072170() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    timeSeries0.getItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test072171,"public void test072171() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    timeSeries0.getItemCount();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test072172,"public void test072172() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    timeSeries0.getItemCount();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test072173,"public void test072173() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    timeSeries0.getItemCount();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test073174,"public void test073174() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.hashCode();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test073175,"public void test073175() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.hashCode();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test073176,"public void test073176() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.hashCode();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test073177,"public void test073177() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.hashCode();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test074178,"public void test074178() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries1.setMaximumItemAge(1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(boolean0);
}",0,
project,0,test074179,"public void test074179() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries1.setMaximumItemAge(1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(1L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test075180,"public void test075180() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    assertTrue(timeSeries1.equals((Object) timeSeries0));
}",0,
project,0,test075181,"public void test075181() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries1.setDomainDescription((String) null);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(timeSeries1.equals((Object) timeSeries0));
}",0,
project,0,test075182,"public void test075182() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries1.setDomainDescription((String) null);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(boolean0);
}",0,
project,0,test076183,"public void test076183() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries1 = new TimeSeries(minute0, ""["", """", class0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertFalse(boolean0);
}",0,
project,0,test076184,"public void test076184() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries1 = new TimeSeries(minute0, ""["", """", class0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test076185,"public void test076185() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries1 = new TimeSeries(minute0, ""["", """", class0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(""["", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test076186,"public void test076186() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries1 = new TimeSeries(minute0, ""["", """", class0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals("""", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test076187,"public void test076187() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries1 = new TimeSeries(minute0, ""["", """", class0);
    boolean boolean0 = timeSeries0.equals(timeSeries1);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test077188,"public void test077188() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test077189,"public void test077189() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test077190,"public void test077190() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test077191,"public void test077191() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
    assertFalse(boolean0);
}",0,
project,0,test077192,"public void test077192() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    boolean boolean0 = timeSeries0.equals(fixedMillisecond0);
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test078193,"public void test078193() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    assertTrue(timeSeries1.equals((Object) timeSeries0));
}",0,
project,0,test078194,"public void test078194() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) week0.LAST_WEEK_IN_YEAR);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertFalse(boolean0);
}",0,
project,0,test079195,"public void test079195() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(1, timeSeries1.getItemCount());
}",0,
project,0,test079196,"public void test079196() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test079197,"public void test079197() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test079198,"public void test079198() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertNotSame(timeSeries1, timeSeries0);
}",1,
project,0,test079199,"public void test079199() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test079200,"public void test079200() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    RegularTimePeriod regularTimePeriod0 = day0.previous();
    TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test080201,"public void test080201() throws Throwable {
    Week week0 = new Week();
    Class<Minute> class0 = Minute.class;
    RegularTimePeriod regularTimePeriod0 = week0.next();
    TimeSeries timeSeries0 = new TimeSeries(week0, class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) week0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start on or before end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test081202,"public void test081202() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'end' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test082203,"public void test082203() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'start' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test083204,"public void test083204() throws Throwable {
    MockDate mockDate0 = new MockDate();
    Quarter quarter0 = new Quarter(mockDate0);
    Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""s)~xX[|lsmF}\""lH@"", ""s)~xX[|lsmF}\""lH@"", class0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy(Integer.MAX_VALUE, 4);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test084205,"public void test084205() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    // Undeclared exception!
    try {
        timeSeries0.createCopy((-625), 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start >= 0.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test085206,"public void test085206() throws Throwable {
    Second second0 = new Second();
    TimeSeries timeSeries0 = new TimeSeries(second0);
    // Undeclared exception!
    try {
        timeSeries0.delete(1073741824, 297);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requires start <= end.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test086207,"public void test086207() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.delete((RegularTimePeriod) minute0);
    assertEquals(0, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test087208,"public void test087208() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test087209,"public void test087209() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test087210,"public void test087210() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test087211,"public void test087211() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test088212,"public void test088212() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
    timeSeries0.add(timeSeriesDataItem0, false);
    timeSeries0.clear();
    assertEquals(0, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test089213,"public void test089213() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.clear();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test089214,"public void test089214() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.clear();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test089215,"public void test089215() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.clear();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test089216,"public void test089216() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.clear();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test090217,"public void test090217() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.removeAgedItems(0L, true);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test091218,"public void test091218() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.removeAgedItems((long) (-3500), false);
    timeSeries0.removeAgedItems(2032L, false);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test091219,"public void test091219() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.removeAgedItems((long) (-3500), false);
    timeSeries0.removeAgedItems(2032L, false);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test091220,"public void test091220() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.removeAgedItems((long) (-3500), false);
    timeSeries0.removeAgedItems(2032L, false);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(1, timeSeries0.getMaximumItemAge())"
project,0,test091221,"public void test091221() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.removeAgedItems((long) (-3500), false);
    timeSeries0.removeAgedItems(2032L, false);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test092222,"public void test092222() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance(3);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    timeSeries0.setMaximumItemCount(0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    assertEquals(0, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test093223,"public void test093223() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    // Undeclared exception!
    try {
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test094224,"public void test094224() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries1.addAndOrUpdate(timeSeries0);
    assertEquals(1, timeSeries1.getItemCount());
}",0,"assertEquals(0, timeSeries1.getItemCount())"
project,0,test095225,"public void test095225() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test095226,"public void test095226() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test095227,"public void test095227() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test095228,"public void test095228() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test095229,"public void test095229() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    assertEquals(1, timeSeries1.getItemCount());
}",0,
project,0,test095230,"public void test095230() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
    assertNotSame(timeSeries1, timeSeries0);
}",0,
project,0,test096231,"public void test096231() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test096232,"public void test096232() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test097233,"public void test097233() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    MockRandom mockRandom0 = new MockRandom();
    BigInteger bigInteger0 = BigInteger.probablePrime(273, mockRandom0);
    // Undeclared exception!
    try {
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) bigInteger0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // TimeSeries.update(TimePeriod, Number):  period does not exist.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test098234,"public void test098234() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(day0, bigInteger0);
    // Undeclared exception!
    try {
        timeSeries0.add(timeSeriesDataItem0, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test099235,"public void test099235() throws Throwable {
    MockDate mockDate0 = new MockDate((-1750L));
    Week week0 = new Week(mockDate0);
    Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
    TimeSeries timeSeries0 = new TimeSeries(week0, ""FB6}c-sW?"", ""Key not found: "", class0);
    // Undeclared exception!
    try {
        timeSeries0.add((TimeSeriesDataItem) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'item' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test100236,"public void test100236() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test100237,"public void test100237() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test100238,"public void test100238() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test100239,"public void test100239() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getValue((RegularTimePeriod) minute0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test101240,"public void test101240() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    // Undeclared exception!
    try {
        timeSeries0.getValue((RegularTimePeriod) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test102241,"public void test102241() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
    timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
    assertEquals(1, timeSeries1.getItemCount());
}",0,"assertEquals(0, timeSeries1.getItemCount())"
project,0,test102242,"public void test102242() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4);
    TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
    timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test103243,"public void test103243() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.TEN;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, false);
    timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test104244,"public void test104244() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getTimePeriods();
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test104245,"public void test104245() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getTimePeriods();
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test104246,"public void test104246() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getTimePeriods();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(1, timeSeries0.getMaximumItemCount())"
project,0,test104247,"public void test104247() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.getTimePeriods();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test105248,"public void test105248() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.getDataItem((RegularTimePeriod) day0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test106249,"public void test106249() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getDataItem((RegularTimePeriod) day0);
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,
project,0,test106250,"public void test106250() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getDataItem((RegularTimePeriod) day0);
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(1, timeSeries0.getMaximumItemAge())"
project,0,test106251,"public void test106251() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getDataItem((RegularTimePeriod) day0);
    assertEquals(""Time"", timeSeries0.getDomainDescription());
}",0,
project,0,test106252,"public void test106252() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    timeSeries0.getDataItem((RegularTimePeriod) day0);
    assertEquals(""Value"", timeSeries0.getRangeDescription());
}",0,
project,0,test107253,"public void test107253() throws Throwable {
    Year year0 = new Year();
    Week week0 = new Week(9999, year0);
    TimeSeries timeSeries0 = new TimeSeries(week0);
    // Undeclared exception!
    try {
        timeSeries0.setMaximumItemAge((-1L));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'periods' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test108254,"public void test108254() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test108255,"public void test108255() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    Year year0 = new Year();
    timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-1));
    timeSeries0.setMaximumItemCount(0);
    assertEquals(0, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test109256,"public void test109256() throws Throwable {
    Minute minute0 = new Minute();
    TimeSeries timeSeries0 = new TimeSeries(minute0);
    // Undeclared exception!
    try {
        timeSeries0.setMaximumItemCount((-685));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Negative 'maximum' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",0,
project,0,test110257,"public void test110257() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test110258,"public void test110258() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test110259,"public void test110259() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test110260,"public void test110260() throws Throwable {
    FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
    TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
    TimeSeries timeSeries1 = new TimeSeries(fixedMillisecond0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test111261,"public void test111261() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertTrue(boolean0);
}",0,
project,0,test111262,"public void test111262() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertNotSame(timeSeries1, timeSeries0);
}",0,
project,0,test111263,"public void test111263() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test111264,"public void test111264() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test111265,"public void test111265() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test111266,"public void test111266() throws Throwable {
    Week week0 = new Week();
    TimeSeries timeSeries0 = new TimeSeries(week0);
    TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
    boolean boolean0 = timeSeries1.equals(timeSeries0);
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test112267,"public void test112267() throws Throwable {
    Day day0 = new Day();
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    TimeSeries timeSeries0 = new TimeSeries(day0, class0);
    Short short0 = new Short((short) 305);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) day0, (Number) short0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of java.time.chrono.ChronoLocalDate.
        //
        verifyException(""org.jfree.data.time.TimeSeries"", e);
    }
}",1,
project,0,test113268,"public void test113268() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries1.getMaximumItemAge())"
project,0,test113269,"public void test113269() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    assertEquals(""Value"", timeSeries1.getRangeDescription());
}",0,assertNotNull(timeSeries1.getRangeDescription())
project,0,test113270,"public void test113270() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    assertEquals(""Time"", timeSeries1.getDomainDescription());
}",0,assertNotNull(timeSeries1.getDomainDescription())
project,0,test113271,"public void test113271() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries1.getMaximumItemCount())"
project,0,test113272,"public void test113272() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    TimeSeries timeSeries1 = (TimeSeries) timeSeries0.clone();
    assertNotSame(timeSeries1, timeSeries0);
}",0,
project,0,test114273,"public void test114273() throws Throwable {
    Minute minute0 = new Minute();
    Class<String> class0 = String.class;
    TimeSeries timeSeries0 = new TimeSeries(minute0, ""java.lang.Class"", ""java.lang.Class"", class0);
    // Undeclared exception!
    try {
        timeSeries0.add((RegularTimePeriod) null, (-2.147483648E9));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null 'period' argument.
        //
        verifyException(""org.jfree.data.time.TimeSeriesDataItem"", e);
    }
}",1,
project,0,test115274,"public void test115274() throws Throwable {
    Day day0 = new Day();
    TimeSeries timeSeries0 = new TimeSeries(day0);
    BigInteger bigInteger0 = BigInteger.ZERO;
    timeSeries0.add((RegularTimePeriod) day0, (Number) bigInteger0, true);
    timeSeries0.getValue((RegularTimePeriod) day0);
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(0, timeSeries0.getItemCount())"
project,0,test116275,"public void test116275() throws Throwable {
    SerialDate serialDate0 = SerialDate.createInstance((int) (byte) 100);
    Class<TimeSeries> class0 = TimeSeries.class;
    TimeSeries timeSeries0 = new TimeSeries(serialDate0, class0);
    // Undeclared exception!
    try {
        timeSeries0.getNextTimePeriod();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test117276,"public void test117276() throws Throwable {
    Hour hour0 = new Hour();
    Minute minute0 = new Minute((-3500), hour0);
    TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
    TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
    timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 1392409281320L);
    timeSeries0.getTimePeriods();
    assertEquals(1, timeSeries0.getItemCount());
}",0,"assertEquals(1, timeSeries0.getItemCount())"
project,0,test118277,"public void test118277() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
project,0,test118278,"public void test118278() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(Integer.MAX_VALUE, int0);
}",0,
project,0,test118279,"public void test118279() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getDomainDescription());
}",0,assertNotNull(timeSeries0.getDomainDescription())
project,0,test118280,"public void test118280() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    int int0 = timeSeries0.getMaximumItemCount();
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test119281,"public void test119281() throws Throwable {
    MockDate mockDate0 = new MockDate(0, 1997, (-1375), 3, 3);
    OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-211.3533), 295.78733, 0, (-211.3533), 820.5191593314);
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem0, class0);
    // Undeclared exception!
    try {
        timeSeries0.update((-739), (Number) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test120282,"public void test120282() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
}",0,"assertEquals(0, timeSeries0.getMaximumItemCount())"
project,0,test120283,"public void test120283() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", timeSeries0.getRangeDescription());
}",0,assertNotNull(timeSeries0.getRangeDescription())
project,0,test120284,"public void test120284() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(""org.jfree.data.time.RegularTimePeriod"", string0);
}",0,assertNotNull(string0)
project,0,test120285,"public void test120285() throws Throwable {
    Quarter quarter0 = new Quarter();
    Class<Minute> class0 = Minute.class;
    TimeSeries timeSeries0 = new TimeSeries(quarter0, ""org.jfree.data.time.RegularTimePeriod"", ""org.jfree.data.time.RegularTimePeriod"", class0);
    String string0 = timeSeries0.getDomainDescription();
    assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
}",0,"assertEquals(0, timeSeries0.getMaximumItemAge())"
