project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    CoreFunction coreFunction0 = new CoreFunction(95, expressionArray0);
    int int0 = coreFunction0.getFunctionCode();
    assertEquals(95, int0);
}",0,"assertEquals(0, int0)"
project,0,test0011,"public void test0011() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.iteratePointers((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: id()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test0022,"public void test0022() throws Throwable {
    Expression[] expressionArray0 = new Expression[15];
    CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: floor(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test0033,"public void test0033() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: round()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test0044,"public void test0044() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
    assertEquals(0, coreFunction0.getArgumentCount());
}",0,"assertEquals(0, coreFunction0.getArgumentCount())"
project,0,test0045,"public void test0045() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
    coreFunction0.computeValue((EvalContext) null);
    assertEquals(28, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test0056,"public void test0056() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.iteratePointers((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: false(null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test0067,"public void test0067() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: position(null, null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test0078,"public void test0078() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: ceiling()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test0089,"public void test0089() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
    Object object0 = coreFunction0.computeValue((EvalContext) null);
    assertNotNull(object0);
}",0,
project,0,test00810,"public void test00810() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
    Object object0 = coreFunction0.computeValue((EvalContext) null);
    assertEquals(20, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test00911,"public void test00911() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
    String string0 = coreFunction0.getFunctionName();
    assertEquals(""last"", string0);
}",0,
project,0,test01012,"public void test01012() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: count()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test01113,"public void test01113() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: local-name(null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test01214,"public void test01214() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.functionKey((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: namespace-uri()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test01315,"public void test01315() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
    String string0 = coreFunction0.getFunctionName();
    assertEquals(""name"", string0);
}",0,
project,0,test01416,"public void test01416() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.functionContains((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: string()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test01517,"public void test01517() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: concat()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test01618,"public void test01618() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: contains()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test01719,"public void test01719() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: substring-before()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test01820,"public void test01820() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: substring-after()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test01921,"public void test01921() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
    String string0 = coreFunction0.toString();
    assertEquals(""string-length()"", string0);
}",0,
project,0,test02022,"public void test02022() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: normalize-space()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test02123,"public void test02123() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: translate()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test02224,"public void test02224() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: boolean()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test02325,"public void test02325() throws Throwable {
    Expression[] expressionArray0 = new Expression[3];
    CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: not(null, null, null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test02426,"public void test02426() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.functionSubstring((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: true(null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",1,
project,0,test02527,"public void test02527() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: lang()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test02628,"public void test02628() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: number()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test02729,"public void test02729() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.compute((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: sum()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test02830,"public void test02830() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
    String string0 = coreFunction0.getFunctionName();
    assertEquals(""unknownFunction28()"", string0);
}",0,
project,0,test02931,"public void test02931() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: key(null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test03032,"public void test03032() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test03133,"public void test03133() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals((-271), coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test03134,"public void test03134() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test03235,"public void test03235() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test03236,"public void test03236() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(15, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test03337,"public void test03337() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test03438,"public void test03438() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(3, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test03439,"public void test03439() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test03540,"public void test03540() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(4, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test03541,"public void test03541() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test03642,"public void test03642() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(5, coreFunction0.getFunctionCode());
}",0,"assertEquals(1, coreFunction0.getFunctionCode())"
project,0,test03643,"public void test03643() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}",0,
project,0,test03744,"public void test03744() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test03845,"public void test03845() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test03946,"public void test03946() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertTrue(boolean0);
}",0,
project,0,test04047,"public void test04047() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test04048,"public void test04048() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(9, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test04149,"public void test04149() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test04150,"public void test04150() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(10, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test04251,"public void test04251() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test04252,"public void test04252() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(11, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test04353,"public void test04353() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(12, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test04354,"public void test04354() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test04455,"public void test04455() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(13, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test04456,"public void test04456() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test04557,"public void test04557() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(14, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test04558,"public void test04558() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}",0,
project,0,test04659,"public void test04659() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(16, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test04660,"public void test04660() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}",0,
project,0,test04761,"public void test04761() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(17, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test04762,"public void test04762() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test04863,"public void test04863() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test04964,"public void test04964() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}",0,
project,0,test04965,"public void test04965() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(19, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test05066,"public void test05066() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test05067,"public void test05067() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(20, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test05168,"public void test05168() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test05169,"public void test05169() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(21, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test05270,"public void test05270() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertTrue(boolean0);
}",0,
project,0,test05371,"public void test05371() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test05472,"public void test05472() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test05473,"public void test05473() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(24, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test05574,"public void test05574() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}",0,
project,0,test05575,"public void test05575() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(25, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test05676,"public void test05676() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(26, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test05677,"public void test05677() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}",0,
project,0,test05778,"public void test05778() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}",0,
project,0,test05779,"public void test05779() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(27, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test05880,"public void test05880() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertEquals(28, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test05881,"public void test05881() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test05982,"public void test05982() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(29, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test05983,"public void test05983() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}",0,
project,0,test06084,"public void test06084() throws Throwable {
    Long long0 = new Long(30);
    Constant constant0 = new Constant(long0);
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    boolean boolean0 = coreFunction0.isContextDependent();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test06185,"public void test06185() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction((-312), (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals((-312), coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test06186,"public void test06186() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction((-312), (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}",0,
project,0,test06287,"public void test06287() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}",0,
project,0,test06288,"public void test06288() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(30, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test06389,"public void test06389() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertEquals(30, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test06390,"public void test06390() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    boolean boolean0 = coreFunction0.computeContextDependent();
    assertFalse(boolean0);
}",0,
project,0,test06491,"public void test06491() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) coreFunction0);
    CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
    Class<Object> class0 = Object.class;
    jXPathContextReferenceImpl0.getValue(""last"", (Expression) coreOperationGreaterThan0, (Class) class0);
    assertEquals(1, coreFunction0.getFunctionCode());
}",0,
project,0,test06592,"public void test06592() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test06693,"public void test06693() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.compute((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test06794,"public void test06794() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test06895,"public void test06895() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test06996,"public void test06996() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: starts-with()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test07097,"public void test07097() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: substring(null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test07198,"public void test07198() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.iteratePointers((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test07299,"public void test07299() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test073100,"public void test073100() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: format-number()
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test074101,"public void test074101() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""'&"");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionCount(evalContext0);
    assertEquals(1.0, object0);
}",0,
project,0,test074102,"public void test074102() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""'&"");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionCount(evalContext0);
    assertEquals(10, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test075103,"public void test075103() throws Throwable {
    Constant constant0 = new Constant((String) null);
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(87, expressionArray0);
    Object object0 = coreFunction0.functionCount((EvalContext) null);
    assertEquals(0.0, object0);
}",0,
project,0,test075104,"public void test075104() throws Throwable {
    Constant constant0 = new Constant((String) null);
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(87, expressionArray0);
    Object object0 = coreFunction0.functionCount((EvalContext) null);
    assertEquals(87, coreFunction0.getFunctionCode());
}",0,
project,0,test076105,"public void test076105() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""i"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionCount((EvalContext) null);
    assertEquals(1074, coreFunction0.getFunctionCode());
}",0,
project,0,test076106,"public void test076106() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""i"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionCount((EvalContext) null);
    assertEquals(1.0, object0);
}",0,
project,0,test077107,"public void test077107() throws Throwable {
    Constant constant0 = new Constant((String) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, ""Lxicaleerr at line "", (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(2013265920, expressionArray0);
    Object object0 = coreFunction0.functionLang(evalContext0);
    assertEquals(2013265920, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test077108,"public void test077108() throws Throwable {
    Constant constant0 = new Constant((String) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, ""Lxicaleerr at line "", (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(2013265920, expressionArray0);
    Object object0 = coreFunction0.functionLang(evalContext0);
    assertEquals(true, object0);
}",0,
project,0,test078109,"public void test078109() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""true"");
    expressionArray0[0] = (Expression) constant0;
    BasicNodeSet basicNodeSet0 = new BasicNodeSet();
    NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
    CoreFunction coreFunction0 = new CoreFunction((-1375), expressionArray0);
    coreFunction0.functionLang(nodeSetContext0);
    assertEquals((-1375), coreFunction0.getFunctionCode());
}",0,
project,0,test079110,"public void test079110() throws Throwable {
    DecimalFormat decimalFormat0 = new DecimalFormat();
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, decimalFormat0, (Pointer) null);
    Locale locale0 = Locale.CHINESE;
    NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, jXPathContextReferenceImpl0, locale0);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
    EvalContext evalContext0 = rootContext0.getAbsoluteRootContext();
    Constant constant0 = new Constant(""<<unknown namespace>>"");
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
    Object object0 = coreFunction0.functionLang(evalContext0);
    assertEquals(false, object0);
}",0,assertTrue(object0)
project,0,test080111,"public void test080111() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(291, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.functionKey((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test081112,"public void test081112() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant((String) null);
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[2];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    expressionArray1[1] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction((-832), expressionArray1);
    coreFunction0.functionKey(evalContext0);
    assertEquals((-832), coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test081113,"public void test081113() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant((String) null);
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[2];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    expressionArray1[1] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction((-832), expressionArray1);
    coreFunction0.functionKey(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",0,"assertEquals(0, evalContext0.getPosition())"
project,0,test082114,"public void test082114() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""bSO^7fOHE}7N-aycB1"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[2];
    expressionArray1[0] = (Expression) coreFunction0;
    expressionArray1[1] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction1 = new CoreFunction(60, expressionArray1);
    // Undeclared exception!
    try {
        coreFunction1.functionKey(evalContext0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot find an element by key - no KeyManager has been specified
        //
        verifyException(""org.apache.commons.jxpath.JXPathContext"", e);
    }
}",0,
project,0,test083115,"public void test083115() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) coreFunction0);
    InitialContext initialContext0 = (InitialContext) jXPathContextReferenceImpl0.getAbsoluteRootContext();
    String string0 = (String) coreFunction0.functionNamespaceURI(initialContext0);
    assertNotNull(string0);
}",0,
project,0,test083116,"public void test083116() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl) JXPathContext.newContext((Object) coreFunction0);
    InitialContext initialContext0 = (InitialContext) jXPathContextReferenceImpl0.getAbsoluteRootContext();
    String string0 = (String) coreFunction0.functionNamespaceURI(initialContext0);
    assertEquals(1, coreFunction0.getFunctionCode());
}",0,
project,0,test084117,"public void test084117() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    coreFunction0.functionNamespaceURI((EvalContext) null);
    assertEquals(1074, coreFunction0.getFunctionCode());
}",0,
project,0,test085118,"public void test085118() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[1];
    QName qName0 = new QName(""org.apache.commons.jxpath.ri.axes.SelfContext"");
    VariableReference variableReference0 = new VariableReference(qName0);
    expressionArray0[0] = (Expression) variableReference0;
    CoreFunction coreFunction0 = new CoreFunction(214, expressionArray0);
    coreFunction0.functionNamespaceURI(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",0,"assertEquals(0, evalContext0.getPosition())"
project,0,test085119,"public void test085119() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[1];
    QName qName0 = new QName(""org.apache.commons.jxpath.ri.axes.SelfContext"");
    VariableReference variableReference0 = new VariableReference(qName0);
    expressionArray0[0] = (Expression) variableReference0;
    CoreFunction coreFunction0 = new CoreFunction(214, expressionArray0);
    coreFunction0.functionNamespaceURI(evalContext0);
    assertEquals(214, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test086120,"public void test086120() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""'&"");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionNamespaceURI(evalContext0);
    assertEquals(10, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test086121,"public void test086121() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""'&"");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionNamespaceURI(evalContext0);
    assertNotNull(object0);
}",0,
project,0,test086122,"public void test086122() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""'&"");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionNamespaceURI(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",0,"assertEquals(0, evalContext0.getPosition())"
project,0,test087123,"public void test087123() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    coreFunction0.functionLocalName((EvalContext) null);
    assertEquals(1074, coreFunction0.getFunctionCode());
}",0,
project,0,test088124,"public void test088124() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""..Y."");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(3227, expressionArray1);
    coreFunction0.functionLocalName(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",0,"assertEquals(0, evalContext0.getPosition())"
project,0,test088125,"public void test088125() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""..Y."");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(3227, expressionArray1);
    coreFunction0.functionLocalName(evalContext0);
    assertEquals(3227, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test089126,"public void test089126() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(2260, expressionArray1);
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
    EvalContext evalContext0 = rootContext0.getConstantContext((Object) null);
    coreFunction0.functionLocalName(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",0,"assertEquals(0, evalContext0.getPosition())"
project,0,test089127,"public void test089127() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(2260, expressionArray1);
    BasicVariables basicVariables0 = new BasicVariables();
    VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
    EvalContext evalContext0 = rootContext0.getConstantContext((Object) null);
    coreFunction0.functionLocalName(evalContext0);
    assertEquals(2260, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test090128,"public void test090128() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
    coreFunction0.functionName((EvalContext) null);
    assertEquals(5, coreFunction0.getFunctionCode());
}",0,
project,0,test091129,"public void test091129() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""..."");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(3214, expressionArray1);
    coreFunction0.functionName(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",0,"assertEquals(0, evalContext0.getPosition())"
project,0,test091130,"public void test091130() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""..."");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(3214, expressionArray1);
    coreFunction0.functionName(evalContext0);
    assertEquals(3214, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test092131,"public void test092131() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(116, expressionArray1);
    coreFunction0.functionName(evalContext0);
    assertEquals(0, evalContext0.getPosition());
}",0,"assertEquals(0, evalContext0.getPosition())"
project,0,test092132,"public void test092132() throws Throwable {
    Expression[] expressionArray0 = new Expression[0];
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(116, expressionArray1);
    coreFunction0.functionName(evalContext0);
    assertEquals(116, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test093133,"public void test093133() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.computeValue((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test094134,"public void test094134() throws Throwable {
    Constant constant0 = new Constant(""Te etym refer5ne\"""");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
    Object object0 = coreFunction0.compute((EvalContext) null);
    assertEquals(""Te etym refer5ne\""Te etym refer5ne\"""", object0);
}",0,assertNotNull(object0)
project,0,test094135,"public void test094135() throws Throwable {
    Constant constant0 = new Constant(""Te etym refer5ne\"""");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
    Object object0 = coreFunction0.compute((EvalContext) null);
    assertNotNull(object0);
}",0,assertNotNull(object0)
project,0,test095136,"public void test095136() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-287));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-287), expressionArray0);
    Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
    assertEquals(false, object0);
}",0,assertTrue(object0)
project,0,test095137,"public void test095137() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-287));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-287), expressionArray0);
    Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
    assertEquals((-287), coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test096138,"public void test096138() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionContains((EvalContext) null);
    assertEquals((-271), coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test096139,"public void test096139() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionContains((EvalContext) null);
    assertEquals(false, object0);
}",0,assertTrue(object0)
project,0,test097140,"public void test097140() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
    Object object0 = coreFunction0.functionContains((EvalContext) null);
    assertEquals(40, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test097141,"public void test097141() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
    Object object0 = coreFunction0.functionContains((EvalContext) null);
    assertEquals(true, object0);
}",0,assertTrue(object0)
project,0,test098142,"public void test098142() throws Throwable {
    Constant constant0 = new Constant(""The enttym refernce\"""");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(92, expressionArray0);
    Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
    assertEquals(92, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test098143,"public void test098143() throws Throwable {
    Constant constant0 = new Constant(""The enttym refernce\"""");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(92, expressionArray0);
    Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
    assertEquals("""", object0);
}",0,assertNotNull(object0)
project,0,test099144,"public void test099144() throws Throwable {
    Constant constant0 = new Constant(""Lexicaleerr at linq "");
    Expression[] expressionArray0 = new Expression[2];
    CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(923, expressionArray0);
    coreFunction0.functionSubstringBefore((EvalContext) null);
    assertEquals(923, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test100145,"public void test100145() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(291, expressionArray0);
    Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
    assertEquals(291, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test100146,"public void test100146() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(291, expressionArray0);
    Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
    assertEquals("""", object0);
}",0,
project,0,test101147,"public void test101147() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-287));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-287), expressionArray0);
    Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
    assertEquals((-287), coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test101148,"public void test101148() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-287));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-287), expressionArray0);
    Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
    assertEquals("""", object0);
}",0,
project,0,test102149,"public void test102149() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(848, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals("""", object0);
}",0,
project,0,test102150,"public void test102150() throws Throwable {
    Constant constant0 = new Constant(""Lexical error at line "");
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(848, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(848, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test103151,"public void test103151() throws Throwable {
    Long long0 = new Long(30);
    Constant constant0 = new Constant(long0);
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals("""", object0);
}",0,
project,0,test103152,"public void test103152() throws Throwable {
    Long long0 = new Long(30);
    Constant constant0 = new Constant(long0);
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(30, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test104153,"public void test104153() throws Throwable {
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationLessThan0);
    Expression[] expressionArray0 = new Expression[2];
    CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, nameAttributeTest0);
    expressionArray0[0] = (Expression) coreOperationDivide0;
    expressionArray0[1] = (Expression) coreOperationLessThan0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(""Infinity"", object0);
}",0,
project,0,test104154,"public void test104154() throws Throwable {
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationLessThan0);
    Expression[] expressionArray0 = new Expression[2];
    CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, nameAttributeTest0);
    expressionArray0[0] = (Expression) coreOperationDivide0;
    expressionArray0[1] = (Expression) coreOperationLessThan0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals((-271), coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test105155,"public void test105155() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals((-271), coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test105156,"public void test105156() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
    expressionArray0[0] = (Expression) coreOperationLessThan0;
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(""false"", object0);
}",0,
project,0,test106157,"public void test106157() throws Throwable {
    Float float0 = new Float((double) (-4136));
    Constant constant0 = new Constant(float0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(3830, expressionArray0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreFunction0);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    expressionArray0[2] = (Expression) coreOperationMultiply0;
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""keS,*=9|*j}u20"");
    SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
    Object object0 = coreFunction0.functionSubstring(selfContext0);
    assertEquals(""-4136"", object0);
}",0,
project,0,test106158,"public void test106158() throws Throwable {
    Float float0 = new Float((double) (-4136));
    Constant constant0 = new Constant(float0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(3830, expressionArray0);
    NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreFunction0);
    expressionArray0[1] = (Expression) nameAttributeTest0;
    expressionArray0[2] = (Expression) coreOperationMultiply0;
    QName qName0 = new QName("""");
    NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""keS,*=9|*j}u20"");
    SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
    Object object0 = coreFunction0.functionSubstring(selfContext0);
    assertEquals(3830, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test107159,"public void test107159() throws Throwable {
    Float float0 = new Float((double) (-257));
    Constant constant0 = new Constant(float0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction((-257), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals("""", object0);
}",1,
project,0,test107160,"public void test107160() throws Throwable {
    Float float0 = new Float((double) (-257));
    Constant constant0 = new Constant(float0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction((-257), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals((-257), coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test108161,"public void test108161() throws Throwable {
    Constant constant0 = new Constant((Number) null);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) coreOperationMultiply0;
    CoreFunction coreFunction0 = new CoreFunction((-257), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals("""", object0);
}",0,
project,0,test108162,"public void test108162() throws Throwable {
    Constant constant0 = new Constant((Number) null);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) coreOperationMultiply0;
    CoreFunction coreFunction0 = new CoreFunction((-257), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals((-257), coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test109163,"public void test109163() throws Throwable {
    Long long0 = new Long(0L);
    Constant constant0 = new Constant(long0);
    CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, coreOperationGreaterThan0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) coreOperationGreaterThan0;
    CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(108, coreFunction0.getFunctionCode());
}",0,
project,0,test109164,"public void test109164() throws Throwable {
    Long long0 = new Long(0L);
    Constant constant0 = new Constant(long0);
    CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, coreOperationGreaterThan0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) coreOperationGreaterThan0;
    CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals("""", object0);
}",0,
project,0,test110165,"public void test110165() throws Throwable {
    Float float0 = new Float((double) (-236));
    Constant constant0 = new Constant(float0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) coreOperationMultiply0;
    CoreFunction coreFunction0 = new CoreFunction((-236), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals((-236), coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test110166,"public void test110166() throws Throwable {
    Float float0 = new Float((double) (-236));
    Constant constant0 = new Constant(float0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) constant0;
    expressionArray0[2] = (Expression) coreOperationMultiply0;
    CoreFunction coreFunction0 = new CoreFunction((-236), expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(""55696"", object0);
}",0,
project,0,test111167,"public void test111167() throws Throwable {
    Double double0 = Expression.ONE;
    Constant constant0 = new Constant(double0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) coreOperationMultiply0;
    expressionArray0[2] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(2, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test111168,"public void test111168() throws Throwable {
    Double double0 = Expression.ONE;
    Constant constant0 = new Constant(double0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) coreOperationMultiply0;
    expressionArray0[2] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
    Object object0 = coreFunction0.functionSubstring((EvalContext) null);
    assertEquals(""1"", object0);
}",0,
project,0,test112169,"public void test112169() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.functionStringLength((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test113170,"public void test113170() throws Throwable {
    Constant constant0 = new Constant("" CB"");
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(2320, expressionArray0);
    Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
    assertEquals(2320, coreFunction0.getFunctionCode());
}",0,"assertEquals(1, coreFunction0.getFunctionCode())"
project,0,test113171,"public void test113171() throws Throwable {
    Constant constant0 = new Constant("" CB"");
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(2320, expressionArray0);
    Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
    assertEquals(""CB"", object0);
}",0,
project,0,test114172,"public void test114172() throws Throwable {
    Constant constant0 = new Constant("".  Encountered: "");
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction((-2200), expressionArray0);
    Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
    assertEquals((-2200), coreFunction0.getFunctionCode());
}",0,
project,0,test114173,"public void test114173() throws Throwable {
    Constant constant0 = new Constant("".  Encountered: "");
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction((-2200), expressionArray0);
    Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
    assertEquals("". Encountered:"", object0);
}",0,assertNotNull(object0)
project,0,test115174,"public void test115174() throws Throwable {
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) coreOperationMultiply0;
    expressionArray0[2] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionTranslate((EvalContext) null);
    assertEquals((-271), coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test115175,"public void test115175() throws Throwable {
    Float float0 = new Float((double) (-271));
    Constant constant0 = new Constant(float0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) coreOperationMultiply0;
    expressionArray0[2] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction((-271), expressionArray0);
    Object object0 = coreFunction0.functionTranslate((EvalContext) null);
    assertEquals(""-2-"", object0);
}",0,
project,0,test116176,"public void test116176() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction((-1971), (Expression[]) null);
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) coreFunction0;
    CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
    Object object0 = coreFunction1.functionBoolean((EvalContext) null);
    assertEquals(false, object0);
}",0,assertTrue(object0)
project,0,test116177,"public void test116177() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction((-1971), (Expression[]) null);
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) coreFunction0;
    CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
    Object object0 = coreFunction1.functionBoolean((EvalContext) null);
    assertEquals(7, coreFunction1.getFunctionCode());
}",0,
project,0,test117178,"public void test117178() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""Pzm<\u0006-\""W"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionBoolean((EvalContext) null);
    assertEquals(1074, coreFunction0.getFunctionCode());
}",0,"assertEquals(1, coreFunction0.getFunctionCode())"
project,0,test117179,"public void test117179() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""Pzm<\u0006-\""W"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionBoolean((EvalContext) null);
    assertEquals(true, object0);
}",0,assertTrue(object0)
project,0,test118180,"public void test118180() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction((-1971), (Expression[]) null);
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) coreFunction0;
    CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
    Object object0 = coreFunction1.functionNot((EvalContext) null);
    assertEquals(true, object0);
}",0,assertFalse(object0)
project,0,test118181,"public void test118181() throws Throwable {
    CoreFunction coreFunction0 = new CoreFunction((-1971), (Expression[]) null);
    Expression[] expressionArray0 = new Expression[1];
    expressionArray0[0] = (Expression) coreFunction0;
    CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
    Object object0 = coreFunction1.functionNot((EvalContext) null);
    assertEquals(7, coreFunction1.getFunctionCode());
}",0,"assertEquals(0, coreFunction1.getFunctionCode())"
project,0,test119182,"public void test119182() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionNot((EvalContext) null);
    assertEquals(1074, coreFunction0.getFunctionCode());
}",0,
project,0,test119183,"public void test119183() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionNot((EvalContext) null);
    assertEquals(false, object0);
}",0,assertFalse(object0)
project,0,test120184,"public void test120184() throws Throwable {
    Expression[] expressionArray0 = new Expression[2];
    CoreFunction coreFunction0 = new CoreFunction(232, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.functionNumber((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Incorrect number of arguments: unknownFunction232()(null, null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test121185,"public void test121185() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""..."");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionSum(evalContext0);
    assertEquals(10, coreFunction0.getFunctionCode());
}",0,"assertEquals(0, coreFunction0.getFunctionCode())"
project,0,test121186,"public void test121186() throws Throwable {
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
    EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
    Expression[] expressionArray0 = new Expression[2];
    Constant constant0 = new Constant(""..."");
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
    Expression[] expressionArray1 = new Expression[1];
    expressionArray1[0] = (Expression) coreOperationUnion0;
    CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
    Object object0 = coreFunction0.functionSum(evalContext0);
    assertEquals(Double.NaN, object0);
}",0,assertNotNull(object0)
project,0,test122187,"public void test122187() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant((String) null);
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionSum((EvalContext) null);
    assertEquals(1074, coreFunction0.getFunctionCode());
}",0,
project,0,test122188,"public void test122188() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant((String) null);
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    Object object0 = coreFunction0.functionSum((EvalContext) null);
    assertEquals(0.0, object0);
}",0,
project,0,test123189,"public void test123189() throws Throwable {
    Expression[] expressionArray0 = new Expression[1];
    Constant constant0 = new Constant(""r"");
    expressionArray0[0] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.functionSum((EvalContext) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Invalid argument type for 'sum': java.lang.String
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test124190,"public void test124190() throws Throwable {
    Long long0 = new Long(30);
    Constant constant0 = new Constant(long0);
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
    QName qName0 = new QName(""3030"", ""drUmJYs`u)/hhsg"");
    Locale locale0 = Locale.KOREAN;
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, predicateContext0, nodePointer0);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
    Object object0 = coreFunction0.compute(rootContext0);
    assertEquals(""330"", object0);
}",0,
project,0,test124191,"public void test124191() throws Throwable {
    Long long0 = new Long(30);
    Constant constant0 = new Constant(long0);
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
    QName qName0 = new QName(""3030"", ""drUmJYs`u)/hhsg"");
    Locale locale0 = Locale.KOREAN;
    NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
    JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, predicateContext0, nodePointer0);
    RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
    Object object0 = coreFunction0.compute(rootContext0);
    assertNotNull(object0);
}",0,
project,0,test125192,"public void test125192() throws Throwable {
    Long long0 = new Long(30);
    Constant constant0 = new Constant(long0);
    CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
    Expression[] expressionArray0 = new Expression[3];
    expressionArray0[0] = (Expression) coreOperationMultiply0;
    expressionArray0[1] = (Expression) coreOperationMultiply0;
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    // Undeclared exception!
    try {
        coreFunction0.compute((EvalContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.compiler.CoreFunction"", e);
    }
}",0,
project,0,test126193,"public void test126193() throws Throwable {
    Long long0 = new Long(30);
    Constant constant0 = new Constant(long0);
    Expression[] expressionArray0 = new Expression[2];
    expressionArray0[0] = (Expression) constant0;
    expressionArray0[1] = (Expression) constant0;
    CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
    ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(""F-n:F>WB"");
    AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
    // Undeclared exception!
    try {
        coreFunction0.compute(ancestorContext0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.jxpath.ri.EvalContext"", e);
    }
}",0,
