/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 05 00:26:52 GMT 2023
 */
package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Locale locale0 = Locale.CANADA;
        StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
        boolean boolean0 = stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.instance.parseObject("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Date date0 = stdDateFormat0.parse("0000-00-00");
        date0.toString();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        String string0 = stdDateFormat0.instance.toString();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        String string0 = stdDateFormat0.instance.toString();
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        TimeZone timeZone0 = stdDateFormat0.getTimeZone();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getRFC1123Format((TimeZone) null, locale0);
        mockSimpleDateFormat0.toLocalizedPattern();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.JAPANESE;
        Boolean boolean0 = Boolean.TRUE;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        ZoneInfo zoneInfo0 = (ZoneInfo) StdDateFormat.DEFAULT_TIMEZONE;
        Locale locale0 = Locale.ITALIAN;
        MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat) StdDateFormat.getISO8601Format(zoneInfo0, locale0);
        mockSimpleDateFormat0.toPattern();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        TimeZone timeZone0 = TimeZone.getDefault();
        Locale locale0 = Locale.ITALY;
        StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
        stdDateFormat0.hashCode();
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Locale locale0 = Locale.FRANCE;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
    }

    @Test(timeout = 4000)
    public void test1216() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Locale locale0 = Locale.FRANCE;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1317() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Locale locale0 = Locale.US;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
    }

    @Test(timeout = 4000)
    public void test1318() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        Locale locale0 = Locale.US;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1419() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Boolean boolean0 = new Boolean("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
        stdDateFormat1.isLenient();
    }

    @Test(timeout = 4000)
    public void test1420() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        Boolean boolean0 = new Boolean("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
        stdDateFormat1.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1521() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.instance.withLenient((Boolean) null);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1622() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
        Date date0 = stdDateFormat0.parse("7");
        String string0 = stdDateFormat1.format(date0);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1623() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
        Date date0 = stdDateFormat0.parse("7");
        String string0 = stdDateFormat1.format(date0);
    }

    @Test(timeout = 4000)
    public void test1724() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
    }

    @Test(timeout = 4000)
    public void test1825() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        TimeZone timeZone0 = TimeZone.getDefault();
        stdDateFormat0.instance.setTimeZone(timeZone0);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test1926() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("2.2250738585072012e-308");
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("-");
    }

    @Test(timeout = 4000)
    public void test2229() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("+0000");
    }

    @Test(timeout = 4000)
    public void test2330() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        MockDate mockDate0 = new MockDate(32, 32, 32, 32, 32, 32);
        Locale locale0 = Locale.PRC;
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        stdDateFormat0._format(simpleTimeZone0, locale0, mockDate0, stringBuffer0);
        stringBuffer0.length();
    }

    @Test(timeout = 4000)
    public void test2331() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        MockDate mockDate0 = new MockDate(32, 32, 32, 32, 32, 32);
        Locale locale0 = Locale.PRC;
        StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        stdDateFormat0._format(simpleTimeZone0, locale0, mockDate0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test2432() throws Throwable {
        MockDate mockDate0 = new MockDate((-1205), (-1205), (-1205), (-1205), (-1205));
        Locale locale0 = Locale.FRANCE;
        StringBuffer stringBuffer0 = new StringBuffer("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1205), "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        Boolean boolean0 = new Boolean(true);
        StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
        stdDateFormat0._format(simpleTimeZone0, locale0, mockDate0, stringBuffer0);
        stringBuffer0.toString();
    }

    @Test(timeout = 4000)
    public void test2533() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        MockDate mockDate0 = new MockDate((-1789), (-1789), (-1789), (-1789), (-1789), (-1789));
        String string0 = stdDateFormat0.instance.format((Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test2634() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.instance.toPattern();
        stdDateFormat0.parse("0000-00-00T00:00");
    }

    @Test(timeout = 4000)
    public void test2735() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        boolean boolean0 = stdDateFormat0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test2836() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
    }

    @Test(timeout = 4000)
    public void test2837() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
        stdDateFormat0.isColonIncludedInTimeZone();
    }

    @Test(timeout = 4000)
    public void test2938() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("39|<~PY");
    }

    @Test(timeout = 4000)
    public void test3039() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.parse("0000-D00-00T00:00");
    }

    @Test(timeout = 4000)
    public void test3140() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        ParsePosition parsePosition0 = new ParsePosition(10);
        stdDateFormat0.instance._parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
    }

    @Test(timeout = 4000)
    public void test3241() throws Throwable {
        StdDateFormat stdDateFormat0 = new StdDateFormat();
        stdDateFormat0.parse("0000-00-0");
    }

    @Test(timeout = 4000)
    public void test3342() throws Throwable {
        StdDateFormat stdDateFormat0 = StdDateFormat.instance;
        stdDateFormat0.setLenient(false);
        stdDateFormat0.isLenient();
    }
}
