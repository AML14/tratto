project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test022,"public void test022() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
    Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
    boolean boolean0 = objectMapper0.canSerialize(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test033,"public void test033() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Class<?> class0 = annotationIntrospector0.findSerializationKeyType((Annotated) null, (JavaType) null);
    assertNull(class0);
}",0,
project,0,test044,"public void test044() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Boolean boolean0 = annotationIntrospector0.findIgnoreUnknownProperties((AnnotatedClass) null);
    assertNull(boolean0);
}",0,assertNotNull(boolean0)
project,0,test055,"public void test055() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    String string0 = annotationIntrospector0.findClassDescription((AnnotatedClass) null);
    assertNull(string0);
}",0,
project,0,test077,"public void test077() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    PropertyName propertyName0 = annotationIntrospector0.findRootName((AnnotatedClass) null);
    assertNull(propertyName0);
}",0,assertNotNull(propertyName0)
project,0,test088,"public void test088() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = annotationIntrospector0.findPOJOBuilderConfig((AnnotatedClass) null);
    assertNull(jsonPOJOBuilder_Value0);
}",0,
project,0,test099,"public void test099() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Object object0 = annotationIntrospector0.findKeySerializer((Annotated) null);
    assertNull(object0);
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
    JsonInclude.Include jsonInclude_Include1 = annotationIntrospector1.findSerializationInclusionForContent((Annotated) null, jsonInclude_Include0);
    assertSame(jsonInclude_Include1, jsonInclude_Include0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    String string0 = annotationIntrospector0.findTypeName((AnnotatedClass) null);
    assertNull(string0);
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<Integer> class0 = Integer.class;
    Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
    Class<SimpleObjectIdResolver> class2 = SimpleObjectIdResolver.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
    ObjectIdInfo objectIdInfo1 = annotationIntrospector0.findObjectReferenceInfo((Annotated) null, objectIdInfo0);
    assertFalse(objectIdInfo1.getAlwaysAsId());
}",0,assertFalse(objectIdInfo1.getAlwaysAsId())
project,0,test1313,"public void test1313() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    List<NamedType> list0 = annotationIntrospector0.findSubtypes((Annotated) null);
    assertNull(list0);
}",0,assertNotNull(list0)
project,0,test1414,"public void test1414() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
    JsonInclude.Include jsonInclude_Include1 = annotationIntrospector0.findSerializationInclusion((Annotated) null, jsonInclude_Include0);
    assertSame(jsonInclude_Include1, jsonInclude_Include0);
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    // Undeclared exception!
    try {
        annotationIntrospector0.allIntrospectors((Collection<AnnotationIntrospector>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.AnnotationIntrospector"", e);
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Object object0 = annotationIntrospector0.findDeserializationContentConverter((AnnotatedMember) null);
    assertNull(object0);
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
    boolean boolean0 = objectMapper0.canSerialize(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1919,"public void test1919() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    String[] stringArray0 = annotationIntrospector0.findPropertiesToIgnore((Annotated) null);
    assertNull(stringArray0);
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    Class<HashMap> class0 = HashMap.class;
    ObjectMapper objectMapper0 = new ObjectMapper();
    boolean boolean0 = objectMapper0.canSerialize(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2525,"public void test2525() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    AnnotationIntrospector.ReferenceProperty.Type[] annotationIntrospector_ReferenceProperty_TypeArray0 = AnnotationIntrospector.ReferenceProperty.Type.values();
    Class<Integer> class0 = Integer.class;
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s"";
    String[] stringArray1 = annotationIntrospector0.findEnumValues(class0, annotationIntrospector_ReferenceProperty_TypeArray0, stringArray0);
    assertSame(stringArray1, stringArray0);
}",0,
