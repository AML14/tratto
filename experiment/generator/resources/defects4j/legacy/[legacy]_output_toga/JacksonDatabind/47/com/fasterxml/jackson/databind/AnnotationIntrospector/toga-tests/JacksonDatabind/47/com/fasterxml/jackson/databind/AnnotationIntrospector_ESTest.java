/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 31 05:53:50 GMT 2023
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class AnnotationIntrospector_ESTest extends AnnotationIntrospector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.back("g(G|");
        AnnotationIntrospector.ReferenceProperty.Type annotationIntrospector_ReferenceProperty_Type0 = annotationIntrospector_ReferenceProperty0.getType();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed("");
        String string0 = annotationIntrospector_ReferenceProperty0.getName();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Class<?> class0 = annotationIntrospector0.findSerializationKeyType((Annotated) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Boolean boolean0 = annotationIntrospector0.findIgnoreUnknownProperties((AnnotatedClass) null);
        assertNotNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String string0 = annotationIntrospector0.findClassDescription((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
        Class<Object> class0 = Object.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        PropertyName propertyName0 = annotationIntrospector0.findRootName((AnnotatedClass) null);
        assertNotNull(propertyName0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = annotationIntrospector0.findPOJOBuilderConfig((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findKeySerializer((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
        JsonInclude.Include jsonInclude_Include1 = annotationIntrospector1.findSerializationInclusionForContent((Annotated) null, jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String string0 = annotationIntrospector0.findTypeName((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<Integer> class0 = Integer.class;
        Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
        Class<SimpleObjectIdResolver> class2 = SimpleObjectIdResolver.class;
        ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1, class2);
        ObjectIdInfo objectIdInfo1 = annotationIntrospector0.findObjectReferenceInfo((Annotated) null, objectIdInfo0);
        objectIdInfo1.getAlwaysAsId();
        assertFalse(objectIdInfo1.getAlwaysAsId());
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        List<NamedType> list0 = annotationIntrospector0.findSubtypes((Annotated) null);
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
        JsonInclude.Include jsonInclude_Include1 = annotationIntrospector0.findSerializationInclusion((Annotated) null, jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        annotationIntrospector0.allIntrospectors((Collection<AnnotationIntrospector>) null);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Object object0 = annotationIntrospector0.findDeserializationContentConverter((AnnotatedMember) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        Collection<AnnotationIntrospector> collection0 = annotationIntrospector0.allIntrospectors();
        collection0.contains(annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        String[] stringArray0 = annotationIntrospector0.findPropertiesToIgnore((Annotated) null);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.back("VZ");
        boolean boolean0 = annotationIntrospector_ReferenceProperty0.isManagedReference();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed("VZ");
        boolean boolean0 = annotationIntrospector_ReferenceProperty0.isManagedReference();
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed("VZ");
        boolean boolean0 = annotationIntrospector_ReferenceProperty0.isBackReference();
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.back("");
        boolean boolean0 = annotationIntrospector_ReferenceProperty0.isBackReference();
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        boolean boolean0 = objectMapper0.canSerialize(class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        AnnotationIntrospector.ReferenceProperty.Type[] annotationIntrospector_ReferenceProperty_TypeArray0 = AnnotationIntrospector.ReferenceProperty.Type.values();
        Class<Integer> class0 = Integer.class;
        String[] stringArray0 = new String[3];
        stringArray0[0] = "Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s";
        String[] stringArray1 = annotationIntrospector0.findEnumValues(class0, annotationIntrospector_ReferenceProperty_TypeArray0, stringArray0);
    }
}
