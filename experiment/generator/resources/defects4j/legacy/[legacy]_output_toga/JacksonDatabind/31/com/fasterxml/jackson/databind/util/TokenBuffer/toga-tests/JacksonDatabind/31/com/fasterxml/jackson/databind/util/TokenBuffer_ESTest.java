/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 18:00:26 GMT 2023
 */
package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.format.TextStyle;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        tokenBuffer0.writeEndArray();
        tokenBuffer_Parser0._checkIsNumber();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(2664);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2664, 2664, (Object) long0);
        tokenBuffer_Segment0.type((-3704));
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, true);
        tokenBuffer_Parser0.setCodec((ObjectCodec) null);
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(2664);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2664, 2664, (Object) long0);
        tokenBuffer_Segment0.type((-3704));
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, true);
        tokenBuffer_Parser0.setCodec((ObjectCodec) null);
        tokenBuffer_Parser0.peekNextToken();
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(2664);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2664, 2664, (Object) long0);
        tokenBuffer_Segment0.type((-3704));
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, true);
        tokenBuffer_Parser0.setCodec((ObjectCodec) null);
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        tokenBuffer0.overrideStdFeatures(0, 1505);
        tokenBuffer0.writeNumber(0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        tokenBuffer0.writeNumberField(" entries)", 506);
        boolean boolean0 = true;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.nextFieldName();
        tokenBuffer_Parser0.getDecimalValue();
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        JsonToken jsonToken0 = JsonToken.END_ARRAY;
        tokenBuffer0._append(jsonToken0, jsonToken0);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        JsonToken jsonToken0 = JsonToken.END_ARRAY;
        tokenBuffer0._append(jsonToken0, jsonToken0);
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test0510() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        JsonToken jsonToken0 = JsonToken.END_ARRAY;
        tokenBuffer0._append(jsonToken0, jsonToken0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test0511() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        JsonToken jsonToken0 = JsonToken.END_ARRAY;
        tokenBuffer0._append(jsonToken0, jsonToken0);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test0612() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        tokenBuffer0.isClosed();
        tokenBuffer0.version();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
        tokenBuffer_Parser0.getObjectId();
    }

    @Test(timeout = 4000)
    public void test0713() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test0714() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test0715() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test0716() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test0717() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        tokenBuffer0.writeNumber(bigDecimal0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test0718() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        tokenBuffer0.writeNumber(bigDecimal0);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test0719() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        tokenBuffer0.writeNumber(bigDecimal0);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test0720() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        tokenBuffer0.writeNumber(bigDecimal0);
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test0721() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        tokenBuffer0.writeNumber(bigDecimal0);
        Float float0 = new Float((double) 16);
        tokenBuffer0.writeObject(float0);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test0722() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        tokenBuffer0.writeNumber(bigDecimal0);
        Float float0 = new Float((double) 16);
        tokenBuffer0.writeObject(float0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test0723() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        tokenBuffer0.writeNumber(bigDecimal0);
        Float float0 = new Float((double) 16);
        tokenBuffer0.writeObject(float0);
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test0724() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        tokenBuffer0.writeNumber(bigDecimal0);
        Float float0 = new Float((double) 16);
        tokenBuffer0.writeObject(float0);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test0825() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        tokenBuffer_Segment0._nativeIds = null;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test0826() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        tokenBuffer_Segment0._nativeIds = null;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test0827() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        tokenBuffer_Segment0._nativeIds = null;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test0828() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        tokenBuffer_Segment0._nativeIds = null;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test0829() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        tokenBuffer_Segment0._nativeIds = null;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
        tokenBuffer1.writeEndArray();
        tokenBuffer1.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test0830() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        tokenBuffer_Segment0._nativeIds = null;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
        tokenBuffer1.writeEndArray();
        tokenBuffer1.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test0931() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        int int0 = (-1);
        Object object0 = null;
        BigInteger bigInteger0 = BigInteger.TEN;
        tokenBuffer_Segment0.appendRaw((-970), (-1), (Object) null, (Object) bigInteger0, (Object) bigInteger0);
    }

    @Test(timeout = 4000)
    public void test1032() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        tokenBuffer_Segment0.append((-2194), jsonToken0, (Object) jsonToken0, (Object) null);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        tokenBuffer0.writeEndArray();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test1033() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        tokenBuffer_Segment0.append((-2194), jsonToken0, (Object) jsonToken0, (Object) null);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        tokenBuffer0.writeEndArray();
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test1034() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        tokenBuffer_Segment0.append((-2194), jsonToken0, (Object) jsonToken0, (Object) null);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        tokenBuffer0.writeEndArray();
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test1035() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        tokenBuffer_Segment0.append((-2194), jsonToken0, (Object) jsonToken0, (Object) null);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        tokenBuffer0.writeEndArray();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test1236() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        tokenBuffer0.forceUseOfBigDecimal(false);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonToken jsonToken0 = JsonToken.END_ARRAY;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(73, jsonToken0, (Object) tokenBuffer0, (Object) null);
        JsonToken jsonToken1 = JsonToken.VALUE_NULL;
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken1);
        TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment2._next;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
        tokenBuffer_Segment1._next = tokenBuffer_Segment0;
        tokenBuffer_Parser0.getFloatValue();
    }

    @Test(timeout = 4000)
    public void test1337() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test1338() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test1339() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer1.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer1.firstToken();
        tokenBuffer1.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test1340() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer1.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer1.firstToken();
        tokenBuffer1.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test1341() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer1.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer1.firstToken();
        tokenBuffer1.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test1342() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer1.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer1.firstToken();
    }

    @Test(timeout = 4000)
    public void test1443() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, false);
        PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
        ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        tokenBuffer0.writeRaw(") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary");
    }

    @Test(timeout = 4000)
    public void test1544() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 109;
        byteArray0[1] = (byte) (-28);
        UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser) jsonFactory0.createParser(byteArray0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(uTF8StreamJsonParser0);
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        tokenBuffer0._append(jsonToken0);
        uTF8StreamJsonParser0._getByteArrayBuilder();
        tokenBuffer0._appendRaw(4092, uTF8StreamJsonParser0);
        tokenBuffer0.toString();
        tokenBuffer0._reportUnsupportedOperation();
    }

    @Test(timeout = 4000)
    public void test1645() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Double double0 = new Double(0.0);
        tokenBuffer_Segment0.appendRaw((-281), (-24), (Object) double0);
    }

    @Test(timeout = 4000)
    public void test1746() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        tokenBuffer0.writeNumberField("2)3|-_7ydrM{9b~S{", 5);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer0.getCurrentValue();
        tokenBuffer_Segment1.appendRaw(5, 4, (Object) null);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, false);
        tokenBuffer_Parser0.nextFieldName();
        tokenBuffer_Parser0.getDecimalValue();
    }

    @Test(timeout = 4000)
    public void test1847() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 76;
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        jsonFactory0.disable(jsonParser_Feature0);
        boolean boolean0 = false;
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        tokenBuffer_Parser0.getObjectId();
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer0.toString();
        tokenBuffer_Parser1.getDecimalValue();
    }

    @Test(timeout = 4000)
    public void test2048() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
    }

    @Test(timeout = 4000)
    public void test2049() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test2050() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
    }

    @Test(timeout = 4000)
    public void test2051() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        BooleanNode.valueOf(true);
        tokenBuffer0.writeTypeId((Object) null);
        tokenBuffer_Parser1.nextFieldName();
        tokenBuffer_Parser1.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test2052() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        BooleanNode.valueOf(true);
        tokenBuffer0.writeTypeId((Object) null);
        tokenBuffer_Parser1.nextFieldName();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test2053() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        BooleanNode.valueOf(true);
        tokenBuffer0.writeTypeId((Object) null);
        tokenBuffer_Parser1.nextFieldName();
        tokenBuffer_Parser1.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test2054() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        BooleanNode.valueOf(true);
        tokenBuffer0.writeTypeId((Object) null);
        tokenBuffer_Parser1.nextFieldName();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test2055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        BooleanNode.valueOf(true);
        tokenBuffer0.writeTypeId((Object) null);
        tokenBuffer_Parser1.nextFieldName();
        tokenBuffer0.writeString((String) null);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test2056() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        BooleanNode.valueOf(true);
        tokenBuffer0.writeTypeId((Object) null);
        tokenBuffer_Parser1.nextFieldName();
        tokenBuffer0.writeString((String) null);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test2057() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        BooleanNode.valueOf(true);
        tokenBuffer0.writeTypeId((Object) null);
        tokenBuffer_Parser1.nextFieldName();
        tokenBuffer0.writeString((String) null);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test2158() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        tokenBuffer_Parser0.getObjectId();
        JsonNodeFactory.withExactBigDecimals(false);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        tokenBuffer_Segment0.rawType(145);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
        tokenBuffer0.deserialize(tokenBuffer_Parser0, defaultDeserializationContext0);
    }

    @Test(timeout = 4000)
    public void test2259() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        BooleanNode.valueOf(true);
        FileSystemHandling.createFolder((EvoSuiteFile) null);
        tokenBuffer0.writeTypeId((Object) null);
        tokenBuffer_Parser1.nextFieldName();
        tokenBuffer0.writeString((String) null);
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser1);
    }

    @Test(timeout = 4000)
    public void test2360() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
        PropertyAccessor propertyAccessor0 = PropertyAccessor.SETTER;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
        ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[8];
        serializationFeatureArray0[0] = serializationFeature0;
        serializationFeatureArray0[1] = serializationFeature0;
        serializationFeatureArray0[2] = serializationFeature0;
        serializationFeatureArray0[3] = serializationFeature0;
        serializationFeatureArray0[4] = serializationFeature0;
        serializationFeatureArray0[5] = serializationFeature0;
        serializationFeatureArray0[6] = serializationFeature0;
        serializationFeatureArray0[7] = serializationFeature0;
        ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0, serializationFeatureArray0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
        char[] charArray0 = new char[7];
        charArray0[0] = '&';
        charArray0[1] = '=';
        charArray0[2] = '3';
        charArray0[3] = '&';
        charArray0[4] = '\'';
        charArray0[5] = 'v';
        charArray0[6] = '[';
        tokenBuffer0.writeRaw(charArray0, 0, 0);
    }

    @Test(timeout = 4000)
    public void test2461() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
        Short short0 = new Short((short) 41);
        objectReader0.withValueToUpdate(short0);
        ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
        ObjectReader objectReader2 = objectReader1.with((FormatSchema) null);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
        deserializationFeatureArray0[0] = deserializationFeature0;
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
        objectReader1.without(jsonParser_Feature0);
        deserializationFeatureArray0[1] = deserializationFeature0;
        JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
        jsonFactory0.configure(jsonParser_Feature1, true);
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        deserializationFeatureArray0[4] = deserializationFeature0;
        deserializationFeatureArray0[5] = deserializationFeature0;
        deserializationFeatureArray0[6] = deserializationFeature0;
        JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        objectReader2.with(jsonParser_Feature2);
        deserializationFeatureArray0[7] = deserializationFeature0;
        ObjectReader objectReader3 = objectReader2.without(deserializationFeature0, deserializationFeatureArray0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader3, false);
        tokenBuffer0.asParser();
        tokenBuffer0.asParser((ObjectCodec) objectReader0);
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) 76;
        byteArray0[1] = (byte) 60;
        byteArray0[2] = (byte) 26;
        byteArray0[3] = (byte) 0;
        byteArray0[4] = (byte) 0;
        byteArray0[5] = (byte) 12;
        byteArray0[6] = (byte) 41;
        byteArray0[7] = (byte) 0;
        tokenBuffer0.writeRawUTF8String(byteArray0, (byte) 0, (byte) 41);
    }

    @Test(timeout = 4000)
    public void test2562() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectMapper.findModules();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser jsonParser0 = tokenBuffer_Parser0.setFeatureMask(16);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeObjectField("JSON", objectMapper0);
    }

    @Test(timeout = 4000)
    public void test2663() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
        char[] charArray0 = new char[4];
        charArray0[0] = '3';
        charArray0[1] = '}';
        charArray0[2] = 'c';
        charArray0[3] = 'u';
        int int0 = 200;
        JsonParser jsonParser0 = jsonFactory2.createParser(charArray0, 0, 200);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeNullField("JSON");
        tokenBuffer0.useDefaultPrettyPrinter();
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        tokenBuffer_Segment0.appendRaw((-3471), 200, (Object) objectMapper0);
    }

    @Test(timeout = 4000)
    public void test2764() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("JSON");
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test2765() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("JSON");
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test2766() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("JSON");
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test2767() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("JSON");
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test2768() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("JSON");
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test2769() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("JSON");
        tokenBuffer0.writeEndArray();
        JsonToken jsonToken0 = tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test2870() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        int int0 = tokenBuffer_Parser0.getTextOffset();
    }

    @Test(timeout = 4000)
    public void test2871() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        int int0 = tokenBuffer_Parser0.getTextOffset();
        tokenBuffer0.writeRawValue(")O9Pw");
        tokenBuffer0.writeTypeId(defaultDeserializationContext_Impl0);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test2872() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        int int0 = tokenBuffer_Parser0.getTextOffset();
        tokenBuffer0.writeRawValue(")O9Pw");
        tokenBuffer0.writeTypeId(defaultDeserializationContext_Impl0);
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test2873() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        int int0 = tokenBuffer_Parser0.getTextOffset();
        tokenBuffer0.writeRawValue(")O9Pw");
        tokenBuffer0.writeTypeId(defaultDeserializationContext_Impl0);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test2874() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        int int0 = tokenBuffer_Parser0.getTextOffset();
        tokenBuffer0.writeRawValue(")O9Pw");
        tokenBuffer0.writeTypeId(defaultDeserializationContext_Impl0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test2975() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        boolean boolean0 = true;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.getTextLength();
        tokenBuffer_Parser0.getIntValue();
    }

    @Test(timeout = 4000)
    public void test3076() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        byte[] byteArray0 = new byte[7];
        byteArray0[0] = (byte) (-38);
        byteArray0[1] = (byte) 0;
        byteArray0[2] = (byte) 9;
        byteArray0[3] = (byte) (-38);
        byteArray0[4] = (byte) 76;
        byteArray0[5] = (byte) (-117);
        byteArray0[6] = (byte) 16;
        tokenBuffer0.writeUTF8String(byteArray0, (byte) 76, 41);
    }

    @Test(timeout = 4000)
    public void test3177() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
    }

    @Test(timeout = 4000)
    public void test3178() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test3179() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test3180() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test3181() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer_Segment0.hasIds();
    }

    @Test(timeout = 4000)
    public void test3182() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test3183() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test3184() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.getEmbeddedObject();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test3185() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        int int0 = tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.getEmbeddedObject();
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test3386() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0._segment = tokenBuffer_Segment0;
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test3387() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0._segment = tokenBuffer_Segment0;
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser1.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer_Parser1.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test3388() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0._segment = tokenBuffer_Segment0;
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser1.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer_Segment0.hasIds();
    }

    @Test(timeout = 4000)
    public void test3389() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0._segment = tokenBuffer_Segment0;
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser1.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer_Parser1.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test3390() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0._segment = tokenBuffer_Segment0;
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser1.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer0.firstToken();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Nth-F9isxGzoS");
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
        tokenBuffer0.serialize(jsonGenerator0);
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test3391() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0._segment = tokenBuffer_Segment0;
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser1.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer0.firstToken();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Nth-F9isxGzoS");
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
        tokenBuffer0.serialize(jsonGenerator0);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test3392() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0._segment = tokenBuffer_Segment0;
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser1.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer0.firstToken();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Nth-F9isxGzoS");
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
        tokenBuffer0.serialize(jsonGenerator0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test3493() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        tokenBuffer0.writeNumberField(" entries)", 506);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        arrayNode0.nullNode();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        JsonParser jsonParser0 = objectMapper1.treeAsTokens(arrayNode0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.copy();
        TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeStartArray();
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test3494() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        tokenBuffer0.writeNumberField(" entries)", 506);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        arrayNode0.nullNode();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        JsonParser jsonParser0 = objectMapper1.treeAsTokens(arrayNode0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.copy();
        TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeStartArray();
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test3495() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        tokenBuffer0.writeNumberField(" entries)", 506);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        arrayNode0.nullNode();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        JsonParser jsonParser0 = objectMapper1.treeAsTokens(arrayNode0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.copy();
        TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeStartArray();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test3496() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        tokenBuffer0.writeNumberField(" entries)", 506);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        arrayNode0.nullNode();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
        JsonParser jsonParser0 = objectMapper1.treeAsTokens(arrayNode0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.copy();
        TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeStartArray();
        tokenBuffer1.writeNumber((short) 550);
        tokenBuffer1.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test3697() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
    }

    @Test(timeout = 4000)
    public void test3698() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test3699() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test36100() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer0.writeTypeId((Object) null);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test36101() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        tokenBuffer0.writeTypeId((Object) null);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test37102() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
        NullNode nullNode0 = arrayNode0.nullNode();
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(nullNode0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        arrayNode0.deepCopy();
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeBoolean(false);
        tokenBuffer0.writeRaw((SerializableString) null);
    }

    @Test(timeout = 4000)
    public void test38103() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.getTextLength();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
        booleanNode0.isBoolean();
        SimpleModule simpleModule0 = new SimpleModule("yN`D_]qVP:k$gKiQ");
        tokenBuffer0.writeTypeId(simpleModule0);
        tokenBuffer0.writeTree(booleanNode0);
        tokenBuffer_Parser0.getTextLength();
        tokenBuffer_Segment0.hasIds();
    }

    @Test(timeout = 4000)
    public void test38104() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.getTextLength();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
        booleanNode0.isBoolean();
        SimpleModule simpleModule0 = new SimpleModule("yN`D_]qVP:k$gKiQ");
        tokenBuffer0.writeTypeId(simpleModule0);
        tokenBuffer0.writeTree(booleanNode0);
        tokenBuffer_Parser0.getTextLength();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test39105() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
        objectMapper1.disable(deserializationFeature0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, true);
        tokenBuffer_Parser0._handleEOF();
    }

    @Test(timeout = 4000)
    public void test40106() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
        SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.filter.TokenFilter");
        RawValue rawValue0 = new RawValue(serializedString0);
        tokenBuffer_Segment0.append((-2706), jsonToken0, (Object) rawValue0, (Object) jsonToken0, (Object) "com.fasterxml.jackson.core.filter.TokenFilter");
    }

    @Test(timeout = 4000)
    public void test41107() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser jsonParser0 = tokenBuffer_Parser1.configure(jsonParser_Feature0, false);
        JsonParser jsonParser1 = tokenBuffer_Parser0.setFeatureMask(5);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser1);
        String string0 = "[TokenBuffer: ";
        BigDecimal bigDecimal0 = new BigDecimal(0.0);
        tokenBuffer0.writeObjectField("[TokenBuffer: ", jsonParser0);
    }

    @Test(timeout = 4000)
    public void test42108() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        tokenBuffer0.writeNumberField(" entries)", 506);
        boolean boolean0 = true;
        FileSystemHandling.shouldAllThrowIOExceptions();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.nextFieldName();
        tokenBuffer_Parser0.version();
        tokenBuffer_Segment0.hasIds();
        tokenBuffer_Parser0.getDecimalValue();
    }

    @Test(timeout = 4000)
    public void test43109() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(tokenBuffer_Parser0, tokenFilter0, true, true);
        DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) filteringParserDelegate0);
        DupDetector dupDetector1 = dupDetector0.child();
        JsonLocation jsonLocation0 = dupDetector1.findLocation();
        tokenBuffer_Parser0.setLocation(jsonLocation0);
        tokenBuffer_Parser0.getNumberValue();
    }

    @Test(timeout = 4000)
    public void test44110() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) null);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        deserializerFactoryConfig0.keyDeserializers();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(550, jsonToken0, (Object) null);
        TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
        tokenBuffer_Parser0.overrideCurrentName("dyWCM");
        tokenBuffer0.getFeatureMask();
        Long long0 = Long.getLong(") not numeric, can not use numeric value accessors", 0L);
        tokenBuffer1._appendRaw(126, long0);
        tokenBuffer1.asParser(jsonParser0);
        tokenBuffer1.writeRaw((String) null);
    }

    @Test(timeout = 4000)
    public void test45111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        ObjectReader objectReader0 = objectMapper1.reader();
        ObjectReader[] objectReaderArray0 = new ObjectReader[4];
        objectReaderArray0[0] = objectReader0;
        objectReaderArray0[1] = objectReader0;
        objectReaderArray0[2] = objectReader0;
        objectReaderArray0[3] = objectReader0;
        FileSystemHandling.shouldAllThrowIOExceptions();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
        deserializationFeatureArray0[0] = deserializationFeature0;
        DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
        deserializationFeatureArray0[1] = deserializationFeature1;
        deserializationFeatureArray0[2] = deserializationFeature0;
        deserializationFeatureArray0[3] = deserializationFeature0;
        objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
        ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
        Short short0 = new Short((short) 1);
        objectReader1.withoutAttribute(short0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1);
        tokenBuffer0.writeNumber("");
        Object object0 = new Object();
        tokenBuffer0.writeObjectId(object0);
        Base64Variant base64Variant0 = null;
        base64Variant0 = new Base64Variant((Base64Variant) null, "wc{y` Y]H~$Hn", true, 'z', (short) 1);
    }

    @Test(timeout = 4000)
    public void test46112() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 76;
        OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
    }

    @Test(timeout = 4000)
    public void test46113() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 76;
        OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        tokenBuffer_Parser0.getObjectId();
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test46114() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 76;
        OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        tokenBuffer_Parser0.getObjectId();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test46115() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 76;
        OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        tokenBuffer_Parser0.getObjectId();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        tokenBuffer_Segment0.appendRaw((int) (byte) 76, 16, (Object) jsonFactory0);
        tokenBuffer_Segment0.findTypeId((byte) 76);
        tokenBuffer0.writeNumber((double) (byte) 76);
        tokenBuffer0.enable(jsonGenerator_Feature0);
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test46116() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 76;
        OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        tokenBuffer_Parser0.getObjectId();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        tokenBuffer_Segment0.appendRaw((int) (byte) 76, 16, (Object) jsonFactory0);
        tokenBuffer_Segment0.findTypeId((byte) 76);
        tokenBuffer0.writeNumber((double) (byte) 76);
        tokenBuffer0.enable(jsonGenerator_Feature0);
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test46117() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        byte[] byteArray0 = new byte[2];
        byteArray0[0] = (byte) 76;
        OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        tokenBuffer_Parser0.getObjectId();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        tokenBuffer_Segment0.appendRaw((int) (byte) 76, 16, (Object) jsonFactory0);
        tokenBuffer_Segment0.findTypeId((byte) 76);
        tokenBuffer0.writeNumber((double) (byte) 76);
        tokenBuffer0.enable(jsonGenerator_Feature0);
        tokenBuffer0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test47118() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
        tokenBuffer0.getCodec();
        tokenBuffer_Parser0.getInputSource();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        BooleanNode booleanNode0 = arrayNode0.booleanNode(true);
        tokenBuffer_Segment0.append(9, jsonToken0, (Object) objectMapper0, (Object) null, (Object) booleanNode0);
        tokenBuffer0.writeNumberField(" entries)", 482);
        boolean boolean0 = true;
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser1.nextFieldName();
        tokenBuffer_Parser1.getDecimalValue();
    }

    @Test(timeout = 4000)
    public void test48119() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(true);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, false);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
        tokenBuffer_Parser0.setFeatureMask(16);
        TokenBuffer tokenBuffer2 = new TokenBuffer(jsonParser0);
        String string0 = "[TokenBuffer: ";
        tokenBuffer0.writeObjectField("mdbJZe&", tokenBuffer1);
    }

    @Test(timeout = 4000)
    public void test49120() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassLoader.getSystemClassLoader();
        ObjectMapper.findModules(classLoader0);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        byte[] byteArray0 = new byte[8];
        byteArray0[0] = (byte) 0;
        objectMapper0.createObjectNode();
        byteArray0[1] = (byte) 101;
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeStartObject();
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        tokenBuffer0._append(jsonToken0);
        Float float0 = new Float((double) (byte) 101);
        tokenBuffer0._appendRaw((byte) 101, float0);
        tokenBuffer0.toString();
        tokenBuffer0._reportUnsupportedOperation();
    }

    @Test(timeout = 4000)
    public void test50121() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        tokenBuffer0.writeRaw("", 3275, 11);
    }

    @Test(timeout = 4000)
    public void test51122() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        boolean boolean0 = true;
        boolean boolean1 = true;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        JsonToken jsonToken0 = JsonToken.VALUE_STRING;
        tokenBuffer0._append(jsonToken0);
        tokenBuffer0._appendRaw((-2194), tokenBuffer_Segment0);
        tokenBuffer0.toString();
        tokenBuffer0._reportUnsupportedOperation();
    }

    @Test(timeout = 4000)
    public void test52123() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer0.toString();
        tokenBuffer0._reportUnsupportedOperation();
    }

    @Test(timeout = 4000)
    public void test53124() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        boolean boolean0 = tokenBuffer1.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
        tokenBuffer_Parser0.getCurrentName();
        tokenBuffer_Parser0.getObjectId();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        Float float0 = new Float(0.0);
        tokenBuffer1.writeTypeId(float0);
        tokenBuffer_Parser0.getTextLength();
        tokenBuffer_Parser0.nextFieldName();
        tokenBuffer1.serialize(tokenBuffer0);
        tokenBuffer1.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test53125() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        boolean boolean0 = tokenBuffer1.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
        tokenBuffer_Parser0.getCurrentName();
        tokenBuffer_Parser0.getObjectId();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        Float float0 = new Float(0.0);
        tokenBuffer1.writeTypeId(float0);
        tokenBuffer_Parser0.getTextLength();
        tokenBuffer_Parser0.nextFieldName();
        tokenBuffer1.serialize(tokenBuffer0);
        tokenBuffer1.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test53126() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        boolean boolean0 = tokenBuffer1.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
        tokenBuffer_Parser0.getCurrentName();
        tokenBuffer_Parser0.getObjectId();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        Float float0 = new Float(0.0);
        tokenBuffer1.writeTypeId(float0);
        tokenBuffer_Parser0.getTextLength();
        tokenBuffer_Parser0.nextFieldName();
        tokenBuffer1.serialize(tokenBuffer0);
        tokenBuffer1.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test53127() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        boolean boolean0 = tokenBuffer1.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
        tokenBuffer_Parser0.getCurrentName();
        tokenBuffer_Parser0.getObjectId();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        Float float0 = new Float(0.0);
        tokenBuffer1.writeTypeId(float0);
        tokenBuffer_Parser0.getTextLength();
        tokenBuffer_Parser0.nextFieldName();
        tokenBuffer1.serialize(tokenBuffer0);
        boolean boolean1 = tokenBuffer_Parser0.hasTextCharacters();
        tokenBuffer_Parser0.canReadObjectId();
    }

    @Test(timeout = 4000)
    public void test53128() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        boolean boolean0 = tokenBuffer1.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
        tokenBuffer_Parser0.getCurrentName();
        tokenBuffer_Parser0.getObjectId();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        Float float0 = new Float(0.0);
        tokenBuffer1.writeTypeId(float0);
        tokenBuffer_Parser0.getTextLength();
        tokenBuffer_Parser0.nextFieldName();
        tokenBuffer1.serialize(tokenBuffer0);
        boolean boolean1 = tokenBuffer_Parser0.hasTextCharacters();
    }

    @Test(timeout = 4000)
    public void test53129() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        boolean boolean0 = tokenBuffer1.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
        tokenBuffer_Parser0.getCurrentName();
        tokenBuffer_Parser0.getObjectId();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        Float float0 = new Float(0.0);
        tokenBuffer1.writeTypeId(float0);
        tokenBuffer_Parser0.getTextLength();
        tokenBuffer_Parser0.nextFieldName();
        tokenBuffer1.serialize(tokenBuffer0);
        boolean boolean1 = tokenBuffer_Parser0.hasTextCharacters();
        tokenBuffer_Parser0.canReadTypeId();
    }

    @Test(timeout = 4000)
    public void test53130() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        boolean boolean0 = tokenBuffer1.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
        tokenBuffer_Parser0.getCurrentName();
        tokenBuffer_Parser0.getObjectId();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        Float float0 = new Float(0.0);
        tokenBuffer1.writeTypeId(float0);
        tokenBuffer_Parser0.getTextLength();
        tokenBuffer_Parser0.nextFieldName();
        tokenBuffer1.serialize(tokenBuffer0);
        boolean boolean1 = tokenBuffer_Parser0.hasTextCharacters();
        tokenBuffer_Segment0.hasIds();
    }

    @Test(timeout = 4000)
    public void test53131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
        boolean boolean0 = tokenBuffer1.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
        tokenBuffer_Parser0.getCurrentName();
        tokenBuffer_Parser0.getObjectId();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        Float float0 = new Float(0.0);
        tokenBuffer1.writeTypeId(float0);
        tokenBuffer_Parser0.getTextLength();
        tokenBuffer_Parser0.nextFieldName();
        tokenBuffer1.serialize(tokenBuffer0);
        boolean boolean1 = tokenBuffer_Parser0.hasTextCharacters();
    }

    @Test(timeout = 4000)
    public void test54132() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
        objectMapper1.enableDefaultTyping();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        Class<Long> class0 = Long.class;
        SerializedString serializedString0 = new SerializedString("JSON");
        injectableValues_Std0.addValue((Class<?>) class0, (Object) serializedString0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        int int0 = tokenBuffer_Segment0.rawType((-770));
    }

    @Test(timeout = 4000)
    public void test55133() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        tokenBuffer_Segment0._nativeIds = null;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        Class<Short> class0 = Short.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        objectMapper0.readValues(jsonParser0, (JavaType) simpleType0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        tokenBuffer0.writeEndArray();
        tokenBuffer0.firstToken();
    }

    @Test(timeout = 4000)
    public void test55134() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        tokenBuffer_Segment0._nativeIds = null;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        Class<Short> class0 = Short.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        objectMapper0.readValues(jsonParser0, (JavaType) simpleType0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        tokenBuffer0.writeEndArray();
        tokenBuffer0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test55135() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        tokenBuffer_Segment0._nativeIds = null;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        JsonParser jsonParser0 = tokenBuffer_Parser0.skipChildren();
        Class<Short> class0 = Short.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        objectMapper0.readValues(jsonParser0, (JavaType) simpleType0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        BigInteger bigInteger0 = BigInteger.ONE;
        tokenBuffer0.writeNumber(bigInteger0);
        tokenBuffer0.writeEndArray();
        tokenBuffer0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test56136() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        tokenBuffer1.writeBoolean(false);
        tokenBuffer0.append(tokenBuffer1);
        boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test56137() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        tokenBuffer1.writeBoolean(false);
        tokenBuffer0.append(tokenBuffer1);
        boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
        JsonGenerator jsonGenerator0 = tokenBuffer1.setCodec((ObjectCodec) null);
        tokenBuffer1.firstToken();
    }

    @Test(timeout = 4000)
    public void test56138() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        tokenBuffer1.writeBoolean(false);
        tokenBuffer0.append(tokenBuffer1);
        boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
        JsonGenerator jsonGenerator0 = tokenBuffer1.setCodec((ObjectCodec) null);
        jsonGenerator0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test58139() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
        TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        tokenBuffer_Parser0.getTextLength();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
        tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        tokenBuffer_Segment1.next();
        TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, true);
        BooleanNode.valueOf(true);
        tokenBuffer0.writeTypeId((Object) null);
        tokenBuffer_Parser1.nextFieldName();
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser1);
    }

    @Test(timeout = 4000)
    public void test60140() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test60141() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
        JsonGenerator jsonGenerator0 = tokenBuffer0.setCodec(objectMapper0);
        jsonGenerator0.canWriteTypeId();
    }

    @Test(timeout = 4000)
    public void test60142() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
        JsonGenerator jsonGenerator0 = tokenBuffer0.setCodec(objectMapper0);
        jsonGenerator0.canWriteObjectId();
    }

    @Test(timeout = 4000)
    public void test60143() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
        tokenBuffer0.writeEndArray();
        BigDecimal bigDecimal0 = BigDecimal.ONE;
        boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
        JsonGenerator jsonGenerator0 = tokenBuffer0.setCodec(objectMapper0);
        jsonGenerator0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test62144() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        boolean boolean0 = true;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        objectMapper0.createObjectNode();
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        tokenBuffer0.writeStartObject();
        JsonToken jsonToken0 = JsonToken.START_ARRAY;
        tokenBuffer0._append(jsonToken0);
        Float float0 = new Float((double) (byte) 101);
        tokenBuffer0._appendRaw((byte) 0, (Object) null);
        tokenBuffer0.toString();
        tokenBuffer0._reportUnsupportedOperation();
    }

    @Test(timeout = 4000)
    public void test64145() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer0.writeRawValue("JSON", 16, (-1806));
    }

    @Test(timeout = 4000)
    public void test65146() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        tokenBuffer0.forceUseOfBigDecimal(true);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, false);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
        tokenBuffer_Parser0.setFeatureMask(16);
        TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
        TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
        tokenBuffer2.setCodec(objectMapper0);
        tokenBuffer2._appendRaw(10, jsonFactory0);
        TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
        tokenBuffer_Parser0.overrideStdFeatures(16, 10);
        TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0, true);
        tokenBuffer3.copyCurrentEvent(tokenBuffer_Parser0);
    }

    @Test(timeout = 4000)
    public void test70147() throws Throwable {
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        boolean boolean0 = true;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser jsonParser0 = tokenBuffer_Parser0.overrideStdFeatures(6, 16);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        byte[] byteArray0 = new byte[0];
        tokenBuffer0.writeBinary(byteArray0, 6, 16);
    }

    @Test(timeout = 4000)
    public void test73148() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        boolean boolean0 = false;
        tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer_Segment0.next();
        boolean boolean1 = true;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
        tokenBuffer_Parser0.nextTextValue();
        tokenBuffer_Parser0.getObjectId();
    }

    @Test(timeout = 4000)
    public void test74149() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        boolean boolean0 = true;
        boolean boolean1 = true;
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        tokenBuffer_Segment0.rawType(16);
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
        JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
        tokenBuffer0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test77150() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        jsonFactory0.disable(jsonParser_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        Long long0 = new Long(16);
        TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) jsonFactory0, (Object) long0, (Object) objectMapper0);
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
        tokenBuffer_Parser0.getTextLength();
        TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
        jsonFactory0.createParser("Internal error: entry should be a Number, but is of type ");
        tokenBuffer_Parser0.getTextCharacters();
        tokenBuffer_Parser0.overrideCurrentName("SORT_PROPERTIES_ALPHABETICALLY");
        tokenBuffer0.writeEndArray();
        tokenBuffer0.firstToken();
        tokenBuffer_Parser0.getDoubleValue();
    }

    @Test(timeout = 4000)
    public void test78151() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        char[] charArray0 = new char[1];
        charArray0[0] = 'N';
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-4157), (-4157));
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
        TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParserDelegate0, defaultDeserializationContext0);
        tokenBuffer0.writeString(charArray0, 100, 695);
    }

    @Test(timeout = 4000)
    public void test79152() throws Throwable {
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
        tokenBuffer_Parser0.setFeatureMask(16);
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        BigDecimal bigDecimal0 = new BigDecimal((double) 16);
        tokenBuffer0.writeObjectField("[TokenBuffer: ", bigDecimal0);
        tokenBuffer0.writeRawValue("[TokenBuffer: ", (-1806), (-2746));
    }

    @Test(timeout = 4000)
    public void test80153() throws Throwable {
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
        Long long0 = new Long((-2115L));
        tokenBuffer_Segment0.appendRaw(1372, 8, (Object) tokenBuffer_Parser0, (Object) objectMapper0, (Object) long0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        tokenBuffer_Parser0.configure(jsonParser_Feature0, true);
        tokenBuffer_Parser0.setFeatureMask(16);
        TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
        BigDecimal bigDecimal0 = new BigDecimal((double) 16);
        tokenBuffer0.writeObjectField("[TokenBuffer: ", bigDecimal0);
        tokenBuffer_Parser0.overrideCurrentName("");
        tokenBuffer0.writeEndArray();
        tokenBuffer0.firstToken();
        char[] charArray0 = new char[4];
        charArray0[0] = 'm';
        charArray0[1] = '&';
        charArray0[2] = 'G';
        charArray0[3] = 'U';
        tokenBuffer0.writeRawValue(charArray0, 16, 16);
    }

    @Test(timeout = 4000)
    public void test82154() throws Throwable {
        TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
        TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
        JsonFactory jsonFactory0 = new JsonFactory();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
        tokenBuffer0.isEnabled(jsonGenerator_Feature0);
        TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
        tokenBuffer_Segment0.next();
        TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
        JsonParser jsonParser0 = tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
        tokenBuffer_Parser0.setFeatureMask(16);
        TokenBuffer tokenBuffer2 = new TokenBuffer(jsonParser0);
        tokenBuffer1.writeObjectField("mdbJZe&", "mdbJZe&");
        TokenBuffer tokenBuffer3 = new TokenBuffer(jsonParser0);
        tokenBuffer0.writeRawValue("[TokenBuffer: ", (-2885), (-2885));
    }
}
