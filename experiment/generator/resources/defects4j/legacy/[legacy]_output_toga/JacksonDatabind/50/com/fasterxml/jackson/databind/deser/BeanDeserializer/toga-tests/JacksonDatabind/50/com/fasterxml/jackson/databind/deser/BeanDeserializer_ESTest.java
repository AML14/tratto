/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 18:44:24 GMT 2023
 */
package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.io.PushbackInputStream;
import java.time.ZoneId;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanDeserializer_ESTest extends BeanDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, true);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(" ", "");
        NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, nameTransformer1);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, beanPropertyMap0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, set0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        BeanDeserializer beanDeserializer0 = null;
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, (ObjectIdReader) null);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TextNode textNode0 = TextNode.valueOf("Can not create polymorphic instances with unwrapped values");
        Class<PushbackInputStream> class0 = PushbackInputStream.class;
        objectMapper0.treeToValue((TreeNode) textNode0, class0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        Class<SimpleModule> class0 = SimpleModule.class;
        SimpleModule simpleModule0 = objectMapper0.treeToValue((TreeNode) objectNode0, class0);
        simpleModule0.getModuleName();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        Class<PushbackInputStream> class0 = PushbackInputStream.class;
        objectMapper0.treeToValue((TreeNode) arrayNode0, class0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<PushbackInputStream> class0 = PushbackInputStream.class;
        ShortNode shortNode0 = ShortNode.valueOf((short) (-726));
        objectMapper0.treeToValue((TreeNode) shortNode0, class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DoubleNode doubleNode0 = DoubleNode.valueOf((-2961.86577273235));
        Class<PushbackInputStream> class0 = PushbackInputStream.class;
        objectMapper0.treeToValue((TreeNode) doubleNode0, class0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BooleanNode booleanNode0 = BooleanNode.getTrue();
        Class<PushbackInputStream> class0 = PushbackInputStream.class;
        objectMapper0.treeToValue((TreeNode) booleanNode0, class0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BooleanNode booleanNode0 = BooleanNode.FALSE;
        Class<PushbackInputStream> class0 = PushbackInputStream.class;
        objectMapper0.treeToValue((TreeNode) booleanNode0, class0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<PushbackInputStream> class0 = PushbackInputStream.class;
        MissingNode missingNode0 = MissingNode.getInstance();
        objectMapper0.treeToValue((TreeNode) missingNode0, class0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.put("", 1685.0F);
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn(true, true).when(deserializationProblemHandler0).handleUnknownProperty(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.JsonDeserializer.class), any(), anyString());
        ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
        objectNode0.putNull("0gSLZ");
        Class<SimpleModule> class0 = SimpleModule.class;
        SimpleModule simpleModule0 = objectMapper1.treeToValue((TreeNode) objectNode0, class0);
        simpleModule0.getModuleName();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class), any(java.lang.Class.class), any(com.fasterxml.jackson.core.JsonParser.class), anyString());
        ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
        Class<PushbackInputStream> class0 = PushbackInputStream.class;
        PushbackInputStream pushbackInputStream0 = objectMapper1.treeToValue((TreeNode) objectNode0, class0);
    }
}
