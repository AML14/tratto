/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 18:22:43 GMT 2023
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassStack;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBase;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.type.TypeParser;
import java.io.FileDescriptor;
import java.lang.reflect.Array;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeFactory_ESTest extends TypeFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        Class<MapType> class1 = MapType.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class1);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Class<HashSet> class0 = HashSet.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ReferenceType> class1 = ReferenceType.class;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class1);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, (JavaType[]) null);
        javaType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        Class<?> class1 = TypeFactory.rawClass(collectionType0);
        class1.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<String> atomicReference0 = new AtomicReference<String>();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(atomicReference0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayType> class0 = ArrayType.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TextNode> class0 = TextNode.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TextNode> class0 = TextNode.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TextNode> class0 = TextNode.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Class<LinkedList> class0 = LinkedList.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructMapLikeType(class0, class0, class0);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Class<HashSet> class0 = HashSet.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<TextNode> class1 = TextNode.class;
        typeFactory0.constructParametrizedType(class0, class1, (Class<?>[]) null);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(mockFileInputStream0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapLikeType> class0 = MapLikeType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        collectionLikeType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        collectionType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Class<HashSet> class0 = HashSet.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        collectionLikeType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) arrayType0, (JavaType) arrayType0);
        mapLikeType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructType((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructRawMapType(class0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("com.fasterxml.jackson.databind.ext.PathDeserializer");
        javaType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
        typeFactory1.findClass("1>70'+hmjb%(W>)X-Q");
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        Class<HashSet> class0 = HashSet.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class0, typeBindings0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        JavaType javaType0 = typeFactory0.constructReferenceType(class0, simpleType0);
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.findClass("1>70'+hmjb%(W>)X-Q");
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        typeFactory0.constructArrayType(javaType0);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = TypeFactory.unknownType();
        typeFactory0.constructArrayType(javaType0);
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier1);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
    }

    @Test(timeout = 4000)
    public void test2527() throws Throwable {
        Class<HashSet> class0 = HashSet.class;
        Class<?> class1 = TypeFactory.rawClass(class0);
        class1.isEnum();
    }

    @Test(timeout = 4000)
    public void test2628() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("double");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test2729() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("int");
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test2830() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0.findClass("long");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test2931() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("float");
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test3032() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("boolean");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("byte");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3234() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("char");
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0._findPrimitive("short");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0._findPrimitive("short");
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("void");
        javaType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        Class<Integer> class0 = Integer.class;
        JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
        javaType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        Class<Properties> class0 = Properties.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        typeFactory0.constructGeneralizedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        JavaType javaType0 = typeFactory0.constructGeneralizedType(collectionType0, class0);
        javaType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<Integer> class1 = Integer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
        MapLikeType mapLikeType0 = new MapLikeType(simpleType0, simpleType0, simpleType0);
        PropertyName propertyName0 = new PropertyName("boolean");
        ObjectIdGenerator<ObjectMapper.DefaultTyping> objectIdGenerator0 = (ObjectIdGenerator<ObjectMapper.DefaultTyping>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) mapLikeType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator0, false);
        JavaType[] javaTypeArray0 = new JavaType[9];
        javaTypeArray0[2] = objectIdWriter0.idType;
        AtomicReference<SimpleType> atomicReference0 = new AtomicReference<SimpleType>();
        CollectionLikeType collectionLikeType0 = new CollectionLikeType(class0, typeBindings0, mapLikeType0, javaTypeArray0, javaTypeArray0[2], atomicReference0, javaTypeArray0[4], false);
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        doReturn(collectionLikeType0, collectionLikeType0, javaTypeArray0[0], mapLikeType0, javaTypeArray0[1]).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class), any(java.lang.reflect.Type.class), any(com.fasterxml.jackson.databind.type.TypeBindings.class), any(com.fasterxml.jackson.databind.type.TypeFactory.class));
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        Class<MapType> class2 = MapType.class;
        JavaType[] javaTypeArray1 = new JavaType[5];
        MapLikeType mapLikeType1 = typeFactory1.constructRawMapLikeType(class2);
        javaTypeArray1[0] = (JavaType) mapLikeType1;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType1, javaTypeArray1[0]);
        javaTypeArray1[1] = (JavaType) referenceType0;
        JavaType javaType0 = typeFactory1.constructGeneralizedType(javaTypeArray1[1], class0);
        javaType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test4144() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        Class<Object> class1 = Object.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        typeFactory0.constructGeneralizedType(resolvedRecursiveType0, class1);
    }

    @Test(timeout = 4000)
    public void test4245() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        JavaType javaType0 = typeFactory0.moreSpecificType(collectionLikeType0, collectionLikeType0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test4346() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test4447() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, (JavaType) null);
        javaType1.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test4448() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test4549() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType[] javaTypeArray0 = new JavaType[1];
        javaTypeArray0[0] = javaType0;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
        MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[0], (JavaType) referenceType0);
        typeFactory0.moreSpecificType(javaTypeArray0[0], mapType0);
        referenceType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test4550() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType[] javaTypeArray0 = new JavaType[1];
        javaTypeArray0[0] = javaType0;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
        MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[0], (JavaType) referenceType0);
        typeFactory0.moreSpecificType(javaTypeArray0[0], mapType0);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test4651() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapLikeType> class0 = MapLikeType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        JavaType javaType0 = TypeBase._bogusSuperClass(class0);
        JavaType javaType1 = typeFactory0.moreSpecificType(simpleType0, javaType0);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test4652() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<MapLikeType> class0 = MapLikeType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        JavaType javaType0 = TypeBase._bogusSuperClass(class0);
        JavaType javaType1 = typeFactory0.moreSpecificType(simpleType0, javaType0);
        javaType1.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test4753() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        Class<ReferenceType> class1 = ReferenceType.class;
        typeFactory0.constructMapType((Class<? extends Map>) null, class1, class0);
    }

    @Test(timeout = 4000)
    public void test4854() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        Class<DeserializationFeature> class1 = DeserializationFeature.class;
        typeFactory0.constructMapType(class0, class1, class1);
    }

    @Test(timeout = 4000)
    public void test4955() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<String> class0 = String.class;
        Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test4956() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<String> class0 = String.class;
        Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test5057() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<String> class0 = String.class;
        Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
        typeFactory0.constructParametricType(class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test5158() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test5259() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) collectionType0);
        JavaType[] javaTypeArray0 = new JavaType[1];
        JavaType javaType0 = typeFactory0._constructSimple(class0, typeBindings0, collectionType0, javaTypeArray0);
        javaType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test5360() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.TYPE;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    }

    @Test(timeout = 4000)
    public void test5361() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.TYPE;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test5462() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Long> class0 = Long.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test5563() throws Throwable {
        TypeParser typeParser0 = new TypeParser((TypeFactory) null);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        TypeFactory typeFactory0 = new TypeFactory(typeParser0, typeModifierArray0);
        typeFactory0.constructType((Type) null);
    }

    @Test(timeout = 4000)
    public void test5664() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(simpleType0);
    }

    @Test(timeout = 4000)
    public void test5765() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        ClassStack classStack0 = new ClassStack(class0);
        ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
        doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
        doReturn((Type) null).when(parameterizedType0).getRawType();
        typeFactory0._fromParamType(classStack0, parameterizedType0, (TypeBindings) null);
    }
}
