/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 18:33:28 GMT 2023
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
import com.fasterxml.jackson.databind.ser.std.DateSerializer;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeSerializerBase_ESTest extends DateTimeSerializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        DateSerializer dateSerializer0 = new DateSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
        dateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        DateSerializer dateSerializer0 = new DateSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(dateSerializer0, (BeanProperty) null);
        jsonSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        DateSerializer dateSerializer0 = new DateSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
        defaultSerializerProvider_Impl0.handleSecondaryContextualization(dateSerializer0, beanProperty_Std0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CalendarSerializer calendarSerializer0 = new CalendarSerializer();
        boolean boolean0 = calendarSerializer0.isEmpty((Calendar) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-126), (-126), (-126), (-126), (-126), (-126));
        boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        CalendarSerializer calendarSerializer0 = new CalendarSerializer();
        Locale locale0 = Locale.FRANCE;
        Calendar calendar0 = MockCalendar.getInstance(locale0);
        boolean boolean0 = calendarSerializer0.isEmpty(calendar0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        DateSerializer dateSerializer0 = DateSerializer.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        boolean boolean0 = dateSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Date) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        DateSerializer dateSerializer0 = new DateSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        java.sql.Date date0 = new java.sql.Date(0L);
        boolean boolean0 = dateSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Date) date0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        DateSerializer dateSerializer0 = new DateSerializer();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        MockDate mockDate0 = new MockDate();
        boolean boolean0 = dateSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Date) mockDate0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Boolean boolean0 = Boolean.valueOf(false);
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        DateSerializer dateSerializer0 = new DateSerializer(boolean0, dateFormat0);
        JsonNode jsonNode0 = dateSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Boolean boolean0 = Boolean.valueOf(true);
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        DateSerializer dateSerializer0 = new DateSerializer(boolean0, dateFormat0);
        JsonNode jsonNode0 = dateSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DateFormat dateFormat0 = MockDateFormat.getInstance();
        DateSerializer dateSerializer0 = new DateSerializer((Boolean) null, dateFormat0);
        boolean boolean0 = dateSerializer0._asTimestamp(defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        DateSerializer dateSerializer0 = DateSerializer.instance;
        dateSerializer0._asTimestamp((SerializerProvider) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        JavaType javaType0 = TypeFactory.unknownType();
        sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, javaType0);
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Boolean boolean0 = Boolean.TRUE;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
        JavaType javaType0 = TypeFactory.unknownType();
        sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, javaType0);
        javaType0.isMapLikeType();
    }
}
