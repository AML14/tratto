/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 03:18:33 GMT 2023
 */
package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.module.SimpleSerializers;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.sql.ClientInfoStatus;
import java.sql.SQLNonTransientConnectionException;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanSerializerFactory_ESTest extends BeanSerializerFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        beanSerializerFactory0.constructFilteredBeanWriter((BeanPropertyWriter) null, (Class<?>[]) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
        BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<CollectionType> class0 = CollectionType.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetter();
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
        beanSerializerFactory0._createSerializer2(defaultSerializerProvider_Impl0, arrayType0, basicBeanDescription0, true);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<BeanSerializer> class0 = BeanSerializer.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        objectMapper0.acceptJsonFormatVisitor((JavaType) collectionLikeType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        collectionLikeType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        SimpleSerializers simpleSerializers0 = new SimpleSerializers();
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);
        objectMapper0.setSerializerFactory(serializerFactory0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        SimpleSerializers simpleSerializers0 = new SimpleSerializers();
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);
        objectMapper0.setSerializerFactory(serializerFactory0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<Object> class0 = Object.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        SimpleSerializers simpleSerializers0 = new SimpleSerializers();
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);
        objectMapper0.setSerializerFactory(serializerFactory0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        SimpleSerializers simpleSerializers0 = new SimpleSerializers();
        SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalSerializers(simpleSerializers0);
        objectMapper0.setSerializerFactory(serializerFactory0);
        Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
        JsonSerializer<BasicBeanDescription> jsonSerializer0 = (JsonSerializer<BasicBeanDescription>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        doReturn((String) null, (String) null).when(jsonSerializer0).toString();
        simpleSerializers0.addSerializer((Class<? extends BasicBeanDescription>) class0, jsonSerializer0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<ChronoField> class0 = ChronoField.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.JsonSerializer.class));
        SerializerFactory serializerFactory0 = beanSerializerFactory0.instance.withSerializerModifier(beanSerializerModifier0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.setSerializerFactory(serializerFactory0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<Integer> class0 = Integer.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
        doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetter();
        doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
        doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
        doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
        doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
        doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
        doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
        BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
        JsonSerializer<Object> jsonSerializer0 = beanSerializerFactory0.findBeanSerializer(defaultSerializerProvider_Impl0, arrayType0, basicBeanDescription0);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        beanSerializerFactory0.findBeanSerializer(defaultSerializerProvider_Impl0, collectionType0, (BeanDescription) null);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        doReturn((List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
        SerializerFactory serializerFactory0 = beanSerializerFactory0.instance.withSerializerModifier(beanSerializerModifier0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<ObjectWriter> class0 = ObjectWriter.class;
        boolean boolean0 = objectMapper1.canSerialize(class0, atomicReference0);
        atomicReference0.toString();
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        doReturn((List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), anyList());
        doReturn((BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class), any(com.fasterxml.jackson.databind.BeanDescription.class), any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
        SerializerFactory serializerFactory0 = beanSerializerFactory0.instance.withSerializerModifier(beanSerializerModifier0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<ObjectWriter> class0 = ObjectWriter.class;
        boolean boolean0 = objectMapper1.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
        MapperFeature mapperFeature1 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[6];
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature1;
        mapperFeatureArray0[2] = mapperFeature0;
        mapperFeatureArray0[3] = mapperFeature1;
        mapperFeatureArray0[4] = mapperFeature0;
        mapperFeatureArray0[5] = mapperFeature1;
        objectMapper0.enable(mapperFeatureArray0);
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLNonTransientConnectionException0);
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
        objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        objectMapper0.configure(mapperFeature0, false);
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        Class<ObjectWriter> class0 = ObjectWriter.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        mapperFeatureArray0[2] = mapperFeature0;
        objectMapper0.enable(mapperFeatureArray0);
        Class<Throwable> class0 = Throwable.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
        Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
        boolean boolean0 = objectMapper1.canSerialize(class0, atomicReference0);
    }
}
