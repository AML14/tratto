/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 03:21:23 GMT 2023
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
import com.fasterxml.jackson.databind.ser.std.StdArraySerializers;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanSerializerBase_ESTest extends BeanSerializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StdArraySerializers.BooleanArraySerializer stdArraySerializers_BooleanArraySerializer0 = new StdArraySerializers.BooleanArraySerializer();
        JavaType javaType0 = stdArraySerializers_BooleanArraySerializer0.getContentType();
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        ObjectIdGenerator<StdArraySerializers.FloatArraySerializer> objectIdGenerator0 = (ObjectIdGenerator<StdArraySerializers.FloatArraySerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, objectIdGenerator0, false);
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, beanSerializerBase0, false);
        MockPrintStream mockPrintStream0 = new MockPrintStream("Cn not ind a deserializer for non-cocrete ^ap typ9");
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
        JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanSerializerBase0.serializeWithType(uTF8JsonGenerator0, jsonGeneratorDelegate0, defaultSerializerProvider_Impl0, (TypeSerializer) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer0);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        ObjectIdGenerator<ObjectIdGenerators.IntSequenceGenerator> objectIdGenerator0 = (ObjectIdGenerator<ObjectIdGenerators.IntSequenceGenerator>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
        doReturn((Class) null).when(objectIdGenerator0).getScope();
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, objectIdGenerator0, false);
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<AsExternalTypeSerializer> class0 = AsExternalTypeSerializer.class;
        objectMapper0.convertValue((Object) objectIdWriter0, class0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[4];
        MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
        mapperFeatureArray0[0] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
        mapperFeatureArray0[1] = mapperFeature1;
        mapperFeatureArray0[2] = mapperFeature1;
        mapperFeatureArray0[3] = mapperFeatureArray0[0];
        objectMapper0.disable(mapperFeatureArray0);
        objectMapper0.writeValueAsBytes(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        objectMapper0.writeValueAsBytes(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
        MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        objectMapper0.enable(mapperFeatureArray0);
        StdArraySerializers.LongArraySerializer stdArraySerializers_LongArraySerializer0 = new StdArraySerializers.LongArraySerializer();
        byte[] byteArray0 = objectMapper0.writeValueAsBytes(stdArraySerializers_LongArraySerializer0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapType0);
        boolean boolean0 = beanSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapType0);
        Class<String> class1 = String.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
        PropertyName propertyName0 = new PropertyName("'1?5G");
        PropertyBasedObjectIdGenerator propertyBasedObjectIdGenerator0 = new PropertyBasedObjectIdGenerator(class0);
        ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) propertyBasedObjectIdGenerator0, true);
        BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
        boolean boolean0 = beanSerializerBase0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapType0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
        AsPropertyTypeSerializer asPropertyTypeSerializer0 = new AsPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "JSON");
        beanSerializer0.serializeWithType(asPropertyTypeSerializer0, jsonGenerator0, defaultSerializerProvider_Impl0, asPropertyTypeSerializer0);
        jsonGenerator0.getHighestEscapedChar();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        StdArraySerializers.FloatArraySerializer stdArraySerializers_FloatArraySerializer0 = new StdArraySerializers.FloatArraySerializer();
        JavaType javaType0 = stdArraySerializers_FloatArraySerializer0.getContentType();
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ((BeanSerializerBase) beanSerializer0).serializeFieldsFiltered(beanSerializer0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) javaType0);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        beanSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, javaType0);
        javaType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
        beanSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, javaType0);
        javaType0.isMapLikeType();
    }
}
