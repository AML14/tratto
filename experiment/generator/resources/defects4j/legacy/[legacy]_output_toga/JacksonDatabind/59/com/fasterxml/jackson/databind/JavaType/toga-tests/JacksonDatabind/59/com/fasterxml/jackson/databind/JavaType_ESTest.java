/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 20:41:59 GMT 2023
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JavaType_ESTest extends JavaType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        javaType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        javaType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readerForUpdating(javaType0);
        javaType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readerForUpdating(javaType0);
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readerForUpdating(javaType0);
        javaType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Class<Integer> class0 = Integer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        simpleType0.getKeyType();
        simpleType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Class<Integer> class0 = Integer.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
        boolean boolean0 = resolvedRecursiveType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Class<Integer> class0 = Integer.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        simpleType0.isFinal();
        simpleType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Object object0 = javaType0.getContentTypeHandler();
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Object object0 = javaType0.getContentValueHandler();
    }

    @Test(timeout = 4000)
    public void test0610() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        String string0 = javaType0.getGenericSignature();
    }

    @Test(timeout = 4000)
    public void test0711() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        String string0 = javaType0.getErasedSignature();
    }

    @Test(timeout = 4000)
    public void test0812() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        mapType0.getParameterSource();
        mapType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test0913() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        JavaType javaType1 = javaType0.forcedNarrowBy(class0);
    }

    @Test(timeout = 4000)
    public void test1014() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.TYPE;
        Class<HashSet> class1 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
        CollectionType collectionType1 = collectionType0.withValueHandler(typeFactory0);
        JavaType javaType0 = collectionType1.forcedNarrowBy(class0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1015() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.TYPE;
        Class<HashSet> class1 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
        CollectionType collectionType1 = collectionType0.withValueHandler(typeFactory0);
        JavaType javaType0 = collectionType1.forcedNarrowBy(class0);
        javaType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test1016() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.TYPE;
        Class<HashSet> class1 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
        CollectionType collectionType1 = collectionType0.withValueHandler(typeFactory0);
        JavaType javaType0 = collectionType1.forcedNarrowBy(class0);
        collectionType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test1017() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.TYPE;
        Class<HashSet> class1 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
        CollectionType collectionType1 = collectionType0.withValueHandler(typeFactory0);
        JavaType javaType0 = collectionType1.forcedNarrowBy(class0);
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test1118() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        Class<JsonInclude.Include> class1 = JsonInclude.Include.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        CollectionType collectionType1 = collectionType0.withTypeHandler(class1);
        JavaType javaType0 = collectionType1.forcedNarrowBy(class1);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1119() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        Class<JsonInclude.Include> class1 = JsonInclude.Include.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        CollectionType collectionType1 = collectionType0.withTypeHandler(class1);
        JavaType javaType0 = collectionType1.forcedNarrowBy(class1);
        javaType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test1120() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        Class<JsonInclude.Include> class1 = JsonInclude.Include.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        CollectionType collectionType1 = collectionType0.withTypeHandler(class1);
        JavaType javaType0 = collectionType1.forcedNarrowBy(class1);
        javaType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test1121() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        Class<JsonInclude.Include> class1 = JsonInclude.Include.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        CollectionType collectionType1 = collectionType0.withTypeHandler(class1);
        JavaType javaType0 = collectionType1.forcedNarrowBy(class1);
        collectionType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test1122() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        Class<JsonInclude.Include> class1 = JsonInclude.Include.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        CollectionType collectionType1 = collectionType0.withTypeHandler(class1);
        JavaType javaType0 = collectionType1.forcedNarrowBy(class1);
        javaType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test1223() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test1324() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        boolean boolean0 = javaType0.isTypeOrSubTypeOf(class0);
    }

    @Test(timeout = 4000)
    public void test1425() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        Class<JsonInclude.Include> class1 = JsonInclude.Include.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
        Class<JavaType> class2 = JavaType.class;
        boolean boolean0 = collectionType0.isTypeOrSubTypeOf(class2);
    }

    @Test(timeout = 4000)
    public void test1526() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<Object> class1 = Object.class;
        Class<Integer> class2 = Integer.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
        boolean boolean0 = mapType0.isTypeOrSubTypeOf(class1);
        mapType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test1527() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<Object> class1 = Object.class;
        Class<Integer> class2 = Integer.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
        boolean boolean0 = mapType0.isTypeOrSubTypeOf(class1);
    }

    @Test(timeout = 4000)
    public void test1628() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapLikeType> class0 = MapLikeType.class;
        ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test1729() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        boolean boolean0 = mapLikeType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test1830() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        boolean boolean0 = javaType0.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test1931() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        boolean boolean0 = collectionType0.hasGenericTypes();
        collectionType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test1932() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        boolean boolean0 = collectionType0.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test2033() throws Throwable {
        Class<MapLikeType> class0 = MapLikeType.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class1 = HashMap.class;
        Class<Object> class2 = Object.class;
        MapType mapType0 = typeFactory0.constructMapType(class1, class2, class0);
        JavaType javaType0 = mapType0.containedTypeOrUnknown(0);
        javaType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test2034() throws Throwable {
        Class<MapLikeType> class0 = MapLikeType.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class1 = HashMap.class;
        Class<Object> class2 = Object.class;
        MapType mapType0 = typeFactory0.constructMapType(class1, class2, class0);
        JavaType javaType0 = mapType0.containedTypeOrUnknown(0);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test2135() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType javaType1 = javaType0.containedTypeOrUnknown(1);
        javaType1.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test2236() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        boolean boolean0 = javaType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test2337() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeFactory.unknownType();
        Integer integer0 = new Integer(0);
        SimpleType simpleType1 = simpleType0.withValueHandler(integer0);
        boolean boolean0 = simpleType1.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test2338() throws Throwable {
        SimpleType simpleType0 = (SimpleType) TypeFactory.unknownType();
        Integer integer0 = new Integer(0);
        SimpleType simpleType1 = simpleType0.withValueHandler(integer0);
        boolean boolean0 = simpleType1.hasValueHandler();
        simpleType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test2439() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) arrayList0, (Object) arrayList0);
        boolean boolean0 = arrayType0.hasHandlers();
        javaType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test2440() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) arrayList0, (Object) arrayList0);
        boolean boolean0 = arrayType0.hasHandlers();
        arrayType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test2441() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) arrayList0, (Object) arrayList0);
        boolean boolean0 = arrayType0.hasHandlers();
        arrayType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test2442() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) arrayList0, (Object) arrayList0);
        boolean boolean0 = arrayType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test2543() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(40, 40);
        TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
        Class<HashSet> class0 = HashSet.class;
        Class<JsonInclude.Include> class1 = JsonInclude.Include.class;
        CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
        collectionType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test2644() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
        ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
        ArrayType arrayType1 = arrayType0.withValueHandler(javaType0);
        boolean boolean0 = arrayType1.hasHandlers();
        arrayType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test2645() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
        ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
        ArrayType arrayType1 = arrayType0.withValueHandler(javaType0);
        boolean boolean0 = arrayType1.hasHandlers();
        arrayType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test2646() throws Throwable {
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Integer> class0 = Integer.class;
        TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
        ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
        ArrayType arrayType1 = arrayType0.withValueHandler(javaType0);
        boolean boolean0 = arrayType1.hasHandlers();
    }
}
