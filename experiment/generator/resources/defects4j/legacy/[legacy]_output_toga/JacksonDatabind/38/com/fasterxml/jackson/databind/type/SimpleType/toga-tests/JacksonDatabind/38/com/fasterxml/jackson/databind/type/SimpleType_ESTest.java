/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 20 03:40:55 GMT 2023
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class SimpleType_ESTest extends SimpleType_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        Object object0 = new Object();
        JavaType javaType0 = referenceType0.withContentTypeHandler(object0);
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Object object0 = new Object();
        simpleType0.withContentValueHandler(object0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        simpleType0.withContentTypeHandler(class0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<String> class0 = String.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class1 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
        SimpleType simpleType0 = new SimpleType(collectionType0);
        StringBuilder stringBuilder0 = new StringBuilder();
        simpleType0.getGenericSignature(stringBuilder0);
        stringBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        simpleType0.withContentType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<SimpleType> class0 = SimpleType.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        simpleType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        String string0 = simpleType0.getErasedSignature();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<SimpleType> class0 = SimpleType.class;
        SimpleType simpleType0 = new SimpleType(class0);
        simpleType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        SimpleType.construct(class0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<LinkedList> class0 = LinkedList.class;
        SimpleType.construct(class0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        Class<SimpleType> class0 = SimpleType.class;
        JavaType javaType0 = simpleType0._narrow(class0);
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JavaType javaType0 = simpleType0._narrow(class0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JavaType javaType0 = simpleType0._narrow(class0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        SimpleType simpleType1 = simpleType0.withTypeHandler((Object) null);
        simpleType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        SimpleType simpleType1 = simpleType0.withTypeHandler((Object) null);
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        SimpleType simpleType1 = simpleType0.withValueHandler(class0);
        simpleType1.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        SimpleType simpleType1 = simpleType0.withValueHandler((Object) null);
        simpleType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        SimpleType simpleType1 = simpleType0.withValueHandler((Object) null);
    }

    @Test(timeout = 4000)
    public void test1518() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        SimpleType simpleType1 = simpleType0.withStaticTyping();
        SimpleType simpleType2 = simpleType1.withStaticTyping();
        simpleType2.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        Class<String> class0 = String.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        SimpleType simpleType1 = simpleType0.withStaticTyping();
        SimpleType simpleType2 = simpleType1.withStaticTyping();
        simpleType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        SimpleType simpleType0 = new SimpleType(mapType0);
        String string0 = simpleType0.buildCanonicalName();
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        boolean boolean0 = simpleType0.equals((Object) null);
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleType> class0 = SimpleType.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }
}
