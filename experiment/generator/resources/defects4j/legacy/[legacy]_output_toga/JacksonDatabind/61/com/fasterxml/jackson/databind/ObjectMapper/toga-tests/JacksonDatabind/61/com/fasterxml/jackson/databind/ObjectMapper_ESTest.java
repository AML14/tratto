/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 20:57:57 GMT 2023
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectMapper_ESTest extends ObjectMapper_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        objectMapper_DefaultTypeResolverBuilder0.getTypeProperty();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) null);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        TypeReference<LongNode> typeReference0 = (TypeReference<LongNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readerFor(typeReference0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.valueToTree((Object) jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test0410() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test0411() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test0412() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test0413() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test0414() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test0415() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test0416() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test0417() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test0418() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
    }

    @Test(timeout = 4000)
    public void test0419() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.isInt();
    }

    @Test(timeout = 4000)
    public void test0420() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.isFloatingPointNumber();
    }

    @Test(timeout = 4000)
    public void test0421() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.floatValue();
    }

    @Test(timeout = 4000)
    public void test0422() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.booleanValue();
    }

    @Test(timeout = 4000)
    public void test0423() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.numberType();
    }

    @Test(timeout = 4000)
    public void test0424() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.intValue();
    }

    @Test(timeout = 4000)
    public void test0425() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.size();
    }

    @Test(timeout = 4000)
    public void test0426() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.isLong();
    }

    @Test(timeout = 4000)
    public void test0427() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test0428() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.asToken();
    }

    @Test(timeout = 4000)
    public void test0429() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.getNodeType();
    }

    @Test(timeout = 4000)
    public void test0430() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.textValue();
    }

    @Test(timeout = 4000)
    public void test0431() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.isFloat();
    }

    @Test(timeout = 4000)
    public void test0432() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.shortValue();
    }

    @Test(timeout = 4000)
    public void test0433() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.isBigInteger();
    }

    @Test(timeout = 4000)
    public void test0434() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.canConvertToLong();
    }

    @Test(timeout = 4000)
    public void test0435() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.isDouble();
    }

    @Test(timeout = 4000)
    public void test0436() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.isBigDecimal();
    }

    @Test(timeout = 4000)
    public void test0437() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test0438() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.canConvertToInt();
    }

    @Test(timeout = 4000)
    public void test0439() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.longValue();
    }

    @Test(timeout = 4000)
    public void test0440() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        doubleNode0.isShort();
    }

    @Test(timeout = 4000)
    public void test0441() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DoubleNode doubleNode0 = new DoubleNode(0.0);
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        objectMapper0.treeToValue((TreeNode) doubleNode0, class0);
    }

    @Test(timeout = 4000)
    public void test0542() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
    }

    @Test(timeout = 4000)
    public void test0543() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test0544() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test0545() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test0546() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test0547() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test0548() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test0549() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test0550() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test0551() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test0552() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test0553() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test0554() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test0555() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test0556() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
    }

    @Test(timeout = 4000)
    public void test0557() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
    }

    @Test(timeout = 4000)
    public void test0558() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
    }

    @Test(timeout = 4000)
    public void test0559() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test0560() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test0561() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test0562() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test0563() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test0564() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test0665() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test0666() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<NullNode> class0 = NullNode.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test0767() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
    }

    @Test(timeout = 4000)
    public void test0768() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test0769() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test0770() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test0771() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test0772() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test0773() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test0774() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    }

    @Test(timeout = 4000)
    public void test0775() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
    }

    @Test(timeout = 4000)
    public void test0776() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    }

    @Test(timeout = 4000)
    public void test0777() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test0778() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test0779() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test0780() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test0781() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test0782() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test0783() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test0784() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test0785() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test0786() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
    }

    @Test(timeout = 4000)
    public void test0787() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test0788() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test0789() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test0790() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test0791() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test0792() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test0793() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test0894() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test0895() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<FloatNode> class0 = FloatNode.class;
        ObjectReader objectReader0 = objectMapper0.reader(class0);
    }

    @Test(timeout = 4000)
    public void test0996() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test0997() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Object> class0 = Object.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
    }

    @Test(timeout = 4000)
    public void test1098() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test1099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
    }

    @Test(timeout = 4000)
    public void test10100() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        pipedInputStream0.available();
    }

    @Test(timeout = 4000)
    public void test10101() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        Class<PipedInputStream> class0 = PipedInputStream.class;
        objectMapper0.readValue((InputStream) pipedInputStream0, class0);
    }

    @Test(timeout = 4000)
    public void test11102() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
    }

    @Test(timeout = 4000)
    public void test11103() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test11104() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test11105() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test11106() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test11107() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test11108() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test11109() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    }

    @Test(timeout = 4000)
    public void test11110() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
    }

    @Test(timeout = 4000)
    public void test11111() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    }

    @Test(timeout = 4000)
    public void test11112() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test11113() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test11114() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test11115() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test11116() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test11117() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test11118() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test11119() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test11120() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test11121() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
    }

    @Test(timeout = 4000)
    public void test11122() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test11123() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test11124() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test11125() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test11126() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test11127() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test11128() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test12129() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test12130() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((FormatSchema) null);
    }

    @Test(timeout = 4000)
    public void test12131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((FormatSchema) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test13132() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test13133() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
    }

    @Test(timeout = 4000)
    public void test13134() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.booleanValue();
    }

    @Test(timeout = 4000)
    public void test13135() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.numberType();
    }

    @Test(timeout = 4000)
    public void test13136() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.getNodeType();
    }

    @Test(timeout = 4000)
    public void test13137() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.asToken();
    }

    @Test(timeout = 4000)
    public void test13138() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.isShort();
    }

    @Test(timeout = 4000)
    public void test13139() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.isInt();
    }

    @Test(timeout = 4000)
    public void test13140() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.isDouble();
    }

    @Test(timeout = 4000)
    public void test13141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.isIntegralNumber();
    }

    @Test(timeout = 4000)
    public void test13142() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.isFloatingPointNumber();
    }

    @Test(timeout = 4000)
    public void test13143() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.isBigDecimal();
    }

    @Test(timeout = 4000)
    public void test13144() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.isLong();
    }

    @Test(timeout = 4000)
    public void test13145() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.size();
    }

    @Test(timeout = 4000)
    public void test13146() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.textValue();
    }

    @Test(timeout = 4000)
    public void test13147() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.isFloat();
    }

    @Test(timeout = 4000)
    public void test13148() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.asText();
    }

    @Test(timeout = 4000)
    public void test13149() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.isBigInteger();
    }

    @Test(timeout = 4000)
    public void test14150() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test14151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        boolean boolean0 = objectMapper0.isEnabled(serializationFeature0);
    }

    @Test(timeout = 4000)
    public void test15152() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test15153() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerFactory serializerFactory0 = objectMapper0.getSerializerFactory();
    }

    @Test(timeout = 4000)
    public void test16154() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
    }

    @Test(timeout = 4000)
    public void test16155() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test16156() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test16157() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test16158() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test16159() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test16160() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test16161() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    }

    @Test(timeout = 4000)
    public void test16162() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
    }

    @Test(timeout = 4000)
    public void test16163() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    }

    @Test(timeout = 4000)
    public void test16164() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test16165() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test16166() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test16167() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test16168() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test16169() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test16170() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test16171() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test16172() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test16173() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
    }

    @Test(timeout = 4000)
    public void test16174() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
    }

    @Test(timeout = 4000)
    public void test16175() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
    }

    @Test(timeout = 4000)
    public void test16176() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test16177() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test16178() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test16179() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test16180() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test16181() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test16182() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test17183() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test17184() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test17185() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test17186() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test18187() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
    }

    @Test(timeout = 4000)
    public void test18188() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test18189() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test18190() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test18191() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test18192() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test18193() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test18194() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    }

    @Test(timeout = 4000)
    public void test18195() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
    }

    @Test(timeout = 4000)
    public void test18196() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    }

    @Test(timeout = 4000)
    public void test18197() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test18198() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test18199() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test18200() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test18201() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test18202() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test18203() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test18204() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test18205() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test18206() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
        objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test19207() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test19208() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    }

    @Test(timeout = 4000)
    public void test19209() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        typeBindings0.size();
    }

    @Test(timeout = 4000)
    public void test19210() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        typeBindings0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test19211() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    }

    @Test(timeout = 4000)
    public void test19212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        typeBindings0.size();
    }

    @Test(timeout = 4000)
    public void test19213() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        typeBindings0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test19214() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test19215() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test19216() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test19217() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test19218() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.hasContentType();
    }

    @Test(timeout = 4000)
    public void test19219() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test19220() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test19221() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test19222() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test19223() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test19224() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test19225() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test19226() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test19227() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test19228() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test19229() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        resolvedRecursiveType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test19230() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test19231() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test19232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test19233() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        typeBindings0.size();
    }

    @Test(timeout = 4000)
    public void test19234() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        typeBindings0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test19235() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test19236() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test19237() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test19238() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test19239() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.hasContentType();
    }

    @Test(timeout = 4000)
    public void test19240() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test19241() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test19242() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test19243() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test19244() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test19245() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test19246() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test19247() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test19248() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test19249() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test19250() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        resolvedRecursiveType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test19251() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test19252() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test19253() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test19254() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test19255() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test19256() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.isInterface();
    }

    @Test(timeout = 4000)
    public void test19257() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test19258() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test19259() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.isContainerType();
    }

    @Test(timeout = 4000)
    public void test19260() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.hasHandlers();
    }

    @Test(timeout = 4000)
    public void test19261() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.hasContentType();
    }

    @Test(timeout = 4000)
    public void test19262() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test19263() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test19264() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test19265() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test19266() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<String> class0 = String.class;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = objectMapper0.constructType(resolvedRecursiveType0);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test20267() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test20268() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    }

    @Test(timeout = 4000)
    public void test20269() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test20270() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test20271() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test21272() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test21273() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
    }

    @Test(timeout = 4000)
    public void test21274() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.getArtifactId();
    }

    @Test(timeout = 4000)
    public void test21275() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.getGroupId();
    }

    @Test(timeout = 4000)
    public void test21276() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.getPatchLevel();
    }

    @Test(timeout = 4000)
    public void test21277() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.isSnapshot();
    }

    @Test(timeout = 4000)
    public void test21278() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.isUnknownVersion();
    }

    @Test(timeout = 4000)
    public void test21279() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.getMinorVersion();
    }

    @Test(timeout = 4000)
    public void test21280() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.getMajorVersion();
    }

    @Test(timeout = 4000)
    public void test21281() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.isUknownVersion();
    }

    @Test(timeout = 4000)
    public void test21282() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
    }

    @Test(timeout = 4000)
    public void test21283() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.getArtifactId();
    }

    @Test(timeout = 4000)
    public void test21284() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.getGroupId();
    }

    @Test(timeout = 4000)
    public void test21285() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.getPatchLevel();
    }

    @Test(timeout = 4000)
    public void test21286() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.isSnapshot();
    }

    @Test(timeout = 4000)
    public void test21287() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.isUnknownVersion();
    }

    @Test(timeout = 4000)
    public void test21288() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.getMinorVersion();
    }

    @Test(timeout = 4000)
    public void test21289() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.getMajorVersion();
    }

    @Test(timeout = 4000)
    public void test21290() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.isUknownVersion();
    }

    @Test(timeout = 4000)
    public void test21291() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        simpleModule0.getModuleName();
    }

    @Test(timeout = 4000)
    public void test21292() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
    }

    @Test(timeout = 4000)
    public void test21293() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
    }

    @Test(timeout = 4000)
    public void test21294() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
    }

    @Test(timeout = 4000)
    public void test21295() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
        version0.getArtifactId();
    }

    @Test(timeout = 4000)
    public void test21296() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
        version0.getGroupId();
    }

    @Test(timeout = 4000)
    public void test21297() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
        version0.getPatchLevel();
    }

    @Test(timeout = 4000)
    public void test21298() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
        version0.isSnapshot();
    }

    @Test(timeout = 4000)
    public void test21299() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
        version0.isUnknownVersion();
    }

    @Test(timeout = 4000)
    public void test21300() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
        version0.getMinorVersion();
    }

    @Test(timeout = 4000)
    public void test21301() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
        version0.getMajorVersion();
    }

    @Test(timeout = 4000)
    public void test21302() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
        version0.isUknownVersion();
    }

    @Test(timeout = 4000)
    public void test21303() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
        simpleModule0.getModuleName();
    }

    @Test(timeout = 4000)
    public void test21304() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
        simpleModule1.getModuleName();
    }

    @Test(timeout = 4000)
    public void test21305() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
        objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test22306() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test22307() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
        objectMapper1.equals((Object) objectMapper0);
    }

    @Test(timeout = 4000)
    public void test22308() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test23309() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test23310() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    }

    @Test(timeout = 4000)
    public void test23311() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test23312() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test23313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test23314() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test23315() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test23316() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test23317() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        objectMapper1.equals((Object) objectMapper0);
    }

    @Test(timeout = 4000)
    public void test23318() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test23319() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test23320() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test23321() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test23322() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test23323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test23324() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test24325() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test24326() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
    }

    @Test(timeout = 4000)
    public void test24327() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.isUnknownVersion();
    }

    @Test(timeout = 4000)
    public void test24328() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.getMajorVersion();
    }

    @Test(timeout = 4000)
    public void test24329() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.getMinorVersion();
    }

    @Test(timeout = 4000)
    public void test24330() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.isUknownVersion();
    }

    @Test(timeout = 4000)
    public void test24331() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.getArtifactId();
    }

    @Test(timeout = 4000)
    public void test24332() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.isSnapshot();
    }

    @Test(timeout = 4000)
    public void test24333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.getPatchLevel();
    }

    @Test(timeout = 4000)
    public void test24334() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        version0.getGroupId();
    }

    @Test(timeout = 4000)
    public void test24335() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
    }

    @Test(timeout = 4000)
    public void test24336() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.isUnknownVersion();
    }

    @Test(timeout = 4000)
    public void test24337() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.getMajorVersion();
    }

    @Test(timeout = 4000)
    public void test24338() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.getMinorVersion();
    }

    @Test(timeout = 4000)
    public void test24339() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.isUknownVersion();
    }

    @Test(timeout = 4000)
    public void test24340() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.getArtifactId();
    }

    @Test(timeout = 4000)
    public void test24341() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.isSnapshot();
    }

    @Test(timeout = 4000)
    public void test24342() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.getPatchLevel();
    }

    @Test(timeout = 4000)
    public void test24343() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        version0.getGroupId();
    }

    @Test(timeout = 4000)
    public void test24344() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        simpleModule0.getModuleName();
    }

    @Test(timeout = 4000)
    public void test24345() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        moduleArray0[1] = (Module) simpleModule0;
        ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test24346() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        moduleArray0[1] = (Module) simpleModule0;
        ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test24347() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        moduleArray0[1] = (Module) simpleModule0;
        ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test24348() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[2];
        Version version0 = new Version(954, (-555), (-3491), "", "", "");
        SimpleModule simpleModule0 = new SimpleModule("-y.]1r5", version0);
        moduleArray0[0] = (Module) simpleModule0;
        moduleArray0[1] = (Module) simpleModule0;
        ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test25349() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test25350() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    }

    @Test(timeout = 4000)
    public void test25351() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        ObjectMapper objectMapper1 = objectMapper0.setMixInResolver(simpleMixInResolver0);
    }

    @Test(timeout = 4000)
    public void test25352() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        ObjectMapper objectMapper1 = objectMapper0.setMixInResolver(simpleMixInResolver0);
    }

    @Test(timeout = 4000)
    public void test25353() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        ObjectMapper objectMapper1 = objectMapper0.setMixInResolver(simpleMixInResolver0);
    }

    @Test(timeout = 4000)
    public void test26354() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
    }

    @Test(timeout = 4000)
    public void test26355() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test26356() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test26357() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test26358() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test26359() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test26360() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test26361() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    }

    @Test(timeout = 4000)
    public void test26362() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    }

    @Test(timeout = 4000)
    public void test26363() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    }

    @Test(timeout = 4000)
    public void test26364() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test26365() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test26366() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test26367() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test26368() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test26369() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test26370() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test26371() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test26372() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test26373() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[1];
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[4];
        jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[5];
        jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test26374() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[1];
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[4];
        jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[5];
        jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test26375() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[1];
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[4];
        jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[5];
        jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test26376() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[1];
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[4];
        jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[5];
        jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test26377() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[1];
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[4];
        jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[5];
        jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
        jsonFactory0.getFormatName();
    }

    @Test(timeout = 4000)
    public void test26378() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[1];
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[4];
        jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[5];
        jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test26379() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[1];
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[4];
        jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[5];
        jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
        jsonFactory0.canHandleBinaryNatively();
    }

    @Test(timeout = 4000)
    public void test26380() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[1];
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[4];
        jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[5];
        jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test26381() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[1];
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[4];
        jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[5];
        jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
        jsonFactory0.getRootValueSeparator();
    }

    @Test(timeout = 4000)
    public void test26382() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[1];
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[4];
        jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[5];
        jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
        jsonFactory0.requiresPropertyOrdering();
    }

    @Test(timeout = 4000)
    public void test26383() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[1];
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[4];
        jsonGenerator_FeatureArray0[6] = jsonGenerator_FeatureArray0[5];
        jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature0;
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
        defaultDeserializationContext_Impl0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test27384() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
    }

    @Test(timeout = 4000)
    public void test27385() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readTree("NON_FINAL");
    }
}
