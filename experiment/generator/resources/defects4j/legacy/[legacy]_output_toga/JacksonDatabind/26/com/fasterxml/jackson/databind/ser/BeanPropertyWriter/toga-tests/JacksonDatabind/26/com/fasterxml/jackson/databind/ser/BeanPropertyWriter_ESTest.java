/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 17:41:07 GMT 2023
 */
package com.fasterxml.jackson.databind.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.time.temporal.TemporalField;
import java.util.HashMap;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanPropertyWriter_ESTest extends BeanPropertyWriter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        JsonSerializer<Locale> jsonSerializer0 = (JsonSerializer<Locale>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(jsonSerializer0).toString();
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, (Annotations) null, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, (Object) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.assignTypeSerializer((TypeSerializer) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.isVirtual();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.isVirtual();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.isUnwrapping();
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0.isUnwrapping();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getWrapperName();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getFullName();
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, false);
        Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, (AnnotationIntrospector) null, (ClassIntrospector.MixInResolver) null);
        Class<Object> class1 = Object.class;
        Class<TemporalField> class2 = TemporalField.class;
        VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(annotatedClass0, class1, "/j/j/j/j B.:Q$|wMCQ2RU )G`TB.:Q$|wMCQ2RU )G`TB.:Q$|wMCQ2RU )G`TB.:Q$|wMCQ2RU )G`T", class2);
        Class<MapType> class3 = MapType.class;
        SimpleType simpleType0 = SimpleType.construct(class3);
        Class<BeanSerializer> class4 = BeanSerializer.class;
        MapType mapType0 = MapType.construct(class4, simpleType0, simpleType0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, (TypeFactory) null);
        AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, ",T&Bn+yd[1");
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, virtualAnnotatedMember0, (Annotations) null, simpleType0, (JsonSerializer<?>) null, asExistingPropertyTypeSerializer0, mapType0, false, simpleType0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.depositSchemaProperty((ObjectNode) null, (SerializerProvider) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getSerializedName();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getMetadata();
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        BeanPropertyWriter beanPropertyWriter1 = beanPropertyWriter0.unwrappingWriter(nameTransformer0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapType> class0 = MapType.class;
        PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
        objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
        objectMapper0.convertValue((Object) coreXMLSerializers_XMLGregorianCalendarSerializer0, class0);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        beanPropertyWriter0._internalSettings = hashMap0;
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        beanPropertyWriter0._internalSettings = hashMap0;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("/j", "/j");
        NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
        BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer1);
        beanPropertyWriter2.getName();
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("/j", "/j");
        NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
        BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer1);
        beanPropertyWriter2.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        BeanPropertyWriter beanPropertyWriter2 = beanPropertyWriter1.rename(nameTransformer0);
        beanPropertyWriter2.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test1620() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
        beanPropertyWriter0.assignSerializer(jsonSerializer0);
        beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test1721() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0._nullSerializer = defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER;
        beanPropertyWriter0.assignNullSerializer(beanPropertyWriter0._nullSerializer);
        beanPropertyWriter0.hasNullSerializer();
    }

    @Test(timeout = 4000)
    public void test1822() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0._nullSerializer = defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER;
        beanPropertyWriter0.assignNullSerializer((JsonSerializer<Object>) null);
    }

    @Test(timeout = 4000)
    public void test1923() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        BeanPropertyWriter beanPropertyWriter1 = (BeanPropertyWriter) beanPropertyWriter0.readResolve();
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2024() throws Throwable {
        PropertyName propertyName0 = new PropertyName("gmkf<1-@5ub09VzH", "AHl");
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedField annotatedField0 = new AnnotatedField((AnnotatedClass) null, (Field) null, annotationMap0);
        JsonSerializer<String> jsonSerializer0 = (JsonSerializer<String>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, annotatedField0, annotationMap0, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, (Object) null);
        BeanPropertyWriter beanPropertyWriter1 = (BeanPropertyWriter) beanPropertyWriter0.readResolve();
        beanPropertyWriter1.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test2125() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, true);
        Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, (AnnotationIntrospector) null, (ClassIntrospector.MixInResolver) null);
        Class<Integer> class1 = Integer.class;
        Class<Method> class2 = Method.class;
        VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(annotatedClass0, class1, "vir0ual", class2);
        AnnotationMap annotationMap0 = new AnnotationMap();
        SimpleType simpleType0 = SimpleType.construct(class2);
        MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
        JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, (TypeFactory) null);
        AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, "vir0ual");
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, virtualAnnotatedMember0, annotationMap0, simpleType0, jsonSerializer0, asExistingPropertyTypeSerializer0, mapType0, true, classNameIdResolver0);
        Class<Annotation> class3 = Annotation.class;
        beanPropertyWriter0.findAnnotation(class3);
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test2226() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        Class<Annotation> class0 = Annotation.class;
        beanPropertyWriter0.getAnnotation(class0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2327() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        Class<Annotation> class0 = Annotation.class;
        beanPropertyWriter0.getContextAnnotation(class0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2428() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test2429() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
        JsonFormat.Value jsonFormat_Value1 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test2430() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
        JsonFormat.Value jsonFormat_Value1 = beanPropertyWriter0.findFormatOverrides(annotationIntrospector0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2531() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides((AnnotationIntrospector) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2532() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonFormat.Value jsonFormat_Value0 = beanPropertyWriter0.findFormatOverrides((AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test2633() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        Class<Field> class0 = Field.class;
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        objectMapper0.mixInCount();
    }

    @Test(timeout = 4000)
    public void test2734() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        beanPropertyWriter0._internalSettings = hashMap0;
        beanPropertyWriter0.getInternalSetting(beanPropertyWriter0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2835() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getInternalSetting(beanPropertyWriter0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test2936() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.construct("");
        beanPropertyWriter0.setInternalSetting(propertyName0, propertyName0);
        Object object0 = beanPropertyWriter0.setInternalSetting("", "");
    }

    @Test(timeout = 4000)
    public void test2937() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.construct("");
        beanPropertyWriter0.setInternalSetting(propertyName0, propertyName0);
        Object object0 = beanPropertyWriter0.setInternalSetting("", "");
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3038() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonInclude.Include jsonInclude_Include0 = (JsonInclude.Include) BeanPropertyWriter.MARKER_FOR_EMPTY;
        beanPropertyWriter0.removeInternalSetting(jsonInclude_Include0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3139() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
        beanPropertyWriter0._internalSettings = hashMap0;
        beanPropertyWriter0.removeInternalSetting((Object) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3240() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Locale.Category locale_Category0 = Locale.Category.DISPLAY;
        beanPropertyWriter0.setInternalSetting(locale_Category0, propertyName0);
        Object object0 = beanPropertyWriter0.removeInternalSetting("");
    }

    @Test(timeout = 4000)
    public void test3241() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Locale.Category locale_Category0 = Locale.Category.DISPLAY;
        beanPropertyWriter0.setInternalSetting(locale_Category0, propertyName0);
        Object object0 = beanPropertyWriter0.removeInternalSetting("");
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3342() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.assignSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        boolean boolean0 = beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test3443() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        Class<Locale.Category> class0 = Locale.Category.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
        ArrayType arrayType0 = ArrayType.construct(simpleType0, beanPropertyWriter0, coreXMLSerializers_XMLGregorianCalendarSerializer0);
        BeanSerializer beanSerializer0 = BeanSerializer.createDummy(arrayType0);
        beanPropertyWriter0.assignNullSerializer(beanSerializer0);
        boolean boolean0 = beanPropertyWriter0.hasNullSerializer();
    }

    @Test(timeout = 4000)
    public void test3544() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3545() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test3646() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = new PropertyName("%)r|z+X YLU >>}dQ", "%)r|z+X YLU >>}dQ");
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3647() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = new PropertyName("%)r|z+X YLU >>}dQ", "%)r|z+X YLU >>}dQ");
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test3748() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test3749() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, propertyName0);
        boolean boolean0 = beanPropertyWriter1.wouldConflictWithName(propertyName0);
    }

    @Test(timeout = 4000)
    public void test3850() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Module> class0 = Module.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, simpleType0);
        CollectionType collectionType0 = CollectionType.construct(class0, collectionLikeType0);
        JsonSerializer<BeanSerializer> jsonSerializer0 = (JsonSerializer<BeanSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, collectionType0, jsonSerializer0, (TypeSerializer) null, collectionLikeType0, false, propertyName0);
        Class<?> class1 = beanPropertyWriter0.getRawSerializationType();
    }

    @Test(timeout = 4000)
    public void test3851() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, false);
        AnnotationMap annotationMap0 = new AnnotationMap();
        Class<Module> class0 = Module.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, simpleType0);
        CollectionType collectionType0 = CollectionType.construct(class0, collectionLikeType0);
        JsonSerializer<BeanSerializer> jsonSerializer0 = (JsonSerializer<BeanSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, annotationMap0, collectionType0, jsonSerializer0, (TypeSerializer) null, collectionLikeType0, false, propertyName0);
        Class<?> class1 = beanPropertyWriter0.getRawSerializationType();
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test3952() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.getPropertyType();
    }

    @Test(timeout = 4000)
    public void test4053() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
        objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        Class<MapType> class0 = MapType.class;
        CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
        objectMapper0.convertValue((Object) coreXMLSerializers_XMLGregorianCalendarSerializer0, class0);
    }

    @Test(timeout = 4000)
    public void test4154() throws Throwable {
        Class<MapType> class0 = MapType.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.convertValue((Object) objectMapper0, class0);
    }

    @Test(timeout = 4000)
    public void test4255() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        objectMapper0.setSerializationInclusion(jsonInclude_Include0);
        CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
        Class<MapType> class0 = MapType.class;
        objectMapper0.convertValue((Object) coreXMLSerializers_XMLGregorianCalendarSerializer0, class0);
    }

    @Test(timeout = 4000)
    public void test4356() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<MapType> class0 = MapType.class;
        CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
        objectMapper0.convertValue((Object) coreXMLSerializers_XMLGregorianCalendarSerializer0, class0);
    }

    @Test(timeout = 4000)
    public void test4457() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JSON");
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockPrintWriter0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.serializeAsOmittedField(jsonFactory0, jsonGenerator0, defaultSerializerProvider_Impl0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test4558() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0.serializeAsElement((Object) null, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test4659() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.serializeAsPlaceholder(beanPropertyWriter0, (JsonGenerator) null, (SerializerProvider) null);
    }

    @Test(timeout = 4000)
    public void test4760() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        beanPropertyWriter0._nullSerializer = defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER;
        beanPropertyWriter0.serializeAsPlaceholder((Object) null, (JsonGenerator) null, (SerializerProvider) null);
    }

    @Test(timeout = 4000)
    public void test4861() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) null);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test4962() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1789569704), (-1789569704));
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, (Annotations) null, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, pushbackInputStream0);
        JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
        beanPropertyWriter0.depositSchemaProperty((JsonObjectFormatVisitor) jsonObjectFormatVisitor_Base0);
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test5063() throws Throwable {
        PropertyName propertyName0 = PropertyName.NO_NAME;
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, (AnnotationIntrospector) null, true);
        Class<CoreXMLSerializers.XMLGregorianCalendarSerializer> class0 = CoreXMLSerializers.XMLGregorianCalendarSerializer.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, (AnnotationIntrospector) null, (ClassIntrospector.MixInResolver) null);
        Class<Integer> class1 = Integer.class;
        Class<Method> class2 = Method.class;
        VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(annotatedClass0, class1, ",['vs", class2);
        SimpleType simpleType0 = SimpleType.construct(class2);
        MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, (TypeFactory) null);
        AsExistingPropertyTypeSerializer asExistingPropertyTypeSerializer0 = new AsExistingPropertyTypeSerializer(classNameIdResolver0, (BeanProperty) null, ",['vs");
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        Locale.Category locale_Category0 = Locale.Category.FORMAT;
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, virtualAnnotatedMember0, (Annotations) null, mapType0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, asExistingPropertyTypeSerializer0, mapType0, true, locale_Category0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>(1);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        beanPropertyWriter0.depositSchemaProperty(objectNode0, (SerializerProvider) defaultSerializerProvider_Impl0);
        objectNode0.textValue();
    }

    @Test(timeout = 4000)
    public void test5164() throws Throwable {
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(propertyName0, annotationIntrospector0, false);
        JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
        byte[] byteArray0 = new byte[0];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1789569704), (-1789569704));
        DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
        PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter(pOJOPropertyBuilder0, (AnnotatedMember) null, (Annotations) null, (JavaType) null, jsonSerializer0, (TypeSerializer) null, (JavaType) null, false, pushbackInputStream0);
        beanPropertyWriter0.get(propertyName0);
    }

    @Test(timeout = 4000)
    public void test5265() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0._handleSelfReference(jsonFactory0, jsonGenerator0, defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test5266() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        boolean boolean0 = beanPropertyWriter0._handleSelfReference(jsonFactory0, jsonGenerator0, defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER);
    }

    @Test(timeout = 4000)
    public void test5367() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
        JsonFactory jsonFactory0 = new JsonFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
        JsonSerializer<BeanSerializer> jsonSerializer0 = (JsonSerializer<BeanSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(jsonSerializer0).usesObjectId();
        boolean boolean0 = beanPropertyWriter0._handleSelfReference(jsonObjectFormatVisitor_Base0, jsonGenerator0, defaultSerializerProvider_Impl1, jsonSerializer0);
    }

    @Test(timeout = 4000)
    public void test5368() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonObjectFormatVisitor.Base jsonObjectFormatVisitor_Base0 = new JsonObjectFormatVisitor.Base();
        JsonFactory jsonFactory0 = new JsonFactory();
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0, serializationConfig0, beanSerializerFactory0);
        JsonSerializer<BeanSerializer> jsonSerializer0 = (JsonSerializer<BeanSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(jsonSerializer0).usesObjectId();
        boolean boolean0 = beanPropertyWriter0._handleSelfReference(jsonObjectFormatVisitor_Base0, jsonGenerator0, defaultSerializerProvider_Impl1, jsonSerializer0);
        beanPropertyWriter0.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test5469() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        String string0 = beanPropertyWriter1.toString();
    }

    @Test(timeout = 4000)
    public void test5470() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        String string0 = beanPropertyWriter1.toString();
        beanPropertyWriter1.willSuppressNulls();
    }

    @Test(timeout = 4000)
    public void test5571() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
        beanPropertyWriter0.assignSerializer(jsonSerializer0);
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        String string0 = beanPropertyWriter1.toString();
        beanPropertyWriter0.hasSerializer();
    }

    @Test(timeout = 4000)
    public void test5572() throws Throwable {
        BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
        JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
        beanPropertyWriter0.assignSerializer(jsonSerializer0);
        SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        BeanPropertyWriter beanPropertyWriter1 = new BeanPropertyWriter(beanPropertyWriter0, serializedString0);
        String string0 = beanPropertyWriter1.toString();
    }
}
