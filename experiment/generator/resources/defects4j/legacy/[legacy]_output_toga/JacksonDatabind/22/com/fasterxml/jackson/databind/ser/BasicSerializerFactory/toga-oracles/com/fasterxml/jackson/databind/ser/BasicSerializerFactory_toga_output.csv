project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Class<SqlDateSerializer> class0 = SqlDateSerializer.class;
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector1, (ClassIntrospector.MixInResolver) null);
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, (JavaType) null, annotatedClass0);
    // Undeclared exception!
    try {
        beanSerializerFactory0.buildIteratorSerializer((SerializationConfig) null, (JavaType) null, basicBeanDescription0, true, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",1,
project,0,test011,"public void test011() throws Throwable {
    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
    BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
    SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
    assertNotSame(beanSerializerFactory0, serializerFactory0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
    TypeFactory typeFactory0 = objectReader0.getTypeFactory();
    Class<SqlDateSerializer> class0 = SqlDateSerializer.class;
    MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
    // Undeclared exception!
    try {
        beanSerializerFactory0.buildMapEntrySerializer((SerializationConfig) null, mapLikeType0, basicBeanDescription0, false, mapLikeType0, mapLikeType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    // Undeclared exception!
    try {
        beanSerializerFactory0.withAdditionalSerializers((Serializers) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not pass null Serializers
        //
        verifyException(""com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    BeanPropertyWriter beanPropertyWriter0 = new BeanPropertyWriter();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
    AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, beanPropertyWriter0, ""juglE^W{~M"");
    ContainerSerializer<?> containerSerializer0 = beanSerializerFactory0.buildIndexedListSerializer(simpleType0, false, asExternalTypeSerializer0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    assertFalse(containerSerializer0.isUnwrappingSerializer());
}",0,assertFalse(containerSerializer0.isUnwrappingSerializer())
project,0,test055,"public void test055() throws Throwable {
    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
    Class<TimeZone> class0 = TimeZone.class;
    Class<Date> class1 = Date.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
    CollectionType collectionType0 = CollectionType.construct(class1, simpleType0);
    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0, (Object) simpleType0, (Object) simpleType0);
    // Undeclared exception!
    try {
        beanSerializerFactory0.buildIterableSerializer((SerializationConfig) null, referenceType0, (BeanDescription) null, true, referenceType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",1,
project,0,test066,"public void test066() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
    boolean boolean0 = beanSerializerFactory0.isIndexedList(class0);
    assertFalse(boolean0);
}",1,
project,0,test077,"public void test077() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    SerializerFactoryConfig serializerFactoryConfig0 = beanSerializerFactory0.getFactoryConfig();
    assertFalse(serializerFactoryConfig0.hasKeySerializers());
}",0,
project,0,test088,"public void test088() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    ContainerSerializer<?> containerSerializer0 = beanSerializerFactory0.buildCollectionSerializer(arrayType0, false, (TypeSerializer) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
    assertFalse(containerSerializer0.isUnwrappingSerializer());
}",0,assertTrue(containerSerializer0.isUnwrappingSerializer())
project,0,test1010,"public void test1010() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.buildEnumSetSerializer((JavaType) null);
    assertFalse(jsonSerializer0.isUnwrappingSerializer());
}",0,assertFalse(jsonSerializer0.isUnwrappingSerializer())
project,0,test1413,"public void test1413() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
    Class<SQLWarning> class0 = SQLWarning.class;
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) serializerFactoryConfig0, (Object) null);
    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
    JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.findSerializerByLookup(referenceType0, (SerializationConfig) null, basicBeanDescription0, true);
    assertNull(jsonSerializer0);
}",0,
project,0,test2322,"public void test2322() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Class<Charset> class0 = Charset.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
    JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0.findSerializerByPrimaryType(defaultSerializerProvider_Impl0, simpleType0, basicBeanDescription0, true);
    assertFalse(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test2625,"public void test2625() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    ArrayType arrayType1 = arrayType0.withStaticTyping();
    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        beanSerializerFactory0.buildContainerSerializer(defaultSerializerProvider_Impl0, arrayType1, basicBeanDescription0, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",0,
project,0,test2726,"public void test2726() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Class<Character> class0 = Character.TYPE;
    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JavaType javaType0 = TypeFactory.unknownType();
    CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
    MapType mapType0 = MapType.construct(class0, collectionType0, javaType0);
    MapType mapType1 = mapType0.withStaticTyping();
    // Undeclared exception!
    try {
        beanSerializerFactory0.buildContainerSerializer(defaultSerializerProvider_Impl0, mapType1, basicBeanDescription0, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",0,
project,0,test3130,"public void test3130() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Class<Boolean> class0 = Boolean.class;
    Class<?> class1 = beanSerializerFactory0._verifyAsClass((Object) null, ""LocX'eqN(^<}mzl@2"", class0);
    assertNull(class1);
}",0,"assertEquals(class0, class1)"
project,0,test3231,"public void test3231() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Class<CharBuffer> class0 = CharBuffer.class;
    // Undeclared exception!
    try {
        beanSerializerFactory0._verifyAsClass(""4swheD@jq{(h$l"", ""4swheD@jq{(h$l"", class0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // AnnotationIntrospector.4swheD@jq{(h$l() returned value of type java.lang.String: expected type JsonSerializer or Class<JsonSerializer> instead
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",0,
project,0,test3332,"public void test3332() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Class<Timestamp> class0 = Timestamp.class;
    Class<?> class1 = beanSerializerFactory0._verifyAsClass(class0, ""4swheD@jq{(h$l"", class0);
    assertNull(class1);
}",1,
