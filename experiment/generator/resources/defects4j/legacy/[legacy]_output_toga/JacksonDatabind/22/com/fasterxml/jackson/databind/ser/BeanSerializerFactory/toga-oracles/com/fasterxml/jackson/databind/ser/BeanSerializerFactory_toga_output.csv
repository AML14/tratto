project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Class<Serializers.Base>[] classArray0 = (Class<Serializers.Base>[]) Array.newInstance(Class.class, 0);
    // Undeclared exception!
    try {
        beanSerializerFactory0.instance.constructFilteredBeanWriter((BeanPropertyWriter) null, classArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BeanPropertyWriter"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
    BeanSerializerFactory beanSerializerFactory0 = new BeanSerializerFactory(serializerFactoryConfig0);
    SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
    assertSame(serializerFactory0, beanSerializerFactory0);
}",1,
project,0,test022,"public void test022() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    Class<MapType> class0 = MapType.class;
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    ArrayType arrayType0 = ArrayType.construct(simpleType0, (Object) null, simpleType0);
    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) arrayType0, (JavaType) arrayType0);
    CollectionType collectionType0 = CollectionType.construct(class0, mapLikeType0);
    JsonSerializer<?> jsonSerializer0 = beanSerializerFactory0._createSerializer2(defaultSerializerProvider_Impl0, collectionType0, (BeanDescription) null, true);
    assertFalse(jsonSerializer0.isUnwrappingSerializer());
}",0,assertFalse(jsonSerializer0.isUnwrappingSerializer())
project,0,test033,"public void test033() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    Class<AnnotatedField> class0 = AnnotatedField.class;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
    doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
    JavaType javaType0 = TypeFactory.unknownType();
    MapType mapType0 = MapType.construct(class0, javaType0, javaType0);
    // Undeclared exception!
    try {
        beanSerializerFactory0._createSerializer2(defaultSerializerProvider_Impl0, mapType0, basicBeanDescription0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.BasicSerializerFactory"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
    doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
    doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
    doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getJsonValueMethod();
    doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
    doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
    BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
    Serializers.Base serializers_Base0 = new Serializers.Base();
    BeanSerializerFactory beanSerializerFactory1 = (BeanSerializerFactory) beanSerializerFactory0.instance.withAdditionalSerializers(serializers_Base0);
    SimpleType simpleType0 = (SimpleType) TypeFactory.unknownType();
    // Undeclared exception!
    try {
        beanSerializerFactory1._createSerializer2(defaultSerializerProvider_Impl0, simpleType0, basicBeanDescription0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.BeanDescription"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
    TypeFactory typeFactory0 = objectReader0.getTypeFactory();
    Class<TypeIdResolver> class0 = TypeIdResolver.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonSerializer<Object> jsonSerializer0 = beanSerializerFactory0.instance.findBeanSerializer(defaultSerializerProvider_Impl0, arrayType0, (BeanDescription) null);
    assertNull(jsonSerializer0);
}",0,assertNotNull(jsonSerializer0)
