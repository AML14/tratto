/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 17:21:08 GMT 2023
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.HierarchicType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.type.TypeParser;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.lang.reflect.Array;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Type;
import java.lang.reflect.WildcardType;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeFactory_ESTest extends TypeFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        HierarchicType hierarchicType0 = typeFactory0._cachedHashMapType;
        ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl) hierarchicType0._genericType;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, javaType0);
        JavaType javaType1 = typeFactory0._fromParamType(parameterizedTypeImpl0, typeBindings0);
        javaType1.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        collectionType0.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        typeFactory0._fromArrayType((GenericArrayType) null, typeBindings0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        Class<CollectionType>[] classArray0 = (Class<CollectionType>[]) Array.newInstance(Class.class, 2);
        Class<CollectionType> class1 = CollectionType.class;
        classArray0[0] = class1;
        classArray0[1] = classArray0[0];
        JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
        javaType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ObjectInputStream> class0 = ObjectInputStream.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        javaType0.useStaticType();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<JsonEncoding> class0 = JsonEncoding.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        mapLikeType0.isMapLikeType();
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<JsonEncoding> class0 = JsonEncoding.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        collectionLikeType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        Class<ArrayList> class1 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
        Class<?> class2 = TypeFactory.rawClass(collectionType0);
        JavaType[] javaTypeArray0 = new JavaType[1];
        typeFactory0.constructParametrizedType(class2, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test1110() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<InputStream> class1 = InputStream.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
        typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) collectionLikeType0);
        collectionLikeType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<InputStream> class1 = InputStream.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
        typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) collectionLikeType0);
        collectionLikeType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructType((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        linkedList0.add((JavaType) mapType0);
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
        javaType0.equals((Object) mapType0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionType> class0 = CollectionType.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<SimpleType> atomicReference0 = new AtomicReference<SimpleType>();
        objectMapper0.readerForUpdating(atomicReference0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructFromCanonical("java.util.HashMap<java.lang.Object,java.lang.Object>");
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, javaType0);
        JavaType javaType1 = typeFactory0._constructType(javaType0, typeBindings0);
        javaType1.isInterface();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        typeFactory0.constructMapLikeType(class0, javaType0, javaType0);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        typeFactory0.constructMapLikeType(class0, javaType0, javaType0);
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        Class<?> class1 = TypeFactory.rawClass(arrayType0);
        Class<ObjectInputStream> class2 = ObjectInputStream.class;
        JavaType[] javaTypeArray0 = new JavaType[1];
        typeFactory0.constructParametrizedType(class1, class2, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<BooleanNode> class0 = BooleanNode.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        typeFactory0._fromWildcard((WildcardType) null, typeBindings0);
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        TypeParser typeParser0 = new TypeParser((TypeFactory) null);
        TypeModifier[] typeModifierArray0 = new TypeModifier[4];
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory0 = new TypeFactory(typeParser0, typeModifierArray0);
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        Class<?> class1 = TypeFactory.rawClass(class0);
        class1.isEnum();
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._unknownType();
        Class<Object> class0 = Object.class;
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.isAbstract();
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        Class<Object> class1 = Object.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class1, linkedList0);
        Class<?> class2 = TypeFactory.rawClass(arrayType0);
        typeFactory0.constructSpecializedType(javaType0, class2);
        arrayType0.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0._unknownType();
        Class<ArrayList> class0 = ArrayList.class;
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        JavaType javaType2 = typeFactory0.moreSpecificType(javaType1, javaType0);
        javaType2.isFinal();
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0._unknownType();
        Class<MapType> class0 = MapType.class;
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Class<ArrayList> class0 = ArrayList.class;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        String[] stringArray0 = new String[0];
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
        Class<InputStream> class1 = InputStream.class;
        SimpleType simpleType0 = new SimpleType(class0, stringArray0, (JavaType[]) null, jsonEncoding0, objectMapper0, true, class1);
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters((JavaType) simpleType0, (Class<?>) class1);
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        Class<CollectionType> class1 = CollectionType.class;
        typeFactory0.findTypeParameters(class0, class1);
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[6];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, arrayType0);
        typeFactory1.constructType((Type) objectIdGenerator_IdKey0.type, objectIdGenerator_IdKey0.type);
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<Module> class1 = Module.class;
        Class<CollectionType> class2 = CollectionType.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
        JavaType javaType0 = typeFactory0.moreSpecificType(mapType0, (JavaType) null);
        javaType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<Module> class1 = Module.class;
        Class<CollectionType> class2 = CollectionType.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
        JavaType javaType0 = typeFactory0.moreSpecificType(mapType0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<Module> class1 = Module.class;
        Class<CollectionType> class2 = CollectionType.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
        JavaType javaType0 = typeFactory0.moreSpecificType(mapType0, (JavaType) null);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, javaType0);
        javaType1.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ReferenceType> class0 = ReferenceType.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class1);
        JavaType javaType0 = typeFactory0.moreSpecificType(typeBindings0.UNBOUND, arrayType0);
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) null);
        javaType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        JavaType javaType0 = typeFactory0.constructType((Type) simpleType0, (JavaType) simpleType0);
        javaType0.hasValueHandler();
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructType((Type) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
        JavaType javaType0 = typeFactory1.constructType((Type) class0, (Class<?>) class1);
        javaType0.isArrayType();
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<BooleanNode> class0 = BooleanNode.class;
        Class<ObjectIdResolver>[] classArray0 = (Class<ObjectIdResolver>[]) Array.newInstance(Class.class, 2);
        Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
        classArray0[0] = class1;
        classArray0[1] = classArray0[0];
        typeFactory0.constructParametricType(class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test4144() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        Class<Object> class1 = Object.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        JavaType[] javaTypeArray0 = new JavaType[6];
        Class<?> class2 = TypeFactory.rawClass(arrayType0);
        typeFactory0.constructParametrizedType(class2, class1, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test4245() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        Class<SimpleType>[] classArray0 = (Class<SimpleType>[]) Array.newInstance(Class.class, 0);
        typeFactory0.constructParametricType(class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test4346() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        Class<Integer> class1 = Integer.class;
        JavaType[] javaTypeArray0 = new JavaType[4];
        typeFactory0.constructParametrizedType(class0, class1, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test4447() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Class<?> class0 = simpleType0.getRawClass();
        JavaType javaType0 = typeFactory0.constructType((Type) class0, class0);
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        Class<?> class0 = simpleType0.getRawClass();
        JavaType javaType0 = typeFactory0.constructType((Type) class0, class0);
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        Class<?> class1 = TypeFactory.rawClass(arrayType0);
        Stack<JavaType> stack0 = new Stack<JavaType>();
        typeFactory0._fromParameterizedClass(class1, stack0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test4851() throws Throwable {
        Vector<JavaType> vector0 = new Vector<JavaType>();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<JsonEncoding> class0 = JsonEncoding.class;
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
        javaType0.hasGenericTypes();
    }

    @Test(timeout = 4000)
    public void test4952() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        Stack<JavaType> stack0 = new Stack<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test5053() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
        Class<ArrayList> class1 = ArrayList.class;
        Class<HashMap> class2 = HashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class2, javaType0, javaType0);
        linkedList0.add((JavaType) mapType0);
        JavaType javaType1 = typeFactory0._fromParameterizedClass(class1, linkedList0);
        javaType1.useStaticType();
    }

    @Test(timeout = 4000)
    public void test5154() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        Stack<JavaType> stack0 = new Stack<JavaType>();
        Class<HashMap> class1 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class1);
        stack0.add((JavaType) mapType0);
        typeFactory0._fromParameterizedClass(class0, stack0);
    }

    @Test(timeout = 4000)
    public void test5255() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        Class<?> class1 = javaType0.getParameterSource();
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, javaType0);
        JavaType javaType1 = typeFactory0._constructType(class1, typeBindings0);
        javaType1.isArrayType();
    }

    @Test(timeout = 4000)
    public void test5356() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayType> class0 = ArrayType.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
        JavaType javaType0 = typeFactory0._resolveVariableViaSubTypes((HierarchicType) null, "V", typeBindings0);
        javaType0.isEnumType();
    }

    @Test(timeout = 4000)
    public void test5457() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        Class<Object> class1 = Object.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class1);
    }

    @Test(timeout = 4000)
    public void test5458() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        Class<Object> class1 = Object.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class1);
        HierarchicType hierarchicType1 = typeFactory0._doFindSuperInterfaceChain(hierarchicType0, class1);
    }

    @Test(timeout = 4000)
    public void test5459() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
        Class<Object> class1 = Object.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperTypeChain(class0, class1);
        HierarchicType hierarchicType1 = typeFactory0._doFindSuperInterfaceChain(hierarchicType0, class1);
    }

    @Test(timeout = 4000)
    public void test5560() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Class<CollectionLikeType> class1 = CollectionLikeType.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
    }

    @Test(timeout = 4000)
    public void test5661() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        Stack<JavaType> stack0 = new Stack<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);
        javaType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test5762() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0._arrayListSuperInterfaceChain((HierarchicType) null);
    }
}
