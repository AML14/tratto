/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 23:16:55 GMT 2023
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.Type;
import java.sql.Date;
import java.text.DateFormat;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class DateTimeSerializerBase_ESTest extends DateTimeSerializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        boolean boolean0 = sqlDateSerializer0.isEmpty((Date) null);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        JavaType javaType0 = TypeFactory.unknownType();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        calendarSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, javaType0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        JavaType javaType0 = TypeFactory.unknownType();
        AnnotationMap annotationMap0 = new AnnotationMap();
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 1, propertyMetadata0, propertyMetadata0);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        JsonSerializer<?> jsonSerializer0 = calendarSerializer0.createContextual(serializerProvider0, creatorProperty0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonSerializer<?> jsonSerializer0 = calendarSerializer0.createContextual(defaultSerializerProvider_Impl0, (BeanProperty) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
        Date date0 = Date.valueOf(localDate0);
        boolean boolean0 = sqlDateSerializer0.isEmpty(date0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 695, (-2147118738), 695);
        boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (Calendar) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 2346);
        boolean boolean0 = calendarSerializer0.isEmpty((SerializerProvider) null, (Calendar) mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        LocalDate localDate0 = MockLocalDate.now();
        Date date0 = Date.valueOf(localDate0);
        boolean boolean0 = sqlDateSerializer0.isEmpty(serializerProvider0, date0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(1, 1, locale0);
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        CalendarSerializer calendarSerializer1 = calendarSerializer0.withFormat((Boolean) null, dateFormat0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonNode jsonNode0 = calendarSerializer1.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
        jsonNode0.size();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        JavaType javaType0 = TypeFactory.unknownType();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        JsonNode jsonNode0 = calendarSerializer0.getSchema(serializerProvider0, (Type) javaType0, false);
        jsonNode0.isLong();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        Date date0 = new Date(299L);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        sqlDateSerializer0.serialize(date0, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<JsonParser.NumberType> class0 = JsonParser.NumberType.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, collectionLikeType0);
        collectionLikeType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
        JavaType javaType0 = TypeFactory.unknownType();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        calendarSerializer0._acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, javaType0, true);
        javaType0.isArrayType();
    }
}
