/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 16:22:13 GMT 2023
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.time.format.FormatStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StringArrayDeserializer_ESTest extends StringArrayDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
        stringArrayDeserializer0.instance.deserializeWithType((JsonParser) null, (DeserializationContext) null, (TypeDeserializer) null);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        ObjectReader objectReader0 = objectMapper0.reader();
        JsonNode jsonNode0 = objectReader0.createObjectNode();
        JsonParser jsonParser0 = objectReader0.treeAsTokens(jsonNode0);
        stringArrayDeserializer0.deserialize(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        JsonDeserializer<FormatStyle> jsonDeserializer0 = (JsonDeserializer<FormatStyle>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer(jsonDeserializer0);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        String[] stringArray0 = stringArrayDeserializer0._deserializeCustom(jsonParser0, deserializationContext0);
        jsonParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        JsonDeserializer<FormatStyle> jsonDeserializer0 = (JsonDeserializer<FormatStyle>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));
        StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer(jsonDeserializer0);
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
        String[] stringArray0 = stringArrayDeserializer0._deserializeCustom(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        NullNode nullNode0 = jsonNodeFactory0.nullNode();
        JsonParser jsonParser0 = objectReader0.treeAsTokens(nullNode0);
        stringArrayDeserializer0._deserializeCustom(jsonParser0, deserializationContext0);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) arrayType0);
    }
}
