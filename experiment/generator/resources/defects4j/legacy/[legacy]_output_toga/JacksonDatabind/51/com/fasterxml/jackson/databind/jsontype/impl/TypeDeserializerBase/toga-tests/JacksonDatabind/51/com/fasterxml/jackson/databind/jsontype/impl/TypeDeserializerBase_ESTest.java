/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 18:47:07 GMT 2023
 */
package com.fasterxml.jackson.databind.jsontype.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeDeserializerBase_ESTest extends TypeDeserializerBase_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        Class<ClassNameIdResolver> class1 = ClassNameIdResolver.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapLikeType0, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapLikeType0, minimalClassNameIdResolver0, "Ap", false, mapLikeType0);
        String string0 = asArrayTypeDeserializer0.getPropertyName();
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        Class<ClassNameIdResolver> class1 = ClassNameIdResolver.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapLikeType0, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapLikeType0, minimalClassNameIdResolver0, "Ap", false, mapLikeType0);
        String string0 = asArrayTypeDeserializer0.getPropertyName();
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        Class<Object> class1 = Object.class;
        Class<BeanDeserializer> class2 = BeanDeserializer.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "", true, mapType0);
        TypeIdResolver typeIdResolver0 = asExternalTypeDeserializer0.getTypeIdResolver();
        typeIdResolver0.getDescForKnownTypeIds();
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        Class<ClassNameIdResolver> class1 = ClassNameIdResolver.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapLikeType0, typeFactory0);
        AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(mapLikeType0, minimalClassNameIdResolver0, "Ap", false, mapLikeType0);
        asArrayTypeDeserializer0.toString();
        asArrayTypeDeserializer0.getPropertyName();
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        Class<ClassNameIdResolver> class1 = ClassNameIdResolver.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapLikeType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, minimalClassNameIdResolver0, "Ap", true, mapLikeType0, jsonTypeInfo_As0);
        asPropertyTypeDeserializer0.baseTypeName();
        asPropertyTypeDeserializer0.getPropertyName();
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "yJ", true, (JavaType) null);
        asPropertyTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = null;
        asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((AsExternalTypeDeserializer) null, (BeanProperty) null);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null);
        asExternalTypeDeserializer0.getTypeInclusion();
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        Class<Object> class1 = Object.class;
        Class<BeanDeserializer> class2 = BeanDeserializer.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "", true, mapType0);
        Class<?> class3 = asExternalTypeDeserializer0.getDefaultImpl();
        class3.isSynthetic();
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        Class<Map> class1 = Map.class;
        Class<JavaType> class2 = JavaType.class;
        MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapType0, typeFactory0);
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, minimalClassNameIdResolver0, ".]Bj}N:z`-", false, (JavaType) null);
        Class<?> class3 = asExternalTypeDeserializer0.getDefaultImpl();
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        Class<Map> class1 = Map.class;
        Class<JavaType> class2 = JavaType.class;
        MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapType0, typeFactory0);
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, minimalClassNameIdResolver0, ".]Bj}N:z`-", false, (JavaType) null);
        Class<?> class3 = asExternalTypeDeserializer0.getDefaultImpl();
        asExternalTypeDeserializer0.getPropertyName();
    }

    @Test(timeout = 4000)
    public void test0911() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
        asExternalTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, defaultDeserializationContext_Impl0, beanDeserializerFactory0);
    }

    @Test(timeout = 4000)
    public void test1012() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapLikeType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, minimalClassNameIdResolver0, "com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver", true, mapLikeType0, jsonTypeInfo_As0);
        asPropertyTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test1113() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
        asExternalTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);
    }

    @Test(timeout = 4000)
    public void test1214() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, "yy'|59Dwm/Hc@Z]Y", true, (JavaType) null);
        asExternalTypeDeserializer0._deserializeWithNativeTypeId((JsonParser) null, (DeserializationContext) null, "");
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(mapLikeType0, typeFactory0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapLikeType0, minimalClassNameIdResolver0, "", false, mapLikeType0);
        asExternalTypeDeserializer0._handleUnknownTypeId(defaultDeserializationContext_Impl0, "},k", (TypeIdResolver) null, mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, classNameIdResolver0, "WxWAVhW,Z6'", true, (JavaType) null);
        asExternalTypeDeserializer0._handleUnknownTypeId(defaultDeserializationContext_Impl0, "WxWAVhW,Z6'", classNameIdResolver0, (JavaType) null);
    }
}
