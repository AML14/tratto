/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 21:13:23 GMT 2023
 */
package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import java.io.PipedReader;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CollectionDeserializer_ESTest extends CollectionDeserializer_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Class<String> class0 = String.class;
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
        linkedHashSet0.add(class0);
        CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, linkedHashSet0);
        collectionDeserializer_CollectionReferringAccumulator0.resolveForwardReference(class0, linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        Class<Object> class0 = Object.class;
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, linkedList0);
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
        linkedList0.add((Object) null);
        MissingNode missingNode0 = MissingNode.getInstance();
        missingNode0.floatValue();
        collectionDeserializer_CollectionReferringAccumulator0.add(missingNode0);
        linkedList0.add((Object) missingNode0);
        Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        Locale.FilteringMode.valueOf("2hKYK@W L");
        collectionDeserializer_CollectionReferringAccumulator0.resolveForwardReference(locale_FilteringMode1, linkedList0);
        collectionDeserializer_CollectionReferringAccumulator0.add(locale_FilteringMode0);
    }
}
