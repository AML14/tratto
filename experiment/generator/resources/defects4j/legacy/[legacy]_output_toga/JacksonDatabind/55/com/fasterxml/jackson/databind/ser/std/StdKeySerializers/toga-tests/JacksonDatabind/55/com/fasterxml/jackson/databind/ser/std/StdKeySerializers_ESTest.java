/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 19:03:39 GMT 2023
 */
package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.StdKeySerializers;
import java.util.Date;
import java.util.Locale;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class StdKeySerializers_ESTest extends StdKeySerializers_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getDefault();
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
        Locale locale0 = Locale.ROOT;
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        stdKeySerializers_Dynamic0.serialize(mockGregorianCalendar0, (JsonGenerator) null, serializerProvider0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
        StdKeySerializers.Dynamic stdKeySerializers_Dynamic1 = (StdKeySerializers.Dynamic) stdKeySerializers_Dynamic0.readResolve();
        stdKeySerializers_Dynamic1.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        StdKeySerializers.StringKeySerializer stdKeySerializers_StringKeySerializer0 = new StdKeySerializers.StringKeySerializer();
        stdKeySerializers_StringKeySerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
        stdKeySerializers_Dynamic0.serialize("JSON", (JsonGenerator) null, serializerProvider0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, (Class<?>) null, true);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Class<Object> class0 = Object.class;
        JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, false);
        jsonSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<Long> class0 = Long.TYPE;
        JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, true);
        jsonSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<Long> class0 = Long.class;
        JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, true);
        jsonSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Class<MockCalendar> class0 = MockCalendar.class;
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
        stdKeySerializers_Dynamic0.serialize(class0, (JsonGenerator) null, serializerProvider0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<Date> class0 = Date.class;
        JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, false);
        jsonSerializer0.isUnwrappingSerializer();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
        MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
        stdKeySerializers_Dynamic0.serialize(mapperFeature0, (JsonGenerator) null, serializerProvider0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
        UUID uUID0 = MockUUID.randomUUID();
        stdKeySerializers_Dynamic0.serialize(uUID0, (JsonGenerator) null, serializerProvider0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, true);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getFallbackKeySerializer((SerializationConfig) null, (Class<?>) null);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Class<MockCalendar> class0 = MockCalendar.class;
        JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getFallbackKeySerializer((SerializationConfig) null, class0);
        jsonSerializer0.usesObjectId();
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Class<Float> class0 = Float.TYPE;
        StdKeySerializers.Default stdKeySerializers_Default0 = new StdKeySerializers.Default(1, class0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        stdKeySerializers_Default0.serialize(class0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdKeySerializers.Default stdKeySerializers_Default0 = new StdKeySerializers.Default(6000, class0);
        stdKeySerializers_Default0.serialize((Object) null, (JsonGenerator) null, defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
        JsonFactory jsonFactory0 = new JsonFactory();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
        serializationFeatureArray0[0] = serializationFeature0;
        objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        stdKeySerializers_Dynamic0.serialize(serializationFeatureArray0[0], (JsonGenerator) null, serializerProvider0);
    }
}
