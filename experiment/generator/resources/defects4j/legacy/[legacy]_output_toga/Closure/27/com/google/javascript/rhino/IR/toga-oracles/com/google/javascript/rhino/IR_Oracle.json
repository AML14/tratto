[ {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forNode(Node init, Node cond, Node incr, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0000"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node doNode(Node body, Node cond)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0011"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node comma(Node expr1, Node expr2)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0022"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node catchNode(Node expr, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0033"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node tryCatchFinally(Node tryBody, Node catchNode, Node finallyBody)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0044"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node returnNode(Node expr)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0055"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node switchNode(Node cond, Node... cases)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0066"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node breakNode(Node name)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0077"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node eq(Node expr1, Node expr2)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0088"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node assign(Node target, Node expr)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0099"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node ifNode(Node cond, Node then)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test01010"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node exprResult(Node expr)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test01111"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node2.getType())",
  "exception" : "",
  "testName" : "test01212"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, node0.getType())",
  "exception" : "",
  "testName" : "test01213"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isAnd()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(node1.isAnd())",
  "exception" : "",
  "testName" : "test01214"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node regexp(Node expr)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test01315"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node add(Node expr1, Node expr2)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test01416"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node label(Node name, Node stmt)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test01517"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node tryFinally(Node tryBody, Node finallyBody)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test01618"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isNot()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isNot())",
  "exception" : "",
  "testName" : "test01719"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node ifNode(Node cond, Node then, Node elseNode)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test01820"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test01921"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isNull()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node0.isNull())",
  "exception" : "",
  "testName" : "test01922"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node2.getType())",
  "exception" : "",
  "testName" : "test01923"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node function(Node name, Node params, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02024"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node caseNode(Node expr, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02125"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node or(Node expr1, Node expr2)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02226"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node var(Node name, Node value)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02327"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node block(Node stmt)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02428"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test02529"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02630"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node tryCatch(Node tryBody, Node catchNode)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02731"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isFalse()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node0.isFalse())",
  "exception" : "",
  "testName" : "test02832"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test02833"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forNode(Node init, Node cond, Node incr, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02934"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node propdef(Node string, Node value)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03035"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node throwNode(Node expr)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03136"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node continueNode(Node name)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03237"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node defaultCase(Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03338"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node regexp(Node expr, Node flags)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03439"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node paramList(Node param)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03540"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node var(Node name, Node value)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03641"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node paramList(Node... params)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03742"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isParamList()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node0.isParamList())",
  "exception" : "",
  "testName" : "test03843"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node paramList(List<Node> params)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03944"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isBlock()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node0.isBlock())",
  "exception" : "",
  "testName" : "test04045"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node block(Node... stmts)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04146"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isScript()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node0.isScript())",
  "exception" : "",
  "testName" : "test04247"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node script(Node... stmts)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04348"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node var(Node name, Node value)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04449"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04550"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04651"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04752"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forNode(Node init, Node cond, Node incr, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04853"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forNode(Node init, Node cond, Node incr, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04954"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forNode(Node init, Node cond, Node incr, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test05055"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isArrayLit()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node0.isArrayLit())",
  "exception" : "",
  "testName" : "test05156"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test05157"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node switchNode(Node cond, Node... cases)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test05258"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node switchNode(Node cond, Node... cases)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test05359"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node labelName(String name)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test05460"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node0.getType())",
  "exception" : "",
  "testName" : "test05561"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isCall()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test05662"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, node0.getType())",
  "exception" : "",
  "testName" : "test05663"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node call(Node target, Node... args)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test05764"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isNew()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test05865"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test05866"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node newNode(Node target, Node... args)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test05967"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isSwitch()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isSwitch())",
  "exception" : "",
  "testName" : "test06068"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test06069"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node objectlit(Node... propdefs)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test06170"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node objectlit(Node... propdefs)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test06271"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node propdef(Node string, Node value)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test06372"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node arraylit(Node... exprs)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test06473"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isUnscopedQualifiedName()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(node0.isUnscopedQualifiedName())",
  "exception" : "",
  "testName" : "test06574"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test06575"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node0.getType())",
  "exception" : "",
  "testName" : "test06676"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test06677"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node0.getType())",
  "exception" : "",
  "testName" : "test06778"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isBlock()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node2.isBlock())",
  "exception" : "",
  "testName" : "test06779"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isBlock()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test06880"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isBlock()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(node1.isBlock())",
  "exception" : "",
  "testName" : "test06981"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node0.getType())",
  "exception" : "",
  "testName" : "test07082"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isLabel()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test07083"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isBlock()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isBlock())",
  "exception" : "",
  "testName" : "test07184"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test07285"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test07386"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isBlock()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(node1.isBlock())",
  "exception" : "",
  "testName" : "test07487"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isBreak()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node0.isBreak())",
  "exception" : "",
  "testName" : "test07588"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isBlock()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isBlock())",
  "exception" : "",
  "testName" : "test07589"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node0.getType())",
  "exception" : "",
  "testName" : "test07690"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test07691"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isBlock()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isBlock())",
  "exception" : "",
  "testName" : "test07792"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test07893"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test07994"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isEmpty()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node0.isEmpty())",
  "exception" : "",
  "testName" : "test07995"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test08096"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, node0.getType())",
  "exception" : "",
  "testName" : "test08097"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getChildCount()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test08098"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isBlock()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(node1.isBlock())",
  "exception" : "",
  "testName" : "test08199"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isBlock()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test082100"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test083101"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test084102"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test085103"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, node1.getType())",
  "exception" : "",
  "testName" : "test086104"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test087105"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test088106"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test089107"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test090108"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node ifNode(Node cond, Node then, Node elseNode)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test091109"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test092110"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node ifNode(Node cond, Node then, Node elseNode)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test093111"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test094112"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forNode(Node init, Node cond, Node incr, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test095113"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test096114"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node2.getType())",
  "exception" : "",
  "testName" : "test096115"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, node0.getType())",
  "exception" : "",
  "testName" : "test096116"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test097117"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test098118"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test099119"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test100120"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test101121"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test102122"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node voidNode(Node expr1)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test103123"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test104124"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isNot()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isNot())",
  "exception" : "",
  "testName" : "test105125"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test106126"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isHook()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(node2.isHook())",
  "exception" : "",
  "testName" : "test107127"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isNull()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node0.isNull())",
  "exception" : "",
  "testName" : "test107128"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getChildCount()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node2.getChildCount())",
  "exception" : "",
  "testName" : "test107129"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isFalse()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node0.isFalse())",
  "exception" : "",
  "testName" : "test108130"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isExprResult()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test108131"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node0.getType())",
  "exception" : "",
  "testName" : "test109132"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isNot()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isNot())",
  "exception" : "",
  "testName" : "test109133"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node not(Node expr1)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test110134"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node exprResult(Node expr)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test111135"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node sheq(Node expr1, Node expr2)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test112136"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node getprop(Node target, Node prop)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test113137"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test114138"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test115139"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test116140"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test117141"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node switchNode(Node cond, Node... cases)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test118142"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node getelem(Node target, Node elem)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test119143"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test120144"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node exprResult(Node expr)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test121145"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test122146"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test123147"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test124148"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test125149"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node switchNode(Node cond, Node... cases)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test126150"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test127151"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test128152"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node exprResult(Node expr)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test129153"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node sub(Node expr1, Node expr2)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test130154"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node not(Node expr1)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test131155"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node sub(Node expr1, Node expr2)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test132156"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node not(Node expr1)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test133157"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node exprResult(Node expr)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test134158"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forNode(Node init, Node cond, Node incr, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test135159"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node sub(Node expr1, Node expr2)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test136160"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node sub(Node expr1, Node expr2)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test137161"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test138162"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test139163"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isExprResult()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isExprResult())",
  "exception" : "",
  "testName" : "test140164"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test141165"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isExprResult()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isExprResult())",
  "exception" : "",
  "testName" : "test142166"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isHook()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(node1.isHook())",
  "exception" : "",
  "testName" : "test143167"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test144168"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test145169"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test146170"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test147171"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test148172"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test149173"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test150174"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, node1.getType())",
  "exception" : "",
  "testName" : "test151175"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isTrue()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node0.isTrue())",
  "exception" : "",
  "testName" : "test151176"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isExprResult()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test151177"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isExprResult()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test152178"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test153179"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node not(Node expr1)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test154180"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node1.getType())",
  "exception" : "",
  "testName" : "test155181"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test156182"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node ifNode(Node cond, Node then, Node elseNode)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test157183"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node exprResult(Node expr)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test158184"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test159185"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node exprResult(Node expr)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test160186"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test161187"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node and(Node expr1, Node expr2)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test162188"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node comma(Node expr1, Node expr2)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test163189"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test164190"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node sub(Node expr1, Node expr2)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test165191"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public static Node forIn(Node target, Node cond, Node body)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test166192"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public boolean isVoid()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(node1.isVoid())",
  "exception" : "",
  "testName" : "test167193"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node2.getType())",
  "exception" : "",
  "testName" : "test167194"
}, {
  "className" : "com.google.javascript.rhino.IR",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(1, node0.getType())",
  "exception" : "",
  "testName" : "test167195"
} ]