project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    // Undeclared exception!
    try {
        arrowType0.canTestForEqualityWith(errorFunctionType0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.ArrowType"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(arrowType0);
    // Undeclared exception!
    try {
        arrowType0.getTypesUnderShallowEquality(jSType0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.ArrowType"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""c^v LFVr%rlw#8w"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    // Undeclared exception!
    try {
        arrowType0.getLeastSupertype(errorFunctionType0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.ArrowType"", e);
    }
}",1,
project,0,test033,"public void test033() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    String string0 = arrowType0.toString();
    assertEquals(""[ArrowType]"", string0);
}",0,
project,0,test044,"public void test044() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    // Undeclared exception!
    try {
        arrowType0.visit((Visitor<BooleanType>) null);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.ArrowType"", e);
    }
}",1,
project,0,test055,"public void test055() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    NoType noType0 = (NoType) arrowType0.getRestrictedTypeGivenToBooleanOutcome(false);
    assertFalse(noType0.isReturnTypeInferred());
}",0,assertFalse(noType0.isReturnTypeInferred())
project,0,test066,"public void test066() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    boolean boolean0 = arrowType0.isSubtype(arrowType0);
    assertTrue(boolean0);
}",0,
project,0,test077,"public void test077() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    ArrowType arrowType1 = new ArrowType(jSTypeRegistry0, (Node) null, arrowType0);
    boolean boolean0 = arrowType1.isSubtype(arrowType0);
    assertFalse(boolean0);
}",0,
project,0,test088,"public void test088() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = new Node((-2257));
    Node node1 = new Node(2, node0, node0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
    ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
    boolean boolean0 = arrowType1.isSubtype(arrowType0);
    assertFalse(boolean0);
}",0,
project,0,test099,"public void test099() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    Node node0 = Node.newString(""Unknown class name"");
    Node node1 = new Node(52, node0, 52, 54);
    ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
    boolean boolean0 = arrowType1.isSubtype(arrowType0);
    assertTrue(boolean0);
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    Node node0 = new Node(1, 1, 0);
    Node node1 = new Node(52, node0, 52, 54);
    ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
    boolean boolean0 = arrowType0.isSubtype(arrowType1);
    assertFalse(boolean0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) arrowType0, (JSType) arrowType0, (JSType) arrowType0);
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
    ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node0);
    boolean boolean0 = arrowType0.isSubtype(arrowType1);
    assertFalse(boolean0);
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.isSubtype(arrowType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test1213,"public void test1213() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.isSubtype(arrowType0);
    assertTrue(boolean0);
}",0,
project,0,test1314,"public void test1314() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = new Node((-5), (-5), (-5));
    Node node1 = new Node(55, node0, node0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
    boolean boolean0 = arrowType0.isSubtype(arrowType0);
    assertTrue(boolean0);
}",0,
project,0,test1415,"public void test1415() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""K[/8;=>"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    Node node0 = new Node(1, 1, 0);
    Node node1 = new Node(1, node0, node0, node0);
    ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
    boolean boolean0 = arrowType1.isSubtype(arrowType0);
    assertFalse(errorFunctionType0.isReturnTypeInferred());
}",0,assertTrue(errorFunctionType0.isReturnTypeInferred())
project,0,test1416,"public void test1416() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""K[/8;=>"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    Node node0 = new Node(1, 1, 0);
    Node node1 = new Node(1, node0, node0, node0);
    ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
    boolean boolean0 = arrowType1.isSubtype(arrowType0);
    assertFalse(boolean0);
}",0,
project,0,test1517,"public void test1517() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.isSubtype(arrowType1);
    assertTrue(boolean0);
}",0,
project,0,test1518,"public void test1518() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.isSubtype(arrowType1);
    assertFalse(errorFunctionType0.isReturnTypeInferred());
}",0,assertTrue(errorFunctionType0.isReturnTypeInferred())
project,0,test1619,"public void test1619() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newNumber(0.0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType1.isSubtype(arrowType0);
    assertTrue(boolean0);
}",0,
project,0,test1620,"public void test1620() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newNumber(0.0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType1.isSubtype(arrowType0);
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,
project,0,test1621,"public void test1621() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newNumber(0.0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType1 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType1.isSubtype(arrowType0);
    assertFalse(errorFunctionType0.isReturnTypeInferred());
}",0,assertTrue(errorFunctionType0.isReturnTypeInferred())
project,0,test2622,"public void test2622() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    arrowType0.resolveInternal(simpleErrorReporter0, noObjectType0);
    assertFalse(noObjectType0.isReturnTypeInferred());
}",0,
project,0,test2723,"public void test2723() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    Node node0 = Node.newString(304, ""NmWwShC&Q;x`{6$G"", 304, 304);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, (JSType) null);
    boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2824,"public void test2824() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = new Node(1);
    Node node1 = new Node(55, node0, node0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
    boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2925,"public void test2925() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test2926,"public void test2926() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3027,"public void test3027() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3128,"public void test3128() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    Node node0 = Node.newString(304, ""NmWwShC&Q;x`{6$G"", 304, 304);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, (JSType) null);
    arrowType0.returnType = null;
    boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3229,"public void test3229() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    Node node0 = new Node((-285));
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, templateType0);
    boolean boolean0 = arrowType0.hasAnyTemplateInternal();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3330,"public void test3330() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) templateType0);
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
    boolean boolean0 = arrowType0.hasAnyTemplateInternal();
    assertFalse(noObjectType0.isReturnTypeInferred());
}",0,assertTrue(noObjectType0.isReturnTypeInferred())
project,0,test3331,"public void test3331() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) templateType0);
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
    boolean boolean0 = arrowType0.hasAnyTemplateInternal();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3432,"public void test3432() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = new Node((-2257));
    Node node1 = new Node(2, node0, node0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
    boolean boolean0 = arrowType0.hasAnyTemplateInternal();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
