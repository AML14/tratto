project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    errorFunctionType0.setDict();
    boolean boolean0 = errorFunctionType0.makesDicts();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0001,"public void test0001() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    errorFunctionType0.setDict();
    boolean boolean0 = errorFunctionType0.makesDicts();
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test0002,"public void test0002() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    errorFunctionType0.setDict();
    boolean boolean0 = errorFunctionType0.makesDicts();
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test0013,"public void test0013() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.setStruct();
    boolean boolean0 = noResolvedType0.makesStructs();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0014,"public void test0014() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.setStruct();
    boolean boolean0 = noResolvedType0.makesStructs();
    assertFalse(noResolvedType0.isInterface());
}",0,
project,0,test0025,"public void test0025() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, errorFunctionType0);
    modificationVisitor0.caseParameterizedType(parameterizedType0);
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test0026,"public void test0026() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, errorFunctionType0);
    modificationVisitor0.caseParameterizedType(parameterizedType0);
    assertFalse(noResolvedType0.isInterface());
}",0,
project,0,test0037,"public void test0037() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""bind"");
    FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType(""bind"");
    String string0 = functionType0.toStringHelper(false);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test0038,"public void test0038() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""bind"");
    FunctionType functionType0 = (FunctionType) errorFunctionType0.getPropertyType(""bind"");
    String string0 = functionType0.toStringHelper(false);
    assertEquals(""function ((bind|null)=, *=, *=, *=): bind"", string0);
}",0,
project,0,test0049,"public void test0049() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.hasEqualCallType(noResolvedType0);
    assertFalse(noResolvedType0.isInterface());
}",0,assertTrue(noResolvedType0.isInterface())
project,0,test00510,"public void test00510() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertTrue(functionType1.isOrdinaryFunction());
}",0,assertTrue(functionType1.isOrdinaryFunction())
project,0,test00511,"public void test00511() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertNotSame(functionType2, functionType1);
}",0,
project,0,test00512,"public void test00512() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertFalse(functionType2.equals((Object) functionType1));
}",0,
project,0,test00513,"public void test00513() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertFalse(functionType1.hasInstanceType());
}",0,
project,0,test00514,"public void test00514() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertFalse(functionType2.isReturnTypeInferred());
}",0,assertTrue(functionType2.isReturnTypeInferred())
project,0,test00515,"public void test00515() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertNotSame(functionType2, functionType0);
}",0,
project,0,test00616,"public void test00616() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) stringType0.autoboxesTo();
    JSType[] jSTypeArray0 = new JSType[5];
    jSTypeArray0[4] = (JSType) stringType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) instanceObjectType0, jSTypeArray0);
    functionType0.isReturnTypeInferred();
    assertTrue(instanceObjectType0.isNativeObjectType());
}",0,assertTrue(instanceObjectType0.isNativeObjectType())
project,0,test00617,"public void test00617() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) stringType0.autoboxesTo();
    JSType[] jSTypeArray0 = new JSType[5];
    jSTypeArray0[4] = (JSType) stringType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) instanceObjectType0, jSTypeArray0);
    functionType0.isReturnTypeInferred();
    assertFalse(functionType0.hasInstanceType());
}",0,
project,0,test00618,"public void test00618() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) stringType0.autoboxesTo();
    JSType[] jSTypeArray0 = new JSType[5];
    jSTypeArray0[4] = (JSType) stringType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) instanceObjectType0, jSTypeArray0);
    functionType0.isReturnTypeInferred();
    assertTrue(instanceObjectType0.hasCachedValues());
}",0,assertFalse(instanceObjectType0.hasCachedValues())
project,0,test00719,"public void test00719() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = errorFunctionType0.isInstanceType();
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test00720,"public void test00720() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = errorFunctionType0.isInstanceType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00821,"public void test00821() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = indexedType0.canBeCalled();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test00822,"public void test00822() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = indexedType0.canBeCalled();
    assertFalse(indexedType0.isInterface());
}",0,assertFalse(indexedType0.isInterface())
project,0,test00923,"public void test00923() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""\u06DD\u070F\u1680\u180E"", (Node) null);
    NoType noType0 = new NoType(jSTypeRegistry0);
    FunctionType functionType1 = functionType0.supAndInfHelper(noType0, false);
    boolean boolean0 = functionType1.isSubtype(functionType0);
    assertTrue(noType0.hasCachedValues());
}",0,assertTrue(noType0.hasCachedValues())
project,0,test00924,"public void test00924() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""\u06DD\u070F\u1680\u180E"", (Node) null);
    NoType noType0 = new NoType(jSTypeRegistry0);
    FunctionType functionType1 = functionType0.supAndInfHelper(noType0, false);
    boolean boolean0 = functionType1.isSubtype(functionType0);
    assertTrue(boolean0);
}",0,
project,0,test01025,"public void test01025() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    noObjectType0.getExtendedInterfacesCount();
    assertFalse(noObjectType0.isInterface());
}",0,
project,0,test01126,"public void test01126() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noType0, noType0);
    assertFalse(functionType0.isInterface());
}",0,assertTrue(functionType0.isInterface())
project,0,test01227,"public void test01227() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.getOwnImplementedInterfaces();
    assertFalse(noResolvedType0.isInterface());
}",0,
project,0,test01328,"public void test01328() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.getSubTypes();
    assertFalse(noType0.isInterface());
}",0,
project,0,test01429,"public void test01429() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0);
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    // Undeclared exception!
    try {
        jSTypeRegistry0.createConstructorType(""Not declared as a constructor"", node0, node0, (JSType) noObjectType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test01530,"public void test01530() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""T8~oa`lyga#I_[-l\u0005"");
    Node node0 = Node.newNumber((double) 1);
    Node node1 = new Node(105, node0, node0, 36, 55);
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType(""Unknown class name"", node1, node0, (JSType) errorFunctionType0);
    assertFalse(functionType0.isInterface());
}",0,assertTrue(functionType0.isInterface())
project,0,test01531,"public void test01531() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""T8~oa`lyga#I_[-l\u0005"");
    Node node0 = Node.newNumber((double) 1);
    Node node1 = new Node(105, node0, node0, 36, 55);
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType(""Unknown class name"", node1, node0, (JSType) errorFunctionType0);
    assertTrue(functionType0.isNominalConstructor());
}",0,
project,0,test01632,"public void test01632() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newNumber((double) 0);
    // Undeclared exception!
    try {
        jSTypeRegistry0.createInterfaceType(""Not declared as a type name"", node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test01733,"public void test01733() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    Node node0 = new Node(105, 105, 105);
    // Undeclared exception!
    try {
        FunctionType.forInterface(jSTypeRegistry0, (String) null, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test01834,"public void test01834() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
    boolean boolean0 = functionType0.makesStructs();
    assertFalse(functionType0.hasInstanceType());
}",0,assertTrue(functionType0.hasInstanceType())
project,0,test01835,"public void test01835() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
    boolean boolean0 = functionType0.makesStructs();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01936,"public void test01936() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""jaz"");
    boolean boolean0 = errorFunctionType0.makesStructs();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test01937,"public void test01937() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""jaz"");
    boolean boolean0 = errorFunctionType0.makesStructs();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test02038,"public void test02038() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
    ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, recordType0, true);
    ImmutableList<String> immutableList0 = ImmutableList.of(""com.googe.common.base.Predicates$1"", ""Named type with empty name component"", ""ef :rD"");
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "",SbQzcT1f:31"", (Node) null, arrowType0, (ObjectType) null, immutableList0, false, false);
    boolean boolean0 = functionType0.makesDicts();
    assertFalse(functionType0.hasInstanceType());
}",0,
project,0,test02039,"public void test02039() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
    ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, recordType0, true);
    ImmutableList<String> immutableList0 = ImmutableList.of(""com.googe.common.base.Predicates$1"", ""Named type with empty name component"", ""ef :rD"");
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "",SbQzcT1f:31"", (Node) null, arrowType0, (ObjectType) null, immutableList0, false, false);
    boolean boolean0 = functionType0.makesDicts();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test02140,"public void test02140() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0);
    noResolvedType0.setImplementedInterfaces(immutableList0);
    boolean boolean0 = noResolvedType0.hasImplementedInterfaces();
    assertFalse(noResolvedType0.isInterface());
}",0,
project,0,test02141,"public void test02141() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0);
    noResolvedType0.setImplementedInterfaces(immutableList0);
    boolean boolean0 = noResolvedType0.hasImplementedInterfaces();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test02242,"public void test02242() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Not declared as a type name"", (Node) null);
    boolean boolean0 = functionType0.hasImplementedInterfaces();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test02243,"public void test02243() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Not declared as a type name"", (Node) null);
    boolean boolean0 = functionType0.hasImplementedInterfaces();
    assertTrue(functionType0.hasInstanceType());
}",0,
project,0,test02244,"public void test02244() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Not declared as a type name"", (Node) null);
    boolean boolean0 = functionType0.hasImplementedInterfaces();
    assertFalse(functionType0.hasCachedValues());
}",0,
project,0,test02345,"public void test02345() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""<inRalid>"");
    boolean boolean0 = errorFunctionType0.hasImplementedInterfaces();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test02346,"public void test02346() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""<inRalid>"");
    boolean boolean0 = errorFunctionType0.hasImplementedInterfaces();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test02447,"public void test02447() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    int int0 = errorFunctionType0.getMinArguments();
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test02448,"public void test02448() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    int int0 = errorFunctionType0.getMinArguments();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test02549,"public void test02549() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""<inRalid>"");
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, (List<JSType>) immutableList0);
    int int0 = functionType0.getMinArguments();
    assertFalse(functionType0.isInterface());
}",0,assertTrue(functionType0.isInterface())
project,0,test02550,"public void test02550() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""<inRalid>"");
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, (List<JSType>) immutableList0);
    int int0 = functionType0.getMinArguments();
    assertEquals(5, int0);
}",0,"assertEquals(0, int0)"
project,0,test02651,"public void test02651() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    int int0 = noResolvedType0.getMinArguments();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test02652,"public void test02652() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    int int0 = noResolvedType0.getMinArguments();
    assertFalse(noResolvedType0.isInterface());
}",0,
project,0,test02753,"public void test02753() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    int int0 = noResolvedType0.getMaxArguments();
    assertFalse(noResolvedType0.isInterface());
}",0,
project,0,test02754,"public void test02754() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    int int0 = noResolvedType0.getMaxArguments();
    assertEquals(Integer.MAX_VALUE, int0);
}",0,"assertEquals(0, int0)"
project,0,test02855,"public void test02855() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseBooleanType();
    JSType[] jSTypeArray0 = new JSType[0];
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
    int int0 = functionType0.getMaxArguments();
    assertEquals(0, int0);
}",0,
project,0,test02856,"public void test02856() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseBooleanType();
    JSType[] jSTypeArray0 = new JSType[0];
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
    int int0 = functionType0.getMaxArguments();
    assertFalse(functionType0.hasInstanceType());
}",0,
project,0,test02957,"public void test02957() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""c7q%Ww(q{jWk<kB"");
    int int0 = errorFunctionType0.getMaxArguments();
    assertEquals(3, int0);
}",0,
project,0,test02958,"public void test02958() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""c7q%Ww(q{jWk<kB"");
    int int0 = errorFunctionType0.getMaxArguments();
    assertFalse(errorFunctionType0.isInterface());
}",0,assertTrue(errorFunctionType0.isInterface())
project,0,test03059,"public void test03059() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""prototype"");
    errorFunctionType0.getPropertyType(""prototype"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test03160,"public void test03160() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.makesDicts();
    noResolvedType0.getOwnPropertyNames();
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test03262,"public void test03262() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Set<String> set0 = noResolvedType0.getOwnPropertyNames();
    assertFalse(noResolvedType0.isInterface());
}",0,assertTrue(noResolvedType0.isInterface())
project,0,test03363,"public void test03363() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""{) 6?A[rZdD"");
    Node node0 = Node.newString(""Not declared as a constructor"");
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = errorFunctionType0.defineProperty(""prototype"", noResolvedType0, false, node0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test03364,"public void test03364() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""{) 6?A[rZdD"");
    Node node0 = Node.newString(""Not declared as a constructor"");
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = errorFunctionType0.defineProperty(""prototype"", noResolvedType0, false, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test03465,"public void test03465() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Not declared as a type name"", (Node) null);
    functionType0.setPrototypeBasedOn((ObjectType) indexedType0, (Node) null);
    assertTrue(functionType0.isInterface());
}",0,assertTrue(functionType0.isInterface())
project,0,test03466,"public void test03466() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Not declared as a type name"", (Node) null);
    functionType0.setPrototypeBasedOn((ObjectType) indexedType0, (Node) null);
    assertFalse(functionType0.isConstructor());
}",0,assertTrue(functionType0.isConstructor())
project,0,test03567,"public void test03567() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[1];
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = noResolvedType0.setPrototype((ObjectType) null, node0);
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test03568,"public void test03568() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[1];
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = noResolvedType0.setPrototype((ObjectType) null, node0);
    assertFalse(noResolvedType0.isInterface());
}",0,assertFalse(noResolvedType0.isInterface())
project,0,test03669,"public void test03669() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
    assertFalse(noResolvedType0.hasCachedValues());
}",0,assertTrue(noResolvedType0.hasCachedValues())
project,0,test03670,"public void test03670() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
    assertFalse(functionType0.isInterface());
}",0,assertTrue(functionType0.isInterface())
project,0,test03671,"public void test03671() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
    assertFalse(functionType0.hasCachedValues());
}",0,
project,0,test03772,"public void test03772() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""{) 6?A[rZdD"");
    Node node0 = Node.newString(""Not declared as a constructor"");
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    errorFunctionType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
    boolean boolean0 = errorFunctionType0.defineProperty(""prototype"", noResolvedType0, false, node0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test03773,"public void test03773() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""{) 6?A[rZdD"");
    Node node0 = Node.newString(""Not declared as a constructor"");
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    errorFunctionType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
    boolean boolean0 = errorFunctionType0.defineProperty(""prototype"", noResolvedType0, false, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test03874,"public void test03874() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) instanceObjectType0, (ObjectType) instanceObjectType0, (ObjectType) noResolvedType0);
    noResolvedType0.setImplementedInterfaces(immutableList0);
    noResolvedType0.getAllImplementedInterfaces();
    assertTrue(noResolvedType0.hasCachedValues());
}",0,assertFalse(noResolvedType0.hasCachedValues())
project,0,test03975,"public void test03975() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""G}~ft9,r"", (Node) null);
    functionType0.getAllImplementedInterfaces();
    assertFalse(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test03976,"public void test03976() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""G}~ft9,r"", (Node) null);
    functionType0.getAllImplementedInterfaces();
    assertTrue(functionType0.isInterface());
}",0,
project,0,test04077,"public void test04077() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""7 }FmY:i-Iix~1Q"");
    errorFunctionType0.getAllImplementedInterfaces();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test04178,"public void test04178() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = noResolvedType0.getBindReturnType(677);
    ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) functionType0);
    // Undeclared exception!
    try {
        functionType0.setImplementedInterfaces(immutableList0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.FunctionType"", e);
    }
}",1,
project,0,test04279,"public void test04279() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.getAllExtendedInterfaces();
    assertFalse(noResolvedType0.isInterface());
}",0,
project,0,test04380,"public void test04380() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    Vector<ObjectType> vector0 = new Vector<ObjectType>();
    try {
        noResolvedType0.setExtendedInterfaces(vector0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.FunctionType"", e);
    }
}",1,
project,0,test04481,"public void test04481() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Unknown class name"", (Node) null);
    // Undeclared exception!
    try {
        functionType0.setExtendedInterfaces((List<ObjectType>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.collect.ImmutableList"", e);
    }
}",1,
project,0,test04582,"public void test04582() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""<inRalid>"");
    errorFunctionType0.defineProperty(""_`Y~<lc{"", errorFunctionType0, false, (Node) null);
    JSType jSType0 = errorFunctionType0.getPropertyType(""_`Y~<lc{"");
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,
project,0,test04583,"public void test04583() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""<inRalid>"");
    errorFunctionType0.defineProperty(""_`Y~<lc{"", errorFunctionType0, false, (Node) null);
    JSType jSType0 = errorFunctionType0.getPropertyType(""_`Y~<lc{"");
    assertFalse(jSType0.isInterface());
}",0,assertFalse(jSType0.isInterface())
project,0,test04684,"public void test04684() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""call"");
    errorFunctionType0.getPropertyType(""call"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test04785,"public void test04785() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""apply"");
    errorFunctionType0.getPropertyType(""apply"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test04886,"public void test04886() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = noResolvedType0.getBindReturnType((-1205374168));
    assertFalse(functionType0.isInterface());
}",0,assertTrue(functionType0.isInterface())
project,0,test04987,"public void test04987() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    FunctionType functionType0 = errorFunctionType0.getBindReturnType(1685);
    assertFalse(functionType0.isInterface());
}",0,
project,0,test05088,"public void test05088() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, (Node) null);
    boolean boolean0 = functionType0.defineProperty(""prototype"", numberType0, true, (Node) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test05089,"public void test05089() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, (Node) null);
    boolean boolean0 = functionType0.defineProperty(""prototype"", numberType0, true, (Node) null);
    assertFalse(functionType0.isInterface());
}",0,assertTrue(functionType0.isInterface())
project,0,test05190,"public void test05190() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
    FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, false);
    functionType1.supAndInfHelper(functionType0, false);
    assertTrue(functionType0.hasCachedValues());
}",0,
project,0,test05191,"public void test05191() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
    FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, false);
    functionType1.supAndInfHelper(functionType0, false);
    assertNotSame(functionType0, functionType1);
}",0,
project,0,test05292,"public void test05292() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseVoidType();
    ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertTrue(functionType1.isOrdinaryFunction());
}",0,assertTrue(functionType1.isOrdinaryFunction())
project,0,test05293,"public void test05293() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseVoidType();
    ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertFalse(functionType2.equals((Object) functionType0));
}",0,
project,0,test05294,"public void test05294() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseVoidType();
    ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertFalse(functionType1.hasInstanceType());
}",0,
project,0,test05395,"public void test05395() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    assertNotSame(functionType2, functionType1);
}",1,
project,0,test05396,"public void test05396() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    assertTrue(functionType2.equals((Object) functionType1));
}",0,
project,0,test05497,"public void test05497() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseVoidType();
    ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertTrue(functionType1.isOrdinaryFunction());
}",0,assertTrue(functionType1.isOrdinaryFunction())
project,0,test05498,"public void test05498() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseVoidType();
    ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertSame(functionType2, functionType0);
}",0,
project,0,test05599,"public void test05599() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseVoidType();
    ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    assertTrue(functionType2.isOrdinaryFunction());
}",0,
project,0,test055100,"public void test055100() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseVoidType();
    ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    assertFalse(functionType2.equals((Object) functionType0));
}",0,
project,0,test055101,"public void test055101() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseVoidType();
    ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    assertSame(functionType2, functionType1);
}",0,
project,0,test055102,"public void test055102() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseVoidType();
    ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    assertFalse(functionType2.isNominalConstructor());
}",0,assertTrue(functionType2.isNominalConstructor())
project,0,test056103,"public void test056103() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
    assertTrue(recordType0.hasCachedValues());
}",0,assertTrue(recordType0.hasCachedValues())
project,0,test056104,"public void test056104() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
    assertSame(functionType1, functionType2);
}",0,
project,0,test057105,"public void test057105() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
    assertTrue(recordType0.hasCachedValues());
}",0,
project,0,test057106,"public void test057106() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0, (JSType) recordType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
    assertSame(functionType0, functionType2);
}",0,
project,0,test058107,"public void test058107() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) voidType0, (JSType) functionType0, (JSType) functionType0, (JSType) voidType0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList1);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    assertNotSame(functionType2, functionType1);
}",0,
project,0,test058108,"public void test058108() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) voidType0, (JSType) functionType0, (JSType) functionType0, (JSType) voidType0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList1);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    assertNotSame(functionType2, functionType0);
}",0,
project,0,test058109,"public void test058109() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) voidType0, (JSType) functionType0, (JSType) functionType0, (JSType) voidType0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, (List<JSType>) immutableList1);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
    assertTrue(functionType2.isOrdinaryFunction());
}",0,assertTrue(functionType2.isOrdinaryFunction())
project,0,test059110,"public void test059110() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    FunctionType functionType0 = errorFunctionType0.supAndInfHelper(noResolvedType0, true);
    errorFunctionType0.supAndInfHelper(functionType0, false);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test060111,"public void test060111() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    FunctionType functionType0 = errorFunctionType0.supAndInfHelper(noResolvedType0, true);
    noResolvedType0.supAndInfHelper(functionType0, true);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test060112,"public void test060112() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    FunctionType functionType0 = errorFunctionType0.supAndInfHelper(noResolvedType0, true);
    noResolvedType0.supAndInfHelper(functionType0, true);
    assertFalse(noResolvedType0.isOrdinaryFunction());
}",0,assertFalse(noResolvedType0.isOrdinaryFunction())
project,0,test061113,"public void test061113() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    NoResolvedType noResolvedType1 = (NoResolvedType) noResolvedType0.supAndInfHelper(errorFunctionType0, true);
    noResolvedType1.supAndInfHelper(noResolvedType0, true);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test061114,"public void test061114() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    NoResolvedType noResolvedType1 = (NoResolvedType) noResolvedType0.supAndInfHelper(errorFunctionType0, true);
    noResolvedType1.supAndInfHelper(noResolvedType0, true);
    assertFalse(noResolvedType0.isOrdinaryFunction());
}",0,assertFalse(noResolvedType0.isOrdinaryFunction())
project,0,test062115,"public void test062115() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test062116,"public void test062116() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
    functionType0.getTypesUnderShallowEquality(errorFunctionType0);
    assertFalse(noResolvedType0.isOrdinaryFunction());
}",0,assertFalse(noResolvedType0.isOrdinaryFunction())
project,0,test063117,"public void test063117() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertTrue(functionType2.equals((Object) functionType1));
}",0,
project,0,test063118,"public void test063118() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertFalse(functionType2.isReturnTypeInferred());
}",0,assertTrue(functionType2.isReturnTypeInferred())
project,0,test063119,"public void test063119() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertNotSame(functionType2, functionType1);
}",1,
project,0,test064120,"public void test064120() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
    // Undeclared exception!
    try {
        functionType0.getSuperClassConstructor();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test065121,"public void test065121() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""bind"");
    ObjectType objectType0 = FunctionType.getTopDefiningInterface(errorFunctionType0, ""Named type with empty name component"");
    assertNull(objectType0);
}",0,
project,0,test066122,"public void test066122() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Unknown class name"", (Node) null);
    functionType0.setInstanceType(noResolvedType0);
    assertTrue(functionType0.hasInstanceType());
}",0,
project,0,test066123,"public void test066123() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Unknown class name"", (Node) null);
    functionType0.setInstanceType(noResolvedType0);
    ObjectType objectType0 = functionType0.getTopMostDefiningType(""Unknown class name"");
    assertNotNull(objectType0);
}",1,
project,0,test066124,"public void test066124() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Unknown class name"", (Node) null);
    functionType0.setInstanceType(noResolvedType0);
    ObjectType objectType0 = functionType0.getTopMostDefiningType(""Unknown class name"");
    assertFalse(functionType0.isConstructor());
}",0,assertTrue(functionType0.isConstructor())
project,0,test067125,"public void test067125() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, false);
    // Undeclared exception!
    try {
        functionType0.getTopMostDefiningType(""Not declared as a type name"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test068126,"public void test068126() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
    functionType0.getTopMostDefiningType(""Not declared as a type name"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test068127,"public void test068127() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
    functionType0.getTopMostDefiningType(""Not declared as a type name"");
    assertFalse(noResolvedType0.isOrdinaryFunction());
}",0,assertFalse(noResolvedType0.isOrdinaryFunction())
project,0,test069128,"public void test069128() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""i"");
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, errorFunctionType0);
    boolean boolean0 = errorFunctionType0.isSubtype(proxyObjectType0);
    assertTrue(boolean0);
}",0,
project,0,test070129,"public void test070129() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""G}~ft9,r"", (Node) null);
    FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, ""U0#B?gY]C;{X%9]"", (Node) null);
    FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
    assertFalse(functionType1.isOrdinaryFunction());
}",0,assertTrue(functionType1.isOrdinaryFunction())
project,0,test070130,"public void test070130() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""G}~ft9,r"", (Node) null);
    FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, ""U0#B?gY]C;{X%9]"", (Node) null);
    FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
    assertFalse(functionType2.equals((Object) functionType1));
}",0,
project,0,test070131,"public void test070131() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""G}~ft9,r"", (Node) null);
    FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, ""U0#B?gY]C;{X%9]"", (Node) null);
    FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
    assertFalse(functionType1.isConstructor());
}",0,assertTrue(functionType1.isConstructor())
project,0,test071132,"public void test071132() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""lR` nmVLW"");
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Named type with empty name component"", (Node) null);
    functionType0.supAndInfHelper(errorFunctionType0, true);
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test072133,"public void test072133() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) voidType0, (List<JSType>) immutableList0);
    FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
    assertSame(functionType2, functionType1);
}",0,
project,0,test073134,"public void test073134() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
    String string0 = functionType0.toDebugHashCodeString();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test073135,"public void test073135() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
    String string0 = functionType0.toDebugHashCodeString();
    assertEquals(""{20}"", string0);
}",0,
project,0,test075136,"public void test075136() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""STRUCT"");
    errorFunctionType0.setPrettyPrint(false);
    String string0 = errorFunctionType0.toStringHelper(false);
    assertEquals(""Function"", string0);
}",0,
project,0,test076137,"public void test076137() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    String string0 = errorFunctionType0.toStringHelper(true);
    assertEquals(""function (new:Not declared as a type name, *=, *=, *=): Not declared as a type name"", string0);
}",0,
project,0,test077138,"public void test077138() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    NoResolvedType noResolvedType1 = (NoResolvedType) noResolvedType0.supAndInfHelper(errorFunctionType0, true);
    String string0 = noResolvedType1.toStringHelper(true);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test077139,"public void test077139() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    NoResolvedType noResolvedType1 = (NoResolvedType) noResolvedType0.supAndInfHelper(errorFunctionType0, true);
    String string0 = noResolvedType1.toStringHelper(true);
    assertEquals(""Function"", string0);
}",0,
project,0,test078140,"public void test078140() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Not declared as a constructor"", (Node) null);
    String string0 = functionType0.toAnnotationString();
    assertEquals(""function (this:Not declared as a constructor): ?"", string0);
}",1,
project,0,test079141,"public void test079141() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = noResolvedType0.getBindReturnType(0);
    String string0 = functionType0.toStringHelper(false);
    assertEquals(""function (...[?]): NoResolvedType"", string0);
}",0,
project,0,test080142,"public void test080142() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) voidType0, (List<JSType>) immutableList0);
    String string0 = functionType0.toStringHelper(true);
    assertEquals(""function (undefined, ...[undefined]): undefined"", string0);
}",0,
project,0,test081143,"public void test081143() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""jaz"");
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Named type with empty name component"", (Node) null);
    boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
    assertFalse(boolean0);
}",0,
project,0,test081144,"public void test081144() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""jaz"");
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""Named type with empty name component"", (Node) null);
    boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
    assertFalse(functionType0.isConstructor());
}",0,assertTrue(functionType0.isConstructor())
project,0,test082145,"public void test082145() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qz'B%@L6e<^I"");
    ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, ""Qz'B%@L6e<^I"");
    boolean boolean0 = errorFunctionType0.isSubtype(errorFunctionType1);
    assertTrue(boolean0);
}",0,
project,0,test082146,"public void test082146() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qz'B%@L6e<^I"");
    ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, ""Qz'B%@L6e<^I"");
    boolean boolean0 = errorFunctionType0.isSubtype(errorFunctionType1);
    assertFalse(errorFunctionType1.equals((Object) errorFunctionType0));
}",0,
project,0,test083147,"public void test083147() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""bind"");
    JSType jSType0 = errorFunctionType0.getPropertyType(""bind"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test083148,"public void test083148() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""bind"");
    JSType jSType0 = errorFunctionType0.getPropertyType(""bind"");
    boolean boolean0 = jSType0.isSubtype(errorFunctionType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test084149,"public void test084149() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    ObjectType objectType0 = noObjectType0.getTypeOfThis();
    assertFalse(objectType0.isNativeObjectType());
}",0,assertFalse(objectType0.isNativeObjectType())
project,0,test085150,"public void test085150() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.setSource((Node) null);
    assertTrue(noResolvedType0.matchesStringContext());
}",0,assertTrue(noResolvedType0.matchesStringContext())
project,0,test086151,"public void test086151() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
    JSType jSType0 = instanceObjectType0.getRestrictedTypeGivenToBooleanOutcome(false);
    instanceObjectType0.getGreatestSubtype(jSType0);
    Node node0 = new Node(0, (-528), (-2004603710));
    noObjectType0.setSource(node0);
    assertFalse(noObjectType0.isBooleanValueType());
}",0,assertFalse(noObjectType0.isBooleanValueType())
project,0,test087152,"public void test087152() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.getAllImplementedInterfaces();
    noResolvedType0.setSource((Node) null);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test088153,"public void test088153() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
    JSType jSType0 = instanceObjectType0.getRestrictedTypeGivenToBooleanOutcome(false);
    UnknownType unknownType0 = (UnknownType) instanceObjectType0.getGreatestSubtype(jSType0);
    Node node0 = new Node(0, (-528), (-2004603710));
    noObjectType0.setPrototypeBasedOn((ObjectType) unknownType0, node0);
    noObjectType0.setSource(node0);
    assertFalse(node0.isScript());
}",0,
project,0,test089154,"public void test089154() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
    ErrorFunctionType errorFunctionType0 = (ErrorFunctionType) jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    errorFunctionType0.makesDicts();
    Node node0 = new Node(0);
    errorFunctionType0.setPrototypeBasedOn((ObjectType) errorFunctionType0, node0);
    assertFalse(errorFunctionType0.isNominalType());
}",0,assertTrue(errorFunctionType0.isNominalType())
project,0,test090155,"public void test090155() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""BITNOT"", (Node) null);
    functionType0.clearCachedValues();
    assertFalse(functionType0.isConstructor());
}",0,assertTrue(functionType0.isConstructor())
project,0,test091156,"public void test091156() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
    FunctionType functionType1 = (FunctionType) functionType0.resolveInternal((ErrorReporter) null, noResolvedType0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType1, false);
    instanceObjectType0.getPropertyNode(""Not declared as a type name"");
    // Undeclared exception!
    try {
        functionType1.setPrototypeBasedOn((ObjectType) functionType0, (Node) null);
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test092157,"public void test092157() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    ObjectType objectType0 = noObjectType0.getTopMostDefiningType((String) null);
    boolean boolean0 = objectType0.hasCachedValues();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test093158,"public void test093158() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) errorFunctionType0.supAndInfHelper(noResolvedType0, true);
    // Undeclared exception!
    try {
        errorFunctionType1.setImplicitPrototype(noResolvedType0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test094159,"public void test094159() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""L7^Guai%p'YAm;"", ""com.google.javascript.rhino.jstype.IndexedType"", (-1394), Integer.MAX_VALUE);
    ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noObjectType0, (ObjectType) namedType0, (ObjectType) namedType0, (ObjectType) namedType0);
    errorFunctionType0.setImplementedInterfaces(immutableList0);
    JSType jSType0 = errorFunctionType0.resolve(simpleErrorReporter0, noObjectType0);
    assertFalse(jSType0.isCheckedUnknownType());
}",0,assertTrue(jSType0.isCheckedUnknownType())
project,0,test095160,"public void test095160() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
    ErrorFunctionType errorFunctionType0 = (ErrorFunctionType) jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ErrorFunctionType errorFunctionType1 = (ErrorFunctionType) errorFunctionType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
    assertTrue(errorFunctionType1.isObject());
}",0,assertTrue(errorFunctionType1.isObject())
project,0,test096161,"public void test096161() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    errorFunctionType0.toDebugHashCodeString();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test097162,"public void test097162() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, false);
    String string0 = functionType0.toDebugHashCodeString();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test097163,"public void test097163() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, false);
    String string0 = functionType0.toDebugHashCodeString();
    assertEquals(""function ({13}): function (this:me, {10}): me"", string0);
}",0,
project,0,test098164,"public void test098164() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[0];
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) noObjectType0, true, jSTypeArray0);
    functionType0.toDebugHashCodeString();
    assertTrue(functionType0.hasCachedValues());
}",0,
project,0,test099165,"public void test099165() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
    ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, recordType0, true);
    ImmutableList<String> immutableList0 = ImmutableList.of(""com.googe.common.base.Predicates$1"", ""Named type with empty name component"", ""ef :rD"");
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, "",SbQzcT1f:31"", (Node) null, arrowType0, (ObjectType) null, immutableList0, false, false);
    boolean boolean0 = functionType0.hasAnyTemplateInternal();
    assertTrue(boolean0);
}",0,
project,0,test100166,"public void test100166() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""ZJ5CD+2z =icYk"");
    JSType[] jSTypeArray0 = new JSType[5];
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) templateType0, jSTypeArray0);
    boolean boolean0 = functionType0.hasAnyTemplateInternal();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
