project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    Compiler compiler0 = commandLineRunner0.createCompiler();
    assertNotNull(compiler0);
}",0,assertNotNull(compiler0)
project,0,test21,"public void test21() throws Throwable {
    String[] stringArray0 = new String[0];
    // Undeclared exception!
    try {
        CommandLineRunner.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
    } catch (System.SystemExitException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.System"", e);
    }
}",0,
project,0,test32,"public void test32() throws Throwable {
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""com.google.javascript.jscomp.CommandLineRunner$FormattingOption"";
    CommandLineRunner commandLineRunner0 = null;
    try {
        commandLineRunner0 = new CommandLineRunner(stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Throwable e) {
        //
        // No argument is allowed: com.google.javascript.jscomp.CommandLineRunner$FormattingOption
        //
        verifyException(""org.kohsuke.args4j.CmdLineParser"", e);
    }
}",0,
project,0,test43,"public void test43() throws Throwable {
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""--A="";
    CommandLineRunner commandLineRunner0 = null;
    try {
        commandLineRunner0 = new CommandLineRunner(stringArray0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No match found
        //
        verifyException(""java.util.regex.Matcher"", e);
    }
}",0,
project,0,test54,"public void test54() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
    assertFalse(compilerOptions0.generatePseudoNames);
}",0,
project,0,test55,"public void test55() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
    assertTrue(compilerOptions0.closurePass);
}",0,
