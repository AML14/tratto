project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    booleanType0.getTypesUnderEquality(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test0001,"public void test0001() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    booleanType0.getTypesUnderEquality(errorFunctionType0);
    assertFalse(booleanType0.isAllType());
}",0,assertTrue(booleanType0.isAllType())
project,0,test0012,"public void test0012() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
    instanceObjectType0.getTypesUnderShallowEquality(booleanType0);
    assertTrue(instanceObjectType0.hasCachedValues());
}",0,assertTrue(instanceObjectType0.hasCachedValues())
project,0,test0023,"public void test0023() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Named type with empty name component"", 0, 1);
    namedType0.resolve(simpleErrorReporter0, errorFunctionType0);
    assertFalse(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test0024,"public void test0024() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Named type with empty name component"", 0, 1);
    namedType0.resolve(simpleErrorReporter0, errorFunctionType0);
    assertTrue(namedType0.isResolved());
}",0,assertTrue(namedType0.isResolved())
project,0,test0035,"public void test0035() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    boolean boolean0 = errorFunctionType0.isStringValueType();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,assertTrue(errorFunctionType0.isFunctionType())
project,0,test0036,"public void test0036() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    boolean boolean0 = errorFunctionType0.isStringValueType();
    assertFalse(errorFunctionType0.isAllType());
}",0,assertTrue(errorFunctionType0.isAllType())
project,0,test0037,"public void test0037() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    boolean boolean0 = errorFunctionType0.isStringValueType();
    assertFalse(errorFunctionType0.isNoType());
}",0,assertTrue(errorFunctionType0.isNoType())
project,0,test0038,"public void test0038() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    boolean boolean0 = errorFunctionType0.isStringValueType();
    assertFalse(errorFunctionType0.isNoResolvedType());
}",0,assertTrue(errorFunctionType0.isNoResolvedType())
project,0,test0039,"public void test0039() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    boolean boolean0 = errorFunctionType0.isStringValueType();
    assertFalse(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test00310,"public void test00310() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    boolean boolean0 = errorFunctionType0.isStringValueType();
    assertFalse(errorFunctionType0.isNoObjectType());
}",0,assertTrue(errorFunctionType0.isNoObjectType())
project,0,test00311,"public void test00311() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    boolean boolean0 = errorFunctionType0.isStringValueType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test00412,"public void test00412() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isBooleanObjectType();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test00413,"public void test00413() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isBooleanObjectType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00514,"public void test00514() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    JSType jSType1 = jSType0.autobox();
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test00515,"public void test00515() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    JSType jSType1 = jSType0.autobox();
    assertFalse(jSType1.isNoObjectType());
}",0,assertTrue(jSType1.isNoObjectType())
project,0,test00516,"public void test00516() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    JSType jSType1 = jSType0.autobox();
    assertFalse(jSType1.isResolved());
}",0,assertTrue(jSType1.isResolved())
project,0,test00617,"public void test00617() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getJSDocInfo();
    assertFalse(booleanType0.isAllType());
}",0,assertTrue(booleanType0.isAllType())
project,0,test00618,"public void test00618() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getJSDocInfo();
    assertFalse(booleanType0.isNoType());
}",0,assertTrue(booleanType0.isNoType())
project,0,test00619,"public void test00619() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getJSDocInfo();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test00620,"public void test00620() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getJSDocInfo();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test00621,"public void test00621() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getJSDocInfo();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test00722,"public void test00722() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    String string0 = voidType0.toDebugHashCodeString();
    assertEquals(""{1}"", string0);
}",0,assertNotNull(string0)
project,0,test00723,"public void test00723() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    String string0 = voidType0.toDebugHashCodeString();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test00824,"public void test00824() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isRegexpType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00825,"public void test00825() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isRegexpType();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test00926,"public void test00926() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    JSType jSType0 = voidType0.collapseUnion();
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test01027,"public void test01027() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertFalse(noResolvedType0.hasCachedValues());
}",0,assertTrue(noResolvedType0.hasCachedValues())
project,0,test01028,"public void test01028() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test01029,"public void test01029() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test01030,"public void test01030() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test01131,"public void test01131() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isDateType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01132,"public void test01132() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isDateType();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test01233,"public void test01233() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
    voidType0.getTypesUnderShallowInequality(jSType0);
    assertTrue(jSType0.isUnionType());
}",0,assertTrue(jSType0.isUnionType())
project,0,test01234,"public void test01234() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
    voidType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test01235,"public void test01235() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
    voidType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test01236,"public void test01236() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
    voidType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(jSType0.isNullType());
}",0,
project,0,test01237,"public void test01237() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
    voidType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(voidType0.isNoType());
}",0,assertTrue(voidType0.isNoType())
project,0,test01238,"public void test01238() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
    voidType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test01239,"public void test01239() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
    voidType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(voidType0.isAllType());
}",0,assertTrue(voidType0.isAllType())
project,0,test01240,"public void test01240() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(voidType0);
    voidType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(jSType0.isVoidType());
}",0,assertTrue(jSType0.isVoidType())
project,0,test01341,"public void test01341() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.toAnnotationString();
    assertFalse(booleanType0.isAllType());
}",0,assertTrue(booleanType0.isAllType())
project,0,test01342,"public void test01342() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.toAnnotationString();
    assertFalse(booleanType0.isNoType());
}",0,assertTrue(booleanType0.isNoType())
project,0,test01343,"public void test01343() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.toAnnotationString();
    assertFalse(booleanType0.isResolved());
}",0,assertFalse(booleanType0.isResolved())
project,0,test01344,"public void test01344() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.toAnnotationString();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test01345,"public void test01345() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.toAnnotationString();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test01446,"public void test01446() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isStringObjectType();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test01447,"public void test01447() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isStringObjectType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01548,"public void test01548() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""zGr"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
    assertFalse(arrowType0.isNullType());
}",0,assertTrue(arrowType0.isNullType())
project,0,test01549,"public void test01549() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""zGr"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
    assertFalse(arrowType0.isVoidType());
}",0,
project,0,test01550,"public void test01550() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""zGr"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
    boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,
project,0,test01551,"public void test01551() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""zGr"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
    boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
    assertFalse(arrowType0.isAllType());
}",0,
project,0,test01552,"public void test01552() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""zGr"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
    boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
    assertFalse(arrowType0.isNoResolvedType());
}",0,assertTrue(arrowType0.isNoResolvedType())
project,0,test01553,"public void test01553() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""zGr"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
    boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
    assertFalse(arrowType0.isResolved());
}",0,assertTrue(arrowType0.isResolved())
project,0,test01554,"public void test01554() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""zGr"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
    boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
    assertFalse(arrowType0.isNoObjectType());
}",0,assertTrue(arrowType0.isNoObjectType())
project,0,test01555,"public void test01555() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""zGr"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
    boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01556,"public void test01556() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""zGr"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    JSType.TypePair jSType_TypePair0 = arrowType0.getTypesUnderShallowInequality(errorFunctionType0);
    boolean boolean0 = jSType_TypePair0.typeA.matchesObjectContext();
    assertFalse(arrowType0.isNoType());
}",0,assertTrue(arrowType0.isNoType())
project,0,test01657,"public void test01657() throws Throwable {
    BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    JSType.toMaybeParameterizedType((JSType) booleanType0);
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test01758,"public void test01758() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isNumberObjectType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01759,"public void test01759() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isNumberObjectType();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test01860,"public void test01860() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    EnumType enumType0 = jSTypeRegistry0.createEnumType("""", (Node) null, arrowType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    boolean boolean0 = enumElementType0.matchesStringContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01861,"public void test01861() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    EnumType enumType0 = jSTypeRegistry0.createEnumType("""", (Node) null, arrowType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    boolean boolean0 = enumElementType0.matchesStringContext();
    assertFalse(enumElementType0.isNoResolvedType());
}",0,assertTrue(enumElementType0.isNoResolvedType())
project,0,test01862,"public void test01862() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    EnumType enumType0 = jSTypeRegistry0.createEnumType("""", (Node) null, arrowType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    boolean boolean0 = enumElementType0.matchesStringContext();
    assertFalse(enumElementType0.isAllType());
}",0,assertTrue(enumElementType0.isAllType())
project,0,test01863,"public void test01863() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    EnumType enumType0 = jSTypeRegistry0.createEnumType("""", (Node) null, arrowType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    boolean boolean0 = enumElementType0.matchesStringContext();
    assertFalse(enumElementType0.isNoObjectType());
}",0,assertTrue(enumElementType0.isNoObjectType())
project,0,test01864,"public void test01864() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    EnumType enumType0 = jSTypeRegistry0.createEnumType("""", (Node) null, arrowType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    boolean boolean0 = enumElementType0.matchesStringContext();
    assertFalse(enumElementType0.isResolved());
}",0,assertTrue(enumElementType0.isResolved())
project,0,test01865,"public void test01865() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
    EnumType enumType0 = jSTypeRegistry0.createEnumType("""", (Node) null, arrowType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    boolean boolean0 = enumElementType0.matchesStringContext();
    assertFalse(enumElementType0.isNoType());
}",0,assertTrue(enumElementType0.isNoType())
project,0,test01966,"public void test01966() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    // Undeclared exception!
    try {
        voidType0.isNullable();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02067,"public void test02067() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    voidType0.unboxesTo();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test02168,"public void test02168() throws Throwable {
    BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    // Undeclared exception!
    try {
        booleanType0.canTestForEqualityWith(booleanType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02269,"public void test02269() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isNominalConstructor();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test02270,"public void test02270() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isNominalConstructor();
    assertFalse(voidType0.isConstructor());
}",0,
project,0,test02271,"public void test02271() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isNominalConstructor();
    assertFalse(voidType0.isInterface());
}",0,
project,0,test02272,"public void test02272() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isNominalConstructor();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test02373,"public void test02373() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isArrayType();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test02374,"public void test02374() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isArrayType();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test02375,"public void test02375() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isArrayType();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test02376,"public void test02376() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isArrayType();
    assertFalse(boolean0);
}",0,
project,0,test02377,"public void test02377() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isArrayType();
    assertFalse(booleanType0.isAllType());
}",0,assertTrue(booleanType0.isAllType())
project,0,test02378,"public void test02378() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isArrayType();
    assertFalse(booleanType0.isNoType());
}",0,assertTrue(booleanType0.isNoType())
project,0,test02479,"public void test02479() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    // Undeclared exception!
    try {
        voidType0.setValidator((Predicate<JSType>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.JSType"", e);
    }
}",0,
project,0,test02580,"public void test02580() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""C2^\""qi3"");
    boolean boolean0 = errorFunctionType0.isBooleanValueType();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,assertTrue(errorFunctionType0.isFunctionType())
project,0,test02581,"public void test02581() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""C2^\""qi3"");
    boolean boolean0 = errorFunctionType0.isBooleanValueType();
    assertFalse(errorFunctionType0.isNoResolvedType());
}",0,assertTrue(errorFunctionType0.isNoResolvedType())
project,0,test02582,"public void test02582() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""C2^\""qi3"");
    boolean boolean0 = errorFunctionType0.isBooleanValueType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test02583,"public void test02583() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""C2^\""qi3"");
    boolean boolean0 = errorFunctionType0.isBooleanValueType();
    assertFalse(errorFunctionType0.isNoType());
}",0,assertTrue(errorFunctionType0.isNoType())
project,0,test02584,"public void test02584() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""C2^\""qi3"");
    boolean boolean0 = errorFunctionType0.isBooleanValueType();
    assertFalse(errorFunctionType0.isNoObjectType());
}",0,assertTrue(errorFunctionType0.isNoObjectType())
project,0,test02585,"public void test02585() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""C2^\""qi3"");
    boolean boolean0 = errorFunctionType0.isBooleanValueType();
    assertFalse(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test02586,"public void test02586() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""C2^\""qi3"");
    boolean boolean0 = errorFunctionType0.isBooleanValueType();
    assertFalse(errorFunctionType0.isAllType());
}",0,assertTrue(errorFunctionType0.isAllType())
project,0,test02687,"public void test02687() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.canBeCalled();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test02688,"public void test02688() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.canBeCalled();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test02789,"public void test02789() throws Throwable {
    PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
    UnionType unionType0 = new UnionType((JSTypeRegistry) null, priorityQueue0);
    boolean boolean0 = unionType0.hasDisplayName();
    assertFalse(unionType0.isResolved());
}",0,assertTrue(unionType0.isResolved())
project,0,test02790,"public void test02790() throws Throwable {
    PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
    UnionType unionType0 = new UnionType((JSTypeRegistry) null, priorityQueue0);
    boolean boolean0 = unionType0.hasDisplayName();
    assertFalse(boolean0);
}",0,
project,0,test02891,"public void test02891() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    // Undeclared exception!
    try {
        voidType0.isNumber();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test02992,"public void test02992() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.isOrdinaryFunction();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test02993,"public void test02993() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.isOrdinaryFunction();
    assertFalse(templateType0.isResolved());
}",0,assertTrue(templateType0.isResolved())
project,0,test03094,"public void test03094() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""wc~Oc?(C"");
    boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(voidType0);
    assertTrue(enumElementType0.hasCachedValues());
}",0,assertFalse(enumElementType0.hasCachedValues())
project,0,test03095,"public void test03095() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""wc~Oc?(C"");
    boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(voidType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test03196,"public void test03196() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ObjectType objectType0 = booleanType0.dereference();
    assertNotNull(objectType0);
}",0,
project,0,test03197,"public void test03197() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ObjectType objectType0 = booleanType0.dereference();
    assertFalse(objectType0.isAllType());
}",0,
project,0,test03198,"public void test03198() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ObjectType objectType0 = booleanType0.dereference();
    assertFalse(objectType0.isNoResolvedType());
}",0,assertTrue(objectType0.isNoResolvedType())
project,0,test03199,"public void test03199() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ObjectType objectType0 = booleanType0.dereference();
    assertFalse(objectType0.isResolved());
}",0,assertTrue(objectType0.isResolved())
project,0,test031100,"public void test031100() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ObjectType objectType0 = booleanType0.dereference();
    assertFalse(objectType0.isNoObjectType());
}",0,assertTrue(objectType0.isNoObjectType())
project,0,test031101,"public void test031101() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ObjectType objectType0 = booleanType0.dereference();
    assertFalse(objectType0.isNoType());
}",0,assertTrue(objectType0.isNoType())
project,0,test032102,"public void test032102() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    boolean boolean0 = numberType0.isNamedType();
    assertFalse(numberType0.isNoResolvedType());
}",0,assertTrue(numberType0.isNoResolvedType())
project,0,test032103,"public void test032103() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    boolean boolean0 = numberType0.isNamedType();
    assertFalse(numberType0.isAllType());
}",0,assertTrue(numberType0.isAllType())
project,0,test032104,"public void test032104() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    boolean boolean0 = numberType0.isNamedType();
    assertFalse(numberType0.isResolved());
}",0,assertTrue(numberType0.isResolved())
project,0,test032105,"public void test032105() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    boolean boolean0 = numberType0.isNamedType();
    assertFalse(numberType0.isNoType());
}",0,assertTrue(numberType0.isNoType())
project,0,test032106,"public void test032106() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    boolean boolean0 = numberType0.isNamedType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test032107,"public void test032107() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    boolean boolean0 = numberType0.isNamedType();
    assertFalse(numberType0.isNoObjectType());
}",0,assertTrue(numberType0.isNoObjectType())
project,0,test033108,"public void test033108() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    voidType0.matchConstraint(voidType0);
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test034109,"public void test034109() throws Throwable {
    AllType allType0 = new AllType((JSTypeRegistry) null);
    boolean boolean0 = allType0.matchesInt32Context();
    assertFalse(allType0.isResolved());
}",0,assertTrue(allType0.isResolved())
project,0,test034110,"public void test034110() throws Throwable {
    AllType allType0 = new AllType((JSTypeRegistry) null);
    boolean boolean0 = allType0.matchesInt32Context();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test035111,"public void test035111() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isInstanceType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test035112,"public void test035112() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isInstanceType();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test036113,"public void test036113() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
    assertFalse(boolean0);
}",0,
project,0,test036114,"public void test036114() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
    assertFalse(proxyObjectType0.isAllType());
}",0,assertTrue(proxyObjectType0.isAllType())
project,0,test036115,"public void test036115() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
    assertFalse(proxyObjectType0.isResolved());
}",0,assertTrue(proxyObjectType0.isResolved())
project,0,test037116,"public void test037116() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isTheObjectType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test037117,"public void test037117() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.isTheObjectType();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test038118,"public void test038118() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.UnionType"");
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, ""Not declared as a type name"");
    boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(enumElementType0);
    assertTrue(enumElementType0.hasCachedValues());
}",0,assertTrue(enumElementType0.hasCachedValues())
project,0,test038119,"public void test038119() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.UnionType"");
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, ""Not declared as a type name"");
    boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(enumElementType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test039120,"public void test039120() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    stringType0.matchesUint32Context();
    assertFalse(stringType0.isResolved());
}",0,assertTrue(stringType0.isResolved())
project,0,test039121,"public void test039121() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    stringType0.matchesUint32Context();
    assertFalse(stringType0.isAllType());
}",0,assertTrue(stringType0.isAllType())
project,0,test039122,"public void test039122() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    stringType0.matchesUint32Context();
    assertFalse(stringType0.isNoResolvedType());
}",0,assertTrue(stringType0.isNoResolvedType())
project,0,test039123,"public void test039123() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    stringType0.matchesUint32Context();
    assertFalse(stringType0.isNoObjectType());
}",0,assertTrue(stringType0.isNoObjectType())
project,0,test039124,"public void test039124() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    stringType0.matchesUint32Context();
    assertFalse(stringType0.isNoType());
}",0,assertTrue(stringType0.isNoType())
project,0,test040125,"public void test040125() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, indexedType0);
    boolean boolean0 = arrowType0.isEnumType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test040126,"public void test040126() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, indexedType0);
    boolean boolean0 = arrowType0.isEnumType();
    assertFalse(arrowType0.isNoResolvedType());
}",0,assertTrue(arrowType0.isNoResolvedType())
project,0,test040127,"public void test040127() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, indexedType0);
    boolean boolean0 = arrowType0.isEnumType();
    assertFalse(arrowType0.isResolved());
}",0,assertTrue(arrowType0.isResolved())
project,0,test040128,"public void test040128() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, indexedType0);
    boolean boolean0 = arrowType0.isEnumType();
    assertFalse(arrowType0.isAllType());
}",0,
project,0,test040129,"public void test040129() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, indexedType0);
    boolean boolean0 = arrowType0.isEnumType();
    assertFalse(arrowType0.isNoObjectType());
}",0,assertTrue(arrowType0.isNoObjectType())
project,0,test040130,"public void test040130() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, indexedType0);
    boolean boolean0 = arrowType0.isEnumType();
    assertFalse(arrowType0.isNoType());
}",0,assertTrue(arrowType0.isNoType())
project,0,test041131,"public void test041131() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isNumberValueType();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test041132,"public void test041132() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isNumberValueType();
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test041133,"public void test041133() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isNumberValueType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test042134,"public void test042134() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test042135,"public void test042135() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    assertTrue(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test043136,"public void test043136() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    voidType0.clearResolved();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test044137,"public void test044137() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.isFunctionPrototypeType();
    assertFalse(arrowType0.isNoResolvedType());
}",0,assertTrue(arrowType0.isNoResolvedType())
project,0,test044138,"public void test044138() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.isFunctionPrototypeType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test044139,"public void test044139() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.isFunctionPrototypeType();
    assertFalse(arrowType0.isNoObjectType());
}",0,assertTrue(arrowType0.isNoObjectType())
project,0,test044140,"public void test044140() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.isFunctionPrototypeType();
    assertFalse(arrowType0.isResolved());
}",0,
project,0,test044141,"public void test044141() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.isFunctionPrototypeType();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,assertTrue(errorFunctionType0.isFunctionType())
project,0,test044142,"public void test044142() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.isFunctionPrototypeType();
    assertFalse(arrowType0.isNoType());
}",0,assertTrue(arrowType0.isNoType())
project,0,test044143,"public void test044143() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.isFunctionPrototypeType();
    assertFalse(arrowType0.isAllType());
}",0,
project,0,test045144,"public void test045144() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0);
    UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
    unionType0.toStringHelper(true);
    assertFalse(unionType0.isResolved());
}",0,assertTrue(unionType0.isResolved())
project,0,test046145,"public void test046145() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test046146,"public void test046146() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isResolved());
}",0,
project,0,test046147,"public void test046147() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isNoType());
}",0,assertTrue(errorFunctionType0.isNoType())
project,0,test046148,"public void test046148() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,assertTrue(errorFunctionType0.isFunctionType())
project,0,test046149,"public void test046149() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isNoObjectType());
}",0,assertTrue(errorFunctionType0.isNoObjectType())
project,0,test046150,"public void test046150() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isNoResolvedType());
}",0,assertTrue(errorFunctionType0.isNoResolvedType())
project,0,test046151,"public void test046151() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isAllType());
}",0,assertTrue(errorFunctionType0.isAllType())
project,0,test047152,"public void test047152() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""M%wwv73OYGw38^PiR"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isNoResolvedType());
}",0,assertTrue(errorFunctionType0.isNoResolvedType())
project,0,test047153,"public void test047153() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""M%wwv73OYGw38^PiR"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test047154,"public void test047154() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""M%wwv73OYGw38^PiR"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isNoObjectType());
}",0,assertTrue(errorFunctionType0.isNoObjectType())
project,0,test047155,"public void test047155() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""M%wwv73OYGw38^PiR"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertTrue(boolean0);
}",0,
project,0,test047156,"public void test047156() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""M%wwv73OYGw38^PiR"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isAllType());
}",0,assertTrue(errorFunctionType0.isAllType())
project,0,test047157,"public void test047157() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""M%wwv73OYGw38^PiR"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,
project,0,test047158,"public void test047158() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""M%wwv73OYGw38^PiR"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isNoType());
}",0,assertTrue(errorFunctionType0.isNoType())
project,0,test048159,"public void test048159() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(parameterizedType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test048160,"public void test048160() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(parameterizedType0);
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test048161,"public void test048161() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(parameterizedType0);
    assertFalse(parameterizedType0.isResolved());
}",0,assertTrue(parameterizedType0.isResolved())
project,0,test049162,"public void test049162() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "".LQv=]31fidt4-wJRV"");
    FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
    boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
    assertFalse(functionType0.isNoResolvedType());
}",0,assertTrue(functionType0.isNoResolvedType())
project,0,test049163,"public void test049163() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "".LQv=]31fidt4-wJRV"");
    FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
    boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
    assertFalse(functionType0.isNoObjectType());
}",0,assertTrue(functionType0.isNoObjectType())
project,0,test049164,"public void test049164() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "".LQv=]31fidt4-wJRV"");
    FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
    boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
    assertFalse(functionType0.isNoType());
}",0,assertTrue(functionType0.isNoType())
project,0,test049165,"public void test049165() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "".LQv=]31fidt4-wJRV"");
    FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
    boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
    assertFalse(functionType0.isResolved());
}",0,assertTrue(functionType0.isResolved())
project,0,test049166,"public void test049166() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "".LQv=]31fidt4-wJRV"");
    FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
    boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test049167,"public void test049167() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "".LQv=]31fidt4-wJRV"");
    FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
    boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
    assertFalse(functionType0.isAllType());
}",0,assertTrue(functionType0.isAllType())
project,0,test050168,"public void test050168() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isGlobalThisType();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test050169,"public void test050169() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isGlobalThisType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test050170,"public void test050170() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isGlobalThisType();
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test051171,"public void test051171() throws Throwable {
    FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
    assertNull(functionType0);
}",0,
project,0,test052172,"public void test052172() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(recordType0);
    assertTrue(recordType0.hasCachedValues());
}",0,assertTrue(recordType0.hasCachedValues())
project,0,test052173,"public void test052173() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(recordType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test053174,"public void test053174() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isParameterizedType();
    assertFalse(voidType0.isNoResolvedType());
}",0,assertTrue(voidType0.isNoResolvedType())
project,0,test053175,"public void test053175() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isParameterizedType();
    assertFalse(voidType0.isAllType());
}",0,assertTrue(voidType0.isAllType())
project,0,test053176,"public void test053176() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isParameterizedType();
    assertFalse(boolean0);
}",0,
project,0,test053177,"public void test053177() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isParameterizedType();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test053178,"public void test053178() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isParameterizedType();
    assertFalse(voidType0.isNoObjectType());
}",0,assertTrue(voidType0.isNoObjectType())
project,0,test053179,"public void test053179() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isParameterizedType();
    assertFalse(voidType0.isNoType());
}",0,assertTrue(voidType0.isNoType())
project,0,test054180,"public void test054180() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = parameterizedType0.isParameterizedType();
    assertTrue(boolean0);
}",0,
project,0,test054181,"public void test054181() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = parameterizedType0.isParameterizedType();
    assertFalse(parameterizedType0.isResolved());
}",0,assertTrue(parameterizedType0.isResolved())
project,0,test054182,"public void test054182() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = parameterizedType0.isParameterizedType();
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test055183,"public void test055183() throws Throwable {
    ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
    assertNull(parameterizedType0);
}",0,assertNotNull(parameterizedType0)
project,0,test056184,"public void test056184() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = templateType0.isTemplateType();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test056185,"public void test056185() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = templateType0.isTemplateType();
    assertFalse(templateType0.isResolved());
}",0,assertTrue(templateType0.isResolved())
project,0,test057186,"public void test057186() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    JSType.toMaybeTemplateType((JSType) voidType0);
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test058187,"public void test058187() throws Throwable {
    TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
    assertNull(templateType0);
}",0,
project,0,test059188,"public void test059188() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.hasAnyTemplateInternal();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test059189,"public void test059189() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.hasAnyTemplateInternal();
    assertFalse(boolean0);
}",0,
project,0,test059190,"public void test059190() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.hasAnyTemplateInternal();
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test060191,"public void test060191() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""`cP4d8V_>)XLj>4WLaT"", (Node) null);
    boolean boolean0 = functionType0.isNominalConstructor();
    assertFalse(boolean0);
}",0,
project,0,test060192,"public void test060192() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""`cP4d8V_>)XLj>4WLaT"", (Node) null);
    boolean boolean0 = functionType0.isNominalConstructor();
    assertFalse(functionType0.isResolved());
}",0,assertTrue(functionType0.isResolved())
project,0,test060193,"public void test060193() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""`cP4d8V_>)XLj>4WLaT"", (Node) null);
    boolean boolean0 = functionType0.isNominalConstructor();
    assertFalse(functionType0.isAllType());
}",0,assertTrue(functionType0.isAllType())
project,0,test060194,"public void test060194() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""`cP4d8V_>)XLj>4WLaT"", (Node) null);
    boolean boolean0 = functionType0.isNominalConstructor();
    assertFalse(functionType0.isNoResolvedType());
}",0,assertTrue(functionType0.isNoResolvedType())
project,0,test060195,"public void test060195() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""`cP4d8V_>)XLj>4WLaT"", (Node) null);
    boolean boolean0 = functionType0.isNominalConstructor();
    assertFalse(functionType0.isNoObjectType());
}",0,assertTrue(functionType0.isNoObjectType())
project,0,test060196,"public void test060196() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""`cP4d8V_>)XLj>4WLaT"", (Node) null);
    boolean boolean0 = functionType0.isNominalConstructor();
    assertTrue(functionType0.isFunctionType());
}",0,
project,0,test060197,"public void test060197() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""`cP4d8V_>)XLj>4WLaT"", (Node) null);
    boolean boolean0 = functionType0.isNominalConstructor();
    assertFalse(functionType0.isNoType());
}",0,assertTrue(functionType0.isNoType())
project,0,test061198,"public void test061198() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isNominalConstructor();
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test061199,"public void test061199() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isNominalConstructor();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test061200,"public void test061200() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isNominalConstructor();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test062201,"public void test062201() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
    assertFalse(voidType0.isNoType());
}",0,assertTrue(voidType0.isNoType())
project,0,test062202,"public void test062202() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
    assertFalse(voidType0.isAllType());
}",0,assertTrue(voidType0.isAllType())
project,0,test062203,"public void test062203() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
    assertFalse(voidType0.isNoObjectType());
}",0,assertTrue(voidType0.isNoObjectType())
project,0,test062204,"public void test062204() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
    assertFalse(voidType0.isNoResolvedType());
}",0,assertTrue(voidType0.isNoResolvedType())
project,0,test062205,"public void test062205() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test062206,"public void test062206() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(templateType0);
    assertFalse(templateType0.isResolved());
}",0,assertTrue(templateType0.isResolved())
project,0,test063207,"public void test063207() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(booleanType0);
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test063208,"public void test063208() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(booleanType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test063209,"public void test063209() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(booleanType0);
    assertFalse(booleanType0.isNoType());
}",0,assertTrue(booleanType0.isNoType())
project,0,test063210,"public void test063210() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(booleanType0);
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test063211,"public void test063211() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(booleanType0);
    assertFalse(booleanType0.isAllType());
}",0,assertTrue(booleanType0.isAllType())
project,0,test063212,"public void test063212() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(booleanType0);
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test064213,"public void test064213() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = parameterizedType0.isEquivalentTo(noResolvedType0);
    assertFalse(parameterizedType0.isResolved());
}",0,assertTrue(parameterizedType0.isResolved())
project,0,test064214,"public void test064214() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = parameterizedType0.isEquivalentTo(noResolvedType0);
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test064215,"public void test064215() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = parameterizedType0.isEquivalentTo(noResolvedType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test065216,"public void test065216() throws Throwable {
    ParameterizedType parameterizedType0 = new ParameterizedType((JSTypeRegistry) null, (ObjectType) null, (JSType) null);
    boolean boolean0 = JSType.isEquivalent(parameterizedType0, parameterizedType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test065217,"public void test065217() throws Throwable {
    ParameterizedType parameterizedType0 = new ParameterizedType((JSTypeRegistry) null, (ObjectType) null, (JSType) null);
    boolean boolean0 = JSType.isEquivalent(parameterizedType0, parameterizedType0);
    assertFalse(parameterizedType0.isResolved());
}",0,
project,0,test066218,"public void test066218() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.equals((Object) null);
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test066219,"public void test066219() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.equals((Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test067220,"public void test067220() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.equals(numberType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test067221,"public void test067221() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    boolean boolean0 = voidType0.equals(numberType0);
    assertFalse(numberType0.isResolved());
}",0,assertTrue(numberType0.isResolved())
project,0,test068222,"public void test068222() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    voidType0.findPropertyType(""Unknown class name"");
    assertFalse(voidType0.isAllType());
}",0,assertTrue(voidType0.isAllType())
project,0,test068223,"public void test068223() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    voidType0.findPropertyType(""Unknown class name"");
    assertFalse(voidType0.isNoType());
}",0,assertTrue(voidType0.isNoType())
project,0,test068224,"public void test068224() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    voidType0.findPropertyType(""Unknown class name"");
    assertFalse(voidType0.isNoObjectType());
}",0,assertTrue(voidType0.isNoObjectType())
project,0,test068225,"public void test068225() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    voidType0.findPropertyType(""Unknown class name"");
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test068226,"public void test068226() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    voidType0.findPropertyType(""Unknown class name"");
    assertFalse(voidType0.isNoResolvedType());
}",0,assertTrue(voidType0.isNoResolvedType())
project,0,test069227,"public void test069227() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Unknown class name"");
    enumElementType0.findPropertyType(""Unknown class name"");
    assertFalse(enumElementType0.isNoResolvedType());
}",0,assertTrue(enumElementType0.isNoResolvedType())
project,0,test069228,"public void test069228() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Unknown class name"");
    enumElementType0.findPropertyType(""Unknown class name"");
    assertFalse(enumElementType0.isResolved());
}",0,assertTrue(enumElementType0.isResolved())
project,0,test069229,"public void test069229() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Unknown class name"");
    enumElementType0.findPropertyType(""Unknown class name"");
    assertFalse(enumElementType0.isNoType());
}",0,assertTrue(enumElementType0.isNoType())
project,0,test069230,"public void test069230() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Unknown class name"");
    enumElementType0.findPropertyType(""Unknown class name"");
    assertFalse(enumElementType0.isAllType());
}",0,assertTrue(enumElementType0.isAllType())
project,0,test069231,"public void test069231() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Unknown class name"");
    enumElementType0.findPropertyType(""Unknown class name"");
    assertFalse(enumElementType0.isNoObjectType());
}",0,assertTrue(enumElementType0.isNoObjectType())
project,0,test070232,"public void test070232() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.canAssignTo(stringType0);
    assertFalse(voidType0.isNoResolvedType());
}",0,assertTrue(voidType0.isNoResolvedType())
project,0,test070233,"public void test070233() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.canAssignTo(stringType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test070234,"public void test070234() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.canAssignTo(stringType0);
    assertFalse(voidType0.isNoObjectType());
}",0,assertTrue(voidType0.isNoObjectType())
project,0,test070235,"public void test070235() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.canAssignTo(stringType0);
    assertFalse(voidType0.isNoType());
}",0,assertTrue(voidType0.isNoType())
project,0,test070236,"public void test070236() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.canAssignTo(stringType0);
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test071237,"public void test071237() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
    boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
    assertFalse(parameterizedType0.isResolved());
}",0,assertTrue(parameterizedType0.isResolved())
project,0,test071238,"public void test071238() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
    boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
    assertFalse(objectType0.isNoResolvedType());
}",0,assertTrue(objectType0.isNoResolvedType())
project,0,test071239,"public void test071239() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
    boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
    assertFalse(objectType0.isNoObjectType());
}",0,assertTrue(objectType0.isNoObjectType())
project,0,test071240,"public void test071240() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
    boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
    assertTrue(boolean0);
}",0,
project,0,test071241,"public void test071241() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
    boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
    assertFalse(objectType0.isAllType());
}",0,
project,0,test071242,"public void test071242() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType0);
    boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
    assertFalse(objectType0.isNoType());
}",0,assertTrue(objectType0.isNoType())
project,0,test072243,"public void test072243() throws Throwable {
    BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    AllType allType0 = new AllType((JSTypeRegistry) null);
    booleanType0.getTypesUnderEquality(allType0);
    assertFalse(allType0.isResolved());
}",0,assertTrue(allType0.isResolved())
project,0,test072244,"public void test072244() throws Throwable {
    BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
    AllType allType0 = new AllType((JSTypeRegistry) null);
    booleanType0.getTypesUnderEquality(allType0);
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test073245,"public void test073245() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    noResolvedType0.getTypesUnderInequality(templateType0);
    assertFalse(templateType0.isResolved());
}",0,
project,0,test073246,"public void test073246() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    noResolvedType0.getTypesUnderInequality(templateType0);
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test073247,"public void test073247() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    noResolvedType0.getTypesUnderInequality(templateType0);
    assertFalse(noResolvedType0.hasCachedValues());
}",0,assertTrue(noResolvedType0.hasCachedValues())
project,0,test074248,"public void test074248() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(noResolvedType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test074249,"public void test074249() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderInequality(noResolvedType0);
    boolean boolean0 = jSType_TypePair0.typeA.differsFrom(jSType_TypePair0.typeB);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test075250,"public void test075250() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType jSType0 = unionType0.collapseUnion();
    booleanType0.testForEqualityHelper(jSType0, unionType0);
    assertFalse(jSType0.isNoType());
}",0,assertTrue(jSType0.isNoType())
project,0,test075251,"public void test075251() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType jSType0 = unionType0.collapseUnion();
    booleanType0.testForEqualityHelper(jSType0, unionType0);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test075252,"public void test075252() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType jSType0 = unionType0.collapseUnion();
    booleanType0.testForEqualityHelper(jSType0, unionType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test075253,"public void test075253() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType jSType0 = unionType0.collapseUnion();
    booleanType0.testForEqualityHelper(jSType0, unionType0);
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test075254,"public void test075254() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType jSType0 = unionType0.collapseUnion();
    booleanType0.testForEqualityHelper(jSType0, unionType0);
    assertFalse(unionType0.isAllType());
}",0,
project,0,test075255,"public void test075255() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) booleanType0, (JSType) booleanType0, (JSType) booleanType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType jSType0 = unionType0.collapseUnion();
    booleanType0.testForEqualityHelper(jSType0, unionType0);
    assertFalse(booleanType0.isNoType());
}",0,assertTrue(booleanType0.isNoType())
project,0,test076256,"public void test076256() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    JSType jSType0 = errorFunctionType0.getReturnType();
    jSType0.testForEquality(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test076257,"public void test076257() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    JSType jSType0 = errorFunctionType0.getReturnType();
    jSType0.testForEquality(errorFunctionType0);
    assertFalse(errorFunctionType0.isAllType());
}",0,assertTrue(errorFunctionType0.isAllType())
project,0,test077258,"public void test077258() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.testForEquality(voidType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test078259,"public void test078259() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.getTypesUnderInequality(noType0);
    assertTrue(noType0.hasCachedValues());
}",0,assertFalse(noType0.hasCachedValues())
project,0,test079260,"public void test079260() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    booleanType0.getTypesUnderEquality(noObjectType0);
    assertTrue(noObjectType0.hasCachedValues());
}",0,assertTrue(noObjectType0.hasCachedValues())
project,0,test079261,"public void test079261() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    booleanType0.getTypesUnderEquality(noObjectType0);
    assertFalse(booleanType0.isAllType());
}",0,assertTrue(booleanType0.isAllType())
project,0,test080262,"public void test080262() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.getTypesUnderInequality(voidType0);
    assertTrue(noType0.hasCachedValues());
}",0,
project,0,test081263,"public void test081263() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
    errorFunctionType0.testForEquality(objectType0);
    assertTrue(objectType0.hasCachedValues());
}",0,
project,0,test081264,"public void test081264() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
    errorFunctionType0.testForEquality(objectType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test082265,"public void test082265() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Named type with empty name component"");
    booleanType0.getTypesUnderEquality(enumElementType0);
    assertTrue(enumElementType0.hasCachedValues());
}",0,assertTrue(enumElementType0.hasCachedValues())
project,0,test083266,"public void test083266() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    voidType0.testForEquality(jSType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test083267,"public void test083267() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    voidType0.testForEquality(jSType0);
    assertFalse(voidType0.isNoType());
}",0,assertTrue(voidType0.isNoType())
project,0,test083268,"public void test083268() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    voidType0.testForEquality(jSType0);
    assertFalse(voidType0.isAllType());
}",0,assertTrue(voidType0.isAllType())
project,0,test083269,"public void test083269() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    voidType0.testForEquality(jSType0);
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test083270,"public void test083270() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    voidType0.testForEquality(jSType0);
    assertTrue(jSType0.isUnionType());
}",0,assertTrue(jSType0.isUnionType())
project,0,test083271,"public void test083271() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    voidType0.testForEquality(jSType0);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test084272,"public void test084272() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(functionType0);
    assertTrue(functionType0.hasCachedValues());
}",0,
project,0,test084273,"public void test084273() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(functionType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test085274,"public void test085274() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(noType0);
    assertTrue(noType0.hasCachedValues());
}",0,
project,0,test085275,"public void test085275() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(noType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test086276,"public void test086276() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    noResolvedType0.getLeastSupertype(booleanType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test087277,"public void test087277() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
    noResolvedType0.getLeastSupertype(jSType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test088278,"public void test088278() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) voidType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test089279,"public void test089279() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.canTestForShallowEqualityWith(voidType0);
    assertFalse(voidType0.isNoResolvedType());
}",0,assertTrue(voidType0.isNoResolvedType())
project,0,test089280,"public void test089280() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.canTestForShallowEqualityWith(voidType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test089281,"public void test089281() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.canTestForShallowEqualityWith(voidType0);
    assertFalse(voidType0.isAllType());
}",0,assertTrue(voidType0.isAllType())
project,0,test089282,"public void test089282() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.canTestForShallowEqualityWith(voidType0);
    assertFalse(templateType0.isResolved());
}",0,assertTrue(templateType0.isResolved())
project,0,test089283,"public void test089283() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.canTestForShallowEqualityWith(voidType0);
    assertFalse(voidType0.isNoType());
}",0,assertTrue(voidType0.isNoType())
project,0,test089284,"public void test089284() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.canTestForShallowEqualityWith(voidType0);
    assertFalse(voidType0.isNoObjectType());
}",0,assertTrue(voidType0.isNoObjectType())
project,0,test090285,"public void test090285() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.UnionType"");
    FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, ""Not declared as a type name"");
    boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(enumElementType0);
    assertTrue(enumElementType0.hasCachedValues());
}",0,assertTrue(enumElementType0.hasCachedValues())
project,0,test090286,"public void test090286() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.UnionType"");
    FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, ""Not declared as a type name"");
    boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(enumElementType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test091287,"public void test091287() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""W4916m<QC*"");
    JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test091288,"public void test091288() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""W4916m<QC*"");
    JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
    errorFunctionType0.testForEquality(jSType0);
    assertFalse(errorFunctionType0.isNoType());
}",0,assertTrue(errorFunctionType0.isNoType())
project,0,test092289,"public void test092289() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Named type with empty name component"");
    JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) enumElementType0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(jSType0);
    assertTrue(enumElementType0.hasCachedValues());
}",0,assertTrue(enumElementType0.hasCachedValues())
project,0,test092290,"public void test092290() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Named type with empty name component"");
    JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) enumElementType0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(jSType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test093291,"public void test093291() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
    boolean boolean0 = recordType0.canTestForShallowEqualityWith(booleanType0);
    assertTrue(recordType0.hasCachedValues());
}",0,assertTrue(recordType0.hasCachedValues())
project,0,test093292,"public void test093292() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
    boolean boolean0 = recordType0.canTestForShallowEqualityWith(booleanType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test094293,"public void test094293() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, ""Named type with empty name component"");
    boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(booleanType0);
    assertTrue(enumElementType0.hasCachedValues());
}",0,
project,0,test094294,"public void test094294() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, ""Named type with empty name component"");
    boolean boolean0 = enumElementType0.canTestForShallowEqualityWith(booleanType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test095295,"public void test095295() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = JSType.filterNoResolvedType(noResolvedType0);
    assertNotSame(jSType0, noResolvedType0);
}",0,
project,0,test095296,"public void test095296() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = JSType.filterNoResolvedType(noResolvedType0);
    assertFalse(jSType0.isAllType());
}",0,
project,0,test095297,"public void test095297() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = JSType.filterNoResolvedType(noResolvedType0);
    assertFalse(jSType0.isResolved());
}",0,
project,0,test096298,"public void test096298() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    // Undeclared exception!
    try {
        voidType0.getRestrictedTypeGivenToBooleanOutcome(true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test097299,"public void test097299() throws Throwable {
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    JSType jSType0 = voidType0.getRestrictedTypeGivenToBooleanOutcome(false);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test098300,"public void test098300() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    booleanType0.getTypesUnderEquality(jSType0);
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test098301,"public void test098301() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    booleanType0.getTypesUnderEquality(jSType0);
    assertFalse(booleanType0.isNoType());
}",0,assertTrue(booleanType0.isNoType())
project,0,test098302,"public void test098302() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    booleanType0.getTypesUnderEquality(jSType0);
    assertFalse(booleanType0.isTemplateType());
}",0,assertTrue(booleanType0.isTemplateType())
project,0,test098303,"public void test098303() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    booleanType0.getTypesUnderEquality(jSType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test098304,"public void test098304() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    booleanType0.getTypesUnderEquality(jSType0);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test098305,"public void test098305() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    booleanType0.getTypesUnderEquality(jSType0);
    assertFalse(booleanType0.isAllType());
}",0,assertTrue(booleanType0.isAllType())
project,0,test099306,"public void test099306() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
    JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) objectType0);
    voidType0.getTypesUnderEquality(jSType0);
    assertTrue(objectType0.hasCachedValues());
}",0,assertFalse(objectType0.hasCachedValues())
project,0,test100307,"public void test100307() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(noResolvedType0);
    noResolvedType0.getTypesUnderInequality(jSType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test101308,"public void test101308() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getTypesUnderInequality(voidType0);
    assertFalse(booleanType0.isNoType());
}",0,assertTrue(booleanType0.isNoType())
project,0,test101309,"public void test101309() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getTypesUnderInequality(voidType0);
    assertFalse(booleanType0.isAllType());
}",0,assertTrue(booleanType0.isAllType())
project,0,test101310,"public void test101310() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getTypesUnderInequality(voidType0);
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test101311,"public void test101311() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getTypesUnderInequality(voidType0);
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test102312,"public void test102312() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Qh"", 0, 1);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    unionType0.getTypesUnderShallowInequality(nullType0);
    assertFalse(unionType0.isAllType());
}",0,assertTrue(unionType0.isAllType())
project,0,test102313,"public void test102313() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Qh"", 0, 1);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    unionType0.getTypesUnderShallowInequality(nullType0);
    assertFalse(unionType0.isNoResolvedType());
}",0,assertTrue(unionType0.isNoResolvedType())
project,0,test102314,"public void test102314() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Qh"", 0, 1);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    unionType0.getTypesUnderShallowInequality(nullType0);
    assertFalse(unionType0.isNoObjectType());
}",0,assertTrue(unionType0.isNoObjectType())
project,0,test102315,"public void test102315() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Qh"", 0, 1);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    unionType0.getTypesUnderShallowInequality(nullType0);
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test102316,"public void test102316() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Qh"", 0, 1);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    unionType0.getTypesUnderShallowInequality(nullType0);
    assertFalse(unionType0.isResolved());
}",0,assertTrue(unionType0.isResolved())
project,0,test102317,"public void test102317() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Qh"", 0, 1);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    unionType0.getTypesUnderShallowInequality(nullType0);
    assertFalse(unionType0.isNoType());
}",0,assertTrue(unionType0.isNoType())
project,0,test102318,"public void test102318() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Qh"");
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Qh"", 0, 1);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) nullType0, (JSType) errorFunctionType0, (JSType) namedType0, (JSType) errorFunctionType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    unionType0.getTypesUnderShallowInequality(nullType0);
    assertFalse(unionType0.isNominalType());
}",0,assertTrue(unionType0.isNominalType())
project,0,test103319,"public void test103319() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    voidType0.getTypesUnderShallowInequality(booleanType0);
    assertFalse(voidType0.isAllType());
}",0,assertTrue(voidType0.isAllType())
project,0,test103320,"public void test103320() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    voidType0.getTypesUnderShallowInequality(booleanType0);
    assertFalse(voidType0.isNoType());
}",0,assertTrue(voidType0.isNoType())
project,0,test103321,"public void test103321() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    voidType0.getTypesUnderShallowInequality(booleanType0);
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test103322,"public void test103322() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    voidType0.getTypesUnderShallowInequality(booleanType0);
    assertFalse(voidType0.isNoResolvedType());
}",0,assertTrue(voidType0.isNoResolvedType())
project,0,test103323,"public void test103323() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    voidType0.getTypesUnderShallowInequality(booleanType0);
    assertFalse(voidType0.isNoObjectType());
}",0,assertTrue(voidType0.isNoObjectType())
project,0,test104324,"public void test104324() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.differsFrom(voidType0);
    assertFalse(voidType0.isAllType());
}",0,assertTrue(voidType0.isAllType())
project,0,test104325,"public void test104325() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.differsFrom(voidType0);
    assertFalse(voidType0.isNoType());
}",0,assertTrue(voidType0.isNoType())
project,0,test104326,"public void test104326() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.differsFrom(voidType0);
    assertFalse(voidType0.isNoObjectType());
}",0,assertTrue(voidType0.isNoObjectType())
project,0,test104327,"public void test104327() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.differsFrom(voidType0);
    assertFalse(templateType0.isResolved());
}",0,assertTrue(templateType0.isResolved())
project,0,test104328,"public void test104328() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.differsFrom(voidType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test104329,"public void test104329() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.differsFrom(voidType0);
    assertFalse(voidType0.isNoResolvedType());
}",0,assertTrue(voidType0.isNoResolvedType())
project,0,test105330,"public void test105330() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    boolean boolean0 = noResolvedType0.differsFrom(unknownType0);
    assertFalse(unknownType0.isAllType());
}",0,
project,0,test105331,"public void test105331() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    boolean boolean0 = noResolvedType0.differsFrom(unknownType0);
    assertFalse(unknownType0.isNoType());
}",0,assertTrue(unknownType0.isNoType())
project,0,test105332,"public void test105332() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    boolean boolean0 = noResolvedType0.differsFrom(unknownType0);
    assertFalse(unknownType0.isNoObjectType());
}",0,assertTrue(unknownType0.isNoObjectType())
project,0,test105333,"public void test105333() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    boolean boolean0 = noResolvedType0.differsFrom(unknownType0);
    assertFalse(unknownType0.isNoResolvedType());
}",0,assertTrue(unknownType0.isNoResolvedType())
project,0,test105334,"public void test105334() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    boolean boolean0 = noResolvedType0.differsFrom(unknownType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test105335,"public void test105335() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    boolean boolean0 = noResolvedType0.differsFrom(unknownType0);
    assertFalse(unknownType0.isResolved());
}",0,
project,0,test106336,"public void test106336() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
    boolean boolean0 = jSType0.differsFrom(voidType0);
    assertFalse(voidType0.isNoObjectType());
}",0,assertTrue(voidType0.isNoObjectType())
project,0,test106337,"public void test106337() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
    boolean boolean0 = jSType0.differsFrom(voidType0);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test106338,"public void test106338() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
    boolean boolean0 = jSType0.differsFrom(voidType0);
    assertFalse(voidType0.isNoType());
}",0,assertTrue(voidType0.isNoType())
project,0,test106339,"public void test106339() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
    boolean boolean0 = jSType0.differsFrom(voidType0);
    assertFalse(jSType0.isAllType());
}",0,
project,0,test106340,"public void test106340() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
    boolean boolean0 = jSType0.differsFrom(voidType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test106341,"public void test106341() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = voidType0.restrictByNotNullOrUndefined();
    boolean boolean0 = jSType0.differsFrom(voidType0);
    assertFalse(jSType0.isResolved());
}",0,
project,0,test107342,"public void test107342() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test107343,"public void test107343() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
    assertFalse(instanceObjectType0.isNoObjectType());
}",0,assertTrue(instanceObjectType0.isNoObjectType())
project,0,test107344,"public void test107344() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
    assertFalse(instanceObjectType0.isNoType());
}",0,assertTrue(instanceObjectType0.isNoType())
project,0,test107345,"public void test107345() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
    assertFalse(instanceObjectType0.isResolved());
}",0,assertTrue(instanceObjectType0.isResolved())
project,0,test107346,"public void test107346() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
    assertFalse(instanceObjectType0.isNoResolvedType());
}",0,assertTrue(instanceObjectType0.isNoResolvedType())
project,0,test107347,"public void test107347() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
    assertFalse(instanceObjectType0.isAllType());
}",0,assertTrue(instanceObjectType0.isAllType())
project,0,test108348,"public void test108348() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test108349,"public void test108349() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
    assertFalse(voidType0.isAllType());
}",0,assertTrue(voidType0.isAllType())
project,0,test108350,"public void test108350() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
    assertFalse(allType0.isResolved());
}",0,assertTrue(allType0.isResolved())
project,0,test108351,"public void test108351() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
    assertFalse(allType0.isNoType());
}",0,assertTrue(allType0.isNoType())
project,0,test108352,"public void test108352() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
    assertFalse(allType0.isNoObjectType());
}",0,assertTrue(allType0.isNoObjectType())
project,0,test108353,"public void test108353() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(allType0);
    assertFalse(allType0.isNoResolvedType());
}",0,assertTrue(allType0.isNoResolvedType())
project,0,test109354,"public void test109354() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.UnionType"");
    errorFunctionType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test110355,"public void test110355() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, (JSType) null);
    JSType jSType0 = JSType.safeResolve((JSType) null, simpleErrorReporter0, proxyObjectType0);
    assertNull(jSType0);
}",0,assertNotNull(jSType0)
