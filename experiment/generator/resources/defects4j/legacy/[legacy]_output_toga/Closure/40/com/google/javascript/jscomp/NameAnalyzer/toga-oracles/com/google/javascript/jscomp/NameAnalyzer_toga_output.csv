project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""var t;"", ""var t;"");
    Node node1 = new Node(16, node0);
    nameAnalyzer0.process(node0, node1);
    String string0 = nameAnalyzer0.getHtmlReport();
    assertEquals(""<html><body><style type=\""text/css\"">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\""Function\"">Function</a><ul></li></ul></li><li><a name=\""t\"">t</a><ul><li>REFERENCED BY: </li></ul></li><li><a name=\""window\"">window</a><ul><li>REFERS TO: <a href=\""#t\"">t</a></li></ul></li></ul></body></html>"", string0);
}",0,
project,0,test011,"public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""FFr=QM"", ""FFr=QM"");
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
    nameAnalyzer0.process(node0, node0);
    assertEquals(52, Node.LENGTH);
}",0,
project,0,test022,"public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""var t"", ""var t"");
    Node node1 = new Node(16, node0);
    nameAnalyzer0.process(node1, node0);
    assertFalse(node0.hasOneChild());
}",0,assertFalse(node0.hasOneChild())
project,0,test023,"public void test023() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""var t"", ""var t"");
    Node node1 = new Node(16, node0);
    nameAnalyzer0.process(node1, node0);
    assertFalse(node0.hasChildren());
}",0,
project,0,test034,"public void test034() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""_jq$o^L?v_OW"", ""function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}"");
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    // Undeclared exception!
    try {
        nameAnalyzer0.process(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test045,"public void test045() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(130, 130, 130);
    Node node1 = new Node(37);
    node0.addChildToBack(node1);
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    // Undeclared exception!
    try {
        nameAnalyzer0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test056,"public void test056() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(148, ""B"");
    Node node1 = new Node(0, node0, node0, node0);
    Node node2 = new Node(16, node1);
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    nameAnalyzer0.process(node2, node1);
    assertFalse(node2.isRegExp());
}",0,
project,0,test067,"public void test067() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""com.<oogle.javascript.jscomp.CompilerOptions$TracerMode"", ""com.<oogle.javascript.jscomp.CompilerOptions$TracerMode"");
    Node node1 = new Node(37, 48, 1);
    node1.addChildToBack(node0);
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
    nameAnalyzer0.process(node1, node1);
    assertEquals(2, Node.POST_FLAG);
}",0,
project,0,test078,"public void test078() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""window"", ""window"");
    nameAnalyzer0.process(node0, node0);
    assertEquals(45, Node.IS_VAR_ARGS_PARAM);
}",0,
project,0,test089,"public void test089() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""com.google.javascript.jscomp.NameAnalyzer$ReferencePropagationCallback"", ""com.google.javascript.jscomp.NameAnalyzer$ReferencePropagationCallback"");
    nameAnalyzer0.process(node0, node0);
    assertTrue(node0.hasChildren());
}",0,assertFalse(node0.hasChildren())
project,0,test0910,"public void test0910() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = new Node(118);
    Node node1 = compiler0.parseSyntheticCode(""Pq0"", ""Pq0"");
    node0.addChildToBack(node1);
    // Undeclared exception!
    try {
        nameAnalyzer0.process(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test1011,"public void test1011() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(114, 114, 114);
    Node node1 = new Node(115);
    node0.addChildToBack(node1);
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
    // Undeclared exception!
    try {
        nameAnalyzer0.process(node1, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test1112,"public void test1112() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node((-1791368267));
    Node node1 = new Node(4);
    node1.addChildToBack(node0);
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    nameAnalyzer0.process(node0, node1);
    assertFalse(node0.isLabelName());
}",0,assertTrue(node0.isLabelName())
project,0,test1213,"public void test1213() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
    Node node0 = new Node(103, 103, 103);
    Node node1 = new Node(49, node0, node0, 8, 42);
    nameAnalyzer0.process(node1, node1);
    assertEquals(29, Node.JSDOC_INFO_PROP);
}",0,
project,0,test1314,"public void test1314() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = new Node(108, 108, 108);
    Node node1 = Node.newNumber((double) 16, 0, 49);
    node0.addChildToBack(node1);
    nameAnalyzer0.process(node1, node0);
    assertEquals(54, Node.LAST_PROP);
}",0,
project,0,test1415,"public void test1415() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = new Node(113);
    Node node1 = new Node(113);
    node1.addChildToBack(node0);
    nameAnalyzer0.process(node1, node1);
    assertEquals(45, Node.IS_VAR_ARGS_PARAM);
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
    Node node0 = new Node(119);
    Node node1 = new Node(8);
    node0.addChildToBack(node1);
    nameAnalyzer0.process(node0, node0);
    assertEquals(54, Node.LAST_PROP);
}",0,
project,0,test1617,"public void test1617() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = new Node(111);
    Node node1 = Node.newNumber((double) 30, 4, 46);
    node0.addChildToBack(node1);
    nameAnalyzer0.process(node0, node0);
    assertFalse(node0.isString());
}",0,assertTrue(node0.isString())
project,0,test1718,"public void test1718() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = new Node(114);
    Node node1 = new Node(114);
    Node node2 = new Node(110, node0, node1, node0, node1, 12, 54);
    nameAnalyzer0.process(node0, node2);
    assertFalse(node2.hasOneChild());
}",0,assertFalse(node2.hasOneChild())
project,0,test1819,"public void test1819() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = new Node(114);
    Node node1 = new Node(35);
    node0.addChildToBack(node1);
    // Undeclared exception!
    try {
        nameAnalyzer0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test1920,"public void test1920() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(97);
    Node node1 = new Node(0);
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node2 = new Node(114, node0, node0, node0, node1, 37, 42);
    nameAnalyzer0.process(node2, node2);
    assertFalse(node2.isThrow());
}",0,
project,0,test2021,"public void test2021() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""var t"", ""var t"");
    Node node1 = new Node(16, node0);
    nameAnalyzer0.process(node0, node1);
    nameAnalyzer0.process(node1, node1);
    assertFalse(node1.isRegExp());
}",0,assertTrue(node1.isRegExp())
project,0,test2122,"public void test2122() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(148, ""FB"");
    Node node1 = new Node(16, node0);
    Node node2 = new Node(38, node1);
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, false);
    // Undeclared exception!
    try {
        nameAnalyzer0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test2223,"public void test2223() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""var t;"", ""var t;"");
    nameAnalyzer0.process(node0, node0);
    assertEquals(1, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test2224,"public void test2224() throws Throwable {
    Compiler compiler0 = new Compiler();
    NameAnalyzer nameAnalyzer0 = new NameAnalyzer(compiler0, true);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""var t;"", ""var t;"");
    nameAnalyzer0.process(node0, node0);
    String string0 = nameAnalyzer0.getHtmlReport();
    assertEquals(""<html><body><style type=\""text/css\"">body, td, p {font-family: Arial; font-size: 83%} ul {margin-top:2px; margin-left:0px; padding-left:1em;} li {margin-top:3px; margin-left:24px; padding-left:0px;padding-bottom: 4px}</style>OVERALL STATS<ul><li>Total Names: 2</li>\n<li>Total Classes: 0</li>\n<li>Total Static Functions: 2</li>\n<li>Referenced Names: 2</li>\n<li>Referenced Classes: 0</li>\n<li>Referenced Functions: 2</li>\n</ul>ALL NAMES<ul>\n<li><a name=\""Function\"">Function</a><ul></li></ul></li><li><a name=\""t\"">t</a><ul></li></ul></li><li><a name=\""window\"">window</a><ul></li></ul></li></ul></body></html>"", string0);
}",0,
