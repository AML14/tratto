project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
    Node node0 = Node.newString("""");
    Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
    assertEquals(46, Node.IS_NAMESPACE);
}",0,
project,0,test11,"public void test11() throws Throwable {
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
    Node node0 = new Node(37);
    Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
    assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
}",0,
project,0,test22,"public void test22() throws Throwable {
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
    Node node0 = new Node(37);
    Node node1 = new Node(33, node0, node0, 47, 1);
    node0.addChildrenToFront(node1);
    Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
    assertNotNull(node2);
}",0,
project,0,test23,"public void test23() throws Throwable {
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
    Node node0 = new Node(37);
    Node node1 = new Node(33, node0, node0, 47, 1);
    node0.addChildrenToFront(node1);
    Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
    assertEquals(37, node2.getType());
}",0,
project,0,test34,"public void test34() throws Throwable {
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
    Node node0 = new Node(37);
    node0.addChildrenToFront(node0);
    Compiler compiler0 = new Compiler();
    OperaCompoundAssignFix operaCompoundAssignFix0 = new OperaCompoundAssignFix(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, operaCompoundAssignFix0);
    peepholeReplaceKnownMethods0.beginTraversal(nodeTraversal0);
    Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
    assertEquals((-3), Node.LOCAL_BLOCK_PROP);
}",0,
project,0,test45,"public void test45() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    node0.addChildrenToFront(node0);
    Compiler compiler0 = new Compiler();
    OperaCompoundAssignFix operaCompoundAssignFix0 = new OperaCompoundAssignFix(compiler0);
    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, operaCompoundAssignFix0);
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
    peepholeReplaceKnownMethods0.beginTraversal(nodeTraversal0);
    Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
    assertEquals(21, Node.LOCALCOUNT_PROP);
}",0,
project,0,test56,"public void test56() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    Node node1 = new Node(38, node0, node0, node0, 46, 31);
    node0.addChildrenToFront(node1);
    Compiler compiler0 = new Compiler();
    OperaCompoundAssignFix operaCompoundAssignFix0 = new OperaCompoundAssignFix(compiler0);
    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;
    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, operaCompoundAssignFix0);
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
    peepholeReplaceKnownMethods0.beginTraversal(nodeTraversal0);
    // Undeclared exception!
    try {
        peepholeReplaceKnownMethods0.optimizeSubtree(node0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NAME 46 is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test67,"public void test67() throws Throwable {
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
    Node node0 = new Node(37);
    Node node1 = new Node(43);
    node0.addChildrenToFront(node1);
    Node node2 = new Node(33, node0, node0, 47, 1);
    node0.addChildrenToFront(node2);
    Node node3 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
    assertNotNull(node3);
}",0,
project,0,test68,"public void test68() throws Throwable {
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
    Node node0 = new Node(37);
    Node node1 = new Node(43);
    node0.addChildrenToFront(node1);
    Node node2 = new Node(33, node0, node0, 47, 1);
    node0.addChildrenToFront(node2);
    Node node3 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
    assertEquals((-1), node3.getCharno());
}",0,
project,0,test79,"public void test79() throws Throwable {
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
    Node node0 = new Node(37);
    Node node1 = new Node(53);
    node0.addChildrenToFront(node1);
    Node node2 = new Node(33, node0, node0, 47, 1);
    node0.addChildrenToFront(node2);
    Node node3 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
    assertNotNull(node3);
}",0,
project,0,test710,"public void test710() throws Throwable {
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods();
    Node node0 = new Node(37);
    Node node1 = new Node(53);
    node0.addChildrenToFront(node1);
    Node node2 = new Node(33, node0, node0, 47, 1);
    node0.addChildrenToFront(node2);
    Node node3 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
    assertEquals(2, node3.getChildCount());
}",0,
