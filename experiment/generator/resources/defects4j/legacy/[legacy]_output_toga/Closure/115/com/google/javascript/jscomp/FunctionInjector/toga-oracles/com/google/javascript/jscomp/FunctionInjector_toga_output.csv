project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    // Undeclared exception!
    try {
        functionInjector0.maybePrepareCall((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.FunctionInjector"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Node node0 = Node.newString(""VAR_DECL_SIMPLE_ASSIGNMENT"", 55, 39);
    Node node1 = new Node(4095, node0, node0, node0, node0);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
    // Undeclared exception!
    try {
        functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node1, (Node) null, linkedHashSet0, functionInjector_InliningMode0, false, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.FunctionInjector"", e);
    }
}",0,
project,0,test032,"public void test032() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
    Node node0 = Node.newString(""jvAUE<"", (-596), (-596));
    Node node1 = new Node((-596), node0, node0, node0, node0, 48, 52);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
    // Undeclared exception!
    try {
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, set0, functionInjector_InliningMode0, false, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test043,"public void test043() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
    // Undeclared exception!
    try {
        functionInjector0.inline((Node) null, ""g$ oP"", (Node) null, functionInjector_InliningMode0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.FunctionInjector"", e);
    }
}",0,
project,0,test054,"public void test054() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
    // Undeclared exception!
    try {
        functionInjector0.inline((Node) null, ""?bvr.2jH+#Ma"", (Node) null, functionInjector_InliningMode0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.FunctionInjector"", e);
    }
}",0,
project,0,test065,"public void test065() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    Node node0 = Node.newString(2929, ""; "");
    Node node1 = new Node(4095, node0, node0, node0);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    Node node2 = new Node(4, node1);
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    // Undeclared exception!
    try {
        functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node1, node2, compilerOptions0.stripNamePrefixes, functionInjector_InliningMode0, false, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test076,"public void test076() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, true);
    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
    boolean boolean0 = functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, true, true);
    assertTrue(boolean0);
}",0,
project,0,test087,"public void test087() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    JSModule jSModule0 = new JSModule("":M=HTm<-9\"",An%p"");
    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of();
    boolean boolean0 = functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, (Set<String>) null, true, true);
    assertTrue(boolean0);
}",0,
project,0,test098,"public void test098() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
    JSModule jSModule0 = new JSModule("""");
    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
    InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
    Set<String> set0 = inlineSimpleMethods0.externMethods;
    // Undeclared exception!
    try {
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set0, true, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test109,"public void test109() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    JSModule jSModule0 = new JSModule(""AFTER_PREPARATION"");
    // Undeclared exception!
    try {
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, linkedHashSet0, true, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test1110,"public void test1110() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
    JSModule jSModule0 = new JSModule((String) null);
    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    JSModule jSModule1 = new JSModule((String) null);
    // Undeclared exception!
    try {
        functionInjector0.inliningLowersCost(jSModule1, (Node) null, immutableList0, linkedHashSet0, true, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.FunctionInjector"", e);
    }
}",0,
project,0,test1211,"public void test1211() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
    // Undeclared exception!
    try {
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, false, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test1312,"public void test1312() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
    // Undeclared exception!
    try {
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, true, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test1413,"public void test1413() throws Throwable {
    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
    functionInjector0.setKnownConstants(set0);
    // Undeclared exception!
    try {
        functionInjector0.setKnownConstants(set0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
