project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, ""U\""(.s>>e#=*>"");
    JSModule jSModule0 = processCommonJSModules0.getModule();
    assertNull(jSModule0);
}",0,assertNotNull(jSModule0)
project,0,test21,"public void test21() throws Throwable {
    Compiler compiler0 = new Compiler();
    ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, ""S)(o.R!-j`Km/"");
    String string0 = processCommonJSModules0.guessCJSModuleName(""S)(o.R!-j`Km/"");
    assertEquals(""module$"", string0);
}",0,assertNotNull(string0)
project,0,test32,"public void test32() throws Throwable {
    String string0 = ProcessCommonJSModules.toModuleName(""./'="", ""./'="");
    assertEquals(""module$'="", string0);
}",0,
project,0,test43,"public void test43() throws Throwable {
    // Undeclared exception!
    try {
        ProcessCommonJSModules.toModuleName(""..//"", ""_5.`A1tl{d2"");
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.net.URISyntaxException: Illegal character in path at index 3: _5.`A1tl{d2
        //
        verifyException(""com.google.javascript.jscomp.ProcessCommonJSModules"", e);
    }
}",0,
project,0,test54,"public void test54() throws Throwable {
    String string0 = ProcessCommonJSModules.toModuleName(""c~n"", ""c~n"");
    assertEquals(""module$c~n"", string0);
}",0,
project,0,test65,"public void test65() throws Throwable {
    Compiler compiler0 = new Compiler();
    ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, ""/A=F2+tB"");
    Node node0 = compiler0.parseTestCode(""./"");
    Node node1 = new Node(37, node0, 2, (-135791284));
    processCommonJSModules0.process(node1, node1);
    assertFalse(node1.isBlock());
}",0,assertTrue(node1.isBlock())
project,0,test76,"public void test76() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""P1H'-{xTS."");
    SourceFile sourceFile0 = SourceFile.fromFile(""./"");
    Node node1 = compiler0.parse(sourceFile0);
    node0.addChildrenToBack(node1);
    ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, ""\n"", false);
    // Undeclared exception!
    try {
        processCommonJSModules0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // ProcessCommonJSModules supports only one invocation per CompilerInput / script node
        //   Node(SCRIPT): [testcode]:-1:-1
        // [source unknown]
        //   Parent: NULL
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test87,"public void test87() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""exports"");
    ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, ""<>|=b_E$>8]"");
    processCommonJSModules0.process(node0, node0);
    assertFalse(node0.isComma());
}",0,assertTrue(node0.isComma())
project,0,test98,"public void test98() throws Throwable {
    Compiler compiler0 = new Compiler();
    ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, ""module$exports"");
    Node node0 = compiler0.parseTestCode(""./"");
    processCommonJSModules0.process(node0, node0);
    node0.setSourceFileForTesting(""./"");
    processCommonJSModules0.process(node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
