/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 03 22:15:40 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "U\"(.s>>e#=*>");
        JSModule jSModule0 = processCommonJSModules0.getModule();
        assertNotNull(jSModule0);
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "S)(o.R!-j`Km/");
        String string0 = processCommonJSModules0.guessCJSModuleName("S)(o.R!-j`Km/");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        String string0 = ProcessCommonJSModules.toModuleName("./'=", "./'=");
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        ProcessCommonJSModules.toModuleName("..//", "_5.`A1tl{d2");
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        String string0 = ProcessCommonJSModules.toModuleName("c~n", "c~n");
    }

    @Test(timeout = 4000)
    public void test65() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "/A=F2+tB");
        Node node0 = compiler0.parseTestCode("./");
        Node node1 = new Node(37, node0, 2, (-135791284));
        processCommonJSModules0.process(node1, node1);
        node1.isBlock();
        assertTrue(node1.isBlock());
    }

    @Test(timeout = 4000)
    public void test76() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("P1H'-{xTS.");
        SourceFile sourceFile0 = SourceFile.fromFile("./");
        Node node1 = compiler0.parse(sourceFile0);
        node0.addChildrenToBack(node1);
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "\n", false);
        processCommonJSModules0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test87() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("exports");
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "<>|=b_E$>8]");
        processCommonJSModules0.process(node0, node0);
        node0.isComma();
        assertTrue(node0.isComma());
    }

    @Test(timeout = 4000)
    public void test98() throws Throwable {
        Compiler compiler0 = new Compiler();
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "module$exports");
        Node node0 = compiler0.parseTestCode("./");
        processCommonJSModules0.process(node0, node0);
        node0.setSourceFileForTesting("./");
        processCommonJSModules0.process(node0, node0);
        compiler0.getErrorCount();
    }
}
