project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    assertFalse(nullType0.isAllType());
}",0,
project,0,test001,"public void test001() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    assertFalse(nullType0.isEmptyType());
}",0,assertTrue(nullType0.isEmptyType())
project,0,test002,"public void test002() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    assertFalse(nullType0.isRecordType());
}",0,assertTrue(nullType0.isRecordType())
project,0,test003,"public void test003() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    nullType0.getTypesUnderShallowEquality(nullType0);
    assertFalse(nullType0.isResolved());
}",0,
project,0,test014,"public void test014() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
    UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
    boolean boolean0 = unionType0.isResolved();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test025,"public void test025() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    boolean boolean0 = unknownType0.isStringValueType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test026,"public void test026() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    boolean boolean0 = unknownType0.isStringValueType();
    assertFalse(unknownType0.isResolved());
}",0,
project,0,test037,"public void test037() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isBooleanObjectType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test038,"public void test038() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isBooleanObjectType();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test049,"public void test049() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    nullType0.getJSDocInfo();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test0510,"public void test0510() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    String string0 = nullType0.toDebugHashCodeString();
    assertFalse(nullType0.isResolved());
}",0,assertFalse(nullType0.isResolved())
project,0,test0511,"public void test0511() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    String string0 = nullType0.toDebugHashCodeString();
    assertEquals(""{1}"", string0);
}",0,assertNotNull(string0)
project,0,test0612,"public void test0612() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isRegexpType();
    assertFalse(boolean0);
}",0,
project,0,test0613,"public void test0613() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isRegexpType();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test0714,"public void test0714() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    // Undeclared exception!
    try {
        nullType0.isString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test0815,"public void test0815() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isDateType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0816,"public void test0816() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isDateType();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test0917,"public void test0917() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noObjectType0);
    assertTrue(noObjectType0.hasCachedValues());
}",0,assertTrue(noObjectType0.hasCachedValues())
project,0,test0918,"public void test0918() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noObjectType0);
    jSType0.getTypesUnderEquality(noObjectType0);
    assertFalse(noObjectType0.isVoidType());
}",0,assertTrue(noObjectType0.isVoidType())
project,0,test1019,"public void test1019() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isStringObjectType();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test1020,"public void test1020() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isStringObjectType();
    assertFalse(boolean0);
}",0,
project,0,test1121,"public void test1121() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""IjEkeL]}N]vpO"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, ""Named type with empty name component"");
    boolean boolean0 = enumElementType0.matchesObjectContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1122,"public void test1122() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""IjEkeL]}N]vpO"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, arrowType0, ""Named type with empty name component"");
    boolean boolean0 = enumElementType0.matchesObjectContext();
    assertFalse(enumElementType0.isResolved());
}",0,assertTrue(enumElementType0.isResolved())
project,0,test1223,"public void test1223() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isNumberObjectType();
    assertFalse(boolean0);
}",0,
project,0,test1224,"public void test1224() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isNumberObjectType();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test1325,"public void test1325() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""R-l|d*+"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.matchesStringContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1326,"public void test1326() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""R-l|d*+"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.matchesStringContext();
    assertFalse(arrowType0.isResolved());
}",0,assertTrue(arrowType0.isResolved())
project,0,test1427,"public void test1427() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    nullType0.unboxesTo();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test1528,"public void test1528() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, ""Unknown class name"");
    boolean boolean0 = nullType0.canTestForEqualityWith(enumElementType0);
    assertTrue(enumElementType0.hasCachedValues());
}",0,
project,0,test1529,"public void test1529() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, ""Unknown class name"");
    boolean boolean0 = nullType0.canTestForEqualityWith(enumElementType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1630,"public void test1630() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""@kM3iq[dpI1#d`9~5"");
    boolean boolean0 = templateType0.isConstructor();
    assertFalse(boolean0);
}",0,
project,0,test1631,"public void test1631() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""@kM3iq[dpI1#d`9~5"");
    boolean boolean0 = templateType0.isConstructor();
    assertFalse(templateType0.isResolved());
}",0,assertTrue(templateType0.isResolved())
project,0,test1732,"public void test1732() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isArrayType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1733,"public void test1733() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isArrayType();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test1834,"public void test1834() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isBooleanValueType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1835,"public void test1835() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isBooleanValueType();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test1936,"public void test1936() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.canBeCalled();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1937,"public void test1937() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.canBeCalled();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test2038,"public void test2038() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    // Undeclared exception!
    try {
        nullType0.isNumber();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test2139,"public void test2139() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.isTemplateType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test2140,"public void test2140() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.isTemplateType();
    assertFalse(errorFunctionType0.isResolved());
}",0,assertFalse(errorFunctionType0.isResolved())
project,0,test2241,"public void test2241() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.isOrdinaryFunction();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2242,"public void test2242() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.isOrdinaryFunction();
    assertFalse(templateType0.isResolved());
}",0,assertTrue(templateType0.isResolved())
project,0,test2343,"public void test2343() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(nullType0);
    JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
    nullType0.getTypesUnderEquality(jSType1);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test2344,"public void test2344() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(nullType0);
    JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
    nullType0.getTypesUnderEquality(jSType1);
    assertTrue(jSType1.isEmptyType());
}",0,assertTrue(jSType1.isEmptyType())
project,0,test2445,"public void test2445() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    boolean boolean0 = nullType0.isNamedType();
    assertFalse(nullType0.isResolved());
}",0,
project,0,test2446,"public void test2446() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    boolean boolean0 = nullType0.isNamedType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2547,"public void test2547() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    ObjectType objectType0 = numberType0.dereference();
    assertFalse(objectType0.isResolved());
}",0,assertTrue(objectType0.isResolved())
project,0,test2548,"public void test2548() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    ObjectType objectType0 = numberType0.dereference();
    assertNotNull(objectType0);
}",0,assertNotNull(objectType0)
project,0,test2649,"public void test2649() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    nullType0.matchesInt32Context();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test2750,"public void test2750() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Unknown class name"", (-523), (-523));
    boolean boolean0 = namedType0.isInterface();
    assertFalse(boolean0);
}",0,
project,0,test2751,"public void test2751() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Unknown class name"", (-523), (-523));
    boolean boolean0 = namedType0.isInterface();
    assertFalse(namedType0.isResolved());
}",0,assertTrue(namedType0.isResolved())
project,0,test2852,"public void test2852() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isInstanceType();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test2853,"public void test2853() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isInstanceType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2954,"public void test2954() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noType0);
    boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test2955,"public void test2955() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noType0);
    boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
    assertFalse(proxyObjectType0.isResolved());
}",0,assertTrue(proxyObjectType0.isResolved())
project,0,test2956,"public void test2956() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noType0);
    boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
    assertFalse(boolean0);
}",0,
project,0,test3057,"public void test3057() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test3058,"public void test3058() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    nullType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    assertTrue(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test3159,"public void test3159() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isTheObjectType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3160,"public void test3160() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isTheObjectType();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test3261,"public void test3261() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
    assertFalse(objectType0.isFunctionType());
}",0,
project,0,test3262,"public void test3262() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
    JSType jSType0 = objectType0.getGreatestSubtype(errorFunctionType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test3263,"public void test3263() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
    JSType jSType0 = objectType0.getGreatestSubtype(errorFunctionType0);
    assertTrue(jSType0.isEmptyType());
}",0,assertTrue(jSType0.isEmptyType())
project,0,test3264,"public void test3264() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
    JSType jSType0 = objectType0.getGreatestSubtype(errorFunctionType0);
    assertFalse(errorFunctionType0.isNominalType());
}",0,assertTrue(errorFunctionType0.isNominalType())
project,0,test3365,"public void test3365() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    nullType0.matchesUint32Context();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test3466,"public void test3466() throws Throwable {
    AllType allType0 = new AllType((JSTypeRegistry) null);
    boolean boolean0 = allType0.matchesNumberContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3467,"public void test3467() throws Throwable {
    AllType allType0 = new AllType((JSTypeRegistry) null);
    boolean boolean0 = allType0.matchesNumberContext();
    assertFalse(allType0.isResolved());
}",0,assertTrue(allType0.isResolved())
project,0,test3568,"public void test3568() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "">A^X:rb@:"");
    boolean boolean0 = templateType0.isEnumType();
    assertFalse(templateType0.isResolved());
}",0,assertTrue(templateType0.isResolved())
project,0,test3569,"public void test3569() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "">A^X:rb@:"");
    boolean boolean0 = templateType0.isEnumType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3670,"public void test3670() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isNumberValueType();
    assertFalse(boolean0);
}",0,
project,0,test3671,"public void test3671() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.isNumberValueType();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test3772,"public void test3772() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    nullType0.forgiveUnknownNames();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test3873,"public void test3873() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    nullType0.clearResolved();
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test3974,"public void test3974() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, noType0);
    boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
    assertFalse(parameterizedType0.isResolved());
}",0,assertTrue(parameterizedType0.isResolved())
project,0,test3975,"public void test3975() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, noType0);
    boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3976,"public void test3976() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, noType0);
    boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test4077,"public void test4077() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
    ((UnionType) jSType0).toString();
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test4178,"public void test4178() throws Throwable {
    boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4279,"public void test4279() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = JSType.isEquivalent(nullType0, (JSType) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4280,"public void test4280() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = JSType.isEquivalent(nullType0, (JSType) null);
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test4381,"public void test4381() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    JSType.isEquivalent(nullType0, nullType0);
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test4482,"public void test4482() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.equals((Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4483,"public void test4483() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.equals((Object) null);
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test4584,"public void test4584() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    nullType0.equals(numberType0);
    assertFalse(numberType0.isResolved());
}",0,assertTrue(numberType0.isResolved())
project,0,test4585,"public void test4585() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    nullType0.equals(numberType0);
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test4686,"public void test4686() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    nullType0.findPropertyType(""Not declared as a type name"");
    assertFalse(nullType0.isResolved());
}",0,
project,0,test4787,"public void test4787() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    stringType0.findPropertyType(""TYPE_ERROR_FUNCTION_TYPE"");
    assertFalse(stringType0.isResolved());
}",0,assertTrue(stringType0.isResolved())
project,0,test4888,"public void test4888() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    StringType stringType0 = new StringType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.canAssignTo(stringType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4889,"public void test4889() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    StringType stringType0 = new StringType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.canAssignTo(stringType0);
    assertFalse(stringType0.isResolved());
}",0,assertFalse(stringType0.isResolved())
project,0,test4990,"public void test4990() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.canAssignTo(nullType0);
    assertTrue(boolean0);
}",0,
project,0,test4991,"public void test4991() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.canAssignTo(nullType0);
    assertFalse(nullType0.isResolved());
}",0,
project,0,test5092,"public void test5092() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    ObjectType objectType0 = nullType0.dereference();
    assertTrue(objectType0.isEmptyType());
}",0,assertTrue(objectType0.isEmptyType())
project,0,test5093,"public void test5093() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    ObjectType objectType0 = nullType0.dereference();
    assertNotNull(objectType0);
}",0,assertNotNull(objectType0)
project,0,test5094,"public void test5094() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    ObjectType objectType0 = nullType0.dereference();
    assertFalse(objectType0.isResolved());
}",0,assertTrue(objectType0.isResolved())
project,0,test5195,"public void test5195() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    AllType allType0 = new AllType((JSTypeRegistry) null);
    nullType0.getTypesUnderEquality(allType0);
    assertFalse(allType0.isResolved());
}",0,assertTrue(allType0.isResolved())
project,0,test5196,"public void test5196() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    AllType allType0 = new AllType((JSTypeRegistry) null);
    nullType0.getTypesUnderEquality(allType0);
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test5297,"public void test5297() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    nullType0.getTypesUnderInequality(unknownType0);
    assertFalse(unknownType0.isResolved());
}",0,assertTrue(unknownType0.isResolved())
project,0,test5298,"public void test5298() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    nullType0.getTypesUnderInequality(unknownType0);
    assertFalse(nullType0.isResolved());
}",0,
project,0,test5399,"public void test5399() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
    numberType0.testForEquality(jSType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test53100,"public void test53100() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
    numberType0.testForEquality(jSType0);
    assertFalse(numberType0.isResolved());
}",0,assertTrue(numberType0.isResolved())
project,0,test54101,"public void test54101() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(voidType0);
    voidType0.testForEquality(jSType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test54102,"public void test54102() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(voidType0);
    voidType0.testForEquality(jSType0);
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test55103,"public void test55103() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    AllType allType0 = new AllType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.canTestForShallowEqualityWith(allType0);
    assertFalse(allType0.isResolved());
}",0,assertTrue(allType0.isResolved())
project,0,test55104,"public void test55104() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    AllType allType0 = new AllType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.canTestForShallowEqualityWith(allType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test56105,"public void test56105() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, ""Named type with empty name component"");
    boolean boolean0 = nullType0.canTestForShallowEqualityWith(enumElementType0);
    assertTrue(enumElementType0.hasCachedValues());
}",0,assertTrue(enumElementType0.hasCachedValues())
project,0,test56106,"public void test56106() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, ""Named type with empty name component"");
    boolean boolean0 = nullType0.canTestForShallowEqualityWith(enumElementType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test57107,"public void test57107() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    NullType nullType1 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType1.canTestForShallowEqualityWith(nullType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test57108,"public void test57108() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    NullType nullType1 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType1.canTestForShallowEqualityWith(nullType0);
    assertFalse(nullType1.isResolved());
}",0,assertFalse(nullType1.isResolved())
project,0,test58109,"public void test58109() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    AllType allType0 = new AllType((JSTypeRegistry) null);
    JSType jSType0 = nullType0.getLeastSupertype(allType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test59110,"public void test59110() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
    UnionType unionType0 = new UnionType((JSTypeRegistry) null, linkedHashSet0);
    // Undeclared exception!
    try {
        nullType0.getLeastSupertype(unionType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.JSType"", e);
    }
}",0,
project,0,test60111,"public void test60111() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = JSType.getLeastSupertype((JSType) noType0, (JSType) noType0);
    assertSame(jSType0, noType0);
}",0,
project,0,test60112,"public void test60112() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = JSType.getLeastSupertype((JSType) noType0, (JSType) noType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test61113,"public void test61113() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    JSType jSType0 = stringType0.getGreatestSubtype(recordType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test61114,"public void test61114() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    JSType jSType0 = stringType0.getGreatestSubtype(recordType0);
    assertTrue(jSType0.isEmptyType());
}",0,assertTrue(jSType0.isEmptyType())
project,0,test62115,"public void test62115() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = JSType.getGreatestSubtype((JSType) noObjectType0, (JSType) noObjectType0);
    assertFalse(jSType0.isResolved());
}",0,
project,0,test62116,"public void test62116() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = JSType.getGreatestSubtype((JSType) noObjectType0, (JSType) noObjectType0);
    assertTrue(jSType0.isEmptyType());
}",0,assertTrue(jSType0.isEmptyType())
project,0,test63117,"public void test63117() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    JSType jSType0 = JSType.getGreatestSubtype((JSType) allType0, (JSType) allType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test64118,"public void test64118() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
    assertEquals(""??"", unknownType1.getReferenceName());
}",0,
project,0,test64119,"public void test64119() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    UnknownType unknownType1 = (UnknownType) JSType.getGreatestSubtype((JSType) unknownType0, (JSType) unknownType0);
    assertFalse(unknownType1.isResolved());
}",0,
project,0,test65120,"public void test65120() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Named type with empty name component"", 1, 0);
    JSType jSType0 = nullType0.getGreatestSubtype(namedType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test66121,"public void test66121() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, ""Unknown class name"");
    nullType0.getGreatestSubtype(enumElementType0);
    assertTrue(enumElementType0.hasCachedValues());
}",0,
project,0,test66122,"public void test66122() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    EnumElementType enumElementType0 = new EnumElementType((JSTypeRegistry) null, nullType0, ""Unknown class name"");
    nullType0.getGreatestSubtype(enumElementType0);
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test67123,"public void test67123() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
    Node node0 = Node.newString(1, ""Not declared as a type name"", 0, 2);
    ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, nullType0, false);
    JSType jSType1 = JSType.getGreatestSubtype(jSType0, (JSType) arrowType0);
    assertTrue(jSType1.isEmptyType());
}",0,assertTrue(jSType1.isEmptyType())
project,0,test67124,"public void test67124() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
    Node node0 = Node.newString(1, ""Not declared as a type name"", 0, 2);
    ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, nullType0, false);
    JSType jSType1 = JSType.getGreatestSubtype(jSType0, (JSType) arrowType0);
    assertFalse(jSType1.isResolved());
}",0,assertTrue(jSType1.isResolved())
project,0,test68125,"public void test68125() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    NullType nullType1 = new NullType((JSTypeRegistry) null);
    // Undeclared exception!
    try {
        nullType1.getGreatestSubtype(nullType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test69126,"public void test69126() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    // Undeclared exception!
    try {
        nullType0.getRestrictedTypeGivenToBooleanOutcome(true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test70127,"public void test70127() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    JSType jSType0 = nullType0.getRestrictedTypeGivenToBooleanOutcome(false);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test71128,"public void test71128() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(nullType0);
    nullType0.getTypesUnderEquality(jSType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test71129,"public void test71129() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(nullType0);
    nullType0.getTypesUnderEquality(jSType0);
    assertFalse(nullType0.isResolved());
}",0,
project,0,test72130,"public void test72130() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(nullType0);
    nullType0.getTypesUnderInequality(jSType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test72131,"public void test72131() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(nullType0);
    nullType0.getTypesUnderInequality(jSType0);
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test73132,"public void test73132() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    nullType0.getTypesUnderInequality(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test74133,"public void test74133() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    voidType0.getTypesUnderShallowInequality(voidType0);
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test74134,"public void test74134() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    voidType0.getTypesUnderShallowInequality(voidType0);
    assertFalse(voidType0.isNullType());
}",0,assertTrue(voidType0.isNullType())
project,0,test75135,"public void test75135() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
    nullType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(jSType0.isVoidType());
}",0,
project,0,test75136,"public void test75136() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
    nullType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test75137,"public void test75137() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
    nullType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(jSType0.isNullType());
}",0,
project,0,test75138,"public void test75138() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(nullType0);
    nullType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test76139,"public void test76139() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    nullType0.getTypesUnderShallowInequality(voidType0);
    assertFalse(nullType0.isVoidType());
}",0,assertTrue(nullType0.isVoidType())
project,0,test76140,"public void test76140() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    nullType0.getTypesUnderShallowInequality(voidType0);
    assertFalse(voidType0.isNullType());
}",0,assertTrue(voidType0.isNullType())
project,0,test76141,"public void test76141() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    VoidType voidType0 = new VoidType((JSTypeRegistry) null);
    nullType0.getTypesUnderShallowInequality(voidType0);
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test77142,"public void test77142() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Named type with empty name component"", 1, 0);
    boolean boolean0 = namedType0.differsFrom(nullType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test77143,"public void test77143() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Named type with empty name component"", 1, 0);
    boolean boolean0 = namedType0.differsFrom(nullType0);
    assertFalse(namedType0.isResolved());
}",0,assertTrue(namedType0.isResolved())
project,0,test78144,"public void test78144() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    boolean boolean0 = nullType0.differsFrom(unknownType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test78145,"public void test78145() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
    boolean boolean0 = nullType0.differsFrom(unknownType0);
    assertFalse(unknownType0.isResolved());
}",0,assertTrue(unknownType0.isResolved())
project,0,test79146,"public void test79146() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.differsFrom(nullType0);
    assertFalse(nullType0.isResolved());
}",0,assertTrue(nullType0.isResolved())
project,0,test79147,"public void test79147() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.differsFrom(nullType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test80148,"public void test80148() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    AllType allType0 = new AllType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.differsFrom(allType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test80149,"public void test80149() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    AllType allType0 = new AllType((JSTypeRegistry) null);
    boolean boolean0 = nullType0.differsFrom(allType0);
    assertFalse(allType0.isResolved());
}",0,assertTrue(allType0.isResolved())
project,0,test81150,"public void test81150() throws Throwable {
    UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test81151,"public void test81151() throws Throwable {
    UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
    boolean boolean0 = JSType.isSubtype((JSType) unknownType0, (JSType) unknownType0);
    assertFalse(unknownType0.isResolved());
}",0,assertTrue(unknownType0.isResolved())
project,0,test82152,"public void test82152() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, ""Named type with empty name component"");
    objectType0.getTypesUnderEquality(enumElementType0);
    assertTrue(enumElementType0.hasCachedValues());
}",0,assertFalse(enumElementType0.hasCachedValues())
project,0,test82153,"public void test82153() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, objectType0, ""Named type with empty name component"");
    objectType0.getTypesUnderEquality(enumElementType0);
    assertTrue(objectType0.hasCachedValues());
}",0,assertTrue(objectType0.hasCachedValues())
project,0,test83154,"public void test83154() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Named type with empty name component"", 1, 0);
    JSType.TypePair jSType_TypePair0 = namedType0.getTypesUnderEquality(nullType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""VE{}$JQ=GG44llaSQ=."");
    JSType[] jSTypeArray0 = new JSType[5];
    namedType0.referencedType = (ObjectType) errorFunctionType0;
    jSTypeArray0[4] = (JSType) namedType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType_TypePair0.typeB, true, jSTypeArray0);
    assertFalse(functionType0.isResolved());
}",0,
project,0,test84155,"public void test84155() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    assertFalse(errorFunctionType0.isResolved());
}",0,
project,0,test84156,"public void test84156() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    EmptyScope emptyScope0 = new EmptyScope();
    errorFunctionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
    assertTrue(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test85157,"public void test85157() throws Throwable {
    NullType nullType0 = new NullType((JSTypeRegistry) null);
    nullType0.setResolvedTypeInternal((JSType) null);
    EmptyScope emptyScope0 = new EmptyScope();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    // Undeclared exception!
    try {
        JSType.safeResolve(nullType0, simpleErrorReporter0, emptyScope0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.JSType"", e);
    }
}",0,
