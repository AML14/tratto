/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 09:03:50 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodeConsumer;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CodeGenerator_ESTest extends CodeGenerator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        String string0 = codeGenerator0.regexpEscape(" *k3(]>z;s<<qjWC<Af");
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        codeGenerator0.tagAsStrict();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        String string0 = codeGenerator0.escapeToDoubleQuotedJsString("\u0001\u0000\u00A0\u0000\u0000\u0000\u0000\u0000\u0000\t\n\u000B\f\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u0000\u202F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000j\u0000\u0000\u0000\u0000\u0000\u0000\u3000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u0000\u0000\u0000\u0000\u0000\u205F\u1680\u0000\u0000\u180E\u0000\u0000\u0000");
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        Node node0 = new Node(105);
        codeGenerator0.addCaseBody(node0);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
        String string0 = codeGenerator0.regexpEscape("`&<!--");
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        double double0 = CodeGenerator.getSimpleNumber("42");
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        boolean boolean0 = CodeGenerator.isSimpleNumber("");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        boolean boolean0 = CodeGenerator.isSimpleNumber("*S6@ruG+&Rz");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        double double0 = CodeGenerator.getSimpleNumber("6");
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        double double0 = CodeGenerator.getSimpleNumber("agudmj*");
    }

    @Test(timeout = 4000)
    public void test1110() throws Throwable {
        Node node0 = new Node(85);
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        codeGenerator0.addArrayList(node0);
    }

    @Test(timeout = 4000)
    public void test1211() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Node node0 = Node.newString("");
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
        CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.STATEMENT;
        codeGenerator0.addList(node0, false, codeGenerator_Context0);
    }

    @Test(timeout = 4000)
    public void test1312() throws Throwable {
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        Node node0 = new Node(9);
        CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
        codeGenerator0.addList(node0, false, codeGenerator_Context0);
    }

    @Test(timeout = 4000)
    public void test1413() throws Throwable {
        Node node0 = new Node(51, 31, 31);
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
        codeGenerator0.addList(node0, false, codeGenerator_Context0);
    }

    @Test(timeout = 4000)
    public void test1514() throws Throwable {
        Node node0 = new Node(110);
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        codeGenerator0.addList(node0);
    }

    @Test(timeout = 4000)
    public void test1715() throws Throwable {
        Node node0 = new Node(93);
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        codeGenerator0.addAllSiblings(node0);
    }

    @Test(timeout = 4000)
    public void test1816() throws Throwable {
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        String string0 = codeGenerator0.escapeToDoubleQuotedJsString("e(X\"U<2BR4XIiz^P!");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1917() throws Throwable {
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        String string0 = codeGenerator0.regexpEscape("<{GI'y|AhulvKHc'TE");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2018() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
        String string0 = codeGenerator0.escapeToDoubleQuotedJsString("fPntNfatm|e=R");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2119() throws Throwable {
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        String string0 = codeGenerator0.escapeToDoubleQuotedJsString("lmmMyy)xT=->%lR");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2220() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
        String string0 = codeGenerator0.regexpEscape("=AGa+");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2321() throws Throwable {
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        String string0 = codeGenerator0.regexpEscape("`&<!--");
    }

    @Test(timeout = 4000)
    public void test2422() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
        String string0 = codeGenerator0.escapeToDoubleQuotedJsString("5i30$do&</scriptz.u");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2523() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
        String string0 = codeGenerator0.escapeToDoubleQuotedJsString("}K2Oq>y");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2624() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
        String string0 = codeGenerator0.regexpEscape("Of4}0{Q>");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2725() throws Throwable {
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        String string0 = codeGenerator0.regexpEscape(">)4o@J)vS J");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test2826() throws Throwable {
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        String string0 = codeGenerator0.regexpEscape("CH[<!-->wSR;");
    }

    @Test(timeout = 4000)
    public void test2927() throws Throwable {
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, compilerOptions0);
        String string0 = codeGenerator0.regexpEscape("</script|?3r^0@");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3028() throws Throwable {
        CodeGenerator codeGenerator0 = CodeGenerator.forCostEstimation((CodeConsumer) null);
        Charset charset0 = Charset.defaultCharset();
        CharsetEncoder charsetEncoder0 = charset0.newEncoder();
        String string0 = codeGenerator0.regexpEscape("!--b~vx", charsetEncoder0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test3129() throws Throwable {
        String string0 = CodeGenerator.identifierEscape("\u0001\u0000\u00A0\u0000\u0000\u0000\u0000\u0000\u0000\t\n\u000B\f\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u202F=\u0000\u0000]\u0000\u0000 \u0000\u0000j\u0000\u0000\u0000\u0000\u0000?\u0000\u0000a\u0000\u0000\u0000\u0000\u0085\u2000\u2001\u2002\u2004\u2005\u2006\u2007\u2008\u2009,\u0000\u0000\u0000\u0000\u0000\u205F\u1680\u0000\u0000\u180E\u0000CV");
    }

    @Test(timeout = 4000)
    public void test3230() throws Throwable {
        String string0 = CodeGenerator.identifierEscape("CE?zqfV.lLj");
    }
}
