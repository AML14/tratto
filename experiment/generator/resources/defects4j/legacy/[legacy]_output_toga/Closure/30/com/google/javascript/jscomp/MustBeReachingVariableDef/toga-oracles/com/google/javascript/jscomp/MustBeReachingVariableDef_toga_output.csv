project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test056,"public void test056() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""1?xQ.Wk>C:W"", ""1?xQ.Wk>C:W"");
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    mustBeReachingVariableDef0.analyze();
    Node node1 = mustBeReachingVariableDef0.getDef(""1?xQ.Wk>C:W"", node0);
    assertNull(node1);
}",0,
project,0,test177,"public void test177() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""arguments"", ""arguments"");
    Node node0 = Node.newString(113, ""arguments"");
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    // Undeclared exception!
    try {
        mustBeReachingVariableDef0.analyze();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.MustBeReachingVariableDef"", e);
    }
}",0,
project,0,test188,"public void test188() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""missing pop2: "");
    Node node1 = new Node(115, node0, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
    Scope scope0 = new Scope(node0, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    // Undeclared exception!
    try {
        mustBeReachingVariableDef0.analyze();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // malformed 'for' statement FOR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test219,"public void test219() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""arHOguments"");
    Node node1 = new Node(118, node0, node0, node0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, false);
    Scope scope0 = new Scope(node1, compiler0);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    // Undeclared exception!
    try {
        mustBeReachingVariableDef0.analyze();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // SCRIPT 1 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000512] [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000513] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000514] is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test3010,"public void test3010() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""1?xQ.Wk>C:W"", ""1?xQ.Wk>C:W"");
    Scope scope0 = new Scope(node0, compiler0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    SyntheticAst syntheticAst0 = new SyntheticAst(""1?xQ.Wk>C:W"");
    InputId inputId0 = node0.getInputId();
    CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, inputId0, true);
    scope0.declare(""1?xQ.Wk>C:W"", node0, (JSType) null, compilerInput0);
    mustBeReachingVariableDef0.analyze();
    Node node1 = mustBeReachingVariableDef0.getDef(""1?xQ.Wk>C:W"", node0);
    assertFalse(node1.isLabelName());
}",0,assertTrue(node1.isLabelName())
project,0,test3111,"public void test3111() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""1?xQ.Wk>C:W"", ""1?xQ.Wk>C:W"");
    Scope scope0 = new Scope(node0, compiler0);
    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
    MustBeReachingVariableDef mustBeReachingVariableDef0 = new MustBeReachingVariableDef(controlFlowGraph0, scope0, compiler0);
    SyntheticAst syntheticAst0 = new SyntheticAst(""1?xQ.Wk>C:W"");
    InputId inputId0 = node0.getInputId();
    CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, inputId0, true);
    scope0.declare(""1?xQ.Wk>C:W"", node0, (JSType) null, compilerInput0);
    mustBeReachingVariableDef0.analyze();
    boolean boolean0 = mustBeReachingVariableDef0.dependsOnOuterScopeVars(""1?xQ.Wk>C:W"", node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
