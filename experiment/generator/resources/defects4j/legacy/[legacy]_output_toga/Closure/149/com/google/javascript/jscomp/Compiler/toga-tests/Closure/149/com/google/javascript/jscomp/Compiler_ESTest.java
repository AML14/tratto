/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 19 23:08:05 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CodeChangeHandler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CssRenamingMap;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.FunctionInformationMap;
import com.google.javascript.jscomp.FunctionNames;
import com.google.javascript.jscomp.GroupVariableDeclarations;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.RecordFunctionInformation;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Compiler_ESTest extends Compiler_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator((String) null, sourceFile_Generator0);
        JSModule[] jSModuleArray0 = new JSModule[2];
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("reduce");
        compiler0.toSource(jSModule0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSourceArray();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.toSource();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule((String) null);
        compiler0.toSourceArray(jSModule0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.stripCode(compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes, compilerOptions0.aliasableStrings, compilerOptions0.stripTypes);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule[] jSModuleArray0 = new JSModule[1];
        compiler0.init((JSSourceFile[]) null, jSModuleArray0, (CompilerOptions) null);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.startPass((String) null);
        compiler0.optimize();
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Level level0 = Level.WARNING;
        Compiler.setLoggingLevel(level0);
        level0.intValue();
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(2892, "");
        compiler0.toSource(node0);
    }

    @Test(timeout = 4000)
    public void test1110() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getCssRenamingMap();
    }

    @Test(timeout = 4000)
    public void test1211() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.hasRegExpGlobalReferences();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1312() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("1hQ=s\"wXj][Vj0F", "1hQ=s\"wXj][Vj0F");
        compiler0.hasErrors();
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test1513() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseTestCode("SdLNj");
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.hasErrors();
        assertTrue(compiler0.hasErrors());
    }

    @Test(timeout = 4000)
    public void test1614() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        compiler0.getErrorCount();
    }

    @Test(timeout = 4000)
    public void test1815() throws Throwable {
        Compiler compiler0 = new Compiler();
        ScopeCreator scopeCreator0 = compiler0.getScopeCreator();
        assertNotNull(scopeCreator0);
    }

    @Test(timeout = 4000)
    public void test1916() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getInputsInOrder();
    }

    @Test(timeout = 4000)
    public void test2017() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.rebuildInputsFromModules();
    }

    @Test(timeout = 4000)
    public void test2118() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.precheck();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2219() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.computeCFG();
    }

    @Test(timeout = 4000)
    public void test2320() throws Throwable {
        Compiler compiler0 = new Compiler();
        boolean boolean0 = compiler0.isNormalized();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2421() throws Throwable {
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        VariableMap variableMap0 = compiler0.getPropertyMap();
        assertNotNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test2522() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parseSyntheticCode("#dHNj");
    }

    @Test(timeout = 4000)
    public void test2623() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.processDefines();
    }

    @Test(timeout = 4000)
    public void test2724() throws Throwable {
        Compiler compiler0 = new Compiler();
        LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.skipAllPasses = true;
        compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
        compiler0.optimize();
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test2825() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.setCssRenamingMap((CssRenamingMap) null);
    }

    @Test(timeout = 4000)
    public void test2926() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getWarningCount();
    }

    @Test(timeout = 4000)
    public void test3027() throws Throwable {
        Compiler compiler0 = new Compiler();
        VariableMap variableMap0 = compiler0.getVariableMap();
        assertNotNull(variableMap0);
    }

    @Test(timeout = 4000)
    public void test3128() throws Throwable {
        Compiler compiler0 = new Compiler();
        FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    }

    @Test(timeout = 4000)
    public void test3229() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.parse();
    }

    @Test(timeout = 4000)
    public void test3330() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        assertNotNull(supplier0);
    }

    @Test(timeout = 4000)
    public void test3431() throws Throwable {
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        compiler0.recordFunctionInformation();
    }

    @Test(timeout = 4000)
    public void test3632() throws Throwable {
        Logger logger0 = Logger.getGlobal();
        LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
        Compiler compiler0 = new Compiler(loggerErrorManager0);
        SourceMap sourceMap0 = compiler0.getSourceMap();
    }

    @Test(timeout = 4000)
    public void test3733() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.isTypeCheckingEnabled();
    }

    @Test(timeout = 4000)
    public void test3834() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.getRoot();
    }

    @Test(timeout = 4000)
    public void test3935() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("ersion");
        PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
        Compiler compiler0 = new Compiler(printStreamErrorManager0);
        List<CompilerInput> list0 = compiler0.getInputsForTesting();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test4036() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
        JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator((String) null, sourceFile_Generator0);
        JSModule[] jSModuleArray0 = new JSModule[2];
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test4337() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getMessages();
    }

    @Test(timeout = 4000)
    public void test4438() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        List<CompilerInput> list0 = compiler0.getExternsForTesting();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test4539() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.removeTryCatchFinally();
    }

    @Test(timeout = 4000)
    public void test4640() throws Throwable {
        Compiler compiler0 = new Compiler();
        Scope scope0 = compiler0.getTopScope();
    }

    @Test(timeout = 4000)
    public void test4741() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLength();
    }

    @Test(timeout = 4000)
    public void test4842() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        String string0 = compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test4943() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getLineIndex();
    }

    @Test(timeout = 4000)
    public void test5044() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        int int0 = compiler_CodeBuilder0.getColumnIndex();
    }

    @Test(timeout = 4000)
    public void test5145() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.reset();
        compiler_CodeBuilder0.toString();
    }

    @Test(timeout = 4000)
    public void test5246() throws Throwable {
        MockPrintStream mockPrintStream0 = new MockPrintStream("[;Iu~}5wsqS8(L[");
        Compiler compiler0 = new Compiler(mockPrintStream0);
        compiler0.initCompilerOptionsIfTesting();
        compiler0.isIdeMode();
        assertTrue(compiler0.isIdeMode());
    }

    @Test(timeout = 4000)
    public void test5347() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compilerOptions0.sourceMapOutputPath = "wf)ALme{[.L*(@h$";
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test5448() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
        compiler0.compileModules(stack0, arrayList0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test5549() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        stack0.add(jSSourceFile0);
        stack0.add(jSSourceFile0);
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test5650() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test5751() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler compiler0 = new Compiler((PrintStream) null);
        compiler0.initCompilerOptionsIfTesting();
        compiler0.toSource(compiler_CodeBuilder0, 52, (Node) null);
    }

    @Test(timeout = 4000)
    public void test5952() throws Throwable {
        Compiler compiler0 = new Compiler();
        PassConfig passConfig0 = compiler0.getPassConfig();
        compiler0.setPassConfig(passConfig0);
    }

    @Test(timeout = 4000)
    public void test6053() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.check();
    }

    @Test(timeout = 4000)
    public void test6154() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.endPass();
    }

    @Test(timeout = 4000)
    public void test6255() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
        compilerOptions0.tracer = compilerOptions_TracerMode0;
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test6356() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        compiler0.areNodesEqualForInlining((Node) null, (Node) null);
    }

    @Test(timeout = 4000)
    public void test6457() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        compiler0.newExternInput((String) null);
        compiler0.newExternInput((String) null);
    }

    @Test(timeout = 4000)
    public void test6558() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        CompilerOptions compilerOptions0 = compiler0.getOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        JsAst jsAst0 = new JsAst(jSSourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
    }

    @Test(timeout = 4000)
    public void test6659() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        SourceFile sourceFile0 = SourceFile.fromFile("");
        JsAst jsAst0 = new JsAst(sourceFile0);
        compiler0.addIncrementalSourceAst(jsAst0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test6760() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
        ReverseAbstractInterpreter reverseAbstractInterpreter1 = compiler0.getReverseAbstractInterpreter();
    }

    @Test(timeout = 4000)
    public void test6861() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        CheckLevel checkLevel0 = CheckLevel.ERROR;
        TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null, checkLevel0, checkLevel0);
        TypeValidator typeValidator0 = compiler0.getTypeValidator();
    }

    @Test(timeout = 4000)
    public void test6962() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
    }

    @Test(timeout = 4000)
    public void test6963() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test7064() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.parseInputs();
        compiler0.getErrorCount();
        assertEquals(0, compiler0.getErrorCount());
    }

    @Test(timeout = 4000)
    public void test7165() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseInputs();
    }

    @Test(timeout = 4000)
    public void test7266() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.parseTestCode("JSC_INTERFACE_METHOD_OVERRIDE");
        node0.hasOneChild();
        assertFalse(node0.hasOneChild());
    }

    @Test(timeout = 4000)
    public void test7367() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("'Q)d;yE4");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("}fn)E@");
    }

    @Test(timeout = 4000)
    public void test7468() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        Compiler.CodeBuilder compiler_CodeBuilder1 = compiler_CodeBuilder0.append("\n");
    }

    @Test(timeout = 4000)
    public void test7569() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        boolean boolean0 = compiler_CodeBuilder0.endsWith("com.google.javascript.jscomp.ConcreteType$TypeFilter");
    }

    @Test(timeout = 4000)
    public void test7670() throws Throwable {
        Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
        compiler_CodeBuilder0.append("K");
        compiler_CodeBuilder0.append("K");
        boolean boolean0 = compiler_CodeBuilder0.endsWith("K");
    }

    @Test(timeout = 4000)
    public void test7771() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
        Stack<JSModule> stack0 = new Stack<JSModule>();
        compiler0.initModules(arrayList0, stack0, compilerOptions0);
        compiler0.optimize();
        compiler0.isTypeCheckingEnabled();
        assertTrue(compiler0.isTypeCheckingEnabled());
    }

    @Test(timeout = 4000)
    public void test7872() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("// Input %num%");
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        boolean boolean0 = compiler0.isInliningForbidden();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test8073() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);
        JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
        Vector<JSType> vector0 = new Vector<JSType>();
        Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
        String[] stringArray0 = new String[3];
        JSError jSError0 = nodeTraversal0.makeError(node0, compilerOptions0.checkProvides, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
        compiler0.report(jSError0);
        compiler0.hasErrors();
    }

    @Test(timeout = 4000)
    public void test8174() throws Throwable {
        Compiler compiler0 = new Compiler((PrintStream) null);
        compiler0.initCompilerOptionsIfTesting();
        Node node0 = Node.newNumber(Double.NaN, 2204, (-2171));
        String[] stringArray0 = new String[7];
        JSError jSError0 = JSError.make("K", node0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
        CheckLevel checkLevel0 = compiler0.getErrorLevel(jSError0);
        assertNotNull(checkLevel0);
    }

    @Test(timeout = 4000)
    public void test8275() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.throwInternalError("ir_&+/W3", (Exception) null);
    }

    @Test(timeout = 4000)
    public void test8376() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        String string0 = compiler0.getSourceLine("", 10);
    }

    @Test(timeout = 4000)
    public void test8477() throws Throwable {
        Compiler compiler0 = new Compiler();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("goog.inherits", "+L6s`H");
        JSSourceFile jSSourceFile1 = JSSourceFile.fromFile("pQQFI0kZ.y_v8zH 77", (Charset) null);
        Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile1, compilerOptions0);
    }

    @Test(timeout = 4000)
    public void test8578() throws Throwable {
        Compiler compiler0 = new Compiler();
        Region region0 = compiler0.getSourceRegion((String) null, (-42));
    }

    @Test(timeout = 4000)
    public void test8679() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Region region0 = compiler0.getSourceRegion("com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop", 6);
    }

    @Test(timeout = 4000)
    public void test8780() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Region region0 = compiler0.getSourceRegion("[[singleton]]", 32);
    }

    @Test(timeout = 4000)
    public void test8881() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule((String) null);
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test8982() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test9083() throws Throwable {
        Compiler compiler0 = new Compiler();
        ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        Stack<JSModule> stack0 = new Stack<JSModule>();
        compiler0.initModules(arrayList0, stack0, compilerOptions0);
        compiler0.getNodeForCodeInsertion((JSModule) null);
    }

    @Test(timeout = 4000)
    public void test9184() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule((String) null);
        JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("// Input %num%", (String) null);
        jSModule0.add(jSSourceFile0);
        compiler0.getNodeForCodeInsertion(jSModule0);
    }

    @Test(timeout = 4000)
    public void test9285() throws Throwable {
        Compiler compiler0 = new Compiler();
        String string0 = compiler0.getAstDotGraph();
    }

    @Test(timeout = 4000)
    public void test9386() throws Throwable {
        Compiler compiler0 = new Compiler();
        Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
        CompilerOptions compilerOptions0 = new CompilerOptions();
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        String string0 = compiler0.getAstDotGraph();
    }

    @Test(timeout = 4000)
    public void test9487() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.initCompilerOptionsIfTesting();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        errorManager0.getWarningCount();
        assertEquals(1, errorManager0.getWarningCount());
    }

    @Test(timeout = 4000)
    public void test9588() throws Throwable {
        Compiler compiler0 = new Compiler();
        ErrorManager errorManager0 = compiler0.getErrorManager();
        errorManager0.getWarningCount();
        assertEquals(1, errorManager0.getWarningCount());
    }
}
