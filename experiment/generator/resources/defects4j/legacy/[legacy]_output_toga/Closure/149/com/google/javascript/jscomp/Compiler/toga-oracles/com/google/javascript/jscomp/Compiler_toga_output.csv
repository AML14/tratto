project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator((String) null, sourceFile_Generator0);
    JSModule[] jSModuleArray0 = new JSModule[2];
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""reduce"");
    // Undeclared exception!
    try {
        compiler0.toSource(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule((String) null);
    // Undeclared exception!
    try {
        compiler0.toSourceArray(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        compiler0.stripCode(compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes, compilerOptions0.aliasableStrings, compilerOptions0.stripTypes);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule[] jSModuleArray0 = new JSModule[1];
    // Undeclared exception!
    try {
        compiler0.init((JSSourceFile[]) null, jSModuleArray0, (CompilerOptions) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test087,"public void test087() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.startPass((String) null);
    // Undeclared exception!
    try {
        compiler0.optimize();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test109,"public void test109() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(2892, """");
    // Undeclared exception!
    try {
        compiler0.toSource(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 2892
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test1110,"public void test1110() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getCssRenamingMap();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test1211,"public void test1211() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1312,"public void test1312() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""1hQ=s\""wXj][Vj0F"", ""1hQ=s\""wXj][Vj0F"");
    assertTrue(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test1513,"public void test1513() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""SdLNj"");
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    assertFalse(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test1614,"public void test1614() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test1815,"public void test1815() throws Throwable {
    Compiler compiler0 = new Compiler();
    ScopeCreator scopeCreator0 = compiler0.getScopeCreator();
    assertNull(scopeCreator0);
}",0,assertNotNull(scopeCreator0)
project,0,test1916,"public void test1916() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getInputsInOrder();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}",0,
project,0,test2017,"public void test2017() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.rebuildInputsFromModules();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test2118,"public void test2118() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.precheck();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2219,"public void test2219() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.computeCFG();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test2320,"public void test2320() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.isNormalized();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2421,"public void test2421() throws Throwable {
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    VariableMap variableMap0 = compiler0.getPropertyMap();
    assertNull(variableMap0);
}",0,assertNotNull(variableMap0)
project,0,test2522,"public void test2522() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseSyntheticCode(""#dHNj"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test2623,"public void test2623() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.processDefines();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.DefaultPassConfig"", e);
    }
}",0,
project,0,test2724,"public void test2724() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.skipAllPasses = true;
    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    compiler0.optimize();
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test2825,"public void test2825() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test2926,"public void test2926() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getWarningCount();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test3027,"public void test3027() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getVariableMap();
    assertNull(variableMap0);
}",0,assertNotNull(variableMap0)
project,0,test3128,"public void test3128() throws Throwable {
    Compiler compiler0 = new Compiler();
    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    assertNull(functionInformationMap0);
}",0,
project,0,test3229,"public void test3229() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parse();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test3330,"public void test3330() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    assertNotNull(supplier0);
}",0,assertNotNull(supplier0)
project,0,test3431,"public void test3431() throws Throwable {
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    // Undeclared exception!
    try {
        compiler0.recordFunctionInformation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test3632,"public void test3632() throws Throwable {
    Logger logger0 = Logger.getGlobal();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    SourceMap sourceMap0 = compiler0.getSourceMap();
    assertNull(sourceMap0);
}",0,
project,0,test3733,"public void test3733() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.isTypeCheckingEnabled();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test3834,"public void test3834() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.getRoot();
    assertNull(node0);
}",0,
project,0,test3935,"public void test3935() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""ersion"");
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    List<CompilerInput> list0 = compiler0.getInputsForTesting();
    assertNull(list0);
}",0,assertNotNull(list0)
project,0,test4036,"public void test4036() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator((String) null, sourceFile_Generator0);
    JSModule[] jSModuleArray0 = new JSModule[2];
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test4337,"public void test4337() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getMessages();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test4438,"public void test4438() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    List<CompilerInput> list0 = compiler0.getExternsForTesting();
    assertNull(list0);
}",0,assertNotNull(list0)
project,0,test4539,"public void test4539() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.removeTryCatchFinally();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test4640,"public void test4640() throws Throwable {
    Compiler compiler0 = new Compiler();
    Scope scope0 = compiler0.getTopScope();
    assertNull(scope0);
}",0,
project,0,test5246,"public void test5246() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""[;Iu~}5wsqS8(L["");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    compiler0.initCompilerOptionsIfTesting();
    assertFalse(compiler0.isIdeMode());
}",0,assertTrue(compiler0.isIdeMode())
project,0,test5347,"public void test5347() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.sourceMapOutputPath = ""wf)ALme{[.L*(@h$"";
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    assertFalse(result0.success);
}",0,
project,0,test5448,"public void test5448() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
    compiler0.compileModules(stack0, arrayList0, compilerOptions0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test5549,"public void test5549() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    stack0.add(jSSourceFile0);
    stack0.add(jSSourceFile0);
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    assertTrue(compiler0.hasErrors());
}",0,
project,0,test5650,"public void test5650() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test5751,"public void test5751() throws Throwable {
    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
    Compiler compiler0 = new Compiler((PrintStream) null);
    compiler0.initCompilerOptionsIfTesting();
    // Undeclared exception!
    try {
        compiler0.toSource(compiler_CodeBuilder0, 52, (Node) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test5952,"public void test5952() throws Throwable {
    Compiler compiler0 = new Compiler();
    PassConfig passConfig0 = compiler0.getPassConfig();
    // Undeclared exception!
    try {
        compiler0.setPassConfig(passConfig0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // this.passes has already been assigned
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test6053,"public void test6053() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("""");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.check();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test6154,"public void test6154() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.endPass();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Tracer should not be null at the end of a pass.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test6255,"public void test6255() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test6356,"public void test6356() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    // Undeclared exception!
    try {
        compiler0.areNodesEqualForInlining((Node) null, (Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test6457,"public void test6457() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    compiler0.newExternInput((String) null);
    // Undeclared exception!
    try {
        compiler0.newExternInput((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Conflicting externs name: null
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test6558,"public void test6558() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.addIncrementalSourceAst(jsAst0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Duplicate input of name null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test6659,"public void test6659() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    SourceFile sourceFile0 = SourceFile.fromFile("""");
    JsAst jsAst0 = new JsAst(sourceFile0);
    compiler0.addIncrementalSourceAst(jsAst0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test6760,"public void test6760() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter1 = compiler0.getReverseAbstractInterpreter();
    assertSame(reverseAbstractInterpreter1, reverseAbstractInterpreter0);
}",0,
project,0,test6861,"public void test6861() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null, checkLevel0, checkLevel0);
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    assertNotNull(typeValidator0);
}",0,
project,0,test6962,"public void test6962() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertNotNull(node0);
}",0,
project,0,test6963,"public void test6963() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test7064,"public void test7064() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parseInputs();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test7165,"public void test7165() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertNull(node0);
}",0,
project,0,test7266,"public void test7266() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseTestCode(""JSC_INTERFACE_METHOD_OVERRIDE"");
    assertTrue(node0.hasOneChild());
}",0,assertFalse(node0.hasOneChild())
project,0,test7771,"public void test7771() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    Stack<JSModule> stack0 = new Stack<JSModule>();
    compiler0.initModules(arrayList0, stack0, compilerOptions0);
    compiler0.optimize();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",0,assertTrue(compiler0.isTypeCheckingEnabled())
project,0,test7872,"public void test7872() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test8073,"public void test8073() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Vector<JSType> vector0 = new Vector<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
    String[] stringArray0 = new String[3];
    JSError jSError0 = nodeTraversal0.makeError(node0, compilerOptions0.checkProvides, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
    compiler0.report(jSError0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test8174,"public void test8174() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    compiler0.initCompilerOptionsIfTesting();
    Node node0 = Node.newNumber(Double.NaN, 2204, (-2171));
    String[] stringArray0 = new String[7];
    JSError jSError0 = JSError.make(""K"", node0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
    CheckLevel checkLevel0 = compiler0.getErrorLevel(jSError0);
    assertEquals(CheckLevel.ERROR, checkLevel0);
}",0,assertNotNull(checkLevel0)
project,0,test8275,"public void test8275() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.throwInternalError(""ir_&+/W3"", (Exception) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // ir_&+/W3
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test8376,"public void test8376() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    String string0 = compiler0.getSourceLine("""", 10);
    assertNull(string0);
}",0,
project,0,test8477,"public void test8477() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""goog.inherits"", ""+L6s`H"");
    JSSourceFile jSSourceFile1 = JSSourceFile.fromFile(""pQQFI0kZ.y_v8zH 77"", (Charset) null);
    Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile1, compilerOptions0);
    assertFalse(result0.success);
}",0,
project,0,test8578,"public void test8578() throws Throwable {
    Compiler compiler0 = new Compiler();
    Region region0 = compiler0.getSourceRegion((String) null, (-42));
    assertNull(region0);
}",0,
project,0,test8679,"public void test8679() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Region region0 = compiler0.getSourceRegion(""com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop"", 6);
    assertNull(region0);
}",0,
project,0,test8780,"public void test8780() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Region region0 = compiler0.getSourceRegion(""[[singleton]]"", 32);
    assertNull(region0);
}",0,
project,0,test8881,"public void test8881() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule((String) null);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Root module has no inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test8982,"public void test8982() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
    assertEquals(32, Node.MEMBER_TYPE_PROP);
}",0,
project,0,test9083,"public void test9083() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    compiler0.initModules(arrayList0, stack0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test9184,"public void test9184() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule((String) null);
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""// Input %num%"", (String) null);
    jSModule0.add(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test9285,"public void test9285() throws Throwable {
    Compiler compiler0 = new Compiler();
    String string0 = compiler0.getAstDotGraph();
    assertEquals("""", string0);
}",0,
project,0,test9386,"public void test9386() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    String string0 = compiler0.getAstDotGraph();
    assertEquals(""digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\""BLOCK\""];\n  node1 [label=\""SCRIPT\""];\n  node0 -> node1 [weight=1];\n  node1 -> RETURN [label=\""UNCOND\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n  node0 -> node1 [label=\""SYN_BLOCK\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n  node0 -> node1 [label=\""UNCOND\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n}\n"", string0);
}",0,
project,0,test9487,"public void test9487() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertEquals(0, errorManager0.getWarningCount());
}",0,"assertEquals(1, errorManager0.getWarningCount())"
project,0,test9588,"public void test9588() throws Throwable {
    Compiler compiler0 = new Compiler();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertEquals(0, errorManager0.getWarningCount());
}",0,"assertEquals(1, errorManager0.getWarningCount())"
