project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRemoveAbstractMethods(true);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test001,"public void test001() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRemoveAbstractMethods(true);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test002,"public void test002() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRemoveAbstractMethods(true);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test003,"public void test003() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRemoveAbstractMethods(true);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test004,"public void test004() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRemoveAbstractMethods(true);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test005,"public void test005() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRemoveAbstractMethods(true);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test006,"public void test006() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRemoveAbstractMethods(true);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test007,"public void test007() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRemoveAbstractMethods(true);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test008,"public void test008() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRemoveAbstractMethods(true);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test009,"public void test009() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRemoveAbstractMethods(true);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test0110,"public void test0110() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getWarningsGuard();
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test0111,"public void test0111() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getWarningsGuard();
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test0112,"public void test0112() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getWarningsGuard();
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test0113,"public void test0113() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getWarningsGuard();
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test0114,"public void test0114() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getWarningsGuard();
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test0115,"public void test0115() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getWarningsGuard();
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test0116,"public void test0116() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getWarningsGuard();
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test0117,"public void test0117() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getWarningsGuard();
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test0118,"public void test0118() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getWarningsGuard();
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test0119,"public void test0119() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getWarningsGuard();
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test0220,"public void test0220() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setNameAnonymousFunctionsOnly(false);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test0221,"public void test0221() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setNameAnonymousFunctionsOnly(false);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test0222,"public void test0222() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setNameAnonymousFunctionsOnly(false);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test0223,"public void test0223() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setNameAnonymousFunctionsOnly(false);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test0224,"public void test0224() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setNameAnonymousFunctionsOnly(false);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test0225,"public void test0225() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setNameAnonymousFunctionsOnly(false);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test0226,"public void test0226() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setNameAnonymousFunctionsOnly(false);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test0227,"public void test0227() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setNameAnonymousFunctionsOnly(false);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test0228,"public void test0228() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setNameAnonymousFunctionsOnly(false);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test0229,"public void test0229() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setNameAnonymousFunctionsOnly(false);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test0330,"public void test0330() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    compilerOptions0.setReplaceStringsConfiguration(""com.google.common.base.CharMatcher$10"", list0);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test0331,"public void test0331() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    compilerOptions0.setReplaceStringsConfiguration(""com.google.common.base.CharMatcher$10"", list0);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test0332,"public void test0332() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    compilerOptions0.setReplaceStringsConfiguration(""com.google.common.base.CharMatcher$10"", list0);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test0333,"public void test0333() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    compilerOptions0.setReplaceStringsConfiguration(""com.google.common.base.CharMatcher$10"", list0);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test0334,"public void test0334() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    compilerOptions0.setReplaceStringsConfiguration(""com.google.common.base.CharMatcher$10"", list0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test0335,"public void test0335() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    compilerOptions0.setReplaceStringsConfiguration(""com.google.common.base.CharMatcher$10"", list0);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test0336,"public void test0336() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    compilerOptions0.setReplaceStringsConfiguration(""com.google.common.base.CharMatcher$10"", list0);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test0337,"public void test0337() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    compilerOptions0.setReplaceStringsConfiguration(""com.google.common.base.CharMatcher$10"", list0);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test0338,"public void test0338() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    compilerOptions0.setReplaceStringsConfiguration(""com.google.common.base.CharMatcher$10"", list0);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test0339,"public void test0339() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    compilerOptions0.setReplaceStringsConfiguration(""com.google.common.base.CharMatcher$10"", list0);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test0440,"public void test0440() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setSummaryDetailLevel(45);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test0441,"public void test0441() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setSummaryDetailLevel(45);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test0442,"public void test0442() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setSummaryDetailLevel(45);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test0443,"public void test0443() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setSummaryDetailLevel(45);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test0444,"public void test0444() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setSummaryDetailLevel(45);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test0445,"public void test0445() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setSummaryDetailLevel(45);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test0446,"public void test0446() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setSummaryDetailLevel(45);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test0447,"public void test0447() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setSummaryDetailLevel(45);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test0448,"public void test0448() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setSummaryDetailLevel(45);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test0449,"public void test0449() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setSummaryDetailLevel(45);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test0550,"public void test0550() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setColorizeErrorOutput(true);
    assertTrue(compilerOptions0.shouldColorizeErrorOutput());
}",0,assertTrue(compilerOptions0.shouldColorizeErrorOutput())
project,0,test0651,"public void test0651() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setLooseTypes(true);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test0652,"public void test0652() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setLooseTypes(true);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test0653,"public void test0653() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setLooseTypes(true);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test0654,"public void test0654() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setLooseTypes(true);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test0655,"public void test0655() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setLooseTypes(true);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test0656,"public void test0656() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setLooseTypes(true);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test0657,"public void test0657() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setLooseTypes(true);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test0658,"public void test0658() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setLooseTypes(true);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test0659,"public void test0659() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setLooseTypes(true);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test0660,"public void test0660() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setLooseTypes(true);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test0761,"public void test0761() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setProcessObjectPropertyString(false);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test0762,"public void test0762() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setProcessObjectPropertyString(false);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test0763,"public void test0763() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setProcessObjectPropertyString(false);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test0764,"public void test0764() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setProcessObjectPropertyString(false);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test0765,"public void test0765() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setProcessObjectPropertyString(false);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test0766,"public void test0766() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setProcessObjectPropertyString(false);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test0767,"public void test0767() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setProcessObjectPropertyString(false);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test0768,"public void test0768() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setProcessObjectPropertyString(false);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test0769,"public void test0769() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setProcessObjectPropertyString(false);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test0770,"public void test0770() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setProcessObjectPropertyString(false);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test0871,"public void test0871() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test0872,"public void test0872() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test0873,"public void test0873() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test0874,"public void test0874() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test0875,"public void test0875() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test0876,"public void test0876() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0877,"public void test0877() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test0878,"public void test0878() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test0879,"public void test0879() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test0880,"public void test0880() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test0881,"public void test0881() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.isExternExportsEnabled();
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test0982,"public void test0982() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setChainCalls(true);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test0983,"public void test0983() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setChainCalls(true);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test0984,"public void test0984() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setChainCalls(true);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test0985,"public void test0985() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setChainCalls(true);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test0986,"public void test0986() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setChainCalls(true);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test0987,"public void test0987() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setChainCalls(true);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test0988,"public void test0988() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setChainCalls(true);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test0989,"public void test0989() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setChainCalls(true);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test0990,"public void test0990() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setChainCalls(true);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test0991,"public void test0991() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setChainCalls(true);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test1092,"public void test1092() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.enableExternExports(true);
    assertTrue(compilerOptions0.isExternExportsEnabled());
}",0,assertTrue(compilerOptions0.isExternExportsEnabled())
project,0,test1193,"public void test1193() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRewriteNewDateGoogNow(false);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test1194,"public void test1194() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRewriteNewDateGoogNow(false);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test1195,"public void test1195() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRewriteNewDateGoogNow(false);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test1196,"public void test1196() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRewriteNewDateGoogNow(false);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test1197,"public void test1197() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRewriteNewDateGoogNow(false);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test1198,"public void test1198() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRewriteNewDateGoogNow(false);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test1199,"public void test1199() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRewriteNewDateGoogNow(false);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test11100,"public void test11100() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRewriteNewDateGoogNow(false);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test11101,"public void test11101() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRewriteNewDateGoogNow(false);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test11102,"public void test11102() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRewriteNewDateGoogNow(false);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test12103,"public void test12103() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCodingConvention((CodingConvention) null);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test12104,"public void test12104() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCodingConvention((CodingConvention) null);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test12105,"public void test12105() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCodingConvention((CodingConvention) null);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test12106,"public void test12106() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCodingConvention((CodingConvention) null);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test12107,"public void test12107() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCodingConvention((CodingConvention) null);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test12108,"public void test12108() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCodingConvention((CodingConvention) null);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test12109,"public void test12109() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCodingConvention((CodingConvention) null);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test12110,"public void test12110() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCodingConvention((CodingConvention) null);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test12111,"public void test12111() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCodingConvention((CodingConvention) null);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test12112,"public void test12112() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCodingConvention((CodingConvention) null);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test13113,"public void test13113() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToStringLiteral("" f"", ""5g,eCF"");
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test13114,"public void test13114() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToStringLiteral("" f"", ""5g,eCF"");
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test13115,"public void test13115() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToStringLiteral("" f"", ""5g,eCF"");
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test13116,"public void test13116() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToStringLiteral("" f"", ""5g,eCF"");
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test13117,"public void test13117() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToStringLiteral("" f"", ""5g,eCF"");
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test13118,"public void test13118() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToStringLiteral("" f"", ""5g,eCF"");
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test13119,"public void test13119() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToStringLiteral("" f"", ""5g,eCF"");
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test13121,"public void test13121() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToStringLiteral("" f"", ""5g,eCF"");
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test13122,"public void test13122() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToStringLiteral("" f"", ""5g,eCF"");
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test13123,"public void test13123() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToStringLiteral("" f"", ""5g,eCF"");
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test14124,"public void test14124() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test14125,"public void test14125() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test14126,"public void test14126() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test14127,"public void test14127() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test14128,"public void test14128() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test14129,"public void test14129() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test14130,"public void test14130() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test14131,"public void test14131() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test14132,"public void test14132() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test14133,"public void test14133() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test15134,"public void test15134() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.enableRuntimeTypeCheck("""");
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test15135,"public void test15135() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.enableRuntimeTypeCheck("""");
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test15136,"public void test15136() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.enableRuntimeTypeCheck("""");
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test15137,"public void test15137() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.enableRuntimeTypeCheck("""");
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test15138,"public void test15138() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.enableRuntimeTypeCheck("""");
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test15139,"public void test15139() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.enableRuntimeTypeCheck("""");
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test15140,"public void test15140() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.enableRuntimeTypeCheck("""");
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test15141,"public void test15141() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.enableRuntimeTypeCheck("""");
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test15142,"public void test15142() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.enableRuntimeTypeCheck("""");
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test15143,"public void test15143() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.enableRuntimeTypeCheck("""");
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test16144,"public void test16144() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    assertFalse(compilerOptions1.strictMessageReplacement);
}",0,
project,0,test16145,"public void test16145() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    assertFalse(compilerOptions1.checkDuplicateMessages);
}",0,
project,0,test16146,"public void test16146() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    assertFalse(compilerOptions1.tightenTypes);
}",0,
project,0,test16147,"public void test16147() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    assertNotSame(compilerOptions1, compilerOptions0);
}",0,
project,0,test16148,"public void test16148() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    assertFalse(compilerOptions1.checkSuspiciousCode);
}",0,
project,0,test16149,"public void test16149() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    assertFalse(compilerOptions1.checkTypes);
}",0,
project,0,test16150,"public void test16150() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    assertFalse(compilerOptions1.allowLegacyJsMessages);
}",0,
project,0,test16151,"public void test16151() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    assertFalse(compilerOptions1.inferTypesInGlobalScope);
}",0,
project,0,test16152,"public void test16152() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    assertFalse(compilerOptions1.checkSymbols);
}",0,
project,0,test16153,"public void test16153() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    assertFalse(compilerOptions1.checkUnusedPropertiesEarly);
}",0,
project,0,test16154,"public void test16154() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();
    assertFalse(compilerOptions1.checkControlStructures);
}",0,
project,0,test17155,"public void test17155() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""// Input %num%"", false);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test17156,"public void test17156() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""// Input %num%"", false);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test17157,"public void test17157() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""// Input %num%"", false);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test17159,"public void test17159() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""// Input %num%"", false);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test17160,"public void test17160() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""// Input %num%"", false);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test17161,"public void test17161() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""// Input %num%"", false);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test17162,"public void test17162() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""// Input %num%"", false);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test18163,"public void test18163() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.skipAllCompilerPasses();
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test18164,"public void test18164() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.skipAllCompilerPasses();
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test18165,"public void test18165() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.skipAllCompilerPasses();
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test18166,"public void test18166() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.skipAllCompilerPasses();
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test18167,"public void test18167() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.skipAllCompilerPasses();
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test18168,"public void test18168() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.skipAllCompilerPasses();
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test18169,"public void test18169() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.skipAllCompilerPasses();
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test18170,"public void test18170() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.skipAllCompilerPasses();
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test18171,"public void test18171() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.skipAllCompilerPasses();
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test18172,"public void test18172() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.skipAllCompilerPasses();
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test19173,"public void test19173() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.disableRuntimeTypeCheck();
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test19174,"public void test19174() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.disableRuntimeTypeCheck();
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test19175,"public void test19175() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.disableRuntimeTypeCheck();
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test19176,"public void test19176() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.disableRuntimeTypeCheck();
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test19177,"public void test19177() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.disableRuntimeTypeCheck();
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test19178,"public void test19178() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.disableRuntimeTypeCheck();
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test19179,"public void test19179() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.disableRuntimeTypeCheck();
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test19180,"public void test19180() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.disableRuntimeTypeCheck();
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test19181,"public void test19181() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.disableRuntimeTypeCheck();
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test19182,"public void test19182() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.disableRuntimeTypeCheck();
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test20183,"public void test20183() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test20184,"public void test20184() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test20185,"public void test20185() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test20186,"public void test20186() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test20187,"public void test20187() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test20188,"public void test20188() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test20189,"public void test20189() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test20190,"public void test20190() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test20191,"public void test20191() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test20192,"public void test20192() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setCollapsePropertiesOnExternTypes(false);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test21193,"public void test21193() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setManageClosureDependencies(false);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test21194,"public void test21194() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setManageClosureDependencies(false);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test21195,"public void test21195() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setManageClosureDependencies(false);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test21196,"public void test21196() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setManageClosureDependencies(false);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test21197,"public void test21197() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setManageClosureDependencies(false);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test21198,"public void test21198() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setManageClosureDependencies(false);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test21199,"public void test21199() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setManageClosureDependencies(false);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test21200,"public void test21200() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setManageClosureDependencies(false);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test21201,"public void test21201() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setManageClosureDependencies(false);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test21202,"public void test21202() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setManageClosureDependencies(false);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test22203,"public void test22203() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test22204,"public void test22204() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test22205,"public void test22205() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test22206,"public void test22206() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test22207,"public void test22207() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test22208,"public void test22208() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test22209,"public void test22209() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test22210,"public void test22210() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test22211,"public void test22211() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test22212,"public void test22212() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test22213,"public void test22213() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test23214,"public void test23214() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getCodingConvention();
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test23215,"public void test23215() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getCodingConvention();
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test23216,"public void test23216() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getCodingConvention();
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test23217,"public void test23217() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getCodingConvention();
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test23218,"public void test23218() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getCodingConvention();
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test23219,"public void test23219() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getCodingConvention();
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test23220,"public void test23220() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getCodingConvention();
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test23221,"public void test23221() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getCodingConvention();
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test23222,"public void test23222() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getCodingConvention();
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test23223,"public void test23223() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.getCodingConvention();
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test24224,"public void test24224() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test24225,"public void test24225() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test24226,"public void test24226() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test24227,"public void test24227() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test24228,"public void test24228() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test24229,"public void test24229() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test24230,"public void test24230() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test24231,"public void test24231() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test24232,"public void test24232() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test24233,"public void test24233() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test25234,"public void test25234() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test25235,"public void test25235() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test25236,"public void test25236() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test25237,"public void test25237() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test25238,"public void test25238() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test25239,"public void test25239() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test25240,"public void test25240() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test25241,"public void test25241() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test25242,"public void test25242() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test25243,"public void test25243() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test26244,"public void test26244() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToDoubleLiteral("""", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test26245,"public void test26245() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToDoubleLiteral("""", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test26247,"public void test26247() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToDoubleLiteral("""", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test26248,"public void test26248() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToDoubleLiteral("""", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test26249,"public void test26249() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToDoubleLiteral("""", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test26250,"public void test26250() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToDoubleLiteral("""", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test26251,"public void test26251() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToDoubleLiteral("""", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test26252,"public void test26252() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToDoubleLiteral("""", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test26253,"public void test26253() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToDoubleLiteral("""", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test26254,"public void test26254() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToDoubleLiteral("""", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test27255,"public void test27255() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""DblH#"", true);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test27256,"public void test27256() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""DblH#"", true);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test27257,"public void test27257() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""DblH#"", true);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test27258,"public void test27258() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""DblH#"", true);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test27260,"public void test27260() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""DblH#"", true);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test27261,"public void test27261() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""DblH#"", true);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test27262,"public void test27262() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""DblH#"", true);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test27263,"public void test27263() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToBooleanLiteral(""DblH#"", true);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test28264,"public void test28264() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToNumberLiteral(""FAST"", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test28265,"public void test28265() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToNumberLiteral(""FAST"", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test28266,"public void test28266() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToNumberLiteral(""FAST"", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test28267,"public void test28267() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToNumberLiteral(""FAST"", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test28268,"public void test28268() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToNumberLiteral(""FAST"", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test28269,"public void test28269() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToNumberLiteral(""FAST"", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test28270,"public void test28270() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToNumberLiteral(""FAST"", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test28271,"public void test28271() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToNumberLiteral(""FAST"", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test28272,"public void test28272() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToNumberLiteral(""FAST"", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test28274,"public void test28274() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.setDefineToNumberLiteral(""FAST"", 45);
    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test29275,"public void test29275() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test29276,"public void test29276() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test29277,"public void test29277() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test29278,"public void test29278() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test29279,"public void test29279() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test29280,"public void test29280() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test29281,"public void test29281() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test29282,"public void test29282() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test29283,"public void test29283() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test29284,"public void test29284() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test29285,"public void test29285() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test30286,"public void test30286() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(""4thij4z(P1nbP}ph"");
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test30287,"public void test30287() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(""4thij4z(P1nbP}ph"");
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test30288,"public void test30288() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(""4thij4z(P1nbP}ph"");
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test30289,"public void test30289() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(""4thij4z(P1nbP}ph"");
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test30290,"public void test30290() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(""4thij4z(P1nbP}ph"");
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test30291,"public void test30291() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(""4thij4z(P1nbP}ph"");
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test30292,"public void test30292() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(""4thij4z(P1nbP}ph"");
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test30293,"public void test30293() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(""4thij4z(P1nbP}ph"");
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test30294,"public void test30294() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(""4thij4z(P1nbP}ph"");
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test30295,"public void test30295() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(""4thij4z(P1nbP}ph"");
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test30296,"public void test30296() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(""4thij4z(P1nbP}ph"");
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test31297,"public void test31297() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[3];
    DiagnosticGroup diagnosticGroup0 = TypeCheck.ALL_DIAGNOSTICS;
    diagnosticGroupArray0[0] = diagnosticGroup0;
    DiagnosticType diagnosticType0 = CreateSyntheticBlocks.UNMATCHED_END_MARKER;
    diagnosticType0.format(diagnosticGroupArray0);
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[5];
    DiagnosticType diagnosticType1 = TypeCheck.INEXISTENT_PROPERTY;
    diagnosticTypeArray0[2] = diagnosticType1;
    DiagnosticGroup diagnosticGroup1 = new DiagnosticGroup(diagnosticTypeArray0);
    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.brokenClosureRequiresLevel);
    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test32298,"public void test32298() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test32299,"public void test32299() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test32300,"public void test32300() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test32301,"public void test32301() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test32302,"public void test32302() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test32303,"public void test32303() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test32304,"public void test32304() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test32305,"public void test32305() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test32306,"public void test32306() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test32307,"public void test32307() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test32308,"public void test32308() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test33309,"public void test33309() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
    DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
    String[] stringArray0 = new String[3];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test33310,"public void test33310() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
    DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
    String[] stringArray0 = new String[3];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test33311,"public void test33311() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
    DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
    String[] stringArray0 = new String[3];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test33312,"public void test33312() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
    DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
    String[] stringArray0 = new String[3];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test33313,"public void test33313() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
    DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
    String[] stringArray0 = new String[3];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test33314,"public void test33314() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
    DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
    String[] stringArray0 = new String[3];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test33315,"public void test33315() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
    DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
    String[] stringArray0 = new String[3];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test33316,"public void test33316() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
    DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
    String[] stringArray0 = new String[3];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test33317,"public void test33317() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
    DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
    String[] stringArray0 = new String[3];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test33318,"public void test33318() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
    DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
    String[] stringArray0 = new String[3];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test33319,"public void test33319() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;
    DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);
    String[] stringArray0 = new String[3];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test34320,"public void test34320() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
    diagnosticTypeArray0[0] = diagnosticType0;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test34321,"public void test34321() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
    diagnosticTypeArray0[0] = diagnosticType0;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test34322,"public void test34322() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
    diagnosticTypeArray0[0] = diagnosticType0;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test34323,"public void test34323() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
    diagnosticTypeArray0[0] = diagnosticType0;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test34324,"public void test34324() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
    diagnosticTypeArray0[0] = diagnosticType0;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test34325,"public void test34325() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
    diagnosticTypeArray0[0] = diagnosticType0;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test34326,"public void test34326() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
    diagnosticTypeArray0[0] = diagnosticType0;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test34327,"public void test34327() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
    diagnosticTypeArray0[0] = diagnosticType0;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test34328,"public void test34328() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
    diagnosticTypeArray0[0] = diagnosticType0;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test34329,"public void test34329() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
    diagnosticTypeArray0[0] = diagnosticType0;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test34330,"public void test34330() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];
    diagnosticTypeArray0[0] = diagnosticType0;
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);
    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);
    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);
    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
project,0,test35331,"public void test35331() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    String[] stringArray0 = new String[0];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    assertFalse(compilerOptions0.allowLegacyJsMessages);
}",0,
project,0,test35332,"public void test35332() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    String[] stringArray0 = new String[0];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    assertFalse(compilerOptions0.checkSuspiciousCode);
}",0,
project,0,test35333,"public void test35333() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    String[] stringArray0 = new String[0];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    assertFalse(compilerOptions0.checkTypes);
}",0,
project,0,test35334,"public void test35334() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    String[] stringArray0 = new String[0];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    assertFalse(compilerOptions0.tightenTypes);
}",0,
project,0,test35335,"public void test35335() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    String[] stringArray0 = new String[0];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    assertFalse(compilerOptions0.checkControlStructures);
}",0,
project,0,test35336,"public void test35336() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    String[] stringArray0 = new String[0];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    assertFalse(compilerOptions0.inferTypesInGlobalScope);
}",0,
project,0,test35337,"public void test35337() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    String[] stringArray0 = new String[0];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
}",0,
project,0,test35338,"public void test35338() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    String[] stringArray0 = new String[0];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    assertFalse(compilerOptions0.checkSymbols);
}",0,
project,0,test35339,"public void test35339() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    String[] stringArray0 = new String[0];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    assertFalse(compilerOptions0.strictMessageReplacement);
}",0,
project,0,test35340,"public void test35340() throws Throwable {
    CompilerOptions compilerOptions0 = new CompilerOptions();
    String[] stringArray0 = new String[0];
    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);
    assertFalse(compilerOptions0.checkDuplicateMessages);
}",0,
